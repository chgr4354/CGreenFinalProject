
CGreenFinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007da8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bf0  08007f58  08007f58  00008f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b48  08009b48  0000b080  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009b48  08009b48  0000ab48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b50  08009b50  0000b080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b50  08009b50  0000ab50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009b54  08009b54  0000ab54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08009b58  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b080  2**0
                  CONTENTS
 10 .bss          00025d10  20000080  20000080  0000b080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025d90  20025d90  0000b080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b080  2**0
                  CONTENTS, READONLY
 13 .debug_info   000140e1  00000000  00000000  0000b0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003317  00000000  00000000  0001f191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001478  00000000  00000000  000224a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fc3  00000000  00000000  00023920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027345  00000000  00000000  000248e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000183a0  00000000  00000000  0004bc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e35a9  00000000  00000000  00063fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00147571  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005dc8  00000000  00000000  001475b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008f  00000000  00000000  0014d37c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007f40 	.word	0x08007f40

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	08007f40 	.word	0x08007f40

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <ApplicationInit>:

// --- External Handles ---
extern RNG_HandleTypeDef hrng; // RNG handle

void ApplicationInit(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80005d0:	f002 ff9a 	bl	8003508 <initialise_monitor_handles>
    LTCD__Init();
 80005d4:	f001 f892 	bl	80016fc <LTCD__Init>
    LTCD_Layer_Init(0);
 80005d8:	2000      	movs	r0, #0
 80005da:	f001 f84f 	bl	800167c <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 80005de:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80005e2:	2000      	movs	r0, #0
 80005e4:	f001 f9a2 	bl	800192c <LCD_Clear>

    //#if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80005e8:	f001 fa78 	bl	8001adc <InitializeLCDTouch>

	// This is the orientation for the board to be directly up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005ec:	4b05      	ldr	r3, [pc, #20]	@ (8000604 <ApplicationInit+0x38>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	719a      	strb	r2, [r3, #6]

	Button_Init();
 80005f2:	f000 ff3d 	bl	8001470 <Button_Init>
    currentAppState = APP_STATE_MENU;
 80005f6:	4b04      	ldr	r3, [pc, #16]	@ (8000608 <ApplicationInit+0x3c>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	701a      	strb	r2, [r3, #0]
    drawMenuScreen();
 80005fc:	f000 f894 	bl	8000728 <drawMenuScreen>
    //printf("Initial Menu Drawn. Entering Scheduler Loop.\n");
	//#endif // COMPILE_TOUCH_FUNCTIONS
}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}
 8000604:	200000a0 	.word	0x200000a0
 8000608:	2000009c 	.word	0x2000009c

0800060c <LCD_Draw_Rect>:

// Simple rectangle drawing
void LCD_Draw_Rect(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color) {
 800060c:	b590      	push	{r4, r7, lr}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	4604      	mov	r4, r0
 8000614:	4608      	mov	r0, r1
 8000616:	4611      	mov	r1, r2
 8000618:	461a      	mov	r2, r3
 800061a:	4623      	mov	r3, r4
 800061c:	80fb      	strh	r3, [r7, #6]
 800061e:	4603      	mov	r3, r0
 8000620:	80bb      	strh	r3, [r7, #4]
 8000622:	460b      	mov	r3, r1
 8000624:	807b      	strh	r3, [r7, #2]
 8000626:	4613      	mov	r3, r2
 8000628:	803b      	strh	r3, [r7, #0]
    // Draw horizontal lines
    for (uint16_t i = 0; i < width; i++) {
 800062a:	2300      	movs	r3, #0
 800062c:	81fb      	strh	r3, [r7, #14]
 800062e:	e019      	b.n	8000664 <LCD_Draw_Rect+0x58>
        LCD_Draw_Pixel(x + i, y, color);
 8000630:	88fa      	ldrh	r2, [r7, #6]
 8000632:	89fb      	ldrh	r3, [r7, #14]
 8000634:	4413      	add	r3, r2
 8000636:	b29b      	uxth	r3, r3
 8000638:	8c3a      	ldrh	r2, [r7, #32]
 800063a:	88b9      	ldrh	r1, [r7, #4]
 800063c:	4618      	mov	r0, r3
 800063e:	f001 f8bb 	bl	80017b8 <LCD_Draw_Pixel>
        LCD_Draw_Pixel(x + i, y + height - 1, color);
 8000642:	88fa      	ldrh	r2, [r7, #6]
 8000644:	89fb      	ldrh	r3, [r7, #14]
 8000646:	4413      	add	r3, r2
 8000648:	b298      	uxth	r0, r3
 800064a:	88ba      	ldrh	r2, [r7, #4]
 800064c:	883b      	ldrh	r3, [r7, #0]
 800064e:	4413      	add	r3, r2
 8000650:	b29b      	uxth	r3, r3
 8000652:	3b01      	subs	r3, #1
 8000654:	b29b      	uxth	r3, r3
 8000656:	8c3a      	ldrh	r2, [r7, #32]
 8000658:	4619      	mov	r1, r3
 800065a:	f001 f8ad 	bl	80017b8 <LCD_Draw_Pixel>
    for (uint16_t i = 0; i < width; i++) {
 800065e:	89fb      	ldrh	r3, [r7, #14]
 8000660:	3301      	adds	r3, #1
 8000662:	81fb      	strh	r3, [r7, #14]
 8000664:	89fa      	ldrh	r2, [r7, #14]
 8000666:	887b      	ldrh	r3, [r7, #2]
 8000668:	429a      	cmp	r2, r3
 800066a:	d3e1      	bcc.n	8000630 <LCD_Draw_Rect+0x24>
    }
    // Draw vertical lines
    for (uint16_t i = 1; i < height - 1; i++) { // Avoid drawing corners twice
 800066c:	2301      	movs	r3, #1
 800066e:	81bb      	strh	r3, [r7, #12]
 8000670:	e019      	b.n	80006a6 <LCD_Draw_Rect+0x9a>
        LCD_Draw_Pixel(x, y + i, color);
 8000672:	88ba      	ldrh	r2, [r7, #4]
 8000674:	89bb      	ldrh	r3, [r7, #12]
 8000676:	4413      	add	r3, r2
 8000678:	b299      	uxth	r1, r3
 800067a:	8c3a      	ldrh	r2, [r7, #32]
 800067c:	88fb      	ldrh	r3, [r7, #6]
 800067e:	4618      	mov	r0, r3
 8000680:	f001 f89a 	bl	80017b8 <LCD_Draw_Pixel>
        LCD_Draw_Pixel(x + width - 1, y + i, color);
 8000684:	88fa      	ldrh	r2, [r7, #6]
 8000686:	887b      	ldrh	r3, [r7, #2]
 8000688:	4413      	add	r3, r2
 800068a:	b29b      	uxth	r3, r3
 800068c:	3b01      	subs	r3, #1
 800068e:	b298      	uxth	r0, r3
 8000690:	88ba      	ldrh	r2, [r7, #4]
 8000692:	89bb      	ldrh	r3, [r7, #12]
 8000694:	4413      	add	r3, r2
 8000696:	b29b      	uxth	r3, r3
 8000698:	8c3a      	ldrh	r2, [r7, #32]
 800069a:	4619      	mov	r1, r3
 800069c:	f001 f88c 	bl	80017b8 <LCD_Draw_Pixel>
    for (uint16_t i = 1; i < height - 1; i++) { // Avoid drawing corners twice
 80006a0:	89bb      	ldrh	r3, [r7, #12]
 80006a2:	3301      	adds	r3, #1
 80006a4:	81bb      	strh	r3, [r7, #12]
 80006a6:	89ba      	ldrh	r2, [r7, #12]
 80006a8:	883b      	ldrh	r3, [r7, #0]
 80006aa:	3b01      	subs	r3, #1
 80006ac:	429a      	cmp	r2, r3
 80006ae:	dbe0      	blt.n	8000672 <LCD_Draw_Rect+0x66>
    }
}
 80006b0:	bf00      	nop
 80006b2:	bf00      	nop
 80006b4:	3714      	adds	r7, #20
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd90      	pop	{r4, r7, pc}

080006ba <LCD_DisplayString>:

// Simple string display
void LCD_DisplayString(uint16_t Xpos, uint16_t Ypos, uint8_t *ptr, FONT_t* font, uint16_t textColor, uint16_t bgColor, bool opaque) {
 80006ba:	b580      	push	{r7, lr}
 80006bc:	b084      	sub	sp, #16
 80006be:	af00      	add	r7, sp, #0
 80006c0:	60ba      	str	r2, [r7, #8]
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	4603      	mov	r3, r0
 80006c6:	81fb      	strh	r3, [r7, #14]
 80006c8:	460b      	mov	r3, r1
 80006ca:	81bb      	strh	r3, [r7, #12]
    LCD_SetFont(font);
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	f001 f95f 	bl	8001990 <LCD_SetFont>
    LCD_SetTextColor(textColor);
 80006d2:	8b3b      	ldrh	r3, [r7, #24]
 80006d4:	4618      	mov	r0, r3
 80006d6:	f001 f94b 	bl	8001970 <LCD_SetTextColor>

    while (*ptr != '\0') {
 80006da:	e01c      	b.n	8000716 <LCD_DisplayString+0x5c>
        // Add bounds checking
        if (Xpos >= LCD_PIXEL_WIDTH - font->Width || Ypos >= LCD_PIXEL_HEIGHT - font->Height) {
 80006dc:	89fa      	ldrh	r2, [r7, #14]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	889b      	ldrh	r3, [r3, #4]
 80006e2:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80006e6:	429a      	cmp	r2, r3
 80006e8:	da19      	bge.n	800071e <LCD_DisplayString+0x64>
 80006ea:	89ba      	ldrh	r2, [r7, #12]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	88db      	ldrh	r3, [r3, #6]
 80006f0:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 80006f4:	429a      	cmp	r2, r3
 80006f6:	da12      	bge.n	800071e <LCD_DisplayString+0x64>
            break;
        }
        LCD_DisplayChar(Xpos, Ypos, *ptr);
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	781a      	ldrb	r2, [r3, #0]
 80006fc:	89b9      	ldrh	r1, [r7, #12]
 80006fe:	89fb      	ldrh	r3, [r7, #14]
 8000700:	4618      	mov	r0, r3
 8000702:	f001 f9c3 	bl	8001a8c <LCD_DisplayChar>
        Xpos += font->Width;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	889a      	ldrh	r2, [r3, #4]
 800070a:	89fb      	ldrh	r3, [r7, #14]
 800070c:	4413      	add	r3, r2
 800070e:	81fb      	strh	r3, [r7, #14]
        ptr++;
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	3301      	adds	r3, #1
 8000714:	60bb      	str	r3, [r7, #8]
    while (*ptr != '\0') {
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d1de      	bne.n	80006dc <LCD_DisplayString+0x22>
    }
}
 800071e:	bf00      	nop
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
	...

08000728 <drawMenuScreen>:

// Draw the initial menu screen
void drawMenuScreen() {
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af04      	add	r7, sp, #16

		LCD_Clear(0, LCD_COLOR_BLUE); // Background
 800072e:	211f      	movs	r1, #31
 8000730:	2000      	movs	r0, #0
 8000732:	f001 f8fb 	bl	800192c <LCD_Clear>

		// --- Draw Button 1 (1 Player) ---
		LCD_Draw_Rect(BUTTON1_X, BUTTON1_Y, BUTTON_WIDTH, BUTTON_HEIGHT, LCD_COLOR_YELLOW); // Outline
 8000736:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800073a:	9300      	str	r3, [sp, #0]
 800073c:	2332      	movs	r3, #50	@ 0x32
 800073e:	2264      	movs	r2, #100	@ 0x64
 8000740:	2187      	movs	r1, #135	@ 0x87
 8000742:	200a      	movs	r0, #10
 8000744:	f7ff ff62 	bl	800060c <LCD_Draw_Rect>
		LCD_DisplayString(BUTTON1_X + 5, BUTTON1_Y + (BUTTON_HEIGHT - Font16x24.Height)/2, (uint8_t*)"1P", &Font16x24, LCD_COLOR_WHITE, LCD_COLOR_BLUE, false);
 8000748:	4b29      	ldr	r3, [pc, #164]	@ (80007f0 <drawMenuScreen+0xc8>)
 800074a:	88db      	ldrh	r3, [r3, #6]
 800074c:	f1c3 0332 	rsb	r3, r3, #50	@ 0x32
 8000750:	0fda      	lsrs	r2, r3, #31
 8000752:	4413      	add	r3, r2
 8000754:	105b      	asrs	r3, r3, #1
 8000756:	b29b      	uxth	r3, r3
 8000758:	3387      	adds	r3, #135	@ 0x87
 800075a:	b299      	uxth	r1, r3
 800075c:	2300      	movs	r3, #0
 800075e:	9302      	str	r3, [sp, #8]
 8000760:	231f      	movs	r3, #31
 8000762:	9301      	str	r3, [sp, #4]
 8000764:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000768:	9300      	str	r3, [sp, #0]
 800076a:	4b21      	ldr	r3, [pc, #132]	@ (80007f0 <drawMenuScreen+0xc8>)
 800076c:	4a21      	ldr	r2, [pc, #132]	@ (80007f4 <drawMenuScreen+0xcc>)
 800076e:	200f      	movs	r0, #15
 8000770:	f7ff ffa3 	bl	80006ba <LCD_DisplayString>

		// --- Draw Button 2 (2 Player) ---
		LCD_Draw_Rect(BUTTON2_X, BUTTON2_Y, BUTTON_WIDTH, BUTTON_HEIGHT, LCD_COLOR_YELLOW); // Outline
 8000774:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000778:	9300      	str	r3, [sp, #0]
 800077a:	2332      	movs	r3, #50	@ 0x32
 800077c:	2264      	movs	r2, #100	@ 0x64
 800077e:	2187      	movs	r1, #135	@ 0x87
 8000780:	2082      	movs	r0, #130	@ 0x82
 8000782:	f7ff ff43 	bl	800060c <LCD_Draw_Rect>
		LCD_DisplayString(BUTTON2_X + 5, BUTTON2_Y + (BUTTON_HEIGHT - Font16x24.Height)/2, (uint8_t*)"2P", &Font16x24, LCD_COLOR_WHITE, LCD_COLOR_BLUE, false);
 8000786:	4b1a      	ldr	r3, [pc, #104]	@ (80007f0 <drawMenuScreen+0xc8>)
 8000788:	88db      	ldrh	r3, [r3, #6]
 800078a:	f1c3 0332 	rsb	r3, r3, #50	@ 0x32
 800078e:	0fda      	lsrs	r2, r3, #31
 8000790:	4413      	add	r3, r2
 8000792:	105b      	asrs	r3, r3, #1
 8000794:	b29b      	uxth	r3, r3
 8000796:	3387      	adds	r3, #135	@ 0x87
 8000798:	b299      	uxth	r1, r3
 800079a:	2300      	movs	r3, #0
 800079c:	9302      	str	r3, [sp, #8]
 800079e:	231f      	movs	r3, #31
 80007a0:	9301      	str	r3, [sp, #4]
 80007a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007a6:	9300      	str	r3, [sp, #0]
 80007a8:	4b11      	ldr	r3, [pc, #68]	@ (80007f0 <drawMenuScreen+0xc8>)
 80007aa:	4a13      	ldr	r2, [pc, #76]	@ (80007f8 <drawMenuScreen+0xd0>)
 80007ac:	2087      	movs	r0, #135	@ 0x87
 80007ae:	f7ff ff84 	bl	80006ba <LCD_DisplayString>

		// --- Title ---
		LCD_DisplayString((LCD_PIXEL_WIDTH - 12*Font16x24.Width)/2, 30, (uint8_t*)"Connect Four", &Font16x24, LCD_COLOR_YELLOW, LCD_COLOR_BLUE, false); // Centered title
 80007b2:	4b0f      	ldr	r3, [pc, #60]	@ (80007f0 <drawMenuScreen+0xc8>)
 80007b4:	889b      	ldrh	r3, [r3, #4]
 80007b6:	461a      	mov	r2, r3
 80007b8:	4613      	mov	r3, r2
 80007ba:	0092      	lsls	r2, r2, #2
 80007bc:	1a9b      	subs	r3, r3, r2
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	33f0      	adds	r3, #240	@ 0xf0
 80007c2:	0fda      	lsrs	r2, r3, #31
 80007c4:	4413      	add	r3, r2
 80007c6:	105b      	asrs	r3, r3, #1
 80007c8:	b298      	uxth	r0, r3
 80007ca:	2300      	movs	r3, #0
 80007cc:	9302      	str	r3, [sp, #8]
 80007ce:	231f      	movs	r3, #31
 80007d0:	9301      	str	r3, [sp, #4]
 80007d2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80007d6:	9300      	str	r3, [sp, #0]
 80007d8:	4b05      	ldr	r3, [pc, #20]	@ (80007f0 <drawMenuScreen+0xc8>)
 80007da:	4a08      	ldr	r2, [pc, #32]	@ (80007fc <drawMenuScreen+0xd4>)
 80007dc:	211e      	movs	r1, #30
 80007de:	f7ff ff6c 	bl	80006ba <LCD_DisplayString>

		addSchedulerEvent(TOUCH_POLLING_EVENT);
 80007e2:	2001      	movs	r0, #1
 80007e4:	f001 f99e 	bl	8001b24 <addSchedulerEvent>
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000004 	.word	0x20000004
 80007f4:	08007f58 	.word	0x08007f58
 80007f8:	08007f5c 	.word	0x08007f5c
 80007fc:	08007f60 	.word	0x08007f60

08000800 <getSlotColor>:


uint16_t getSlotColor(SlotState_t state) {
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
    switch(state) {
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	2b01      	cmp	r3, #1
 800080e:	d002      	beq.n	8000816 <getSlotColor+0x16>
 8000810:	2b02      	cmp	r3, #2
 8000812:	d003      	beq.n	800081c <getSlotColor+0x1c>
 8000814:	e005      	b.n	8000822 <getSlotColor+0x22>
        case SLOT_PLAYER1:
            return PLAYER1_COLOR;
 8000816:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800081a:	e004      	b.n	8000826 <getSlotColor+0x26>
        case SLOT_PLAYER2:
            return PLAYER2_COLOR;
 800081c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000820:	e001      	b.n	8000826 <getSlotColor+0x26>
        case SLOT_EMPTY:
        default:
            return EMPTY_SLOT_COLOR;
 8000822:	f64f 73ff 	movw	r3, #65535	@ 0xffff
    }
}
 8000826:	4618      	mov	r0, r3
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
	...

08000834 <initializeGameBoard>:

void initializeGameBoard() {
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
    //printf("Initializing Game Board...\n");
    for (int r = 0; r < BOARD_ROWS; r++) {
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	e015      	b.n	800086c <initializeGameBoard+0x38>
        for (int c = 0; c < BOARD_COLS; c++) {
 8000840:	2300      	movs	r3, #0
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	e00c      	b.n	8000860 <initializeGameBoard+0x2c>
            gameBoard[r][c] = SLOT_EMPTY;
 8000846:	490e      	ldr	r1, [pc, #56]	@ (8000880 <initializeGameBoard+0x4c>)
 8000848:	687a      	ldr	r2, [r7, #4]
 800084a:	4613      	mov	r3, r2
 800084c:	00db      	lsls	r3, r3, #3
 800084e:	1a9b      	subs	r3, r3, r2
 8000850:	18ca      	adds	r2, r1, r3
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	4413      	add	r3, r2
 8000856:	2200      	movs	r2, #0
 8000858:	701a      	strb	r2, [r3, #0]
        for (int c = 0; c < BOARD_COLS; c++) {
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	3301      	adds	r3, #1
 800085e:	603b      	str	r3, [r7, #0]
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	2b06      	cmp	r3, #6
 8000864:	ddef      	ble.n	8000846 <initializeGameBoard+0x12>
    for (int r = 0; r < BOARD_ROWS; r++) {
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	3301      	adds	r3, #1
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2b05      	cmp	r3, #5
 8000870:	dde6      	ble.n	8000840 <initializeGameBoard+0xc>
        }
    }
}
 8000872:	bf00      	nop
 8000874:	bf00      	nop
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	200000a8 	.word	0x200000a8

08000884 <drawGameBoard>:

void drawGameBoard() {
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af02      	add	r7, sp, #8
    //printf("Drawing Game Board...\n");
    // Clear the screen
    LCD_Clear(0, BACKGROUND_COLOR);
 800088a:	2100      	movs	r1, #0
 800088c:	2000      	movs	r0, #0
 800088e:	f001 f84d 	bl	800192c <LCD_Clear>

    // Draw the main board structure (the blue rectangle)
    LCD_Fill_Rect(BOARD_X_OFFSET, BOARD_Y_OFFSET, BOARD_DRAW_WIDTH, BOARD_DRAW_HEIGHT, BOARD_COLOR);
 8000892:	231f      	movs	r3, #31
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	23c4      	movs	r3, #196	@ 0xc4
 8000898:	22e4      	movs	r2, #228	@ 0xe4
 800089a:	2132      	movs	r1, #50	@ 0x32
 800089c:	2006      	movs	r0, #6
 800089e:	f000 fffc 	bl	800189a <LCD_Fill_Rect>

    // Draw the slots based on the gameBoard state
    for (int r = 0; r < BOARD_ROWS; r++) {
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	e02b      	b.n	8000900 <drawGameBoard+0x7c>
        for (int c = 0; c < BOARD_COLS; c++) {
 80008a8:	2300      	movs	r3, #0
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	e022      	b.n	80008f4 <drawGameBoard+0x70>
            // Calculate the center coordinates of the circle for slot (r, c)
            uint16_t centerX = BOARD_X_OFFSET + BOARD_SPACING + CIRCLE_RADIUS + c * (CIRCLE_DIAMETER + BOARD_SPACING);
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	015b      	lsls	r3, r3, #5
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	3318      	adds	r3, #24
 80008b8:	80fb      	strh	r3, [r7, #6]
            uint16_t centerY = BOARD_Y_OFFSET + BOARD_SPACING + CIRCLE_RADIUS + r * (CIRCLE_DIAMETER + BOARD_SPACING);
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	b29b      	uxth	r3, r3
 80008be:	015b      	lsls	r3, r3, #5
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	3344      	adds	r3, #68	@ 0x44
 80008c4:	80bb      	strh	r3, [r7, #4]

            // Get the color for the current slot state
            uint16_t slotColor = getSlotColor(gameBoard[r][c]);
 80008c6:	4912      	ldr	r1, [pc, #72]	@ (8000910 <drawGameBoard+0x8c>)
 80008c8:	68fa      	ldr	r2, [r7, #12]
 80008ca:	4613      	mov	r3, r2
 80008cc:	00db      	lsls	r3, r3, #3
 80008ce:	1a9b      	subs	r3, r3, r2
 80008d0:	18ca      	adds	r2, r1, r3
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	4413      	add	r3, r2
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff ff91 	bl	8000800 <getSlotColor>
 80008de:	4603      	mov	r3, r0
 80008e0:	807b      	strh	r3, [r7, #2]

            // Draw the filled circle representing the slot/coin
            LCD_Draw_Circle_Fill(centerX, centerY, CIRCLE_RADIUS, slotColor);
 80008e2:	887b      	ldrh	r3, [r7, #2]
 80008e4:	88b9      	ldrh	r1, [r7, #4]
 80008e6:	88f8      	ldrh	r0, [r7, #6]
 80008e8:	220e      	movs	r2, #14
 80008ea:	f000 ff83 	bl	80017f4 <LCD_Draw_Circle_Fill>
        for (int c = 0; c < BOARD_COLS; c++) {
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	3301      	adds	r3, #1
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	2b06      	cmp	r3, #6
 80008f8:	ddd9      	ble.n	80008ae <drawGameBoard+0x2a>
    for (int r = 0; r < BOARD_ROWS; r++) {
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	3301      	adds	r3, #1
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	2b05      	cmp	r3, #5
 8000904:	ddd0      	ble.n	80008a8 <drawGameBoard+0x24>
        }
    }
    //printf("Game Board Drawn.\n");
}
 8000906:	bf00      	nop
 8000908:	bf00      	nop
 800090a:	3710      	adds	r7, #16
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	200000a8 	.word	0x200000a8

08000914 <drawGameOverScreen>:

void drawGameOverScreen() {
 8000914:	b580      	push	{r7, lr}
 8000916:	b092      	sub	sp, #72	@ 0x48
 8000918:	af04      	add	r7, sp, #16
    LCD_Clear(0, BACKGROUND_COLOR); // Background
 800091a:	2100      	movs	r1, #0
 800091c:	2000      	movs	r0, #0
 800091e:	f001 f805 	bl	800192c <LCD_Clear>
    char message[40];
    uint16_t text_color;
    uint16_t text_x, text_y; // Variables for calculated positions

    // --- Display Winner/Tie Message ---
    LCD_SetFont(&Font16x24);
 8000922:	4871      	ldr	r0, [pc, #452]	@ (8000ae8 <drawGameOverScreen+0x1d4>)
 8000924:	f001 f834 	bl	8001990 <LCD_SetFont>
    if (roundWinner == SLOT_PLAYER1) {
 8000928:	4b70      	ldr	r3, [pc, #448]	@ (8000aec <drawGameOverScreen+0x1d8>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b01      	cmp	r3, #1
 800092e:	d108      	bne.n	8000942 <drawGameOverScreen+0x2e>
        text_color = PLAYER1_COLOR; // Red
 8000930:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000934:	86fb      	strh	r3, [r7, #54]	@ 0x36
        sprintf(message, "Player 1 Wins!");
 8000936:	463b      	mov	r3, r7
 8000938:	496d      	ldr	r1, [pc, #436]	@ (8000af0 <drawGameOverScreen+0x1dc>)
 800093a:	4618      	mov	r0, r3
 800093c:	f006 faf2 	bl	8006f24 <siprintf>
 8000940:	e01b      	b.n	800097a <drawGameOverScreen+0x66>
    } else if (roundWinner == SLOT_PLAYER2) {
 8000942:	4b6a      	ldr	r3, [pc, #424]	@ (8000aec <drawGameOverScreen+0x1d8>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	2b02      	cmp	r3, #2
 8000948:	d10f      	bne.n	800096a <drawGameOverScreen+0x56>
        text_color = PLAYER2_COLOR; // Yellow
 800094a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800094e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        sprintf(message, "%s Wins!", isOnePlayerMode ? "AI" : "Player 2");
 8000950:	4b68      	ldr	r3, [pc, #416]	@ (8000af4 <drawGameOverScreen+0x1e0>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <drawGameOverScreen+0x48>
 8000958:	4a67      	ldr	r2, [pc, #412]	@ (8000af8 <drawGameOverScreen+0x1e4>)
 800095a:	e000      	b.n	800095e <drawGameOverScreen+0x4a>
 800095c:	4a67      	ldr	r2, [pc, #412]	@ (8000afc <drawGameOverScreen+0x1e8>)
 800095e:	463b      	mov	r3, r7
 8000960:	4967      	ldr	r1, [pc, #412]	@ (8000b00 <drawGameOverScreen+0x1ec>)
 8000962:	4618      	mov	r0, r3
 8000964:	f006 fade 	bl	8006f24 <siprintf>
 8000968:	e007      	b.n	800097a <drawGameOverScreen+0x66>
    } else {
        text_color = LCD_COLOR_WHITE; // White for Tie
 800096a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800096e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        sprintf(message, "It's a Tie!");
 8000970:	463b      	mov	r3, r7
 8000972:	4964      	ldr	r1, [pc, #400]	@ (8000b04 <drawGameOverScreen+0x1f0>)
 8000974:	4618      	mov	r0, r3
 8000976:	f006 fad5 	bl	8006f24 <siprintf>
    }
    LCD_DisplayString((LCD_PIXEL_WIDTH - strlen(message) * Font16x24.Width) / 2, 60, (uint8_t*)message, &Font16x24, text_color, BACKGROUND_COLOR, false);
 800097a:	463b      	mov	r3, r7
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff fc37 	bl	80001f0 <strlen>
 8000982:	4603      	mov	r3, r0
 8000984:	4a58      	ldr	r2, [pc, #352]	@ (8000ae8 <drawGameOverScreen+0x1d4>)
 8000986:	8892      	ldrh	r2, [r2, #4]
 8000988:	fb02 f303 	mul.w	r3, r2, r3
 800098c:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000990:	085b      	lsrs	r3, r3, #1
 8000992:	b298      	uxth	r0, r3
 8000994:	463a      	mov	r2, r7
 8000996:	2300      	movs	r3, #0
 8000998:	9302      	str	r3, [sp, #8]
 800099a:	2300      	movs	r3, #0
 800099c:	9301      	str	r3, [sp, #4]
 800099e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80009a0:	9300      	str	r3, [sp, #0]
 80009a2:	4b51      	ldr	r3, [pc, #324]	@ (8000ae8 <drawGameOverScreen+0x1d4>)
 80009a4:	213c      	movs	r1, #60	@ 0x3c
 80009a6:	f7ff fe88 	bl	80006ba <LCD_DisplayString>



    // --- Display Scores ---
    LCD_SetFont(&Font12x12);
 80009aa:	4857      	ldr	r0, [pc, #348]	@ (8000b08 <drawGameOverScreen+0x1f4>)
 80009ac:	f000 fff0 	bl	8001990 <LCD_SetFont>
    text_color = LCD_COLOR_WHITE;
 80009b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80009b4:	86fb      	strh	r3, [r7, #54]	@ 0x36

    sprintf(message, "P1:(%lu) - P2:(%lu)", player1Score, player2Score);
 80009b6:	4b55      	ldr	r3, [pc, #340]	@ (8000b0c <drawGameOverScreen+0x1f8>)
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	4b55      	ldr	r3, [pc, #340]	@ (8000b10 <drawGameOverScreen+0x1fc>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4638      	mov	r0, r7
 80009c0:	4954      	ldr	r1, [pc, #336]	@ (8000b14 <drawGameOverScreen+0x200>)
 80009c2:	f006 faaf 	bl	8006f24 <siprintf>
    text_x = (LCD_PIXEL_WIDTH - strlen(message) * Font12x12.Width) / 2; // Center horizontally
 80009c6:	463b      	mov	r3, r7
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff fc11 	bl	80001f0 <strlen>
 80009ce:	4603      	mov	r3, r0
 80009d0:	4a4d      	ldr	r2, [pc, #308]	@ (8000b08 <drawGameOverScreen+0x1f4>)
 80009d2:	8892      	ldrh	r2, [r2, #4]
 80009d4:	fb02 f303 	mul.w	r3, r2, r3
 80009d8:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80009dc:	085b      	lsrs	r3, r3, #1
 80009de:	86bb      	strh	r3, [r7, #52]	@ 0x34
    text_y = STATS_Y_SCORE; // Vertical position
 80009e0:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80009e4:	867b      	strh	r3, [r7, #50]	@ 0x32

    //printf("Drawing Score at X=%d, Y=%d: %s\n", text_x, text_y, message); // Add debug print
    LCD_DisplayString(text_x, text_y, (uint8_t*)message, &Font12x12, text_color, BACKGROUND_COLOR, false);
 80009e6:	463a      	mov	r2, r7
 80009e8:	8e79      	ldrh	r1, [r7, #50]	@ 0x32
 80009ea:	8eb8      	ldrh	r0, [r7, #52]	@ 0x34
 80009ec:	2300      	movs	r3, #0
 80009ee:	9302      	str	r3, [sp, #8]
 80009f0:	2300      	movs	r3, #0
 80009f2:	9301      	str	r3, [sp, #4]
 80009f4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80009f6:	9300      	str	r3, [sp, #0]
 80009f8:	4b43      	ldr	r3, [pc, #268]	@ (8000b08 <drawGameOverScreen+0x1f4>)
 80009fa:	f7ff fe5e 	bl	80006ba <LCD_DisplayString>


    // --- Display Round Time ---
    uint32_t duration_ms = roundEndTime - roundStartTime;
 80009fe:	4b46      	ldr	r3, [pc, #280]	@ (8000b18 <drawGameOverScreen+0x204>)
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	4b46      	ldr	r3, [pc, #280]	@ (8000b1c <drawGameOverScreen+0x208>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	1ad3      	subs	r3, r2, r3
 8000a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t duration_s = duration_ms / 1000;
 8000a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a0c:	4a44      	ldr	r2, [pc, #272]	@ (8000b20 <drawGameOverScreen+0x20c>)
 8000a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a12:	099b      	lsrs	r3, r3, #6
 8000a14:	62bb      	str	r3, [r7, #40]	@ 0x28
    sprintf(message, "Time: %lu seconds", duration_s);
 8000a16:	463b      	mov	r3, r7
 8000a18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000a1a:	4942      	ldr	r1, [pc, #264]	@ (8000b24 <drawGameOverScreen+0x210>)
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f006 fa81 	bl	8006f24 <siprintf>
    text_x = (LCD_PIXEL_WIDTH - strlen(message) * Font12x12.Width) / 2; // Center horizontally
 8000a22:	463b      	mov	r3, r7
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fbe3 	bl	80001f0 <strlen>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	4a36      	ldr	r2, [pc, #216]	@ (8000b08 <drawGameOverScreen+0x1f4>)
 8000a2e:	8892      	ldrh	r2, [r2, #4]
 8000a30:	fb02 f303 	mul.w	r3, r2, r3
 8000a34:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000a38:	085b      	lsrs	r3, r3, #1
 8000a3a:	86bb      	strh	r3, [r7, #52]	@ 0x34
    text_y = STATS_Y_TIME; // Vertical position
 8000a3c:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8000a40:	867b      	strh	r3, [r7, #50]	@ 0x32

    //printf("Drawing Time at X=%d, Y=%d: %s\n", text_x, text_y, message); // Add debug print
    LCD_DisplayString(text_x, text_y, (uint8_t*)message, &Font12x12, text_color, BACKGROUND_COLOR, false);
 8000a42:	463a      	mov	r2, r7
 8000a44:	8e79      	ldrh	r1, [r7, #50]	@ 0x32
 8000a46:	8eb8      	ldrh	r0, [r7, #52]	@ 0x34
 8000a48:	2300      	movs	r3, #0
 8000a4a:	9302      	str	r3, [sp, #8]
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	9301      	str	r3, [sp, #4]
 8000a50:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000a52:	9300      	str	r3, [sp, #0]
 8000a54:	4b2c      	ldr	r3, [pc, #176]	@ (8000b08 <drawGameOverScreen+0x1f4>)
 8000a56:	f7ff fe30 	bl	80006ba <LCD_DisplayString>


    // --- Draw Restart Button ---
    LCD_Fill_Rect(RESTART_BUTTON_X, RESTART_BUTTON_Y, RESTART_BUTTON_WIDTH, RESTART_BUTTON_HEIGHT, LCD_COLOR_GREY);
 8000a5a:	f24f 73de 	movw	r3, #63454	@ 0xf7de
 8000a5e:	9300      	str	r3, [sp, #0]
 8000a60:	2328      	movs	r3, #40	@ 0x28
 8000a62:	2278      	movs	r2, #120	@ 0x78
 8000a64:	218c      	movs	r1, #140	@ 0x8c
 8000a66:	203c      	movs	r0, #60	@ 0x3c
 8000a68:	f000 ff17 	bl	800189a <LCD_Fill_Rect>
    LCD_Draw_Rect(RESTART_BUTTON_X, RESTART_BUTTON_Y, RESTART_BUTTON_WIDTH, RESTART_BUTTON_HEIGHT, LCD_COLOR_WHITE); // Outline
 8000a6c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a70:	9300      	str	r3, [sp, #0]
 8000a72:	2328      	movs	r3, #40	@ 0x28
 8000a74:	2278      	movs	r2, #120	@ 0x78
 8000a76:	218c      	movs	r1, #140	@ 0x8c
 8000a78:	203c      	movs	r0, #60	@ 0x3c
 8000a7a:	f7ff fdc7 	bl	800060c <LCD_Draw_Rect>
    LCD_SetFont(&Font16x24);
 8000a7e:	481a      	ldr	r0, [pc, #104]	@ (8000ae8 <drawGameOverScreen+0x1d4>)
 8000a80:	f000 ff86 	bl	8001990 <LCD_SetFont>
    text_color = LCD_COLOR_WHITE;
 8000a84:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a88:	86fb      	strh	r3, [r7, #54]	@ 0x36
    sprintf(message, "Restart");
 8000a8a:	463b      	mov	r3, r7
 8000a8c:	4926      	ldr	r1, [pc, #152]	@ (8000b28 <drawGameOverScreen+0x214>)
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f006 fa48 	bl	8006f24 <siprintf>
    text_x = RESTART_BUTTON_X + (RESTART_BUTTON_WIDTH - strlen(message) * Font16x24.Width) / 2;
 8000a94:	463b      	mov	r3, r7
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff fbaa 	bl	80001f0 <strlen>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	4a12      	ldr	r2, [pc, #72]	@ (8000ae8 <drawGameOverScreen+0x1d4>)
 8000aa0:	8892      	ldrh	r2, [r2, #4]
 8000aa2:	fb02 f303 	mul.w	r3, r2, r3
 8000aa6:	f1c3 0378 	rsb	r3, r3, #120	@ 0x78
 8000aaa:	085b      	lsrs	r3, r3, #1
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	333c      	adds	r3, #60	@ 0x3c
 8000ab0:	86bb      	strh	r3, [r7, #52]	@ 0x34
    text_y = RESTART_BUTTON_Y + (RESTART_BUTTON_HEIGHT - Font16x24.Height) / 2;
 8000ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae8 <drawGameOverScreen+0x1d4>)
 8000ab4:	88db      	ldrh	r3, [r3, #6]
 8000ab6:	f1c3 0328 	rsb	r3, r3, #40	@ 0x28
 8000aba:	0fda      	lsrs	r2, r3, #31
 8000abc:	4413      	add	r3, r2
 8000abe:	105b      	asrs	r3, r3, #1
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	338c      	adds	r3, #140	@ 0x8c
 8000ac4:	867b      	strh	r3, [r7, #50]	@ 0x32
    LCD_DisplayString(text_x, text_y, (uint8_t*)message, &Font16x24, text_color, LCD_COLOR_GREY, true);
 8000ac6:	463a      	mov	r2, r7
 8000ac8:	8e79      	ldrh	r1, [r7, #50]	@ 0x32
 8000aca:	8eb8      	ldrh	r0, [r7, #52]	@ 0x34
 8000acc:	2301      	movs	r3, #1
 8000ace:	9302      	str	r3, [sp, #8]
 8000ad0:	f24f 73de 	movw	r3, #63454	@ 0xf7de
 8000ad4:	9301      	str	r3, [sp, #4]
 8000ad6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000ad8:	9300      	str	r3, [sp, #0]
 8000ada:	4b03      	ldr	r3, [pc, #12]	@ (8000ae8 <drawGameOverScreen+0x1d4>)
 8000adc:	f7ff fded 	bl	80006ba <LCD_DisplayString>
}
 8000ae0:	bf00      	nop
 8000ae2:	3738      	adds	r7, #56	@ 0x38
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20000004 	.word	0x20000004
 8000aec:	200000e8 	.word	0x200000e8
 8000af0:	08007f70 	.word	0x08007f70
 8000af4:	200000e9 	.word	0x200000e9
 8000af8:	08007f80 	.word	0x08007f80
 8000afc:	08007f84 	.word	0x08007f84
 8000b00:	08007f90 	.word	0x08007f90
 8000b04:	08007f9c 	.word	0x08007f9c
 8000b08:	2000000c 	.word	0x2000000c
 8000b0c:	200000d8 	.word	0x200000d8
 8000b10:	200000dc 	.word	0x200000dc
 8000b14:	08007fa8 	.word	0x08007fa8
 8000b18:	200000e4 	.word	0x200000e4
 8000b1c:	200000e0 	.word	0x200000e0
 8000b20:	10624dd3 	.word	0x10624dd3
 8000b24:	08007fbc 	.word	0x08007fbc
 8000b28:	08007fd0 	.word	0x08007fd0

08000b2c <drawPreviewCoin>:

void drawPreviewCoin() {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
    // Calculate Y position (fixed, above the board)
    uint16_t previewCoinY = BOARD_Y_PREVIEW_OFFSET - BOARD_SPACING - CIRCLE_RADIUS;
 8000b32:	2320      	movs	r3, #32
 8000b34:	80fb      	strh	r3, [r7, #6]

    // Calculate X position based on currentColumn
    uint16_t previewCoinX = BOARD_X_OFFSET + BOARD_SPACING + CIRCLE_RADIUS + currentColumn * (CIRCLE_DIAMETER + BOARD_SPACING);
 8000b36:	4b16      	ldr	r3, [pc, #88]	@ (8000b90 <drawPreviewCoin+0x64>)
 8000b38:	f993 3000 	ldrsb.w	r3, [r3]
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	015b      	lsls	r3, r3, #5
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	3318      	adds	r3, #24
 8000b44:	80bb      	strh	r3, [r7, #4]

    // Erase previous coin position (draw background color circle)
    // Only erase if the position actually changed
    if (previousPreviewCoinX != 0 && previousPreviewCoinX != previewCoinX) {
 8000b46:	4b13      	ldr	r3, [pc, #76]	@ (8000b94 <drawPreviewCoin+0x68>)
 8000b48:	881b      	ldrh	r3, [r3, #0]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d00b      	beq.n	8000b66 <drawPreviewCoin+0x3a>
 8000b4e:	4b11      	ldr	r3, [pc, #68]	@ (8000b94 <drawPreviewCoin+0x68>)
 8000b50:	881b      	ldrh	r3, [r3, #0]
 8000b52:	88ba      	ldrh	r2, [r7, #4]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d006      	beq.n	8000b66 <drawPreviewCoin+0x3a>
         LCD_Draw_Circle_Fill(previousPreviewCoinX, previewCoinY, CIRCLE_RADIUS + 1, BACKGROUND_COLOR); // +1 to cover edges
 8000b58:	4b0e      	ldr	r3, [pc, #56]	@ (8000b94 <drawPreviewCoin+0x68>)
 8000b5a:	8818      	ldrh	r0, [r3, #0]
 8000b5c:	88f9      	ldrh	r1, [r7, #6]
 8000b5e:	2300      	movs	r3, #0
 8000b60:	220f      	movs	r2, #15
 8000b62:	f000 fe47 	bl	80017f4 <LCD_Draw_Circle_Fill>
    }

    // Draw the new coin with the current player's color
    uint16_t playerColor = getSlotColor(currentPlayer);
 8000b66:	4b0c      	ldr	r3, [pc, #48]	@ (8000b98 <drawPreviewCoin+0x6c>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff fe48 	bl	8000800 <getSlotColor>
 8000b70:	4603      	mov	r3, r0
 8000b72:	807b      	strh	r3, [r7, #2]
    LCD_Draw_Circle_Fill(previewCoinX, previewCoinY, CIRCLE_RADIUS, playerColor);
 8000b74:	887b      	ldrh	r3, [r7, #2]
 8000b76:	88f9      	ldrh	r1, [r7, #6]
 8000b78:	88b8      	ldrh	r0, [r7, #4]
 8000b7a:	220e      	movs	r2, #14
 8000b7c:	f000 fe3a 	bl	80017f4 <LCD_Draw_Circle_Fill>

    // Store current position for next erase
    previousPreviewCoinX = previewCoinX;
 8000b80:	4a04      	ldr	r2, [pc, #16]	@ (8000b94 <drawPreviewCoin+0x68>)
 8000b82:	88bb      	ldrh	r3, [r7, #4]
 8000b84:	8013      	strh	r3, [r2, #0]
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000000 	.word	0x20000000
 8000b94:	200000d4 	.word	0x200000d4
 8000b98:	200000d2 	.word	0x200000d2

08000b9c <findLowestEmptyRow>:

int findLowestEmptyRow(int col) {
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
    if (col < 0 || col >= BOARD_COLS) {
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	db02      	blt.n	8000bb0 <findLowestEmptyRow+0x14>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2b06      	cmp	r3, #6
 8000bae:	dd02      	ble.n	8000bb6 <findLowestEmptyRow+0x1a>
        return -1; // Invalid column
 8000bb0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bb4:	e017      	b.n	8000be6 <findLowestEmptyRow+0x4a>
    }
    // Start from the bottom row and go up
    for (int r = BOARD_ROWS - 1; r >= 0; r--) {
 8000bb6:	2305      	movs	r3, #5
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	e00f      	b.n	8000bdc <findLowestEmptyRow+0x40>
        if (gameBoard[r][col] == SLOT_EMPTY) {
 8000bbc:	490d      	ldr	r1, [pc, #52]	@ (8000bf4 <findLowestEmptyRow+0x58>)
 8000bbe:	68fa      	ldr	r2, [r7, #12]
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	00db      	lsls	r3, r3, #3
 8000bc4:	1a9b      	subs	r3, r3, r2
 8000bc6:	18ca      	adds	r2, r1, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4413      	add	r3, r2
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d101      	bne.n	8000bd6 <findLowestEmptyRow+0x3a>
            return r; // Found an empty slot
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	e007      	b.n	8000be6 <findLowestEmptyRow+0x4a>
    for (int r = BOARD_ROWS - 1; r >= 0; r--) {
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	3b01      	subs	r3, #1
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	daec      	bge.n	8000bbc <findLowestEmptyRow+0x20>
        }
    }
    return -1; // Column is full
 8000be2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3714      	adds	r7, #20
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	200000a8 	.word	0x200000a8

08000bf8 <dropCoin>:

void dropCoin() {
 8000bf8:	b590      	push	{r4, r7, lr}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
    //printf("Attempting to drop coin in column %d for player %d\n", currentColumn, currentPlayer);

    int row = findLowestEmptyRow(currentColumn);
 8000bfe:	4b4e      	ldr	r3, [pc, #312]	@ (8000d38 <dropCoin+0x140>)
 8000c00:	f993 3000 	ldrsb.w	r3, [r3]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff ffc9 	bl	8000b9c <findLowestEmptyRow>
 8000c0a:	6078      	str	r0, [r7, #4]

    if (row != -1) { // Column has space
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000c12:	f000 808d 	beq.w	8000d30 <dropCoin+0x138>
        //printf("Placing coin at (%d, %d)\n", row, currentColumn);
        gameBoard[row][currentColumn] = currentPlayer;
 8000c16:	4b48      	ldr	r3, [pc, #288]	@ (8000d38 <dropCoin+0x140>)
 8000c18:	f993 3000 	ldrsb.w	r3, [r3]
 8000c1c:	461c      	mov	r4, r3
 8000c1e:	4b47      	ldr	r3, [pc, #284]	@ (8000d3c <dropCoin+0x144>)
 8000c20:	7818      	ldrb	r0, [r3, #0]
 8000c22:	4947      	ldr	r1, [pc, #284]	@ (8000d40 <dropCoin+0x148>)
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	4613      	mov	r3, r2
 8000c28:	00db      	lsls	r3, r3, #3
 8000c2a:	1a9b      	subs	r3, r3, r2
 8000c2c:	440b      	add	r3, r1
 8000c2e:	4423      	add	r3, r4
 8000c30:	4602      	mov	r2, r0
 8000c32:	701a      	strb	r2, [r3, #0]
        drawGameBoard(); // Redraw board with the new piece
 8000c34:	f7ff fe26 	bl	8000884 <drawGameBoard>

        // --- Check for Win ---
        if (checkWin(currentPlayer)) {
 8000c38:	4b40      	ldr	r3, [pc, #256]	@ (8000d3c <dropCoin+0x144>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f000 fac9 	bl	80011d4 <checkWin>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d01d      	beq.n	8000c84 <dropCoin+0x8c>
            //printf("Player %d Wins!\n", (currentPlayer == SLOT_PLAYER1) ? 1 : 2);
            roundWinner = currentPlayer;
 8000c48:	4b3c      	ldr	r3, [pc, #240]	@ (8000d3c <dropCoin+0x144>)
 8000c4a:	781a      	ldrb	r2, [r3, #0]
 8000c4c:	4b3d      	ldr	r3, [pc, #244]	@ (8000d44 <dropCoin+0x14c>)
 8000c4e:	701a      	strb	r2, [r3, #0]
            roundEndTime = HAL_GetTick(); // Record end time
 8000c50:	f002 fda6 	bl	80037a0 <HAL_GetTick>
 8000c54:	4603      	mov	r3, r0
 8000c56:	4a3c      	ldr	r2, [pc, #240]	@ (8000d48 <dropCoin+0x150>)
 8000c58:	6013      	str	r3, [r2, #0]
            if (currentPlayer == SLOT_PLAYER1) player1Score++;
 8000c5a:	4b38      	ldr	r3, [pc, #224]	@ (8000d3c <dropCoin+0x144>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d105      	bne.n	8000c6e <dropCoin+0x76>
 8000c62:	4b3a      	ldr	r3, [pc, #232]	@ (8000d4c <dropCoin+0x154>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	3301      	adds	r3, #1
 8000c68:	4a38      	ldr	r2, [pc, #224]	@ (8000d4c <dropCoin+0x154>)
 8000c6a:	6013      	str	r3, [r2, #0]
 8000c6c:	e004      	b.n	8000c78 <dropCoin+0x80>
            else player2Score++;
 8000c6e:	4b38      	ldr	r3, [pc, #224]	@ (8000d50 <dropCoin+0x158>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	3301      	adds	r3, #1
 8000c74:	4a36      	ldr	r2, [pc, #216]	@ (8000d50 <dropCoin+0x158>)
 8000c76:	6013      	str	r3, [r2, #0]
            currentAppState = APP_STATE_GAME_OVER;
 8000c78:	4b36      	ldr	r3, [pc, #216]	@ (8000d54 <dropCoin+0x15c>)
 8000c7a:	2206      	movs	r2, #6
 8000c7c:	701a      	strb	r2, [r3, #0]
            drawGameOverScreen(); // Draw the game over screen immediately
 8000c7e:	f7ff fe49 	bl	8000914 <drawGameOverScreen>
            return; // End the turn sequence
 8000c82:	e055      	b.n	8000d30 <dropCoin+0x138>
        }

        // --- Check for Tie ---
        if (checkTie()) {
 8000c84:	f000 fbd6 	bl	8001434 <checkTie>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d00d      	beq.n	8000caa <dropCoin+0xb2>
            //printf("Game is a Tie!\n");
            roundWinner = SLOT_EMPTY; // Indicate a tie
 8000c8e:	4b2d      	ldr	r3, [pc, #180]	@ (8000d44 <dropCoin+0x14c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	701a      	strb	r2, [r3, #0]
            roundEndTime = HAL_GetTick(); // Record end time
 8000c94:	f002 fd84 	bl	80037a0 <HAL_GetTick>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	4a2b      	ldr	r2, [pc, #172]	@ (8000d48 <dropCoin+0x150>)
 8000c9c:	6013      	str	r3, [r2, #0]
            // No score update for a tie
            currentAppState = APP_STATE_GAME_OVER;
 8000c9e:	4b2d      	ldr	r3, [pc, #180]	@ (8000d54 <dropCoin+0x15c>)
 8000ca0:	2206      	movs	r2, #6
 8000ca2:	701a      	strb	r2, [r3, #0]
            drawGameOverScreen();
 8000ca4:	f7ff fe36 	bl	8000914 <drawGameOverScreen>
            return; // End the turn sequence
 8000ca8:	e042      	b.n	8000d30 <dropCoin+0x138>
        }

        // --- No Win, No Tie -> Switch Player ---
        //SlotState_t previousPlayer = currentPlayer;
        if (isOnePlayerMode) {
 8000caa:	4b2b      	ldr	r3, [pc, #172]	@ (8000d58 <dropCoin+0x160>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d014      	beq.n	8000cdc <dropCoin+0xe4>
            // P1 just played, switch to AI
            if (currentPlayer == SLOT_PLAYER1) {
 8000cb2:	4b22      	ldr	r3, [pc, #136]	@ (8000d3c <dropCoin+0x144>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d109      	bne.n	8000cce <dropCoin+0xd6>
                 currentPlayer = SLOT_PLAYER2; // AI is Player 2
 8000cba:	4b20      	ldr	r3, [pc, #128]	@ (8000d3c <dropCoin+0x144>)
 8000cbc:	2202      	movs	r2, #2
 8000cbe:	701a      	strb	r2, [r3, #0]
                 currentAppState = APP_STATE_GAME_AI_TURN;
 8000cc0:	4b24      	ldr	r3, [pc, #144]	@ (8000d54 <dropCoin+0x15c>)
 8000cc2:	2204      	movs	r2, #4
 8000cc4:	701a      	strb	r2, [r3, #0]
                 //printf("Switched to AI turn.\n");
                 addSchedulerEvent(GAME_UPDATE_EVENT); // Trigger AI move
 8000cc6:	2004      	movs	r0, #4
 8000cc8:	f000 ff2c 	bl	8001b24 <addSchedulerEvent>
 8000ccc:	e017      	b.n	8000cfe <dropCoin+0x106>
            } else { // AI just played (P2), switch to Human (P1)
                 currentPlayer = SLOT_PLAYER1;
 8000cce:	4b1b      	ldr	r3, [pc, #108]	@ (8000d3c <dropCoin+0x144>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	701a      	strb	r2, [r3, #0]
                 currentAppState = APP_STATE_GAME_P1_TURN;
 8000cd4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d54 <dropCoin+0x15c>)
 8000cd6:	2202      	movs	r2, #2
 8000cd8:	701a      	strb	r2, [r3, #0]
 8000cda:	e010      	b.n	8000cfe <dropCoin+0x106>
                 //printf("Switched to Player 1 turn.\n");
            }
        } else { // Two Player Mode
             if (currentPlayer == SLOT_PLAYER1) {
 8000cdc:	4b17      	ldr	r3, [pc, #92]	@ (8000d3c <dropCoin+0x144>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d106      	bne.n	8000cf2 <dropCoin+0xfa>
                 currentPlayer = SLOT_PLAYER2;
 8000ce4:	4b15      	ldr	r3, [pc, #84]	@ (8000d3c <dropCoin+0x144>)
 8000ce6:	2202      	movs	r2, #2
 8000ce8:	701a      	strb	r2, [r3, #0]
                 currentAppState = APP_STATE_GAME_P2_TURN;
 8000cea:	4b1a      	ldr	r3, [pc, #104]	@ (8000d54 <dropCoin+0x15c>)
 8000cec:	2203      	movs	r2, #3
 8000cee:	701a      	strb	r2, [r3, #0]
 8000cf0:	e005      	b.n	8000cfe <dropCoin+0x106>
                 //printf("Switched to Player 2 turn.\n");
             } else {
                 currentPlayer = SLOT_PLAYER1;
 8000cf2:	4b12      	ldr	r3, [pc, #72]	@ (8000d3c <dropCoin+0x144>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	701a      	strb	r2, [r3, #0]
                 currentAppState = APP_STATE_GAME_P1_TURN;
 8000cf8:	4b16      	ldr	r3, [pc, #88]	@ (8000d54 <dropCoin+0x15c>)
 8000cfa:	2202      	movs	r2, #2
 8000cfc:	701a      	strb	r2, [r3, #0]
                 //printf("Switched to Player 1 turn.\n");
             }
        }

        // Erase the dropped preview coin and draw the new player's preview coin
        uint16_t previewCoinY = BOARD_Y_OFFSET - BOARD_SPACING - CIRCLE_RADIUS;
 8000cfe:	2320      	movs	r3, #32
 8000d00:	807b      	strh	r3, [r7, #2]
        // Use previous player's color to erase the spot where the coin was
        uint16_t eraseX = BOARD_X_OFFSET + BOARD_SPACING + CIRCLE_RADIUS + currentColumn * (CIRCLE_DIAMETER + BOARD_SPACING);
 8000d02:	4b0d      	ldr	r3, [pc, #52]	@ (8000d38 <dropCoin+0x140>)
 8000d04:	f993 3000 	ldrsb.w	r3, [r3]
 8000d08:	b29b      	uxth	r3, r3
 8000d0a:	015b      	lsls	r3, r3, #5
 8000d0c:	b29b      	uxth	r3, r3
 8000d0e:	3318      	adds	r3, #24
 8000d10:	803b      	strh	r3, [r7, #0]
        LCD_Draw_Circle_Fill(eraseX, previewCoinY, CIRCLE_RADIUS + 1, BACKGROUND_COLOR);
 8000d12:	8879      	ldrh	r1, [r7, #2]
 8000d14:	8838      	ldrh	r0, [r7, #0]
 8000d16:	2300      	movs	r3, #0
 8000d18:	220f      	movs	r2, #15
 8000d1a:	f000 fd6b 	bl	80017f4 <LCD_Draw_Circle_Fill>
        previousPreviewCoinX = 0; // Reset previous X
 8000d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d5c <dropCoin+0x164>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	801a      	strh	r2, [r3, #0]
        if (currentAppState != APP_STATE_GAME_AI_TURN) { // Don't draw preview if AI is thinking
 8000d24:	4b0b      	ldr	r3, [pc, #44]	@ (8000d54 <dropCoin+0x15c>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b04      	cmp	r3, #4
 8000d2a:	d001      	beq.n	8000d30 <dropCoin+0x138>
             drawPreviewCoin();
 8000d2c:	f7ff fefe 	bl	8000b2c <drawPreviewCoin>
        }

    } else {
        //printf("Column %d is full!\n", currentColumn);
    }
}
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd90      	pop	{r4, r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000000 	.word	0x20000000
 8000d3c:	200000d2 	.word	0x200000d2
 8000d40:	200000a8 	.word	0x200000a8
 8000d44:	200000e8 	.word	0x200000e8
 8000d48:	200000e4 	.word	0x200000e4
 8000d4c:	200000d8 	.word	0x200000d8
 8000d50:	200000dc 	.word	0x200000dc
 8000d54:	2000009c 	.word	0x2000009c
 8000d58:	200000e9 	.word	0x200000e9
 8000d5c:	200000d4 	.word	0x200000d4

08000d60 <handleTouchInput>:


void handleTouchInput() {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af02      	add	r7, sp, #8
	STMPE811_TouchData touchData;
	touchData.orientation = STMPE811_Orientation_Portrait_2;
 8000d66:	2301      	movs	r3, #1
 8000d68:	71bb      	strb	r3, [r7, #6]
    STMPE811_State_t touchState = returnTouchStateAndLocation(&touchData);
 8000d6a:	463b      	mov	r3, r7
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f000 fec0 	bl	8001af2 <returnTouchStateAndLocation>
 8000d72:	4603      	mov	r3, r0
 8000d74:	73fb      	strb	r3, [r7, #15]
    if (touchState != STMPE811_State_Pressed) return;
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	f040 8091 	bne.w	8000ea0 <handleTouchInput+0x140>
    uint32_t currentTime = HAL_GetTick();
 8000d7e:	f002 fd0f 	bl	80037a0 <HAL_GetTick>
 8000d82:	60b8      	str	r0, [r7, #8]
    if (currentTime - lastTouchMoveTime < TOUCH_MOVE_DEBOUNCE) return;
 8000d84:	4b4d      	ldr	r3, [pc, #308]	@ (8000ebc <handleTouchInput+0x15c>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	68ba      	ldr	r2, [r7, #8]
 8000d8a:	1ad3      	subs	r3, r2, r3
 8000d8c:	2bc7      	cmp	r3, #199	@ 0xc7
 8000d8e:	f240 8089 	bls.w	8000ea4 <handleTouchInput+0x144>
    lastTouchMoveTime = currentTime;
 8000d92:	4a4a      	ldr	r2, [pc, #296]	@ (8000ebc <handleTouchInput+0x15c>)
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	6013      	str	r3, [r2, #0]

	// --- State Machine for Touch ---
    switch(currentAppState) {
 8000d98:	4b49      	ldr	r3, [pc, #292]	@ (8000ec0 <handleTouchInput+0x160>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b06      	cmp	r3, #6
 8000d9e:	d069      	beq.n	8000e74 <handleTouchInput+0x114>
 8000da0:	2b06      	cmp	r3, #6
 8000da2:	f300 8081 	bgt.w	8000ea8 <handleTouchInput+0x148>
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d005      	beq.n	8000db6 <handleTouchInput+0x56>
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	dd7c      	ble.n	8000ea8 <handleTouchInput+0x148>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d879      	bhi.n	8000ea8 <handleTouchInput+0x148>
 8000db4:	e04c      	b.n	8000e50 <handleTouchInput+0xf0>
    	case APP_STATE_MENU:
			// --- Start Timer on Game Start ---
			// Check Button 1 (Left Button)
			if (isTouchInside(touchData.x, touchData.y, BUTTON1_X, BUTTON1_Y, BUTTON_WIDTH, BUTTON_HEIGHT)) {
 8000db6:	8838      	ldrh	r0, [r7, #0]
 8000db8:	8879      	ldrh	r1, [r7, #2]
 8000dba:	2332      	movs	r3, #50	@ 0x32
 8000dbc:	9301      	str	r3, [sp, #4]
 8000dbe:	2364      	movs	r3, #100	@ 0x64
 8000dc0:	9300      	str	r3, [sp, #0]
 8000dc2:	2387      	movs	r3, #135	@ 0x87
 8000dc4:	220a      	movs	r2, #10
 8000dc6:	f000 f889 	bl	8000edc <isTouchInside>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d017      	beq.n	8000e00 <handleTouchInput+0xa0>
				//printf("Button 1 (1 Player) Selected!\n");
				isOnePlayerMode = true;
 8000dd0:	4b3c      	ldr	r3, [pc, #240]	@ (8000ec4 <handleTouchInput+0x164>)
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	701a      	strb	r2, [r3, #0]
				initializeGameBoard();
 8000dd6:	f7ff fd2d 	bl	8000834 <initializeGameBoard>
				currentPlayer = SLOT_PLAYER1;
 8000dda:	4b3b      	ldr	r3, [pc, #236]	@ (8000ec8 <handleTouchInput+0x168>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	701a      	strb	r2, [r3, #0]
				currentColumn = BOARD_COLS / 2;
 8000de0:	4b3a      	ldr	r3, [pc, #232]	@ (8000ecc <handleTouchInput+0x16c>)
 8000de2:	2203      	movs	r2, #3
 8000de4:	701a      	strb	r2, [r3, #0]
				roundStartTime = HAL_GetTick();
 8000de6:	f002 fcdb 	bl	80037a0 <HAL_GetTick>
 8000dea:	4603      	mov	r3, r0
 8000dec:	4a38      	ldr	r2, [pc, #224]	@ (8000ed0 <handleTouchInput+0x170>)
 8000dee:	6013      	str	r3, [r2, #0]
				currentAppState = APP_STATE_GAME_P1_TURN; // Start P1 turn
 8000df0:	4b33      	ldr	r3, [pc, #204]	@ (8000ec0 <handleTouchInput+0x160>)
 8000df2:	2202      	movs	r2, #2
 8000df4:	701a      	strb	r2, [r3, #0]
				drawGameBoard();
 8000df6:	f7ff fd45 	bl	8000884 <drawGameBoard>
				drawPreviewCoin();
 8000dfa:	f7ff fe97 	bl	8000b2c <drawPreviewCoin>
				roundStartTime = HAL_GetTick();
				currentAppState = APP_STATE_GAME_P1_TURN; // Start P1 turn
				drawGameBoard();
				drawPreviewCoin();
			}
			break; // End of APP_STATE_MENU case
 8000dfe:	e055      	b.n	8000eac <handleTouchInput+0x14c>
			else if (isTouchInside(touchData.x, touchData.y, BUTTON2_X, BUTTON2_Y, BUTTON_WIDTH, BUTTON_HEIGHT)) {
 8000e00:	8838      	ldrh	r0, [r7, #0]
 8000e02:	8879      	ldrh	r1, [r7, #2]
 8000e04:	2332      	movs	r3, #50	@ 0x32
 8000e06:	9301      	str	r3, [sp, #4]
 8000e08:	2364      	movs	r3, #100	@ 0x64
 8000e0a:	9300      	str	r3, [sp, #0]
 8000e0c:	2387      	movs	r3, #135	@ 0x87
 8000e0e:	2282      	movs	r2, #130	@ 0x82
 8000e10:	f000 f864 	bl	8000edc <isTouchInside>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d048      	beq.n	8000eac <handleTouchInput+0x14c>
				printf("Button 2 (2 Player) Selected!\n");
 8000e1a:	482e      	ldr	r0, [pc, #184]	@ (8000ed4 <handleTouchInput+0x174>)
 8000e1c:	f006 f9bc 	bl	8007198 <puts>
				isOnePlayerMode = false;
 8000e20:	4b28      	ldr	r3, [pc, #160]	@ (8000ec4 <handleTouchInput+0x164>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	701a      	strb	r2, [r3, #0]
				initializeGameBoard();
 8000e26:	f7ff fd05 	bl	8000834 <initializeGameBoard>
				currentPlayer = SLOT_PLAYER1;
 8000e2a:	4b27      	ldr	r3, [pc, #156]	@ (8000ec8 <handleTouchInput+0x168>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	701a      	strb	r2, [r3, #0]
				currentColumn = BOARD_COLS / 2;
 8000e30:	4b26      	ldr	r3, [pc, #152]	@ (8000ecc <handleTouchInput+0x16c>)
 8000e32:	2203      	movs	r2, #3
 8000e34:	701a      	strb	r2, [r3, #0]
				roundStartTime = HAL_GetTick();
 8000e36:	f002 fcb3 	bl	80037a0 <HAL_GetTick>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	4a24      	ldr	r2, [pc, #144]	@ (8000ed0 <handleTouchInput+0x170>)
 8000e3e:	6013      	str	r3, [r2, #0]
				currentAppState = APP_STATE_GAME_P1_TURN; // Start P1 turn
 8000e40:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec0 <handleTouchInput+0x160>)
 8000e42:	2202      	movs	r2, #2
 8000e44:	701a      	strb	r2, [r3, #0]
				drawGameBoard();
 8000e46:	f7ff fd1d 	bl	8000884 <drawGameBoard>
				drawPreviewCoin();
 8000e4a:	f7ff fe6f 	bl	8000b2c <drawPreviewCoin>
			break; // End of APP_STATE_MENU case
 8000e4e:	e02d      	b.n	8000eac <handleTouchInput+0x14c>

        case APP_STATE_GAME_P1_TURN:
        case APP_STATE_GAME_P2_TURN:
             // Only handle touch for moving the preview coin in 2P mode
             // or if it's P1's turn in 1P mode
             if (!isOnePlayerMode || currentPlayer == SLOT_PLAYER1) {
 8000e50:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec4 <handleTouchInput+0x164>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	f083 0301 	eor.w	r3, r3, #1
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d103      	bne.n	8000e66 <handleTouchInput+0x106>
 8000e5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec8 <handleTouchInput+0x168>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d124      	bne.n	8000eb0 <handleTouchInput+0x150>
                  handleGameTouchInput(touchData.x, touchData.y);
 8000e66:	883b      	ldrh	r3, [r7, #0]
 8000e68:	887a      	ldrh	r2, [r7, #2]
 8000e6a:	4611      	mov	r1, r2
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f000 f863 	bl	8000f38 <handleGameTouchInput>
             }
             break;
 8000e72:	e01d      	b.n	8000eb0 <handleTouchInput+0x150>

        case APP_STATE_GAME_OVER:
             // --- Handle Restart Button ---
             if (isTouchInside(touchData.x, touchData.y, RESTART_BUTTON_X, RESTART_BUTTON_Y, RESTART_BUTTON_WIDTH, RESTART_BUTTON_HEIGHT)) {
 8000e74:	8838      	ldrh	r0, [r7, #0]
 8000e76:	8879      	ldrh	r1, [r7, #2]
 8000e78:	2328      	movs	r3, #40	@ 0x28
 8000e7a:	9301      	str	r3, [sp, #4]
 8000e7c:	2378      	movs	r3, #120	@ 0x78
 8000e7e:	9300      	str	r3, [sp, #0]
 8000e80:	238c      	movs	r3, #140	@ 0x8c
 8000e82:	223c      	movs	r2, #60	@ 0x3c
 8000e84:	f000 f82a 	bl	8000edc <isTouchInside>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d012      	beq.n	8000eb4 <handleTouchInput+0x154>
                  printf("Restart Button Pressed.\n");
 8000e8e:	4812      	ldr	r0, [pc, #72]	@ (8000ed8 <handleTouchInput+0x178>)
 8000e90:	f006 f982 	bl	8007198 <puts>
                  currentAppState = APP_STATE_MENU;
 8000e94:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec0 <handleTouchInput+0x160>)
 8000e96:	2201      	movs	r2, #1
 8000e98:	701a      	strb	r2, [r3, #0]
                  // No need to reset scores here, they persist
                  drawMenuScreen(); // Go back to main menu
 8000e9a:	f7ff fc45 	bl	8000728 <drawMenuScreen>
             }
             break;
 8000e9e:	e009      	b.n	8000eb4 <handleTouchInput+0x154>
    if (touchState != STMPE811_State_Pressed) return;
 8000ea0:	bf00      	nop
 8000ea2:	e008      	b.n	8000eb6 <handleTouchInput+0x156>
    if (currentTime - lastTouchMoveTime < TOUCH_MOVE_DEBOUNCE) return;
 8000ea4:	bf00      	nop
 8000ea6:	e006      	b.n	8000eb6 <handleTouchInput+0x156>

        default:
            break;
 8000ea8:	bf00      	nop
 8000eaa:	e004      	b.n	8000eb6 <handleTouchInput+0x156>
			break; // End of APP_STATE_MENU case
 8000eac:	bf00      	nop
 8000eae:	e002      	b.n	8000eb6 <handleTouchInput+0x156>
             break;
 8000eb0:	bf00      	nop
 8000eb2:	e000      	b.n	8000eb6 <handleTouchInput+0x156>
             break;
 8000eb4:	bf00      	nop
    }
}
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	200000ec 	.word	0x200000ec
 8000ec0:	2000009c 	.word	0x2000009c
 8000ec4:	200000e9 	.word	0x200000e9
 8000ec8:	200000d2 	.word	0x200000d2
 8000ecc:	20000000 	.word	0x20000000
 8000ed0:	200000e0 	.word	0x200000e0
 8000ed4:	08007fd8 	.word	0x08007fd8
 8000ed8:	08007ff8 	.word	0x08007ff8

08000edc <isTouchInside>:

// Check if touch coordinates are within a button's bounds
bool isTouchInside(uint16_t touchX, uint16_t touchY, uint16_t btnX, uint16_t btnY, uint16_t btnW, uint16_t btnH) {
 8000edc:	b490      	push	{r4, r7}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4604      	mov	r4, r0
 8000ee4:	4608      	mov	r0, r1
 8000ee6:	4611      	mov	r1, r2
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4623      	mov	r3, r4
 8000eec:	80fb      	strh	r3, [r7, #6]
 8000eee:	4603      	mov	r3, r0
 8000ef0:	80bb      	strh	r3, [r7, #4]
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	807b      	strh	r3, [r7, #2]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	803b      	strh	r3, [r7, #0]
    return (touchX >= btnX && touchX < (btnX + btnW) &&
            touchY >= btnY && touchY < (btnY + btnH));
 8000efa:	88fa      	ldrh	r2, [r7, #6]
 8000efc:	887b      	ldrh	r3, [r7, #2]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d311      	bcc.n	8000f26 <isTouchInside+0x4a>
    return (touchX >= btnX && touchX < (btnX + btnW) &&
 8000f02:	88fa      	ldrh	r2, [r7, #6]
 8000f04:	8879      	ldrh	r1, [r7, #2]
 8000f06:	8a3b      	ldrh	r3, [r7, #16]
 8000f08:	440b      	add	r3, r1
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	da0b      	bge.n	8000f26 <isTouchInside+0x4a>
 8000f0e:	88ba      	ldrh	r2, [r7, #4]
 8000f10:	883b      	ldrh	r3, [r7, #0]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d307      	bcc.n	8000f26 <isTouchInside+0x4a>
            touchY >= btnY && touchY < (btnY + btnH));
 8000f16:	88ba      	ldrh	r2, [r7, #4]
 8000f18:	8839      	ldrh	r1, [r7, #0]
 8000f1a:	8abb      	ldrh	r3, [r7, #20]
 8000f1c:	440b      	add	r3, r1
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	da01      	bge.n	8000f26 <isTouchInside+0x4a>
 8000f22:	2301      	movs	r3, #1
 8000f24:	e000      	b.n	8000f28 <isTouchInside+0x4c>
 8000f26:	2300      	movs	r3, #0
 8000f28:	f003 0301 	and.w	r3, r3, #1
 8000f2c:	b2db      	uxtb	r3, r3
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc90      	pop	{r4, r7}
 8000f36:	4770      	bx	lr

08000f38 <handleGameTouchInput>:

void handleGameTouchInput(uint16_t touchX, uint16_t touchY) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	460a      	mov	r2, r1
 8000f42:	80fb      	strh	r3, [r7, #6]
 8000f44:	4613      	mov	r3, r2
 8000f46:	80bb      	strh	r3, [r7, #4]
     // Check if touch is on the left half of the screen
     if (touchX < LCD_PIXEL_WIDTH / 2) {
 8000f48:	88fb      	ldrh	r3, [r7, #6]
 8000f4a:	2b77      	cmp	r3, #119	@ 0x77
 8000f4c:	d810      	bhi.n	8000f70 <handleGameTouchInput+0x38>
          // Move Left
          if (currentColumn > 0) {
 8000f4e:	4b12      	ldr	r3, [pc, #72]	@ (8000f98 <handleGameTouchInput+0x60>)
 8000f50:	f993 3000 	ldrsb.w	r3, [r3]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	dd1b      	ble.n	8000f90 <handleGameTouchInput+0x58>
                currentColumn--;
 8000f58:	4b0f      	ldr	r3, [pc, #60]	@ (8000f98 <handleGameTouchInput+0x60>)
 8000f5a:	f993 3000 	ldrsb.w	r3, [r3]
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	3b01      	subs	r3, #1
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	b25a      	sxtb	r2, r3
 8000f66:	4b0c      	ldr	r3, [pc, #48]	@ (8000f98 <handleGameTouchInput+0x60>)
 8000f68:	701a      	strb	r2, [r3, #0]
                //printf("Preview Coin Moved Left to Column %d\n", currentColumn);
                drawPreviewCoin(); // Redraw preview coin in new position
 8000f6a:	f7ff fddf 	bl	8000b2c <drawPreviewCoin>
                currentColumn++;
                //printf("Preview Coin Moved Right to Column %d\n", currentColumn);
                drawPreviewCoin(); // Redraw preview coin in new position
          }
     }
}
 8000f6e:	e00f      	b.n	8000f90 <handleGameTouchInput+0x58>
          if (currentColumn < BOARD_COLS - 1) {
 8000f70:	4b09      	ldr	r3, [pc, #36]	@ (8000f98 <handleGameTouchInput+0x60>)
 8000f72:	f993 3000 	ldrsb.w	r3, [r3]
 8000f76:	2b05      	cmp	r3, #5
 8000f78:	dc0a      	bgt.n	8000f90 <handleGameTouchInput+0x58>
                currentColumn++;
 8000f7a:	4b07      	ldr	r3, [pc, #28]	@ (8000f98 <handleGameTouchInput+0x60>)
 8000f7c:	f993 3000 	ldrsb.w	r3, [r3]
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	3301      	adds	r3, #1
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	b25a      	sxtb	r2, r3
 8000f88:	4b03      	ldr	r3, [pc, #12]	@ (8000f98 <handleGameTouchInput+0x60>)
 8000f8a:	701a      	strb	r2, [r3, #0]
                drawPreviewCoin(); // Redraw preview coin in new position
 8000f8c:	f7ff fdce 	bl	8000b2c <drawPreviewCoin>
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000000 	.word	0x20000000

08000f9c <pollHardwareButton>:

void pollHardwareButton() {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
    // Check if it's a player's turn state
    if (currentAppState != APP_STATE_GAME_P1_TURN && currentAppState != APP_STATE_GAME_P2_TURN) {
 8000fa2:	4b10      	ldr	r3, [pc, #64]	@ (8000fe4 <pollHardwareButton+0x48>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d003      	beq.n	8000fb2 <pollHardwareButton+0x16>
 8000faa:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe4 <pollHardwareButton+0x48>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b03      	cmp	r3, #3
 8000fb0:	d114      	bne.n	8000fdc <pollHardwareButton+0x40>
        return; // Only handle button presses during game turns
    }

    uint32_t currentTime = HAL_GetTick();
 8000fb2:	f002 fbf5 	bl	80037a0 <HAL_GetTick>
 8000fb6:	6078      	str	r0, [r7, #4]

    // Read the button state
    if (Button_IsPressed()) {
 8000fb8:	f000 fa82 	bl	80014c0 <Button_IsPressed>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d00d      	beq.n	8000fde <pollHardwareButton+0x42>
        // Debounce check
        if (currentTime - lastButtonPressTime > BUTTON_PRESS_DEBOUNCE) {
 8000fc2:	4b09      	ldr	r3, [pc, #36]	@ (8000fe8 <pollHardwareButton+0x4c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000fce:	d906      	bls.n	8000fde <pollHardwareButton+0x42>
            lastButtonPressTime = currentTime; // Update time of valid press
 8000fd0:	4a05      	ldr	r2, [pc, #20]	@ (8000fe8 <pollHardwareButton+0x4c>)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6013      	str	r3, [r2, #0]
            //printf("HW Button Pressed during game turn.\n");
            dropCoin(); // Trigger the coin drop logic
 8000fd6:	f7ff fe0f 	bl	8000bf8 <dropCoin>
 8000fda:	e000      	b.n	8000fde <pollHardwareButton+0x42>
        return; // Only handle button presses during game turns
 8000fdc:	bf00      	nop
        }
    } else {
         // Button is not pressed
         // lastButtonPressTime = 0; // Allow immediate press after release
    }
}
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	2000009c 	.word	0x2000009c
 8000fe8:	200000f0 	.word	0x200000f0

08000fec <handleAITurn>:

void handleAITurn() {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08a      	sub	sp, #40	@ 0x28
 8000ff0:	af00      	add	r7, sp, #0
    if (currentAppState != APP_STATE_GAME_AI_TURN) {
 8000ff2:	4b54      	ldr	r3, [pc, #336]	@ (8001144 <handleAITurn+0x158>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b04      	cmp	r3, #4
 8000ff8:	f040 80a0 	bne.w	800113c <handleAITurn+0x150>
        return;
    }

    //printf("AI Thinking...\n");
    HAL_Delay(500);
 8000ffc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001000:	f002 fbda 	bl	80037b8 <HAL_Delay>

    int chosen_col = -1; // Initialize to invalid column
 8001004:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001008:	627b      	str	r3, [r7, #36]	@ 0x24

    // --- 1. Check if AI (Player 2) can win ---
    for (int c = 0; c < BOARD_COLS; c++) {
 800100a:	2300      	movs	r3, #0
 800100c:	623b      	str	r3, [r7, #32]
 800100e:	e00c      	b.n	800102a <handleAITurn+0x3e>
        if (canPlayerWinByMovingHere(SLOT_PLAYER2, c)) {
 8001010:	6a39      	ldr	r1, [r7, #32]
 8001012:	2002      	movs	r0, #2
 8001014:	f000 f8a4 	bl	8001160 <canPlayerWinByMovingHere>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d002      	beq.n	8001024 <handleAITurn+0x38>
            chosen_col = c;
 800101e:	6a3b      	ldr	r3, [r7, #32]
 8001020:	627b      	str	r3, [r7, #36]	@ 0x24
            //printf("AI found winning move in column %d\n", chosen_col);
            break; // Found winning move, no need to check further
 8001022:	e005      	b.n	8001030 <handleAITurn+0x44>
    for (int c = 0; c < BOARD_COLS; c++) {
 8001024:	6a3b      	ldr	r3, [r7, #32]
 8001026:	3301      	adds	r3, #1
 8001028:	623b      	str	r3, [r7, #32]
 800102a:	6a3b      	ldr	r3, [r7, #32]
 800102c:	2b06      	cmp	r3, #6
 800102e:	ddef      	ble.n	8001010 <handleAITurn+0x24>
        }
    }

    // --- 2. If no AI win, check if Human (Player 1) can win (Block) ---
    if (chosen_col == -1) { // Only check defense if AI can't win
 8001030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001032:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001036:	d112      	bne.n	800105e <handleAITurn+0x72>
        for (int c = 0; c < BOARD_COLS; c++) {
 8001038:	2300      	movs	r3, #0
 800103a:	61fb      	str	r3, [r7, #28]
 800103c:	e00c      	b.n	8001058 <handleAITurn+0x6c>
            if (canPlayerWinByMovingHere(SLOT_PLAYER1, c)) {
 800103e:	69f9      	ldr	r1, [r7, #28]
 8001040:	2001      	movs	r0, #1
 8001042:	f000 f88d 	bl	8001160 <canPlayerWinByMovingHere>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d002      	beq.n	8001052 <handleAITurn+0x66>
                chosen_col = c;
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	627b      	str	r3, [r7, #36]	@ 0x24
                //printf("AI found defensive block in column %d\n", chosen_col);
                break; // Found blocking move, prioritize this
 8001050:	e005      	b.n	800105e <handleAITurn+0x72>
        for (int c = 0; c < BOARD_COLS; c++) {
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3301      	adds	r3, #1
 8001056:	61fb      	str	r3, [r7, #28]
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	2b06      	cmp	r3, #6
 800105c:	ddef      	ble.n	800103e <handleAITurn+0x52>
            }
        }
    }

    // --- 3. If no win and no block, choose a random valid column ---
    if (chosen_col == -1) {
 800105e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001060:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001064:	d15b      	bne.n	800111e <handleAITurn+0x132>
        //printf("AI making random move...\n");
        uint32_t random_val;
        int random_col_attempt;
        int available_row;
        int attempts = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	613b      	str	r3, [r7, #16]
        const int max_attempts = 50; // Safety limit
 800106a:	2332      	movs	r3, #50	@ 0x32
 800106c:	60bb      	str	r3, [r7, #8]

        do {
            // Generate random number
            if (HAL_RNG_GenerateRandomNumber(&hrng, &random_val) != HAL_OK) {
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	4619      	mov	r1, r3
 8001072:	4835      	ldr	r0, [pc, #212]	@ (8001148 <handleAITurn+0x15c>)
 8001074:	f005 f948 	bl	8006308 <HAL_RNG_GenerateRandomNumber>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d003      	beq.n	8001086 <handleAITurn+0x9a>
                 //printf("RNG Error! AI defaulting to first available column.\n");
                 random_col_attempt = -1; // Signal error fallback
 800107e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001082:	61bb      	str	r3, [r7, #24]
                 break;
 8001084:	e01c      	b.n	80010c0 <handleAITurn+0xd4>
            }
            random_col_attempt = random_val % BOARD_COLS; // Get column 0-6
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	4b30      	ldr	r3, [pc, #192]	@ (800114c <handleAITurn+0x160>)
 800108a:	fba3 2301 	umull	r2, r3, r3, r1
 800108e:	1aca      	subs	r2, r1, r3
 8001090:	0852      	lsrs	r2, r2, #1
 8001092:	4413      	add	r3, r2
 8001094:	089a      	lsrs	r2, r3, #2
 8001096:	4613      	mov	r3, r2
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	1a9b      	subs	r3, r3, r2
 800109c:	1aca      	subs	r2, r1, r3
 800109e:	61ba      	str	r2, [r7, #24]

            // Check if this column is valid
            available_row = findLowestEmptyRow(random_col_attempt);
 80010a0:	69b8      	ldr	r0, [r7, #24]
 80010a2:	f7ff fd7b 	bl	8000b9c <findLowestEmptyRow>
 80010a6:	6178      	str	r0, [r7, #20]

            attempts++;
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	3301      	adds	r3, #1
 80010ac:	613b      	str	r3, [r7, #16]
            // Break if valid or if max attempts reached
            if (available_row != -1 || attempts > max_attempts) {
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80010b4:	d104      	bne.n	80010c0 <handleAITurn+0xd4>
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	dc00      	bgt.n	80010c0 <handleAITurn+0xd4>
            if (HAL_RNG_GenerateRandomNumber(&hrng, &random_val) != HAL_OK) {
 80010be:	e7d6      	b.n	800106e <handleAITurn+0x82>
            }

        } while (true); // Loop until valid or max attempts

        // If random attempt failed after many tries or RNG error, scan linearly
        if (available_row == -1) {
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80010c6:	d116      	bne.n	80010f6 <handleAITurn+0x10a>
             //printf("AI random move failed/timed out, trying linear scan.\n");
             for (int c = 0; c < BOARD_COLS; c++) {
 80010c8:	2300      	movs	r3, #0
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	e010      	b.n	80010f0 <handleAITurn+0x104>
                  if (findLowestEmptyRow(c) != -1) {
 80010ce:	68f8      	ldr	r0, [r7, #12]
 80010d0:	f7ff fd64 	bl	8000b9c <findLowestEmptyRow>
 80010d4:	4603      	mov	r3, r0
 80010d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80010da:	d006      	beq.n	80010ea <handleAITurn+0xfe>
                      random_col_attempt = c; // Found first available column
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	61bb      	str	r3, [r7, #24]
                      available_row = findLowestEmptyRow(c); // Re-check just in case
 80010e0:	68f8      	ldr	r0, [r7, #12]
 80010e2:	f7ff fd5b 	bl	8000b9c <findLowestEmptyRow>
 80010e6:	6178      	str	r0, [r7, #20]
                      break;
 80010e8:	e005      	b.n	80010f6 <handleAITurn+0x10a>
             for (int c = 0; c < BOARD_COLS; c++) {
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	3301      	adds	r3, #1
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	2b06      	cmp	r3, #6
 80010f4:	ddeb      	ble.n	80010ce <handleAITurn+0xe2>
                  }
             }
        }

        // If still no valid column, game should be a tie (this is a safeguard)
        if(available_row == -1) {
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80010fc:	d10d      	bne.n	800111a <handleAITurn+0x12e>
             //printf("AI Error: No valid random moves found on board.\n");
             currentAppState = APP_STATE_GAME_OVER;
 80010fe:	4b11      	ldr	r3, [pc, #68]	@ (8001144 <handleAITurn+0x158>)
 8001100:	2206      	movs	r2, #6
 8001102:	701a      	strb	r2, [r3, #0]
             roundWinner = SLOT_EMPTY; // Force tie
 8001104:	4b12      	ldr	r3, [pc, #72]	@ (8001150 <handleAITurn+0x164>)
 8001106:	2200      	movs	r2, #0
 8001108:	701a      	strb	r2, [r3, #0]
             roundEndTime = HAL_GetTick();
 800110a:	f002 fb49 	bl	80037a0 <HAL_GetTick>
 800110e:	4603      	mov	r3, r0
 8001110:	4a10      	ldr	r2, [pc, #64]	@ (8001154 <handleAITurn+0x168>)
 8001112:	6013      	str	r3, [r2, #0]
             drawGameOverScreen();
 8001114:	f7ff fbfe 	bl	8000914 <drawGameOverScreen>
 8001118:	e011      	b.n	800113e <handleAITurn+0x152>
             return;
        }

        chosen_col = random_col_attempt; // Use the valid random column
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	627b      	str	r3, [r7, #36]	@ 0x24
        //printf("AI random choice is column %d\n", chosen_col);
    }


    // --- Execute the chosen move ---
    if (chosen_col != -1) {
 800111e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001120:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001124:	d006      	beq.n	8001134 <handleAITurn+0x148>
        currentColumn = chosen_col; // Set the column for dropCoin
 8001126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001128:	b25a      	sxtb	r2, r3
 800112a:	4b0b      	ldr	r3, [pc, #44]	@ (8001158 <handleAITurn+0x16c>)
 800112c:	701a      	strb	r2, [r3, #0]
        dropCoin(); // Execute the drop
 800112e:	f7ff fd63 	bl	8000bf8 <dropCoin>
 8001132:	e004      	b.n	800113e <handleAITurn+0x152>
    } else {
        printf("AI Error: No column chosen!\n");
 8001134:	4809      	ldr	r0, [pc, #36]	@ (800115c <handleAITurn+0x170>)
 8001136:	f006 f82f 	bl	8007198 <puts>
 800113a:	e000      	b.n	800113e <handleAITurn+0x152>
        return;
 800113c:	bf00      	nop
    }
}
 800113e:	3728      	adds	r7, #40	@ 0x28
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	2000009c 	.word	0x2000009c
 8001148:	20025b2c 	.word	0x20025b2c
 800114c:	24924925 	.word	0x24924925
 8001150:	200000e8 	.word	0x200000e8
 8001154:	200000e4 	.word	0x200000e4
 8001158:	20000000 	.word	0x20000000
 800115c:	08008010 	.word	0x08008010

08001160 <canPlayerWinByMovingHere>:

bool canPlayerWinByMovingHere(SlotState_t player, int col) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	6039      	str	r1, [r7, #0]
 800116a:	71fb      	strb	r3, [r7, #7]
    if (col < 0 || col >= BOARD_COLS) {
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	db02      	blt.n	8001178 <canPlayerWinByMovingHere+0x18>
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	2b06      	cmp	r3, #6
 8001176:	dd01      	ble.n	800117c <canPlayerWinByMovingHere+0x1c>
        return false; // Invalid column
 8001178:	2300      	movs	r3, #0
 800117a:	e024      	b.n	80011c6 <canPlayerWinByMovingHere+0x66>
    }

    int row = findLowestEmptyRow(col);
 800117c:	6838      	ldr	r0, [r7, #0]
 800117e:	f7ff fd0d 	bl	8000b9c <findLowestEmptyRow>
 8001182:	60f8      	str	r0, [r7, #12]
    if (row == -1) {
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800118a:	d101      	bne.n	8001190 <canPlayerWinByMovingHere+0x30>
        return false; // Column is full, cannot move here
 800118c:	2300      	movs	r3, #0
 800118e:	e01a      	b.n	80011c6 <canPlayerWinByMovingHere+0x66>
    }

    // Simulate the move
    gameBoard[row][col] = player;
 8001190:	490f      	ldr	r1, [pc, #60]	@ (80011d0 <canPlayerWinByMovingHere+0x70>)
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	4613      	mov	r3, r2
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	1a9b      	subs	r3, r3, r2
 800119a:	18ca      	adds	r2, r1, r3
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	4413      	add	r3, r2
 80011a0:	79fa      	ldrb	r2, [r7, #7]
 80011a2:	701a      	strb	r2, [r3, #0]

    // Check for win after simulated move
    bool win = checkWin(player);
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 f814 	bl	80011d4 <checkWin>
 80011ac:	4603      	mov	r3, r0
 80011ae:	72fb      	strb	r3, [r7, #11]

    // Undo the simulated move
    gameBoard[row][col] = SLOT_EMPTY;
 80011b0:	4907      	ldr	r1, [pc, #28]	@ (80011d0 <canPlayerWinByMovingHere+0x70>)
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	4613      	mov	r3, r2
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	1a9b      	subs	r3, r3, r2
 80011ba:	18ca      	adds	r2, r1, r3
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	4413      	add	r3, r2
 80011c0:	2200      	movs	r2, #0
 80011c2:	701a      	strb	r2, [r3, #0]

    return win;
 80011c4:	7afb      	ldrb	r3, [r7, #11]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	200000a8 	.word	0x200000a8

080011d4 <checkWin>:

bool checkWin(SlotState_t player) {
 80011d4:	b480      	push	{r7}
 80011d6:	b08b      	sub	sp, #44	@ 0x2c
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
    // Check horizontal win
    for (int r = 0; r < BOARD_ROWS; r++) {
 80011de:	2300      	movs	r3, #0
 80011e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80011e2:	e040      	b.n	8001266 <checkWin+0x92>
        for (int c = 0; c <= BOARD_COLS - 4; c++) {
 80011e4:	2300      	movs	r3, #0
 80011e6:	623b      	str	r3, [r7, #32]
 80011e8:	e037      	b.n	800125a <checkWin+0x86>
            if (gameBoard[r][c] == player &&
 80011ea:	4991      	ldr	r1, [pc, #580]	@ (8001430 <checkWin+0x25c>)
 80011ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011ee:	4613      	mov	r3, r2
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	1a9b      	subs	r3, r3, r2
 80011f4:	18ca      	adds	r2, r1, r3
 80011f6:	6a3b      	ldr	r3, [r7, #32]
 80011f8:	4413      	add	r3, r2
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	79fa      	ldrb	r2, [r7, #7]
 80011fe:	429a      	cmp	r2, r3
 8001200:	d128      	bne.n	8001254 <checkWin+0x80>
                gameBoard[r][c+1] == player &&
 8001202:	6a3b      	ldr	r3, [r7, #32]
 8001204:	1c59      	adds	r1, r3, #1
 8001206:	488a      	ldr	r0, [pc, #552]	@ (8001430 <checkWin+0x25c>)
 8001208:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800120a:	4613      	mov	r3, r2
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	1a9b      	subs	r3, r3, r2
 8001210:	4403      	add	r3, r0
 8001212:	440b      	add	r3, r1
 8001214:	781b      	ldrb	r3, [r3, #0]
            if (gameBoard[r][c] == player &&
 8001216:	79fa      	ldrb	r2, [r7, #7]
 8001218:	429a      	cmp	r2, r3
 800121a:	d11b      	bne.n	8001254 <checkWin+0x80>
                gameBoard[r][c+2] == player &&
 800121c:	6a3b      	ldr	r3, [r7, #32]
 800121e:	1c99      	adds	r1, r3, #2
 8001220:	4883      	ldr	r0, [pc, #524]	@ (8001430 <checkWin+0x25c>)
 8001222:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001224:	4613      	mov	r3, r2
 8001226:	00db      	lsls	r3, r3, #3
 8001228:	1a9b      	subs	r3, r3, r2
 800122a:	4403      	add	r3, r0
 800122c:	440b      	add	r3, r1
 800122e:	781b      	ldrb	r3, [r3, #0]
                gameBoard[r][c+1] == player &&
 8001230:	79fa      	ldrb	r2, [r7, #7]
 8001232:	429a      	cmp	r2, r3
 8001234:	d10e      	bne.n	8001254 <checkWin+0x80>
                gameBoard[r][c+3] == player) {
 8001236:	6a3b      	ldr	r3, [r7, #32]
 8001238:	1cd9      	adds	r1, r3, #3
 800123a:	487d      	ldr	r0, [pc, #500]	@ (8001430 <checkWin+0x25c>)
 800123c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800123e:	4613      	mov	r3, r2
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	1a9b      	subs	r3, r3, r2
 8001244:	4403      	add	r3, r0
 8001246:	440b      	add	r3, r1
 8001248:	781b      	ldrb	r3, [r3, #0]
                gameBoard[r][c+2] == player &&
 800124a:	79fa      	ldrb	r2, [r7, #7]
 800124c:	429a      	cmp	r2, r3
 800124e:	d101      	bne.n	8001254 <checkWin+0x80>
                return true;
 8001250:	2301      	movs	r3, #1
 8001252:	e0e7      	b.n	8001424 <checkWin+0x250>
        for (int c = 0; c <= BOARD_COLS - 4; c++) {
 8001254:	6a3b      	ldr	r3, [r7, #32]
 8001256:	3301      	adds	r3, #1
 8001258:	623b      	str	r3, [r7, #32]
 800125a:	6a3b      	ldr	r3, [r7, #32]
 800125c:	2b03      	cmp	r3, #3
 800125e:	ddc4      	ble.n	80011ea <checkWin+0x16>
    for (int r = 0; r < BOARD_ROWS; r++) {
 8001260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001262:	3301      	adds	r3, #1
 8001264:	627b      	str	r3, [r7, #36]	@ 0x24
 8001266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001268:	2b05      	cmp	r3, #5
 800126a:	ddbb      	ble.n	80011e4 <checkWin+0x10>
            }
        }
    }

    // Check vertical win
    for (int r = 0; r <= BOARD_ROWS - 4; r++) {
 800126c:	2300      	movs	r3, #0
 800126e:	61fb      	str	r3, [r7, #28]
 8001270:	e040      	b.n	80012f4 <checkWin+0x120>
        for (int c = 0; c < BOARD_COLS; c++) {
 8001272:	2300      	movs	r3, #0
 8001274:	61bb      	str	r3, [r7, #24]
 8001276:	e037      	b.n	80012e8 <checkWin+0x114>
            if (gameBoard[r][c] == player &&
 8001278:	496d      	ldr	r1, [pc, #436]	@ (8001430 <checkWin+0x25c>)
 800127a:	69fa      	ldr	r2, [r7, #28]
 800127c:	4613      	mov	r3, r2
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	1a9b      	subs	r3, r3, r2
 8001282:	18ca      	adds	r2, r1, r3
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	4413      	add	r3, r2
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	79fa      	ldrb	r2, [r7, #7]
 800128c:	429a      	cmp	r2, r3
 800128e:	d128      	bne.n	80012e2 <checkWin+0x10e>
                gameBoard[r+1][c] == player &&
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	1c5a      	adds	r2, r3, #1
 8001294:	4966      	ldr	r1, [pc, #408]	@ (8001430 <checkWin+0x25c>)
 8001296:	4613      	mov	r3, r2
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	1a9b      	subs	r3, r3, r2
 800129c:	18ca      	adds	r2, r1, r3
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	4413      	add	r3, r2
 80012a2:	781b      	ldrb	r3, [r3, #0]
            if (gameBoard[r][c] == player &&
 80012a4:	79fa      	ldrb	r2, [r7, #7]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d11b      	bne.n	80012e2 <checkWin+0x10e>
                gameBoard[r+2][c] == player &&
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	1c9a      	adds	r2, r3, #2
 80012ae:	4960      	ldr	r1, [pc, #384]	@ (8001430 <checkWin+0x25c>)
 80012b0:	4613      	mov	r3, r2
 80012b2:	00db      	lsls	r3, r3, #3
 80012b4:	1a9b      	subs	r3, r3, r2
 80012b6:	18ca      	adds	r2, r1, r3
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	4413      	add	r3, r2
 80012bc:	781b      	ldrb	r3, [r3, #0]
                gameBoard[r+1][c] == player &&
 80012be:	79fa      	ldrb	r2, [r7, #7]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d10e      	bne.n	80012e2 <checkWin+0x10e>
                gameBoard[r+3][c] == player) {
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	1cda      	adds	r2, r3, #3
 80012c8:	4959      	ldr	r1, [pc, #356]	@ (8001430 <checkWin+0x25c>)
 80012ca:	4613      	mov	r3, r2
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	1a9b      	subs	r3, r3, r2
 80012d0:	18ca      	adds	r2, r1, r3
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	4413      	add	r3, r2
 80012d6:	781b      	ldrb	r3, [r3, #0]
                gameBoard[r+2][c] == player &&
 80012d8:	79fa      	ldrb	r2, [r7, #7]
 80012da:	429a      	cmp	r2, r3
 80012dc:	d101      	bne.n	80012e2 <checkWin+0x10e>
                return true;
 80012de:	2301      	movs	r3, #1
 80012e0:	e0a0      	b.n	8001424 <checkWin+0x250>
        for (int c = 0; c < BOARD_COLS; c++) {
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	3301      	adds	r3, #1
 80012e6:	61bb      	str	r3, [r7, #24]
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	2b06      	cmp	r3, #6
 80012ec:	ddc4      	ble.n	8001278 <checkWin+0xa4>
    for (int r = 0; r <= BOARD_ROWS - 4; r++) {
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	3301      	adds	r3, #1
 80012f2:	61fb      	str	r3, [r7, #28]
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	ddbb      	ble.n	8001272 <checkWin+0x9e>
            }
        }
    }

    // Check diagonal win (down-right)
    for (int r = 0; r <= BOARD_ROWS - 4; r++) {
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
 80012fe:	e043      	b.n	8001388 <checkWin+0x1b4>
        for (int c = 0; c <= BOARD_COLS - 4; c++) {
 8001300:	2300      	movs	r3, #0
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	e03a      	b.n	800137c <checkWin+0x1a8>
            if (gameBoard[r][c] == player &&
 8001306:	494a      	ldr	r1, [pc, #296]	@ (8001430 <checkWin+0x25c>)
 8001308:	697a      	ldr	r2, [r7, #20]
 800130a:	4613      	mov	r3, r2
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	1a9b      	subs	r3, r3, r2
 8001310:	18ca      	adds	r2, r1, r3
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	4413      	add	r3, r2
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	79fa      	ldrb	r2, [r7, #7]
 800131a:	429a      	cmp	r2, r3
 800131c:	d12b      	bne.n	8001376 <checkWin+0x1a2>
                gameBoard[r+1][c+1] == player &&
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	1c5a      	adds	r2, r3, #1
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	1c59      	adds	r1, r3, #1
 8001326:	4842      	ldr	r0, [pc, #264]	@ (8001430 <checkWin+0x25c>)
 8001328:	4613      	mov	r3, r2
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	1a9b      	subs	r3, r3, r2
 800132e:	4403      	add	r3, r0
 8001330:	440b      	add	r3, r1
 8001332:	781b      	ldrb	r3, [r3, #0]
            if (gameBoard[r][c] == player &&
 8001334:	79fa      	ldrb	r2, [r7, #7]
 8001336:	429a      	cmp	r2, r3
 8001338:	d11d      	bne.n	8001376 <checkWin+0x1a2>
                gameBoard[r+2][c+2] == player &&
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	1c9a      	adds	r2, r3, #2
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	1c99      	adds	r1, r3, #2
 8001342:	483b      	ldr	r0, [pc, #236]	@ (8001430 <checkWin+0x25c>)
 8001344:	4613      	mov	r3, r2
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	1a9b      	subs	r3, r3, r2
 800134a:	4403      	add	r3, r0
 800134c:	440b      	add	r3, r1
 800134e:	781b      	ldrb	r3, [r3, #0]
                gameBoard[r+1][c+1] == player &&
 8001350:	79fa      	ldrb	r2, [r7, #7]
 8001352:	429a      	cmp	r2, r3
 8001354:	d10f      	bne.n	8001376 <checkWin+0x1a2>
                gameBoard[r+3][c+3] == player) {
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	1cda      	adds	r2, r3, #3
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1cd9      	adds	r1, r3, #3
 800135e:	4834      	ldr	r0, [pc, #208]	@ (8001430 <checkWin+0x25c>)
 8001360:	4613      	mov	r3, r2
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	1a9b      	subs	r3, r3, r2
 8001366:	4403      	add	r3, r0
 8001368:	440b      	add	r3, r1
 800136a:	781b      	ldrb	r3, [r3, #0]
                gameBoard[r+2][c+2] == player &&
 800136c:	79fa      	ldrb	r2, [r7, #7]
 800136e:	429a      	cmp	r2, r3
 8001370:	d101      	bne.n	8001376 <checkWin+0x1a2>
                return true;
 8001372:	2301      	movs	r3, #1
 8001374:	e056      	b.n	8001424 <checkWin+0x250>
        for (int c = 0; c <= BOARD_COLS - 4; c++) {
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	3301      	adds	r3, #1
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	2b03      	cmp	r3, #3
 8001380:	ddc1      	ble.n	8001306 <checkWin+0x132>
    for (int r = 0; r <= BOARD_ROWS - 4; r++) {
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	3301      	adds	r3, #1
 8001386:	617b      	str	r3, [r7, #20]
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	2b02      	cmp	r3, #2
 800138c:	ddb8      	ble.n	8001300 <checkWin+0x12c>
            }
        }
    }

    // Check diagonal win (up-right)
    for (int r = 3; r < BOARD_ROWS; r++) {
 800138e:	2303      	movs	r3, #3
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	e043      	b.n	800141c <checkWin+0x248>
        for (int c = 0; c <= BOARD_COLS - 4; c++) {
 8001394:	2300      	movs	r3, #0
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	e03a      	b.n	8001410 <checkWin+0x23c>
            if (gameBoard[r][c] == player &&
 800139a:	4925      	ldr	r1, [pc, #148]	@ (8001430 <checkWin+0x25c>)
 800139c:	68fa      	ldr	r2, [r7, #12]
 800139e:	4613      	mov	r3, r2
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	1a9b      	subs	r3, r3, r2
 80013a4:	18ca      	adds	r2, r1, r3
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	4413      	add	r3, r2
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	79fa      	ldrb	r2, [r7, #7]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d12b      	bne.n	800140a <checkWin+0x236>
                gameBoard[r-1][c+1] == player &&
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	1e5a      	subs	r2, r3, #1
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	1c59      	adds	r1, r3, #1
 80013ba:	481d      	ldr	r0, [pc, #116]	@ (8001430 <checkWin+0x25c>)
 80013bc:	4613      	mov	r3, r2
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	1a9b      	subs	r3, r3, r2
 80013c2:	4403      	add	r3, r0
 80013c4:	440b      	add	r3, r1
 80013c6:	781b      	ldrb	r3, [r3, #0]
            if (gameBoard[r][c] == player &&
 80013c8:	79fa      	ldrb	r2, [r7, #7]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d11d      	bne.n	800140a <checkWin+0x236>
                gameBoard[r-2][c+2] == player &&
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	1e9a      	subs	r2, r3, #2
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	1c99      	adds	r1, r3, #2
 80013d6:	4816      	ldr	r0, [pc, #88]	@ (8001430 <checkWin+0x25c>)
 80013d8:	4613      	mov	r3, r2
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	1a9b      	subs	r3, r3, r2
 80013de:	4403      	add	r3, r0
 80013e0:	440b      	add	r3, r1
 80013e2:	781b      	ldrb	r3, [r3, #0]
                gameBoard[r-1][c+1] == player &&
 80013e4:	79fa      	ldrb	r2, [r7, #7]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d10f      	bne.n	800140a <checkWin+0x236>
                gameBoard[r-3][c+3] == player) {
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	1eda      	subs	r2, r3, #3
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	1cd9      	adds	r1, r3, #3
 80013f2:	480f      	ldr	r0, [pc, #60]	@ (8001430 <checkWin+0x25c>)
 80013f4:	4613      	mov	r3, r2
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	1a9b      	subs	r3, r3, r2
 80013fa:	4403      	add	r3, r0
 80013fc:	440b      	add	r3, r1
 80013fe:	781b      	ldrb	r3, [r3, #0]
                gameBoard[r-2][c+2] == player &&
 8001400:	79fa      	ldrb	r2, [r7, #7]
 8001402:	429a      	cmp	r2, r3
 8001404:	d101      	bne.n	800140a <checkWin+0x236>
                return true;
 8001406:	2301      	movs	r3, #1
 8001408:	e00c      	b.n	8001424 <checkWin+0x250>
        for (int c = 0; c <= BOARD_COLS - 4; c++) {
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	3301      	adds	r3, #1
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	2b03      	cmp	r3, #3
 8001414:	ddc1      	ble.n	800139a <checkWin+0x1c6>
    for (int r = 3; r < BOARD_ROWS; r++) {
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	3301      	adds	r3, #1
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2b05      	cmp	r3, #5
 8001420:	ddb8      	ble.n	8001394 <checkWin+0x1c0>
            }
        }
    }

    return false; // No win condition found
 8001422:	2300      	movs	r3, #0
}
 8001424:	4618      	mov	r0, r3
 8001426:	372c      	adds	r7, #44	@ 0x2c
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	200000a8 	.word	0x200000a8

08001434 <checkTie>:

bool checkTie(void) {
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
    // If any slot in the top row is empty, the board isn't full
    for (int c = 0; c < BOARD_COLS; c++) {
 800143a:	2300      	movs	r3, #0
 800143c:	607b      	str	r3, [r7, #4]
 800143e:	e00a      	b.n	8001456 <checkTie+0x22>
        if (gameBoard[0][c] == SLOT_EMPTY) {
 8001440:	4a0a      	ldr	r2, [pc, #40]	@ (800146c <checkTie+0x38>)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4413      	add	r3, r2
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d101      	bne.n	8001450 <checkTie+0x1c>
            return false;
 800144c:	2300      	movs	r3, #0
 800144e:	e006      	b.n	800145e <checkTie+0x2a>
    for (int c = 0; c < BOARD_COLS; c++) {
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3301      	adds	r3, #1
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2b06      	cmp	r3, #6
 800145a:	ddf1      	ble.n	8001440 <checkTie+0xc>
        }
    }
    // If we get here, the top row is full, so the board is full
    return true;
 800145c:	2301      	movs	r3, #1
}
 800145e:	4618      	mov	r0, r3
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	200000a8 	.word	0x200000a8

08001470 <Button_Init>:

#include "Button_Driver.h"



void Button_Init(void) {
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	603b      	str	r3, [r7, #0]
 800147a:	4b0f      	ldr	r3, [pc, #60]	@ (80014b8 <Button_Init+0x48>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147e:	4a0e      	ldr	r2, [pc, #56]	@ (80014b8 <Button_Init+0x48>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6313      	str	r3, [r2, #48]	@ 0x30
 8001486:	4b0c      	ldr	r3, [pc, #48]	@ (80014b8 <Button_Init+0x48>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	603b      	str	r3, [r7, #0]
 8001490:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef buttonConfig;

    // Configure the button pin as input
    buttonConfig.Pin = GPIO_PIN_0;
 8001492:	2301      	movs	r3, #1
 8001494:	607b      	str	r3, [r7, #4]
    buttonConfig.Mode = GPIO_MODE_INPUT;
 8001496:	2300      	movs	r3, #0
 8001498:	60bb      	str	r3, [r7, #8]
    buttonConfig.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
    buttonConfig.Speed = GPIO_SPEED_FREQ_LOW;
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
    buttonConfig.Alternate = GPIO_MODE_OUTPUT_OD;
 80014a2:	2311      	movs	r3, #17
 80014a4:	617b      	str	r3, [r7, #20]
    // Enable the clock for the button's GPIO port
    //GPIO_ClockControl(BUTTON_GPIO_PORT, ENABLE);

    // Initialize the GPIO pin
    //GPIO_Init(BUTTON_GPIO_PORT, &buttonConfig);
    HAL_GPIO_Init(GPIOA, &buttonConfig);
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	4619      	mov	r1, r3
 80014aa:	4804      	ldr	r0, [pc, #16]	@ (80014bc <Button_Init+0x4c>)
 80014ac:	f002 fa8e 	bl	80039cc <HAL_GPIO_Init>
}
 80014b0:	bf00      	nop
 80014b2:	3718      	adds	r7, #24
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40020000 	.word	0x40020000

080014c0 <Button_IsPressed>:

bool Button_IsPressed(void) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
    // Read the button's state using the GPIO driver
    //uint8_t pinState = GPIO_ReadInputPin(BUTTON_GPIO_PORT, BUTTON_PIN_NUMBER);
    //return (pinState == BUTTON_PRESSED);
	uint32_t pressed = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80014c6:	2101      	movs	r1, #1
 80014c8:	4807      	ldr	r0, [pc, #28]	@ (80014e8 <Button_IsPressed+0x28>)
 80014ca:	f002 fd37 	bl	8003f3c <HAL_GPIO_ReadPin>
 80014ce:	4603      	mov	r3, r0
 80014d0:	607b      	str	r3, [r7, #4]
	if (pressed) {
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <Button_IsPressed+0x1c>
		return BUTTON_PRESSED;
 80014d8:	2301      	movs	r3, #1
 80014da:	e000      	b.n	80014de <Button_IsPressed+0x1e>
	} else {
		return BUTTON_NOT_PRESSED;
 80014dc:	2300      	movs	r3, #0
	}
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40020000 	.word	0x40020000

080014ec <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08c      	sub	sp, #48	@ 0x30
 80014f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	61bb      	str	r3, [r7, #24]
 80014f6:	4b5a      	ldr	r3, [pc, #360]	@ (8001660 <LCD_GPIO_Init+0x174>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fa:	4a59      	ldr	r2, [pc, #356]	@ (8001660 <LCD_GPIO_Init+0x174>)
 80014fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001500:	6453      	str	r3, [r2, #68]	@ 0x44
 8001502:	4b57      	ldr	r3, [pc, #348]	@ (8001660 <LCD_GPIO_Init+0x174>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001506:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800150a:	61bb      	str	r3, [r7, #24]
 800150c:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	4b53      	ldr	r3, [pc, #332]	@ (8001660 <LCD_GPIO_Init+0x174>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001516:	4a52      	ldr	r2, [pc, #328]	@ (8001660 <LCD_GPIO_Init+0x174>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	6313      	str	r3, [r2, #48]	@ 0x30
 800151e:	4b50      	ldr	r3, [pc, #320]	@ (8001660 <LCD_GPIO_Init+0x174>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	613b      	str	r3, [r7, #16]
 800152e:	4b4c      	ldr	r3, [pc, #304]	@ (8001660 <LCD_GPIO_Init+0x174>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001532:	4a4b      	ldr	r2, [pc, #300]	@ (8001660 <LCD_GPIO_Init+0x174>)
 8001534:	f043 0302 	orr.w	r3, r3, #2
 8001538:	6313      	str	r3, [r2, #48]	@ 0x30
 800153a:	4b49      	ldr	r3, [pc, #292]	@ (8001660 <LCD_GPIO_Init+0x174>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	4b45      	ldr	r3, [pc, #276]	@ (8001660 <LCD_GPIO_Init+0x174>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154e:	4a44      	ldr	r2, [pc, #272]	@ (8001660 <LCD_GPIO_Init+0x174>)
 8001550:	f043 0304 	orr.w	r3, r3, #4
 8001554:	6313      	str	r3, [r2, #48]	@ 0x30
 8001556:	4b42      	ldr	r3, [pc, #264]	@ (8001660 <LCD_GPIO_Init+0x174>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155a:	f003 0304 	and.w	r3, r3, #4
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	4b3e      	ldr	r3, [pc, #248]	@ (8001660 <LCD_GPIO_Init+0x174>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156a:	4a3d      	ldr	r2, [pc, #244]	@ (8001660 <LCD_GPIO_Init+0x174>)
 800156c:	f043 0308 	orr.w	r3, r3, #8
 8001570:	6313      	str	r3, [r2, #48]	@ 0x30
 8001572:	4b3b      	ldr	r3, [pc, #236]	@ (8001660 <LCD_GPIO_Init+0x174>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001576:	f003 0308 	and.w	r3, r3, #8
 800157a:	60bb      	str	r3, [r7, #8]
 800157c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	607b      	str	r3, [r7, #4]
 8001582:	4b37      	ldr	r3, [pc, #220]	@ (8001660 <LCD_GPIO_Init+0x174>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001586:	4a36      	ldr	r2, [pc, #216]	@ (8001660 <LCD_GPIO_Init+0x174>)
 8001588:	f043 0320 	orr.w	r3, r3, #32
 800158c:	6313      	str	r3, [r2, #48]	@ 0x30
 800158e:	4b34      	ldr	r3, [pc, #208]	@ (8001660 <LCD_GPIO_Init+0x174>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	f003 0320 	and.w	r3, r3, #32
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	603b      	str	r3, [r7, #0]
 800159e:	4b30      	ldr	r3, [pc, #192]	@ (8001660 <LCD_GPIO_Init+0x174>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a2:	4a2f      	ldr	r2, [pc, #188]	@ (8001660 <LCD_GPIO_Init+0x174>)
 80015a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001660 <LCD_GPIO_Init+0x174>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015b2:	603b      	str	r3, [r7, #0]
 80015b4:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80015b6:	f641 0358 	movw	r3, #6232	@ 0x1858
 80015ba:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80015bc:	2302      	movs	r3, #2
 80015be:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80015c4:	2302      	movs	r3, #2
 80015c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80015c8:	230e      	movs	r3, #14
 80015ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80015cc:	f107 031c 	add.w	r3, r7, #28
 80015d0:	4619      	mov	r1, r3
 80015d2:	4824      	ldr	r0, [pc, #144]	@ (8001664 <LCD_GPIO_Init+0x178>)
 80015d4:	f002 f9fa 	bl	80039cc <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80015d8:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80015dc:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80015de:	f107 031c 	add.w	r3, r7, #28
 80015e2:	4619      	mov	r1, r3
 80015e4:	4820      	ldr	r0, [pc, #128]	@ (8001668 <LCD_GPIO_Init+0x17c>)
 80015e6:	f002 f9f1 	bl	80039cc <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80015ea:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80015ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80015f0:	f107 031c 	add.w	r3, r7, #28
 80015f4:	4619      	mov	r1, r3
 80015f6:	481d      	ldr	r0, [pc, #116]	@ (800166c <LCD_GPIO_Init+0x180>)
 80015f8:	f002 f9e8 	bl	80039cc <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80015fc:	2348      	movs	r3, #72	@ 0x48
 80015fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001600:	f107 031c 	add.w	r3, r7, #28
 8001604:	4619      	mov	r1, r3
 8001606:	481a      	ldr	r0, [pc, #104]	@ (8001670 <LCD_GPIO_Init+0x184>)
 8001608:	f002 f9e0 	bl	80039cc <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 800160c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001610:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8001612:	f107 031c 	add.w	r3, r7, #28
 8001616:	4619      	mov	r1, r3
 8001618:	4816      	ldr	r0, [pc, #88]	@ (8001674 <LCD_GPIO_Init+0x188>)
 800161a:	f002 f9d7 	bl	80039cc <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800161e:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001622:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001624:	f107 031c 	add.w	r3, r7, #28
 8001628:	4619      	mov	r1, r3
 800162a:	4813      	ldr	r0, [pc, #76]	@ (8001678 <LCD_GPIO_Init+0x18c>)
 800162c:	f002 f9ce 	bl	80039cc <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001630:	2303      	movs	r3, #3
 8001632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8001634:	2309      	movs	r3, #9
 8001636:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001638:	f107 031c 	add.w	r3, r7, #28
 800163c:	4619      	mov	r1, r3
 800163e:	480a      	ldr	r0, [pc, #40]	@ (8001668 <LCD_GPIO_Init+0x17c>)
 8001640:	f002 f9c4 	bl	80039cc <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001644:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001648:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800164a:	f107 031c 	add.w	r3, r7, #28
 800164e:	4619      	mov	r1, r3
 8001650:	4809      	ldr	r0, [pc, #36]	@ (8001678 <LCD_GPIO_Init+0x18c>)
 8001652:	f002 f9bb 	bl	80039cc <HAL_GPIO_Init>
}
 8001656:	bf00      	nop
 8001658:	3730      	adds	r7, #48	@ 0x30
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40023800 	.word	0x40023800
 8001664:	40020000 	.word	0x40020000
 8001668:	40020400 	.word	0x40020400
 800166c:	40020800 	.word	0x40020800
 8001670:	40020c00 	.word	0x40020c00
 8001674:	40021400 	.word	0x40021400
 8001678:	40021800 	.word	0x40021800

0800167c <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b090      	sub	sp, #64	@ 0x40
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 800168a:	23f0      	movs	r3, #240	@ 0xf0
 800168c:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8001692:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001696:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8001698:	2302      	movs	r3, #2
 800169a:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 800169c:	23ff      	movs	r3, #255	@ 0xff
 800169e:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80016a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016a8:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80016aa:	2305      	movs	r3, #5
 80016ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d101      	bne.n	80016b8 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 80016b4:	4b0f      	ldr	r3, [pc, #60]	@ (80016f4 <LTCD_Layer_Init+0x78>)
 80016b6:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 80016b8:	23f0      	movs	r3, #240	@ 0xf0
 80016ba:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 80016bc:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80016c0:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 80016d4:	79fa      	ldrb	r2, [r7, #7]
 80016d6:	f107 030c 	add.w	r3, r7, #12
 80016da:	4619      	mov	r1, r3
 80016dc:	4806      	ldr	r0, [pc, #24]	@ (80016f8 <LTCD_Layer_Init+0x7c>)
 80016de:	f003 fdcf 	bl	8005280 <HAL_LTDC_ConfigLayer>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 80016e8:	f000 f9f2 	bl	8001ad0 <LCD_Error_Handler>
	}
}
 80016ec:	bf00      	nop
 80016ee:	3740      	adds	r7, #64	@ 0x40
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	200001d0 	.word	0x200001d0
 80016f8:	200000f4 	.word	0x200000f4

080016fc <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8001700:	4b2a      	ldr	r3, [pc, #168]	@ (80017ac <LTCD__Init+0xb0>)
 8001702:	4a2b      	ldr	r2, [pc, #172]	@ (80017b0 <LTCD__Init+0xb4>)
 8001704:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8001706:	4b29      	ldr	r3, [pc, #164]	@ (80017ac <LTCD__Init+0xb0>)
 8001708:	2209      	movs	r2, #9
 800170a:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 800170c:	4b27      	ldr	r3, [pc, #156]	@ (80017ac <LTCD__Init+0xb0>)
 800170e:	2201      	movs	r2, #1
 8001710:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8001712:	4b26      	ldr	r3, [pc, #152]	@ (80017ac <LTCD__Init+0xb0>)
 8001714:	221d      	movs	r2, #29
 8001716:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8001718:	4b24      	ldr	r3, [pc, #144]	@ (80017ac <LTCD__Init+0xb0>)
 800171a:	2203      	movs	r2, #3
 800171c:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 800171e:	4b23      	ldr	r3, [pc, #140]	@ (80017ac <LTCD__Init+0xb0>)
 8001720:	f240 120d 	movw	r2, #269	@ 0x10d
 8001724:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8001726:	4b21      	ldr	r3, [pc, #132]	@ (80017ac <LTCD__Init+0xb0>)
 8001728:	f240 1243 	movw	r2, #323	@ 0x143
 800172c:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 800172e:	4b1f      	ldr	r3, [pc, #124]	@ (80017ac <LTCD__Init+0xb0>)
 8001730:	f240 1217 	movw	r2, #279	@ 0x117
 8001734:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8001736:	4b1d      	ldr	r3, [pc, #116]	@ (80017ac <LTCD__Init+0xb0>)
 8001738:	f240 1247 	movw	r2, #327	@ 0x147
 800173c:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 800173e:	4b1b      	ldr	r3, [pc, #108]	@ (80017ac <LTCD__Init+0xb0>)
 8001740:	2200      	movs	r2, #0
 8001742:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8001746:	4b19      	ldr	r3, [pc, #100]	@ (80017ac <LTCD__Init+0xb0>)
 8001748:	2200      	movs	r2, #0
 800174a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 800174e:	4b17      	ldr	r3, [pc, #92]	@ (80017ac <LTCD__Init+0xb0>)
 8001750:	2200      	movs	r2, #0
 8001752:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001756:	4b17      	ldr	r3, [pc, #92]	@ (80017b4 <LTCD__Init+0xb8>)
 8001758:	2208      	movs	r2, #8
 800175a:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800175c:	4b15      	ldr	r3, [pc, #84]	@ (80017b4 <LTCD__Init+0xb8>)
 800175e:	22c0      	movs	r2, #192	@ 0xc0
 8001760:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001762:	4b14      	ldr	r3, [pc, #80]	@ (80017b4 <LTCD__Init+0xb8>)
 8001764:	2204      	movs	r2, #4
 8001766:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001768:	4b12      	ldr	r3, [pc, #72]	@ (80017b4 <LTCD__Init+0xb8>)
 800176a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800176e:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001770:	4810      	ldr	r0, [pc, #64]	@ (80017b4 <LTCD__Init+0xb8>)
 8001772:	f004 fbdf 	bl	8005f34 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001776:	4b0d      	ldr	r3, [pc, #52]	@ (80017ac <LTCD__Init+0xb0>)
 8001778:	2200      	movs	r2, #0
 800177a:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800177c:	4b0b      	ldr	r3, [pc, #44]	@ (80017ac <LTCD__Init+0xb0>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001782:	4b0a      	ldr	r3, [pc, #40]	@ (80017ac <LTCD__Init+0xb0>)
 8001784:	2200      	movs	r2, #0
 8001786:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001788:	4b08      	ldr	r3, [pc, #32]	@ (80017ac <LTCD__Init+0xb0>)
 800178a:	2200      	movs	r2, #0
 800178c:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 800178e:	f7ff fead 	bl	80014ec <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001792:	4806      	ldr	r0, [pc, #24]	@ (80017ac <LTCD__Init+0xb0>)
 8001794:	f003 fca4 	bl	80050e0 <HAL_LTDC_Init>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 800179e:	f000 f997 	bl	8001ad0 <LCD_Error_Handler>
	 }

	ili9341_Init();
 80017a2:	f000 f9e5 	bl	8001b70 <ili9341_Init>
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	200000f4 	.word	0x200000f4
 80017b0:	40016800 	.word	0x40016800
 80017b4:	2000019c 	.word	0x2000019c

080017b8 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	80fb      	strh	r3, [r7, #6]
 80017c2:	460b      	mov	r3, r1
 80017c4:	80bb      	strh	r3, [r7, #4]
 80017c6:	4613      	mov	r3, r2
 80017c8:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 80017ca:	88ba      	ldrh	r2, [r7, #4]
 80017cc:	4613      	mov	r3, r2
 80017ce:	011b      	lsls	r3, r3, #4
 80017d0:	1a9b      	subs	r3, r3, r2
 80017d2:	011b      	lsls	r3, r3, #4
 80017d4:	461a      	mov	r2, r3
 80017d6:	88fb      	ldrh	r3, [r7, #6]
 80017d8:	4413      	add	r3, r2
 80017da:	4905      	ldr	r1, [pc, #20]	@ (80017f0 <LCD_Draw_Pixel+0x38>)
 80017dc:	887a      	ldrh	r2, [r7, #2]
 80017de:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	200001d0 	.word	0x200001d0

080017f4 <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 80017f4:	b590      	push	{r4, r7, lr}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4604      	mov	r4, r0
 80017fc:	4608      	mov	r0, r1
 80017fe:	4611      	mov	r1, r2
 8001800:	461a      	mov	r2, r3
 8001802:	4623      	mov	r3, r4
 8001804:	80fb      	strh	r3, [r7, #6]
 8001806:	4603      	mov	r3, r0
 8001808:	80bb      	strh	r3, [r7, #4]
 800180a:	460b      	mov	r3, r1
 800180c:	807b      	strh	r3, [r7, #2]
 800180e:	4613      	mov	r3, r2
 8001810:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 8001812:	887b      	ldrh	r3, [r7, #2]
 8001814:	425b      	negs	r3, r3
 8001816:	b29b      	uxth	r3, r3
 8001818:	81fb      	strh	r3, [r7, #14]
 800181a:	e034      	b.n	8001886 <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 800181c:	887b      	ldrh	r3, [r7, #2]
 800181e:	425b      	negs	r3, r3
 8001820:	b29b      	uxth	r3, r3
 8001822:	81bb      	strh	r3, [r7, #12]
 8001824:	e024      	b.n	8001870 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 8001826:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800182a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800182e:	fb03 f202 	mul.w	r2, r3, r2
 8001832:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001836:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800183a:	fb01 f303 	mul.w	r3, r1, r3
 800183e:	441a      	add	r2, r3
 8001840:	887b      	ldrh	r3, [r7, #2]
 8001842:	8879      	ldrh	r1, [r7, #2]
 8001844:	fb01 f303 	mul.w	r3, r1, r3
 8001848:	429a      	cmp	r2, r3
 800184a:	dc0b      	bgt.n	8001864 <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 800184c:	89ba      	ldrh	r2, [r7, #12]
 800184e:	88fb      	ldrh	r3, [r7, #6]
 8001850:	4413      	add	r3, r2
 8001852:	b298      	uxth	r0, r3
 8001854:	89fa      	ldrh	r2, [r7, #14]
 8001856:	88bb      	ldrh	r3, [r7, #4]
 8001858:	4413      	add	r3, r2
 800185a:	b29b      	uxth	r3, r3
 800185c:	883a      	ldrh	r2, [r7, #0]
 800185e:	4619      	mov	r1, r3
 8001860:	f7ff ffaa 	bl	80017b8 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8001864:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001868:	b29b      	uxth	r3, r3
 800186a:	3301      	adds	r3, #1
 800186c:	b29b      	uxth	r3, r3
 800186e:	81bb      	strh	r3, [r7, #12]
 8001870:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001874:	887b      	ldrh	r3, [r7, #2]
 8001876:	429a      	cmp	r2, r3
 8001878:	ddd5      	ble.n	8001826 <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 800187a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800187e:	b29b      	uxth	r3, r3
 8001880:	3301      	adds	r3, #1
 8001882:	b29b      	uxth	r3, r3
 8001884:	81fb      	strh	r3, [r7, #14]
 8001886:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800188a:	887b      	ldrh	r3, [r7, #2]
 800188c:	429a      	cmp	r2, r3
 800188e:	ddc5      	ble.n	800181c <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 8001890:	bf00      	nop
 8001892:	bf00      	nop
 8001894:	3714      	adds	r7, #20
 8001896:	46bd      	mov	sp, r7
 8001898:	bd90      	pop	{r4, r7, pc}

0800189a <LCD_Fill_Rect>:

void LCD_Fill_Rect(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color) {
 800189a:	b590      	push	{r4, r7, lr}
 800189c:	b085      	sub	sp, #20
 800189e:	af00      	add	r7, sp, #0
 80018a0:	4604      	mov	r4, r0
 80018a2:	4608      	mov	r0, r1
 80018a4:	4611      	mov	r1, r2
 80018a6:	461a      	mov	r2, r3
 80018a8:	4623      	mov	r3, r4
 80018aa:	80fb      	strh	r3, [r7, #6]
 80018ac:	4603      	mov	r3, r0
 80018ae:	80bb      	strh	r3, [r7, #4]
 80018b0:	460b      	mov	r3, r1
 80018b2:	807b      	strh	r3, [r7, #2]
 80018b4:	4613      	mov	r3, r2
 80018b6:	803b      	strh	r3, [r7, #0]
    // Basic bounds check (optional but good practice)
    if (x >= LCD_PIXEL_WIDTH || y >= LCD_PIXEL_HEIGHT) return;
 80018b8:	88fb      	ldrh	r3, [r7, #6]
 80018ba:	2bef      	cmp	r3, #239	@ 0xef
 80018bc:	d832      	bhi.n	8001924 <LCD_Fill_Rect+0x8a>
 80018be:	88bb      	ldrh	r3, [r7, #4]
 80018c0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80018c4:	d22e      	bcs.n	8001924 <LCD_Fill_Rect+0x8a>
    uint16_t endX = x + width;
 80018c6:	88fa      	ldrh	r2, [r7, #6]
 80018c8:	887b      	ldrh	r3, [r7, #2]
 80018ca:	4413      	add	r3, r2
 80018cc:	81fb      	strh	r3, [r7, #14]
    uint16_t endY = y + height;
 80018ce:	88ba      	ldrh	r2, [r7, #4]
 80018d0:	883b      	ldrh	r3, [r7, #0]
 80018d2:	4413      	add	r3, r2
 80018d4:	81bb      	strh	r3, [r7, #12]
    if (endX > LCD_PIXEL_WIDTH) endX = LCD_PIXEL_WIDTH;
 80018d6:	89fb      	ldrh	r3, [r7, #14]
 80018d8:	2bf0      	cmp	r3, #240	@ 0xf0
 80018da:	d901      	bls.n	80018e0 <LCD_Fill_Rect+0x46>
 80018dc:	23f0      	movs	r3, #240	@ 0xf0
 80018de:	81fb      	strh	r3, [r7, #14]
    if (endY > LCD_PIXEL_HEIGHT) endY = LCD_PIXEL_HEIGHT;
 80018e0:	89bb      	ldrh	r3, [r7, #12]
 80018e2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80018e6:	d902      	bls.n	80018ee <LCD_Fill_Rect+0x54>
 80018e8:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80018ec:	81bb      	strh	r3, [r7, #12]

    for (uint16_t row = y; row < endY; row++) {
 80018ee:	88bb      	ldrh	r3, [r7, #4]
 80018f0:	817b      	strh	r3, [r7, #10]
 80018f2:	e012      	b.n	800191a <LCD_Fill_Rect+0x80>
        for (uint16_t col = x; col < endX; col++) {
 80018f4:	88fb      	ldrh	r3, [r7, #6]
 80018f6:	813b      	strh	r3, [r7, #8]
 80018f8:	e008      	b.n	800190c <LCD_Fill_Rect+0x72>
            LCD_Draw_Pixel(col, row, color);
 80018fa:	8c3a      	ldrh	r2, [r7, #32]
 80018fc:	8979      	ldrh	r1, [r7, #10]
 80018fe:	893b      	ldrh	r3, [r7, #8]
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff ff59 	bl	80017b8 <LCD_Draw_Pixel>
        for (uint16_t col = x; col < endX; col++) {
 8001906:	893b      	ldrh	r3, [r7, #8]
 8001908:	3301      	adds	r3, #1
 800190a:	813b      	strh	r3, [r7, #8]
 800190c:	893a      	ldrh	r2, [r7, #8]
 800190e:	89fb      	ldrh	r3, [r7, #14]
 8001910:	429a      	cmp	r2, r3
 8001912:	d3f2      	bcc.n	80018fa <LCD_Fill_Rect+0x60>
    for (uint16_t row = y; row < endY; row++) {
 8001914:	897b      	ldrh	r3, [r7, #10]
 8001916:	3301      	adds	r3, #1
 8001918:	817b      	strh	r3, [r7, #10]
 800191a:	897a      	ldrh	r2, [r7, #10]
 800191c:	89bb      	ldrh	r3, [r7, #12]
 800191e:	429a      	cmp	r2, r3
 8001920:	d3e8      	bcc.n	80018f4 <LCD_Fill_Rect+0x5a>
 8001922:	e000      	b.n	8001926 <LCD_Fill_Rect+0x8c>
    if (x >= LCD_PIXEL_WIDTH || y >= LCD_PIXEL_HEIGHT) return;
 8001924:	bf00      	nop
        }
    }
}
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	bd90      	pop	{r4, r7, pc}

0800192c <LCD_Clear>:
	  LCD_Draw_Pixel(x, i+y, color);
  }
}

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	460a      	mov	r2, r1
 8001936:	71fb      	strb	r3, [r7, #7]
 8001938:	4613      	mov	r3, r2
 800193a:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d10e      	bne.n	8001960 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8001942:	2300      	movs	r3, #0
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	e007      	b.n	8001958 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8001948:	4908      	ldr	r1, [pc, #32]	@ (800196c <LCD_Clear+0x40>)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	88ba      	ldrh	r2, [r7, #4]
 800194e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	3301      	adds	r3, #1
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 800195e:	d3f3      	bcc.n	8001948 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8001960:	bf00      	nop
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	200001d0 	.word	0x200001d0

08001970 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 800197a:	4a04      	ldr	r2, [pc, #16]	@ (800198c <LCD_SetTextColor+0x1c>)
 800197c:	88fb      	ldrh	r3, [r7, #6]
 800197e:	8013      	strh	r3, [r2, #0]
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	20000002 	.word	0x20000002

08001990 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8001998:	4a04      	ldr	r2, [pc, #16]	@ (80019ac <LCD_SetFont+0x1c>)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6013      	str	r3, [r2, #0]
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	200001cc 	.word	0x200001cc

080019b0 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	603a      	str	r2, [r7, #0]
 80019ba:	80fb      	strh	r3, [r7, #6]
 80019bc:	460b      	mov	r3, r1
 80019be:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	2300      	movs	r3, #0
 80019c6:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 80019c8:	2300      	movs	r3, #0
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	e04c      	b.n	8001a68 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 80019ce:	2300      	movs	r3, #0
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	e03f      	b.n	8001a54 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	4413      	add	r3, r2
 80019dc:	881b      	ldrh	r3, [r3, #0]
 80019de:	4619      	mov	r1, r3
 80019e0:	4b27      	ldr	r3, [pc, #156]	@ (8001a80 <LCD_Draw_Char+0xd0>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	889b      	ldrh	r3, [r3, #4]
 80019e6:	4a27      	ldr	r2, [pc, #156]	@ (8001a84 <LCD_Draw_Char+0xd4>)
 80019e8:	fba2 2303 	umull	r2, r3, r2, r3
 80019ec:	08db      	lsrs	r3, r3, #3
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	2280      	movs	r2, #128	@ 0x80
 80019f4:	409a      	lsls	r2, r3
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	fa42 f303 	asr.w	r3, r2, r3
 80019fc:	400b      	ands	r3, r1
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d104      	bne.n	8001a0c <LCD_Draw_Char+0x5c>
 8001a02:	4b1f      	ldr	r3, [pc, #124]	@ (8001a80 <LCD_Draw_Char+0xd0>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	889b      	ldrh	r3, [r3, #4]
 8001a08:	2b0c      	cmp	r3, #12
 8001a0a:	d920      	bls.n	8001a4e <LCD_Draw_Char+0x9e>
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	4413      	add	r3, r2
 8001a14:	881b      	ldrh	r3, [r3, #0]
 8001a16:	461a      	mov	r2, r3
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	fa42 f303 	asr.w	r3, r2, r3
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d104      	bne.n	8001a30 <LCD_Draw_Char+0x80>
 8001a26:	4b16      	ldr	r3, [pc, #88]	@ (8001a80 <LCD_Draw_Char+0xd0>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	889b      	ldrh	r3, [r3, #4]
 8001a2c:	2b0c      	cmp	r3, #12
 8001a2e:	d80e      	bhi.n	8001a4e <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	88fb      	ldrh	r3, [r7, #6]
 8001a36:	4413      	add	r3, r2
 8001a38:	b298      	uxth	r0, r3
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	88bb      	ldrh	r3, [r7, #4]
 8001a40:	4413      	add	r3, r2
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	4a10      	ldr	r2, [pc, #64]	@ (8001a88 <LCD_Draw_Char+0xd8>)
 8001a46:	8812      	ldrh	r2, [r2, #0]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	f7ff feb5 	bl	80017b8 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	3301      	adds	r3, #1
 8001a52:	60bb      	str	r3, [r7, #8]
 8001a54:	4b0a      	ldr	r3, [pc, #40]	@ (8001a80 <LCD_Draw_Char+0xd0>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	889b      	ldrh	r3, [r3, #4]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d3b8      	bcc.n	80019d4 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	3301      	adds	r3, #1
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	4b05      	ldr	r3, [pc, #20]	@ (8001a80 <LCD_Draw_Char+0xd0>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	88db      	ldrh	r3, [r3, #6]
 8001a6e:	461a      	mov	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d3ab      	bcc.n	80019ce <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8001a76:	bf00      	nop
 8001a78:	bf00      	nop
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	200001cc 	.word	0x200001cc
 8001a84:	aaaaaaab 	.word	0xaaaaaaab
 8001a88:	20000002 	.word	0x20000002

08001a8c <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	80fb      	strh	r3, [r7, #6]
 8001a96:	460b      	mov	r3, r1
 8001a98:	80bb      	strh	r3, [r7, #4]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8001a9e:	78fb      	ldrb	r3, [r7, #3]
 8001aa0:	3b20      	subs	r3, #32
 8001aa2:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8001aa4:	4b09      	ldr	r3, [pc, #36]	@ (8001acc <LCD_DisplayChar+0x40>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	78fb      	ldrb	r3, [r7, #3]
 8001aac:	4907      	ldr	r1, [pc, #28]	@ (8001acc <LCD_DisplayChar+0x40>)
 8001aae:	6809      	ldr	r1, [r1, #0]
 8001ab0:	88c9      	ldrh	r1, [r1, #6]
 8001ab2:	fb01 f303 	mul.w	r3, r1, r3
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	441a      	add	r2, r3
 8001aba:	88b9      	ldrh	r1, [r7, #4]
 8001abc:	88fb      	ldrh	r3, [r7, #6]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff ff76 	bl	80019b0 <LCD_Draw_Char>
}
 8001ac4:	bf00      	nop
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	200001cc 	.word	0x200001cc

08001ad0 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ad4:	b672      	cpsid	i
}
 8001ad6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ad8:	bf00      	nop
 8001ada:	e7fd      	b.n	8001ad8 <LCD_Error_Handler+0x8>

08001adc <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8001ae0:	f001 f9c8 	bl	8002e74 <STMPE811_Init>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d001      	beq.n	8001aee <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8001aea:	bf00      	nop
 8001aec:	e7fd      	b.n	8001aea <InitializeLCDTouch+0xe>
  }
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f001 fa72 	bl	8002fe4 <STMPE811_ReadTouch>
 8001b00:	4603      	mov	r3, r0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
	...

08001b0c <getScheduledEvents>:

#include "Scheduler.h"

static uint32_t scheduledEvents = 0;

uint32_t getScheduledEvents() {
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
	return scheduledEvents;
 8001b10:	4b03      	ldr	r3, [pc, #12]	@ (8001b20 <getScheduledEvents+0x14>)
 8001b12:	681b      	ldr	r3, [r3, #0]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	200259d0 	.word	0x200259d0

08001b24 <addSchedulerEvent>:

void addSchedulerEvent(uint32_t event) {
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
	scheduledEvents |= event;
 8001b2c:	4b05      	ldr	r3, [pc, #20]	@ (8001b44 <addSchedulerEvent+0x20>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	4a03      	ldr	r2, [pc, #12]	@ (8001b44 <addSchedulerEvent+0x20>)
 8001b36:	6013      	str	r3, [r2, #0]
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	200259d0 	.word	0x200259d0

08001b48 <removeSchedulerEvent>:

void removeSchedulerEvent(uint32_t event) {
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
	scheduledEvents &= ~event;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	43da      	mvns	r2, r3
 8001b54:	4b05      	ldr	r3, [pc, #20]	@ (8001b6c <removeSchedulerEvent+0x24>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	4a04      	ldr	r2, [pc, #16]	@ (8001b6c <removeSchedulerEvent+0x24>)
 8001b5c:	6013      	str	r3, [r2, #0]
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	200259d0 	.word	0x200259d0

08001b70 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001b74:	f000 f9fe 	bl	8001f74 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8001b78:	20ca      	movs	r0, #202	@ 0xca
 8001b7a:	f000 f943 	bl	8001e04 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8001b7e:	20c3      	movs	r0, #195	@ 0xc3
 8001b80:	f000 f94d 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8001b84:	2008      	movs	r0, #8
 8001b86:	f000 f94a 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8001b8a:	2050      	movs	r0, #80	@ 0x50
 8001b8c:	f000 f947 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001b90:	20cf      	movs	r0, #207	@ 0xcf
 8001b92:	f000 f937 	bl	8001e04 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8001b96:	2000      	movs	r0, #0
 8001b98:	f000 f941 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8001b9c:	20c1      	movs	r0, #193	@ 0xc1
 8001b9e:	f000 f93e 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8001ba2:	2030      	movs	r0, #48	@ 0x30
 8001ba4:	f000 f93b 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8001ba8:	20ed      	movs	r0, #237	@ 0xed
 8001baa:	f000 f92b 	bl	8001e04 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001bae:	2064      	movs	r0, #100	@ 0x64
 8001bb0:	f000 f935 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8001bb4:	2003      	movs	r0, #3
 8001bb6:	f000 f932 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8001bba:	2012      	movs	r0, #18
 8001bbc:	f000 f92f 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001bc0:	2081      	movs	r0, #129	@ 0x81
 8001bc2:	f000 f92c 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8001bc6:	20e8      	movs	r0, #232	@ 0xe8
 8001bc8:	f000 f91c 	bl	8001e04 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001bcc:	2085      	movs	r0, #133	@ 0x85
 8001bce:	f000 f926 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	f000 f923 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001bd8:	2078      	movs	r0, #120	@ 0x78
 8001bda:	f000 f920 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001bde:	20cb      	movs	r0, #203	@ 0xcb
 8001be0:	f000 f910 	bl	8001e04 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8001be4:	2039      	movs	r0, #57	@ 0x39
 8001be6:	f000 f91a 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8001bea:	202c      	movs	r0, #44	@ 0x2c
 8001bec:	f000 f917 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	f000 f914 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8001bf6:	2034      	movs	r0, #52	@ 0x34
 8001bf8:	f000 f911 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001bfc:	2002      	movs	r0, #2
 8001bfe:	f000 f90e 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8001c02:	20f7      	movs	r0, #247	@ 0xf7
 8001c04:	f000 f8fe 	bl	8001e04 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8001c08:	2020      	movs	r0, #32
 8001c0a:	f000 f908 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8001c0e:	20ea      	movs	r0, #234	@ 0xea
 8001c10:	f000 f8f8 	bl	8001e04 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001c14:	2000      	movs	r0, #0
 8001c16:	f000 f902 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001c1a:	2000      	movs	r0, #0
 8001c1c:	f000 f8ff 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8001c20:	20b1      	movs	r0, #177	@ 0xb1
 8001c22:	f000 f8ef 	bl	8001e04 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001c26:	2000      	movs	r0, #0
 8001c28:	f000 f8f9 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001c2c:	201b      	movs	r0, #27
 8001c2e:	f000 f8f6 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001c32:	20b6      	movs	r0, #182	@ 0xb6
 8001c34:	f000 f8e6 	bl	8001e04 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001c38:	200a      	movs	r0, #10
 8001c3a:	f000 f8f0 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8001c3e:	20a2      	movs	r0, #162	@ 0xa2
 8001c40:	f000 f8ed 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8001c44:	20c0      	movs	r0, #192	@ 0xc0
 8001c46:	f000 f8dd 	bl	8001e04 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001c4a:	2010      	movs	r0, #16
 8001c4c:	f000 f8e7 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8001c50:	20c1      	movs	r0, #193	@ 0xc1
 8001c52:	f000 f8d7 	bl	8001e04 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001c56:	2010      	movs	r0, #16
 8001c58:	f000 f8e1 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001c5c:	20c5      	movs	r0, #197	@ 0xc5
 8001c5e:	f000 f8d1 	bl	8001e04 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8001c62:	2045      	movs	r0, #69	@ 0x45
 8001c64:	f000 f8db 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001c68:	2015      	movs	r0, #21
 8001c6a:	f000 f8d8 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8001c6e:	20c7      	movs	r0, #199	@ 0xc7
 8001c70:	f000 f8c8 	bl	8001e04 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8001c74:	2090      	movs	r0, #144	@ 0x90
 8001c76:	f000 f8d2 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8001c7a:	2036      	movs	r0, #54	@ 0x36
 8001c7c:	f000 f8c2 	bl	8001e04 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8001c80:	20c8      	movs	r0, #200	@ 0xc8
 8001c82:	f000 f8cc 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8001c86:	20f2      	movs	r0, #242	@ 0xf2
 8001c88:	f000 f8bc 	bl	8001e04 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	f000 f8c6 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8001c92:	20b0      	movs	r0, #176	@ 0xb0
 8001c94:	f000 f8b6 	bl	8001e04 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8001c98:	20c2      	movs	r0, #194	@ 0xc2
 8001c9a:	f000 f8c0 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001c9e:	20b6      	movs	r0, #182	@ 0xb6
 8001ca0:	f000 f8b0 	bl	8001e04 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001ca4:	200a      	movs	r0, #10
 8001ca6:	f000 f8ba 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8001caa:	20a7      	movs	r0, #167	@ 0xa7
 8001cac:	f000 f8b7 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8001cb0:	2027      	movs	r0, #39	@ 0x27
 8001cb2:	f000 f8b4 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001cb6:	2004      	movs	r0, #4
 8001cb8:	f000 f8b1 	bl	8001e1e <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8001cbc:	202a      	movs	r0, #42	@ 0x2a
 8001cbe:	f000 f8a1 	bl	8001e04 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	f000 f8ab 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001cc8:	2000      	movs	r0, #0
 8001cca:	f000 f8a8 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001cce:	2000      	movs	r0, #0
 8001cd0:	f000 f8a5 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8001cd4:	20ef      	movs	r0, #239	@ 0xef
 8001cd6:	f000 f8a2 	bl	8001e1e <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8001cda:	202b      	movs	r0, #43	@ 0x2b
 8001cdc:	f000 f892 	bl	8001e04 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001ce0:	2000      	movs	r0, #0
 8001ce2:	f000 f89c 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	f000 f899 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8001cec:	2001      	movs	r0, #1
 8001cee:	f000 f896 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8001cf2:	203f      	movs	r0, #63	@ 0x3f
 8001cf4:	f000 f893 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8001cf8:	20f6      	movs	r0, #246	@ 0xf6
 8001cfa:	f000 f883 	bl	8001e04 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001cfe:	2001      	movs	r0, #1
 8001d00:	f000 f88d 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001d04:	2000      	movs	r0, #0
 8001d06:	f000 f88a 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8001d0a:	2006      	movs	r0, #6
 8001d0c:	f000 f887 	bl	8001e1e <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8001d10:	202c      	movs	r0, #44	@ 0x2c
 8001d12:	f000 f877 	bl	8001e04 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001d16:	20c8      	movs	r0, #200	@ 0xc8
 8001d18:	f000 f9e8 	bl	80020ec <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8001d1c:	2026      	movs	r0, #38	@ 0x26
 8001d1e:	f000 f871 	bl	8001e04 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001d22:	2001      	movs	r0, #1
 8001d24:	f000 f87b 	bl	8001e1e <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8001d28:	20e0      	movs	r0, #224	@ 0xe0
 8001d2a:	f000 f86b 	bl	8001e04 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8001d2e:	200f      	movs	r0, #15
 8001d30:	f000 f875 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8001d34:	2029      	movs	r0, #41	@ 0x29
 8001d36:	f000 f872 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8001d3a:	2024      	movs	r0, #36	@ 0x24
 8001d3c:	f000 f86f 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001d40:	200c      	movs	r0, #12
 8001d42:	f000 f86c 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8001d46:	200e      	movs	r0, #14
 8001d48:	f000 f869 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001d4c:	2009      	movs	r0, #9
 8001d4e:	f000 f866 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8001d52:	204e      	movs	r0, #78	@ 0x4e
 8001d54:	f000 f863 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001d58:	2078      	movs	r0, #120	@ 0x78
 8001d5a:	f000 f860 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8001d5e:	203c      	movs	r0, #60	@ 0x3c
 8001d60:	f000 f85d 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001d64:	2009      	movs	r0, #9
 8001d66:	f000 f85a 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8001d6a:	2013      	movs	r0, #19
 8001d6c:	f000 f857 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001d70:	2005      	movs	r0, #5
 8001d72:	f000 f854 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8001d76:	2017      	movs	r0, #23
 8001d78:	f000 f851 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001d7c:	2011      	movs	r0, #17
 8001d7e:	f000 f84e 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001d82:	2000      	movs	r0, #0
 8001d84:	f000 f84b 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8001d88:	20e1      	movs	r0, #225	@ 0xe1
 8001d8a:	f000 f83b 	bl	8001e04 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001d8e:	2000      	movs	r0, #0
 8001d90:	f000 f845 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8001d94:	2016      	movs	r0, #22
 8001d96:	f000 f842 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001d9a:	201b      	movs	r0, #27
 8001d9c:	f000 f83f 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001da0:	2004      	movs	r0, #4
 8001da2:	f000 f83c 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001da6:	2011      	movs	r0, #17
 8001da8:	f000 f839 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8001dac:	2007      	movs	r0, #7
 8001dae:	f000 f836 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8001db2:	2031      	movs	r0, #49	@ 0x31
 8001db4:	f000 f833 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8001db8:	2033      	movs	r0, #51	@ 0x33
 8001dba:	f000 f830 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8001dbe:	2042      	movs	r0, #66	@ 0x42
 8001dc0:	f000 f82d 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001dc4:	2005      	movs	r0, #5
 8001dc6:	f000 f82a 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001dca:	200c      	movs	r0, #12
 8001dcc:	f000 f827 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8001dd0:	200a      	movs	r0, #10
 8001dd2:	f000 f824 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8001dd6:	2028      	movs	r0, #40	@ 0x28
 8001dd8:	f000 f821 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8001ddc:	202f      	movs	r0, #47	@ 0x2f
 8001dde:	f000 f81e 	bl	8001e1e <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8001de2:	200f      	movs	r0, #15
 8001de4:	f000 f81b 	bl	8001e1e <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8001de8:	2011      	movs	r0, #17
 8001dea:	f000 f80b 	bl	8001e04 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001dee:	20c8      	movs	r0, #200	@ 0xc8
 8001df0:	f000 f97c 	bl	80020ec <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8001df4:	2029      	movs	r0, #41	@ 0x29
 8001df6:	f000 f805 	bl	8001e04 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8001dfa:	202c      	movs	r0, #44	@ 0x2c
 8001dfc:	f000 f802 	bl	8001e04 <ili9341_Write_Reg>
}
 8001e00:	bf00      	nop
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f000 f949 	bl	80020a8 <LCD_IO_WriteReg>
}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	4603      	mov	r3, r0
 8001e26:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001e28:	88fb      	ldrh	r3, [r7, #6]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f000 f91a 	bl	8002064 <LCD_IO_WriteData>
}
 8001e30:	bf00      	nop
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001e3c:	4819      	ldr	r0, [pc, #100]	@ (8001ea4 <SPI_Init+0x6c>)
 8001e3e:	f004 fcae 	bl	800679e <HAL_SPI_GetState>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d12b      	bne.n	8001ea0 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8001e48:	4b16      	ldr	r3, [pc, #88]	@ (8001ea4 <SPI_Init+0x6c>)
 8001e4a:	4a17      	ldr	r2, [pc, #92]	@ (8001ea8 <SPI_Init+0x70>)
 8001e4c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001e4e:	4b15      	ldr	r3, [pc, #84]	@ (8001ea4 <SPI_Init+0x6c>)
 8001e50:	2218      	movs	r2, #24
 8001e52:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001e54:	4b13      	ldr	r3, [pc, #76]	@ (8001ea4 <SPI_Init+0x6c>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001e5a:	4b12      	ldr	r3, [pc, #72]	@ (8001ea4 <SPI_Init+0x6c>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001e60:	4b10      	ldr	r3, [pc, #64]	@ (8001ea4 <SPI_Init+0x6c>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001e66:	4b0f      	ldr	r3, [pc, #60]	@ (8001ea4 <SPI_Init+0x6c>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001e6c:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea4 <SPI_Init+0x6c>)
 8001e6e:	2207      	movs	r2, #7
 8001e70:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001e72:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea4 <SPI_Init+0x6c>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001e78:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea4 <SPI_Init+0x6c>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001e7e:	4b09      	ldr	r3, [pc, #36]	@ (8001ea4 <SPI_Init+0x6c>)
 8001e80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e84:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001e86:	4b07      	ldr	r3, [pc, #28]	@ (8001ea4 <SPI_Init+0x6c>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001e8c:	4b05      	ldr	r3, [pc, #20]	@ (8001ea4 <SPI_Init+0x6c>)
 8001e8e:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001e92:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8001e94:	4803      	ldr	r0, [pc, #12]	@ (8001ea4 <SPI_Init+0x6c>)
 8001e96:	f000 f833 	bl	8001f00 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001e9a:	4802      	ldr	r0, [pc, #8]	@ (8001ea4 <SPI_Init+0x6c>)
 8001e9c:	f004 fa8a 	bl	80063b4 <HAL_SPI_Init>
  }
}
 8001ea0:	bf00      	nop
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	200259d4 	.word	0x200259d4
 8001ea8:	40015000 	.word	0x40015000

08001eac <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8001eba:	4b09      	ldr	r3, [pc, #36]	@ (8001ee0 <SPI_Write+0x34>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	1db9      	adds	r1, r7, #6
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	4808      	ldr	r0, [pc, #32]	@ (8001ee4 <SPI_Write+0x38>)
 8001ec4:	f004 fb27 	bl	8006516 <HAL_SPI_Transmit>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001ecc:	7bfb      	ldrb	r3, [r7, #15]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8001ed2:	f000 f809 	bl	8001ee8 <SPI_Error>
  }
}
 8001ed6:	bf00      	nop
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	20000014 	.word	0x20000014
 8001ee4:	200259d4 	.word	0x200259d4

08001ee8 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001eec:	4803      	ldr	r0, [pc, #12]	@ (8001efc <SPI_Error+0x14>)
 8001eee:	f004 faea 	bl	80064c6 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8001ef2:	f7ff ffa1 	bl	8001e38 <SPI_Init>
}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	200259d4 	.word	0x200259d4

08001f00 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08a      	sub	sp, #40	@ 0x28
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8001f08:	2300      	movs	r3, #0
 8001f0a:	613b      	str	r3, [r7, #16]
 8001f0c:	4b17      	ldr	r3, [pc, #92]	@ (8001f6c <SPI_MspInit+0x6c>)
 8001f0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f10:	4a16      	ldr	r2, [pc, #88]	@ (8001f6c <SPI_MspInit+0x6c>)
 8001f12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f16:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f18:	4b14      	ldr	r3, [pc, #80]	@ (8001f6c <SPI_MspInit+0x6c>)
 8001f1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8001f24:	2300      	movs	r3, #0
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	4b10      	ldr	r3, [pc, #64]	@ (8001f6c <SPI_MspInit+0x6c>)
 8001f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2c:	4a0f      	ldr	r2, [pc, #60]	@ (8001f6c <SPI_MspInit+0x6c>)
 8001f2e:	f043 0320 	orr.w	r3, r3, #32
 8001f32:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f34:	4b0d      	ldr	r3, [pc, #52]	@ (8001f6c <SPI_MspInit+0x6c>)
 8001f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f38:	f003 0320 	and.w	r3, r3, #32
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8001f40:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001f44:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001f46:	2302      	movs	r3, #2
 8001f48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8001f52:	2305      	movs	r3, #5
 8001f54:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8001f56:	f107 0314 	add.w	r3, r7, #20
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4804      	ldr	r0, [pc, #16]	@ (8001f70 <SPI_MspInit+0x70>)
 8001f5e:	f001 fd35 	bl	80039cc <HAL_GPIO_Init>
}
 8001f62:	bf00      	nop
 8001f64:	3728      	adds	r7, #40	@ 0x28
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	40021400 	.word	0x40021400

08001f74 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b088      	sub	sp, #32
 8001f78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8001f7a:	4b36      	ldr	r3, [pc, #216]	@ (8002054 <LCD_IO_Init+0xe0>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d164      	bne.n	800204c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001f82:	4b34      	ldr	r3, [pc, #208]	@ (8002054 <LCD_IO_Init+0xe0>)
 8001f84:	2201      	movs	r2, #1
 8001f86:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60bb      	str	r3, [r7, #8]
 8001f8c:	4b32      	ldr	r3, [pc, #200]	@ (8002058 <LCD_IO_Init+0xe4>)
 8001f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f90:	4a31      	ldr	r2, [pc, #196]	@ (8002058 <LCD_IO_Init+0xe4>)
 8001f92:	f043 0308 	orr.w	r3, r3, #8
 8001f96:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f98:	4b2f      	ldr	r3, [pc, #188]	@ (8002058 <LCD_IO_Init+0xe4>)
 8001f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9c:	f003 0308 	and.w	r3, r3, #8
 8001fa0:	60bb      	str	r3, [r7, #8]
 8001fa2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001fa4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001fa8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001faa:	2301      	movs	r3, #1
 8001fac:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001fb6:	f107 030c 	add.w	r3, r7, #12
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4827      	ldr	r0, [pc, #156]	@ (800205c <LCD_IO_Init+0xe8>)
 8001fbe:	f001 fd05 	bl	80039cc <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	607b      	str	r3, [r7, #4]
 8001fc6:	4b24      	ldr	r3, [pc, #144]	@ (8002058 <LCD_IO_Init+0xe4>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fca:	4a23      	ldr	r2, [pc, #140]	@ (8002058 <LCD_IO_Init+0xe4>)
 8001fcc:	f043 0308 	orr.w	r3, r3, #8
 8001fd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fd2:	4b21      	ldr	r3, [pc, #132]	@ (8002058 <LCD_IO_Init+0xe4>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	607b      	str	r3, [r7, #4]
 8001fdc:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001fde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fe2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001fec:	2302      	movs	r3, #2
 8001fee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001ff0:	f107 030c 	add.w	r3, r7, #12
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4819      	ldr	r0, [pc, #100]	@ (800205c <LCD_IO_Init+0xe8>)
 8001ff8:	f001 fce8 	bl	80039cc <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	603b      	str	r3, [r7, #0]
 8002000:	4b15      	ldr	r3, [pc, #84]	@ (8002058 <LCD_IO_Init+0xe4>)
 8002002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002004:	4a14      	ldr	r2, [pc, #80]	@ (8002058 <LCD_IO_Init+0xe4>)
 8002006:	f043 0304 	orr.w	r3, r3, #4
 800200a:	6313      	str	r3, [r2, #48]	@ 0x30
 800200c:	4b12      	ldr	r3, [pc, #72]	@ (8002058 <LCD_IO_Init+0xe4>)
 800200e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	603b      	str	r3, [r7, #0]
 8002016:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002018:	2304      	movs	r3, #4
 800201a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800201c:	2301      	movs	r3, #1
 800201e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002024:	2302      	movs	r3, #2
 8002026:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002028:	f107 030c 	add.w	r3, r7, #12
 800202c:	4619      	mov	r1, r3
 800202e:	480c      	ldr	r0, [pc, #48]	@ (8002060 <LCD_IO_Init+0xec>)
 8002030:	f001 fccc 	bl	80039cc <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002034:	2200      	movs	r2, #0
 8002036:	2104      	movs	r1, #4
 8002038:	4809      	ldr	r0, [pc, #36]	@ (8002060 <LCD_IO_Init+0xec>)
 800203a:	f001 ff97 	bl	8003f6c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800203e:	2201      	movs	r2, #1
 8002040:	2104      	movs	r1, #4
 8002042:	4807      	ldr	r0, [pc, #28]	@ (8002060 <LCD_IO_Init+0xec>)
 8002044:	f001 ff92 	bl	8003f6c <HAL_GPIO_WritePin>

    SPI_Init();
 8002048:	f7ff fef6 	bl	8001e38 <SPI_Init>
  }
}
 800204c:	bf00      	nop
 800204e:	3720      	adds	r7, #32
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20025a2c 	.word	0x20025a2c
 8002058:	40023800 	.word	0x40023800
 800205c:	40020c00 	.word	0x40020c00
 8002060:	40020800 	.word	0x40020800

08002064 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800206e:	2201      	movs	r2, #1
 8002070:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002074:	480a      	ldr	r0, [pc, #40]	@ (80020a0 <LCD_IO_WriteData+0x3c>)
 8002076:	f001 ff79 	bl	8003f6c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 800207a:	2200      	movs	r2, #0
 800207c:	2104      	movs	r1, #4
 800207e:	4809      	ldr	r0, [pc, #36]	@ (80020a4 <LCD_IO_WriteData+0x40>)
 8002080:	f001 ff74 	bl	8003f6c <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8002084:	88fb      	ldrh	r3, [r7, #6]
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff ff10 	bl	8001eac <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800208c:	2201      	movs	r2, #1
 800208e:	2104      	movs	r1, #4
 8002090:	4804      	ldr	r0, [pc, #16]	@ (80020a4 <LCD_IO_WriteData+0x40>)
 8002092:	f001 ff6b 	bl	8003f6c <HAL_GPIO_WritePin>
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40020c00 	.word	0x40020c00
 80020a4:	40020800 	.word	0x40020800

080020a8 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80020b2:	2200      	movs	r2, #0
 80020b4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80020b8:	480a      	ldr	r0, [pc, #40]	@ (80020e4 <LCD_IO_WriteReg+0x3c>)
 80020ba:	f001 ff57 	bl	8003f6c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80020be:	2200      	movs	r2, #0
 80020c0:	2104      	movs	r1, #4
 80020c2:	4809      	ldr	r0, [pc, #36]	@ (80020e8 <LCD_IO_WriteReg+0x40>)
 80020c4:	f001 ff52 	bl	8003f6c <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff feed 	bl	8001eac <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80020d2:	2201      	movs	r2, #1
 80020d4:	2104      	movs	r1, #4
 80020d6:	4804      	ldr	r0, [pc, #16]	@ (80020e8 <LCD_IO_WriteReg+0x40>)
 80020d8:	f001 ff48 	bl	8003f6c <HAL_GPIO_WritePin>
}
 80020dc:	bf00      	nop
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40020c00 	.word	0x40020c00
 80020e8:	40020800 	.word	0x40020800

080020ec <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f001 fb5f 	bl	80037b8 <HAL_Delay>
}
 80020fa:	bf00      	nop
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002106:	f001 fae5 	bl	80036d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800210a:	f000 f84b 	bl	80021a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800210e:	f000 fa3b 	bl	8002588 <MX_GPIO_Init>
  MX_LTDC_Init();
 8002112:	f000 f8f1 	bl	80022f8 <MX_LTDC_Init>
  MX_RNG_Init();
 8002116:	f000 f9a1 	bl	800245c <MX_RNG_Init>
  MX_TIM2_Init();
 800211a:	f000 f9e9 	bl	80024f0 <MX_TIM2_Init>
  MX_SPI5_Init();
 800211e:	f000 f9b1 	bl	8002484 <MX_SPI5_Init>
  MX_I2C3_Init();
 8002122:	f000 f8a9 	bl	8002278 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit(); // Initializes the LCD functionality
 8002126:	f7fe fa51 	bl	80005cc <ApplicationInit>


  while (1)
  {
    /* USER CODE END WHILE */
	Scheduler_Run(); // Run the scheduler checks
 800212a:	f000 f801 	bl	8002130 <Scheduler_Run>
 800212e:	e7fc      	b.n	800212a <main+0x28>

08002130 <Scheduler_Run>:
  }
  /* USER CODE END 3 */
}

// --- Scheduler Execution ---
void Scheduler_Run(void) {
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
    // Wait for SysTick to signal a check interval
    while(scheduler_ticks == 0) { } // Wait for SysTick
 8002136:	bf00      	nop
 8002138:	4b19      	ldr	r3, [pc, #100]	@ (80021a0 <Scheduler_Run+0x70>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d0fb      	beq.n	8002138 <Scheduler_Run+0x8>
    scheduler_ticks = 0;
 8002140:	4b17      	ldr	r3, [pc, #92]	@ (80021a0 <Scheduler_Run+0x70>)
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]

    uint32_t events = getScheduledEvents();
 8002146:	f7ff fce1 	bl	8001b0c <getScheduledEvents>
 800214a:	6078      	str	r0, [r7, #4]

    if (events & TOUCH_POLLING_EVENT) {
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	d004      	beq.n	8002160 <Scheduler_Run+0x30>
        handleTouchInput(); // Handles touch based on internal state
 8002156:	f7fe fe03 	bl	8000d60 <handleTouchInput>
        removeSchedulerEvent(TOUCH_POLLING_EVENT);
 800215a:	2001      	movs	r0, #1
 800215c:	f7ff fcf4 	bl	8001b48 <removeSchedulerEvent>
    }

    if (events & HW_BUTTON_POLLING_EVENT) {
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d004      	beq.n	8002174 <Scheduler_Run+0x44>
        pollHardwareButton(); // Checks button based on internal state
 800216a:	f7fe ff17 	bl	8000f9c <pollHardwareButton>
        removeSchedulerEvent(HW_BUTTON_POLLING_EVENT);
 800216e:	2002      	movs	r0, #2
 8002170:	f7ff fcea 	bl	8001b48 <removeSchedulerEvent>
    }

    if (events & GAME_UPDATE_EVENT) {
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f003 0304 	and.w	r3, r3, #4
 800217a:	2b00      	cmp	r3, #0
 800217c:	d004      	beq.n	8002188 <Scheduler_Run+0x58>
        handleAITurn(); // Call the AI handler function
 800217e:	f7fe ff35 	bl	8000fec <handleAITurn>
        removeSchedulerEvent(GAME_UPDATE_EVENT);
 8002182:	2004      	movs	r0, #4
 8002184:	f7ff fce0 	bl	8001b48 <removeSchedulerEvent>
    }

    if (events & RENDER_SCREEN_EVENT) {
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f003 0310 	and.w	r3, r3, #16
 800218e:	2b00      	cmp	r3, #0
 8002190:	d002      	beq.n	8002198 <Scheduler_Run+0x68>
         removeSchedulerEvent(RENDER_SCREEN_EVENT);
 8002192:	2010      	movs	r0, #16
 8002194:	f7ff fcd8 	bl	8001b48 <removeSchedulerEvent>
    }
}
 8002198:	bf00      	nop
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	20025bdc 	.word	0x20025bdc

080021a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b094      	sub	sp, #80	@ 0x50
 80021a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021aa:	f107 0320 	add.w	r3, r7, #32
 80021ae:	2230      	movs	r2, #48	@ 0x30
 80021b0:	2100      	movs	r1, #0
 80021b2:	4618      	mov	r0, r3
 80021b4:	f004 fff8 	bl	80071a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021b8:	f107 030c 	add.w	r3, r7, #12
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	60da      	str	r2, [r3, #12]
 80021c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021c8:	2300      	movs	r3, #0
 80021ca:	60bb      	str	r3, [r7, #8]
 80021cc:	4b28      	ldr	r3, [pc, #160]	@ (8002270 <SystemClock_Config+0xcc>)
 80021ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d0:	4a27      	ldr	r2, [pc, #156]	@ (8002270 <SystemClock_Config+0xcc>)
 80021d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80021d8:	4b25      	ldr	r3, [pc, #148]	@ (8002270 <SystemClock_Config+0xcc>)
 80021da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021e4:	2300      	movs	r3, #0
 80021e6:	607b      	str	r3, [r7, #4]
 80021e8:	4b22      	ldr	r3, [pc, #136]	@ (8002274 <SystemClock_Config+0xd0>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a21      	ldr	r2, [pc, #132]	@ (8002274 <SystemClock_Config+0xd0>)
 80021ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80021f2:	6013      	str	r3, [r2, #0]
 80021f4:	4b1f      	ldr	r3, [pc, #124]	@ (8002274 <SystemClock_Config+0xd0>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80021fc:	607b      	str	r3, [r7, #4]
 80021fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002200:	2301      	movs	r3, #1
 8002202:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002204:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002208:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800220a:	2302      	movs	r3, #2
 800220c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800220e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002212:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002214:	2308      	movs	r3, #8
 8002216:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002218:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800221c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800221e:	2302      	movs	r3, #2
 8002220:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002222:	2307      	movs	r3, #7
 8002224:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002226:	f107 0320 	add.w	r3, r7, #32
 800222a:	4618      	mov	r0, r3
 800222c:	f003 f9fe 	bl	800562c <HAL_RCC_OscConfig>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002236:	f000 fb55 	bl	80028e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800223a:	230f      	movs	r3, #15
 800223c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800223e:	2302      	movs	r3, #2
 8002240:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002242:	2300      	movs	r3, #0
 8002244:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002246:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800224a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800224c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002250:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002252:	f107 030c 	add.w	r3, r7, #12
 8002256:	2105      	movs	r1, #5
 8002258:	4618      	mov	r0, r3
 800225a:	f003 fc5f 	bl	8005b1c <HAL_RCC_ClockConfig>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002264:	f000 fb3e 	bl	80028e4 <Error_Handler>
  }
}
 8002268:	bf00      	nop
 800226a:	3750      	adds	r7, #80	@ 0x50
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40023800 	.word	0x40023800
 8002274:	40007000 	.word	0x40007000

08002278 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800227c:	4b1b      	ldr	r3, [pc, #108]	@ (80022ec <MX_I2C3_Init+0x74>)
 800227e:	4a1c      	ldr	r2, [pc, #112]	@ (80022f0 <MX_I2C3_Init+0x78>)
 8002280:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002282:	4b1a      	ldr	r3, [pc, #104]	@ (80022ec <MX_I2C3_Init+0x74>)
 8002284:	4a1b      	ldr	r2, [pc, #108]	@ (80022f4 <MX_I2C3_Init+0x7c>)
 8002286:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002288:	4b18      	ldr	r3, [pc, #96]	@ (80022ec <MX_I2C3_Init+0x74>)
 800228a:	2200      	movs	r2, #0
 800228c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800228e:	4b17      	ldr	r3, [pc, #92]	@ (80022ec <MX_I2C3_Init+0x74>)
 8002290:	2200      	movs	r2, #0
 8002292:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002294:	4b15      	ldr	r3, [pc, #84]	@ (80022ec <MX_I2C3_Init+0x74>)
 8002296:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800229a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800229c:	4b13      	ldr	r3, [pc, #76]	@ (80022ec <MX_I2C3_Init+0x74>)
 800229e:	2200      	movs	r2, #0
 80022a0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80022a2:	4b12      	ldr	r3, [pc, #72]	@ (80022ec <MX_I2C3_Init+0x74>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022a8:	4b10      	ldr	r3, [pc, #64]	@ (80022ec <MX_I2C3_Init+0x74>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022ae:	4b0f      	ldr	r3, [pc, #60]	@ (80022ec <MX_I2C3_Init+0x74>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80022b4:	480d      	ldr	r0, [pc, #52]	@ (80022ec <MX_I2C3_Init+0x74>)
 80022b6:	f001 fe73 	bl	8003fa0 <HAL_I2C_Init>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80022c0:	f000 fb10 	bl	80028e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80022c4:	2100      	movs	r1, #0
 80022c6:	4809      	ldr	r0, [pc, #36]	@ (80022ec <MX_I2C3_Init+0x74>)
 80022c8:	f002 fe8e 	bl	8004fe8 <HAL_I2CEx_ConfigAnalogFilter>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80022d2:	f000 fb07 	bl	80028e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80022d6:	2100      	movs	r1, #0
 80022d8:	4804      	ldr	r0, [pc, #16]	@ (80022ec <MX_I2C3_Init+0x74>)
 80022da:	f002 fec1 	bl	8005060 <HAL_I2CEx_ConfigDigitalFilter>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80022e4:	f000 fafe 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80022e8:	bf00      	nop
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	20025a30 	.word	0x20025a30
 80022f0:	40005c00 	.word	0x40005c00
 80022f4:	000186a0 	.word	0x000186a0

080022f8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b09a      	sub	sp, #104	@ 0x68
 80022fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80022fe:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002302:	2234      	movs	r2, #52	@ 0x34
 8002304:	2100      	movs	r1, #0
 8002306:	4618      	mov	r0, r3
 8002308:	f004 ff4e 	bl	80071a8 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 800230c:	463b      	mov	r3, r7
 800230e:	2234      	movs	r2, #52	@ 0x34
 8002310:	2100      	movs	r1, #0
 8002312:	4618      	mov	r0, r3
 8002314:	f004 ff48 	bl	80071a8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8002318:	4b4e      	ldr	r3, [pc, #312]	@ (8002454 <MX_LTDC_Init+0x15c>)
 800231a:	4a4f      	ldr	r2, [pc, #316]	@ (8002458 <MX_LTDC_Init+0x160>)
 800231c:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800231e:	4b4d      	ldr	r3, [pc, #308]	@ (8002454 <MX_LTDC_Init+0x15c>)
 8002320:	2200      	movs	r2, #0
 8002322:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002324:	4b4b      	ldr	r3, [pc, #300]	@ (8002454 <MX_LTDC_Init+0x15c>)
 8002326:	2200      	movs	r2, #0
 8002328:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800232a:	4b4a      	ldr	r3, [pc, #296]	@ (8002454 <MX_LTDC_Init+0x15c>)
 800232c:	2200      	movs	r2, #0
 800232e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002330:	4b48      	ldr	r3, [pc, #288]	@ (8002454 <MX_LTDC_Init+0x15c>)
 8002332:	2200      	movs	r2, #0
 8002334:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8002336:	4b47      	ldr	r3, [pc, #284]	@ (8002454 <MX_LTDC_Init+0x15c>)
 8002338:	2207      	movs	r2, #7
 800233a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 800233c:	4b45      	ldr	r3, [pc, #276]	@ (8002454 <MX_LTDC_Init+0x15c>)
 800233e:	2203      	movs	r2, #3
 8002340:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8002342:	4b44      	ldr	r3, [pc, #272]	@ (8002454 <MX_LTDC_Init+0x15c>)
 8002344:	220e      	movs	r2, #14
 8002346:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8002348:	4b42      	ldr	r3, [pc, #264]	@ (8002454 <MX_LTDC_Init+0x15c>)
 800234a:	2205      	movs	r2, #5
 800234c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 800234e:	4b41      	ldr	r3, [pc, #260]	@ (8002454 <MX_LTDC_Init+0x15c>)
 8002350:	f240 228e 	movw	r2, #654	@ 0x28e
 8002354:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8002356:	4b3f      	ldr	r3, [pc, #252]	@ (8002454 <MX_LTDC_Init+0x15c>)
 8002358:	f240 12e5 	movw	r2, #485	@ 0x1e5
 800235c:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 800235e:	4b3d      	ldr	r3, [pc, #244]	@ (8002454 <MX_LTDC_Init+0x15c>)
 8002360:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8002364:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 8002366:	4b3b      	ldr	r3, [pc, #236]	@ (8002454 <MX_LTDC_Init+0x15c>)
 8002368:	f240 12e7 	movw	r2, #487	@ 0x1e7
 800236c:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800236e:	4b39      	ldr	r3, [pc, #228]	@ (8002454 <MX_LTDC_Init+0x15c>)
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002376:	4b37      	ldr	r3, [pc, #220]	@ (8002454 <MX_LTDC_Init+0x15c>)
 8002378:	2200      	movs	r2, #0
 800237a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 800237e:	4b35      	ldr	r3, [pc, #212]	@ (8002454 <MX_LTDC_Init+0x15c>)
 8002380:	2200      	movs	r2, #0
 8002382:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002386:	4833      	ldr	r0, [pc, #204]	@ (8002454 <MX_LTDC_Init+0x15c>)
 8002388:	f002 feaa 	bl	80050e0 <HAL_LTDC_Init>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8002392:	f000 faa7 	bl	80028e4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002396:	2300      	movs	r3, #0
 8002398:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 800239a:	2300      	movs	r3, #0
 800239c:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 800239e:	2300      	movs	r3, #0
 80023a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 80023a2:	2300      	movs	r3, #0
 80023a4:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80023a6:	2300      	movs	r3, #0
 80023a8:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 80023aa:	2300      	movs	r3, #0
 80023ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 80023ae:	2300      	movs	r3, #0
 80023b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80023b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80023b6:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80023b8:	2305      	movs	r3, #5
 80023ba:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 80023bc:	2300      	movs	r3, #0
 80023be:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 80023c0:	2300      	movs	r3, #0
 80023c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 80023c4:	2300      	movs	r3, #0
 80023c6:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80023c8:	2300      	movs	r3, #0
 80023ca:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 80023ce:	2300      	movs	r3, #0
 80023d0:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 80023d4:	2300      	movs	r3, #0
 80023d6:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80023da:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80023de:	2200      	movs	r2, #0
 80023e0:	4619      	mov	r1, r3
 80023e2:	481c      	ldr	r0, [pc, #112]	@ (8002454 <MX_LTDC_Init+0x15c>)
 80023e4:	f002 ff4c 	bl	8005280 <HAL_LTDC_ConfigLayer>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80023ee:	f000 fa79 	bl	80028e4 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80023f2:	2300      	movs	r3, #0
 80023f4:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80023f6:	2300      	movs	r3, #0
 80023f8:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80023fa:	2300      	movs	r3, #0
 80023fc:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80023fe:	2300      	movs	r3, #0
 8002400:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002402:	2300      	movs	r3, #0
 8002404:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8002406:	2300      	movs	r3, #0
 8002408:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800240a:	2300      	movs	r3, #0
 800240c:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800240e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002412:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002414:	2305      	movs	r3, #5
 8002416:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8002418:	2300      	movs	r3, #0
 800241a:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 800241c:	2300      	movs	r3, #0
 800241e:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8002420:	2300      	movs	r3, #0
 8002422:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8002424:	2300      	movs	r3, #0
 8002426:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800242a:	2300      	movs	r3, #0
 800242c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8002430:	2300      	movs	r3, #0
 8002432:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8002436:	463b      	mov	r3, r7
 8002438:	2201      	movs	r2, #1
 800243a:	4619      	mov	r1, r3
 800243c:	4805      	ldr	r0, [pc, #20]	@ (8002454 <MX_LTDC_Init+0x15c>)
 800243e:	f002 ff1f 	bl	8005280 <HAL_LTDC_ConfigLayer>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8002448:	f000 fa4c 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800244c:	bf00      	nop
 800244e:	3768      	adds	r7, #104	@ 0x68
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	20025a84 	.word	0x20025a84
 8002458:	40016800 	.word	0x40016800

0800245c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002460:	4b06      	ldr	r3, [pc, #24]	@ (800247c <MX_RNG_Init+0x20>)
 8002462:	4a07      	ldr	r2, [pc, #28]	@ (8002480 <MX_RNG_Init+0x24>)
 8002464:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002466:	4805      	ldr	r0, [pc, #20]	@ (800247c <MX_RNG_Init+0x20>)
 8002468:	f003 ff24 	bl	80062b4 <HAL_RNG_Init>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8002472:	f000 fa37 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	20025b2c 	.word	0x20025b2c
 8002480:	50060800 	.word	0x50060800

08002484 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8002488:	4b17      	ldr	r3, [pc, #92]	@ (80024e8 <MX_SPI5_Init+0x64>)
 800248a:	4a18      	ldr	r2, [pc, #96]	@ (80024ec <MX_SPI5_Init+0x68>)
 800248c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800248e:	4b16      	ldr	r3, [pc, #88]	@ (80024e8 <MX_SPI5_Init+0x64>)
 8002490:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002494:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002496:	4b14      	ldr	r3, [pc, #80]	@ (80024e8 <MX_SPI5_Init+0x64>)
 8002498:	2200      	movs	r2, #0
 800249a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800249c:	4b12      	ldr	r3, [pc, #72]	@ (80024e8 <MX_SPI5_Init+0x64>)
 800249e:	2200      	movs	r2, #0
 80024a0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024a2:	4b11      	ldr	r3, [pc, #68]	@ (80024e8 <MX_SPI5_Init+0x64>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024a8:	4b0f      	ldr	r3, [pc, #60]	@ (80024e8 <MX_SPI5_Init+0x64>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80024ae:	4b0e      	ldr	r3, [pc, #56]	@ (80024e8 <MX_SPI5_Init+0x64>)
 80024b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024b4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024b6:	4b0c      	ldr	r3, [pc, #48]	@ (80024e8 <MX_SPI5_Init+0x64>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024bc:	4b0a      	ldr	r3, [pc, #40]	@ (80024e8 <MX_SPI5_Init+0x64>)
 80024be:	2200      	movs	r2, #0
 80024c0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80024c2:	4b09      	ldr	r3, [pc, #36]	@ (80024e8 <MX_SPI5_Init+0x64>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024c8:	4b07      	ldr	r3, [pc, #28]	@ (80024e8 <MX_SPI5_Init+0x64>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 80024ce:	4b06      	ldr	r3, [pc, #24]	@ (80024e8 <MX_SPI5_Init+0x64>)
 80024d0:	220a      	movs	r2, #10
 80024d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80024d4:	4804      	ldr	r0, [pc, #16]	@ (80024e8 <MX_SPI5_Init+0x64>)
 80024d6:	f003 ff6d 	bl	80063b4 <HAL_SPI_Init>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80024e0:	f000 fa00 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80024e4:	bf00      	nop
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	20025b3c 	.word	0x20025b3c
 80024ec:	40015000 	.word	0x40015000

080024f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024f6:	f107 0308 	add.w	r3, r7, #8
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	605a      	str	r2, [r3, #4]
 8002500:	609a      	str	r2, [r3, #8]
 8002502:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002504:	463b      	mov	r3, r7
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]
 800250a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800250c:	4b1d      	ldr	r3, [pc, #116]	@ (8002584 <MX_TIM2_Init+0x94>)
 800250e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002512:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002514:	4b1b      	ldr	r3, [pc, #108]	@ (8002584 <MX_TIM2_Init+0x94>)
 8002516:	2200      	movs	r2, #0
 8002518:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800251a:	4b1a      	ldr	r3, [pc, #104]	@ (8002584 <MX_TIM2_Init+0x94>)
 800251c:	2200      	movs	r2, #0
 800251e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002520:	4b18      	ldr	r3, [pc, #96]	@ (8002584 <MX_TIM2_Init+0x94>)
 8002522:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002526:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002528:	4b16      	ldr	r3, [pc, #88]	@ (8002584 <MX_TIM2_Init+0x94>)
 800252a:	2200      	movs	r2, #0
 800252c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800252e:	4b15      	ldr	r3, [pc, #84]	@ (8002584 <MX_TIM2_Init+0x94>)
 8002530:	2200      	movs	r2, #0
 8002532:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002534:	4813      	ldr	r0, [pc, #76]	@ (8002584 <MX_TIM2_Init+0x94>)
 8002536:	f004 fa1d 	bl	8006974 <HAL_TIM_Base_Init>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002540:	f000 f9d0 	bl	80028e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002544:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002548:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800254a:	f107 0308 	add.w	r3, r7, #8
 800254e:	4619      	mov	r1, r3
 8002550:	480c      	ldr	r0, [pc, #48]	@ (8002584 <MX_TIM2_Init+0x94>)
 8002552:	f004 fa5e 	bl	8006a12 <HAL_TIM_ConfigClockSource>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800255c:	f000 f9c2 	bl	80028e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002560:	2300      	movs	r3, #0
 8002562:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002564:	2300      	movs	r3, #0
 8002566:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002568:	463b      	mov	r3, r7
 800256a:	4619      	mov	r1, r3
 800256c:	4805      	ldr	r0, [pc, #20]	@ (8002584 <MX_TIM2_Init+0x94>)
 800256e:	f004 fc5d 	bl	8006e2c <HAL_TIMEx_MasterConfigSynchronization>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002578:	f000 f9b4 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800257c:	bf00      	nop
 800257e:	3718      	adds	r7, #24
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	20025b94 	.word	0x20025b94

08002588 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b08e      	sub	sp, #56	@ 0x38
 800258c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800258e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	605a      	str	r2, [r3, #4]
 8002598:	609a      	str	r2, [r3, #8]
 800259a:	60da      	str	r2, [r3, #12]
 800259c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	623b      	str	r3, [r7, #32]
 80025a2:	4bb2      	ldr	r3, [pc, #712]	@ (800286c <MX_GPIO_Init+0x2e4>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a6:	4ab1      	ldr	r2, [pc, #708]	@ (800286c <MX_GPIO_Init+0x2e4>)
 80025a8:	f043 0304 	orr.w	r3, r3, #4
 80025ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ae:	4baf      	ldr	r3, [pc, #700]	@ (800286c <MX_GPIO_Init+0x2e4>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b2:	f003 0304 	and.w	r3, r3, #4
 80025b6:	623b      	str	r3, [r7, #32]
 80025b8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80025ba:	2300      	movs	r3, #0
 80025bc:	61fb      	str	r3, [r7, #28]
 80025be:	4bab      	ldr	r3, [pc, #684]	@ (800286c <MX_GPIO_Init+0x2e4>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c2:	4aaa      	ldr	r2, [pc, #680]	@ (800286c <MX_GPIO_Init+0x2e4>)
 80025c4:	f043 0320 	orr.w	r3, r3, #32
 80025c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ca:	4ba8      	ldr	r3, [pc, #672]	@ (800286c <MX_GPIO_Init+0x2e4>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ce:	f003 0320 	and.w	r3, r3, #32
 80025d2:	61fb      	str	r3, [r7, #28]
 80025d4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025d6:	2300      	movs	r3, #0
 80025d8:	61bb      	str	r3, [r7, #24]
 80025da:	4ba4      	ldr	r3, [pc, #656]	@ (800286c <MX_GPIO_Init+0x2e4>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025de:	4aa3      	ldr	r2, [pc, #652]	@ (800286c <MX_GPIO_Init+0x2e4>)
 80025e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025e6:	4ba1      	ldr	r3, [pc, #644]	@ (800286c <MX_GPIO_Init+0x2e4>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025ee:	61bb      	str	r3, [r7, #24]
 80025f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f2:	2300      	movs	r3, #0
 80025f4:	617b      	str	r3, [r7, #20]
 80025f6:	4b9d      	ldr	r3, [pc, #628]	@ (800286c <MX_GPIO_Init+0x2e4>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fa:	4a9c      	ldr	r2, [pc, #624]	@ (800286c <MX_GPIO_Init+0x2e4>)
 80025fc:	f043 0301 	orr.w	r3, r3, #1
 8002600:	6313      	str	r3, [r2, #48]	@ 0x30
 8002602:	4b9a      	ldr	r3, [pc, #616]	@ (800286c <MX_GPIO_Init+0x2e4>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	617b      	str	r3, [r7, #20]
 800260c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800260e:	2300      	movs	r3, #0
 8002610:	613b      	str	r3, [r7, #16]
 8002612:	4b96      	ldr	r3, [pc, #600]	@ (800286c <MX_GPIO_Init+0x2e4>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002616:	4a95      	ldr	r2, [pc, #596]	@ (800286c <MX_GPIO_Init+0x2e4>)
 8002618:	f043 0302 	orr.w	r3, r3, #2
 800261c:	6313      	str	r3, [r2, #48]	@ 0x30
 800261e:	4b93      	ldr	r3, [pc, #588]	@ (800286c <MX_GPIO_Init+0x2e4>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	613b      	str	r3, [r7, #16]
 8002628:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800262a:	2300      	movs	r3, #0
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	4b8f      	ldr	r3, [pc, #572]	@ (800286c <MX_GPIO_Init+0x2e4>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002632:	4a8e      	ldr	r2, [pc, #568]	@ (800286c <MX_GPIO_Init+0x2e4>)
 8002634:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002638:	6313      	str	r3, [r2, #48]	@ 0x30
 800263a:	4b8c      	ldr	r3, [pc, #560]	@ (800286c <MX_GPIO_Init+0x2e4>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	60bb      	str	r3, [r7, #8]
 800264a:	4b88      	ldr	r3, [pc, #544]	@ (800286c <MX_GPIO_Init+0x2e4>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264e:	4a87      	ldr	r2, [pc, #540]	@ (800286c <MX_GPIO_Init+0x2e4>)
 8002650:	f043 0310 	orr.w	r3, r3, #16
 8002654:	6313      	str	r3, [r2, #48]	@ 0x30
 8002656:	4b85      	ldr	r3, [pc, #532]	@ (800286c <MX_GPIO_Init+0x2e4>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265a:	f003 0310 	and.w	r3, r3, #16
 800265e:	60bb      	str	r3, [r7, #8]
 8002660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	607b      	str	r3, [r7, #4]
 8002666:	4b81      	ldr	r3, [pc, #516]	@ (800286c <MX_GPIO_Init+0x2e4>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266a:	4a80      	ldr	r2, [pc, #512]	@ (800286c <MX_GPIO_Init+0x2e4>)
 800266c:	f043 0308 	orr.w	r3, r3, #8
 8002670:	6313      	str	r3, [r2, #48]	@ 0x30
 8002672:	4b7e      	ldr	r3, [pc, #504]	@ (800286c <MX_GPIO_Init+0x2e4>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002676:	f003 0308 	and.w	r3, r3, #8
 800267a:	607b      	str	r3, [r7, #4]
 800267c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800267e:	2200      	movs	r2, #0
 8002680:	2116      	movs	r1, #22
 8002682:	487b      	ldr	r0, [pc, #492]	@ (8002870 <MX_GPIO_Init+0x2e8>)
 8002684:	f001 fc72 	bl	8003f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8002688:	2200      	movs	r2, #0
 800268a:	2180      	movs	r1, #128	@ 0x80
 800268c:	4879      	ldr	r0, [pc, #484]	@ (8002874 <MX_GPIO_Init+0x2ec>)
 800268e:	f001 fc6d 	bl	8003f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8002692:	2200      	movs	r2, #0
 8002694:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8002698:	4877      	ldr	r0, [pc, #476]	@ (8002878 <MX_GPIO_Init+0x2f0>)
 800269a:	f001 fc67 	bl	8003f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800269e:	2200      	movs	r2, #0
 80026a0:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80026a4:	4875      	ldr	r0, [pc, #468]	@ (800287c <MX_GPIO_Init+0x2f4>)
 80026a6:	f001 fc61 	bl	8003f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80026aa:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80026ae:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b0:	2302      	movs	r3, #2
 80026b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b4:	2300      	movs	r3, #0
 80026b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b8:	2303      	movs	r3, #3
 80026ba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80026bc:	230c      	movs	r3, #12
 80026be:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80026c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026c4:	4619      	mov	r1, r3
 80026c6:	486e      	ldr	r0, [pc, #440]	@ (8002880 <MX_GPIO_Init+0x2f8>)
 80026c8:	f001 f980 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80026cc:	2301      	movs	r3, #1
 80026ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d0:	2302      	movs	r3, #2
 80026d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d4:	2300      	movs	r3, #0
 80026d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026d8:	2303      	movs	r3, #3
 80026da:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80026dc:	230c      	movs	r3, #12
 80026de:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80026e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026e4:	4619      	mov	r1, r3
 80026e6:	4862      	ldr	r0, [pc, #392]	@ (8002870 <MX_GPIO_Init+0x2e8>)
 80026e8:	f001 f970 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80026ec:	2316      	movs	r3, #22
 80026ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026f0:	2301      	movs	r3, #1
 80026f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f4:	2300      	movs	r3, #0
 80026f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f8:	2300      	movs	r3, #0
 80026fa:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002700:	4619      	mov	r1, r3
 8002702:	485b      	ldr	r0, [pc, #364]	@ (8002870 <MX_GPIO_Init+0x2e8>)
 8002704:	f001 f962 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8002708:	f248 0307 	movw	r3, #32775	@ 0x8007
 800270c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800270e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002712:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002714:	2300      	movs	r3, #0
 8002716:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002718:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800271c:	4619      	mov	r1, r3
 800271e:	4855      	ldr	r0, [pc, #340]	@ (8002874 <MX_GPIO_Init+0x2ec>)
 8002720:	f001 f954 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8002724:	2380      	movs	r3, #128	@ 0x80
 8002726:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002728:	2301      	movs	r3, #1
 800272a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272c:	2300      	movs	r3, #0
 800272e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002730:	2300      	movs	r3, #0
 8002732:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8002734:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002738:	4619      	mov	r1, r3
 800273a:	484e      	ldr	r0, [pc, #312]	@ (8002874 <MX_GPIO_Init+0x2ec>)
 800273c:	f001 f946 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8002740:	2320      	movs	r3, #32
 8002742:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002744:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002748:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274a:	2300      	movs	r3, #0
 800274c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 800274e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002752:	4619      	mov	r1, r3
 8002754:	4846      	ldr	r0, [pc, #280]	@ (8002870 <MX_GPIO_Init+0x2e8>)
 8002756:	f001 f939 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800275a:	2304      	movs	r3, #4
 800275c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800275e:	2300      	movs	r3, #0
 8002760:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002762:	2300      	movs	r3, #0
 8002764:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002766:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800276a:	4619      	mov	r1, r3
 800276c:	4845      	ldr	r0, [pc, #276]	@ (8002884 <MX_GPIO_Init+0x2fc>)
 800276e:	f001 f92d 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002772:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002776:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002778:	2302      	movs	r3, #2
 800277a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277c:	2300      	movs	r3, #0
 800277e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002780:	2303      	movs	r3, #3
 8002782:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002784:	230c      	movs	r3, #12
 8002786:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002788:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800278c:	4619      	mov	r1, r3
 800278e:	483b      	ldr	r0, [pc, #236]	@ (800287c <MX_GPIO_Init+0x2f4>)
 8002790:	f001 f91c 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002794:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002798:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279a:	2302      	movs	r3, #2
 800279c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279e:	2300      	movs	r3, #0
 80027a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a2:	2303      	movs	r3, #3
 80027a4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80027a6:	230c      	movs	r3, #12
 80027a8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027ae:	4619      	mov	r1, r3
 80027b0:	4835      	ldr	r0, [pc, #212]	@ (8002888 <MX_GPIO_Init+0x300>)
 80027b2:	f001 f90b 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80027b6:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 80027ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027bc:	2302      	movs	r3, #2
 80027be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c0:	2300      	movs	r3, #0
 80027c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c4:	2300      	movs	r3, #0
 80027c6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80027c8:	230c      	movs	r3, #12
 80027ca:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027d0:	4619      	mov	r1, r3
 80027d2:	482c      	ldr	r0, [pc, #176]	@ (8002884 <MX_GPIO_Init+0x2fc>)
 80027d4:	f001 f8fa 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80027d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80027dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027de:	2300      	movs	r3, #0
 80027e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e2:	2300      	movs	r3, #0
 80027e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80027e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027ea:	4619      	mov	r1, r3
 80027ec:	4825      	ldr	r0, [pc, #148]	@ (8002884 <MX_GPIO_Init+0x2fc>)
 80027ee:	f001 f8ed 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80027f2:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80027f6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f8:	2302      	movs	r3, #2
 80027fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fc:	2300      	movs	r3, #0
 80027fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002800:	2303      	movs	r3, #3
 8002802:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002804:	230c      	movs	r3, #12
 8002806:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002808:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800280c:	4619      	mov	r1, r3
 800280e:	481a      	ldr	r0, [pc, #104]	@ (8002878 <MX_GPIO_Init+0x2f0>)
 8002810:	f001 f8dc 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8002814:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002818:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800281a:	2300      	movs	r3, #0
 800281c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281e:	2300      	movs	r3, #0
 8002820:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8002822:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002826:	4619      	mov	r1, r3
 8002828:	4813      	ldr	r0, [pc, #76]	@ (8002878 <MX_GPIO_Init+0x2f0>)
 800282a:	f001 f8cf 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800282e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002832:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002834:	2301      	movs	r3, #1
 8002836:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002838:	2300      	movs	r3, #0
 800283a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283c:	2300      	movs	r3, #0
 800283e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002840:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002844:	4619      	mov	r1, r3
 8002846:	480c      	ldr	r0, [pc, #48]	@ (8002878 <MX_GPIO_Init+0x2f0>)
 8002848:	f001 f8c0 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800284c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002850:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002852:	2302      	movs	r3, #2
 8002854:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002856:	2300      	movs	r3, #0
 8002858:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800285a:	2303      	movs	r3, #3
 800285c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800285e:	2307      	movs	r3, #7
 8002860:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002862:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002866:	4619      	mov	r1, r3
 8002868:	e010      	b.n	800288c <MX_GPIO_Init+0x304>
 800286a:	bf00      	nop
 800286c:	40023800 	.word	0x40023800
 8002870:	40020800 	.word	0x40020800
 8002874:	40020000 	.word	0x40020000
 8002878:	40020c00 	.word	0x40020c00
 800287c:	40021800 	.word	0x40021800
 8002880:	40021400 	.word	0x40021400
 8002884:	40020400 	.word	0x40020400
 8002888:	40021000 	.word	0x40021000
 800288c:	4812      	ldr	r0, [pc, #72]	@ (80028d8 <MX_GPIO_Init+0x350>)
 800288e:	f001 f89d 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8002892:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002896:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002898:	2301      	movs	r3, #1
 800289a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289c:	2300      	movs	r3, #0
 800289e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a0:	2300      	movs	r3, #0
 80028a2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028a8:	4619      	mov	r1, r3
 80028aa:	480c      	ldr	r0, [pc, #48]	@ (80028dc <MX_GPIO_Init+0x354>)
 80028ac:	f001 f88e 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80028b0:	2360      	movs	r3, #96	@ 0x60
 80028b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b4:	2302      	movs	r3, #2
 80028b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b8:	2300      	movs	r3, #0
 80028ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028bc:	2303      	movs	r3, #3
 80028be:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80028c0:	230c      	movs	r3, #12
 80028c2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028c8:	4619      	mov	r1, r3
 80028ca:	4805      	ldr	r0, [pc, #20]	@ (80028e0 <MX_GPIO_Init+0x358>)
 80028cc:	f001 f87e 	bl	80039cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80028d0:	bf00      	nop
 80028d2:	3738      	adds	r7, #56	@ 0x38
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40020000 	.word	0x40020000
 80028dc:	40021800 	.word	0x40021800
 80028e0:	40020400 	.word	0x40020400

080028e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80028e8:	b672      	cpsid	i
}
 80028ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028ec:	bf00      	nop
 80028ee:	e7fd      	b.n	80028ec <Error_Handler+0x8>

080028f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	607b      	str	r3, [r7, #4]
 80028fa:	4b10      	ldr	r3, [pc, #64]	@ (800293c <HAL_MspInit+0x4c>)
 80028fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028fe:	4a0f      	ldr	r2, [pc, #60]	@ (800293c <HAL_MspInit+0x4c>)
 8002900:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002904:	6453      	str	r3, [r2, #68]	@ 0x44
 8002906:	4b0d      	ldr	r3, [pc, #52]	@ (800293c <HAL_MspInit+0x4c>)
 8002908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800290a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800290e:	607b      	str	r3, [r7, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	603b      	str	r3, [r7, #0]
 8002916:	4b09      	ldr	r3, [pc, #36]	@ (800293c <HAL_MspInit+0x4c>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291a:	4a08      	ldr	r2, [pc, #32]	@ (800293c <HAL_MspInit+0x4c>)
 800291c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002920:	6413      	str	r3, [r2, #64]	@ 0x40
 8002922:	4b06      	ldr	r3, [pc, #24]	@ (800293c <HAL_MspInit+0x4c>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002926:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800292a:	603b      	str	r3, [r7, #0]
 800292c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800292e:	2007      	movs	r0, #7
 8002930:	f001 f818 	bl	8003964 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002934:	bf00      	nop
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40023800 	.word	0x40023800

08002940 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b08a      	sub	sp, #40	@ 0x28
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002948:	f107 0314 	add.w	r3, r7, #20
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	605a      	str	r2, [r3, #4]
 8002952:	609a      	str	r2, [r3, #8]
 8002954:	60da      	str	r2, [r3, #12]
 8002956:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a29      	ldr	r2, [pc, #164]	@ (8002a04 <HAL_I2C_MspInit+0xc4>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d14b      	bne.n	80029fa <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002962:	2300      	movs	r3, #0
 8002964:	613b      	str	r3, [r7, #16]
 8002966:	4b28      	ldr	r3, [pc, #160]	@ (8002a08 <HAL_I2C_MspInit+0xc8>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296a:	4a27      	ldr	r2, [pc, #156]	@ (8002a08 <HAL_I2C_MspInit+0xc8>)
 800296c:	f043 0304 	orr.w	r3, r3, #4
 8002970:	6313      	str	r3, [r2, #48]	@ 0x30
 8002972:	4b25      	ldr	r3, [pc, #148]	@ (8002a08 <HAL_I2C_MspInit+0xc8>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002976:	f003 0304 	and.w	r3, r3, #4
 800297a:	613b      	str	r3, [r7, #16]
 800297c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800297e:	2300      	movs	r3, #0
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	4b21      	ldr	r3, [pc, #132]	@ (8002a08 <HAL_I2C_MspInit+0xc8>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002986:	4a20      	ldr	r2, [pc, #128]	@ (8002a08 <HAL_I2C_MspInit+0xc8>)
 8002988:	f043 0301 	orr.w	r3, r3, #1
 800298c:	6313      	str	r3, [r2, #48]	@ 0x30
 800298e:	4b1e      	ldr	r3, [pc, #120]	@ (8002a08 <HAL_I2C_MspInit+0xc8>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800299a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800299e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029a0:	2312      	movs	r3, #18
 80029a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a4:	2300      	movs	r3, #0
 80029a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a8:	2300      	movs	r3, #0
 80029aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80029ac:	2304      	movs	r3, #4
 80029ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80029b0:	f107 0314 	add.w	r3, r7, #20
 80029b4:	4619      	mov	r1, r3
 80029b6:	4815      	ldr	r0, [pc, #84]	@ (8002a0c <HAL_I2C_MspInit+0xcc>)
 80029b8:	f001 f808 	bl	80039cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80029bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029c2:	2312      	movs	r3, #18
 80029c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c6:	2300      	movs	r3, #0
 80029c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ca:	2300      	movs	r3, #0
 80029cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80029ce:	2304      	movs	r3, #4
 80029d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80029d2:	f107 0314 	add.w	r3, r7, #20
 80029d6:	4619      	mov	r1, r3
 80029d8:	480d      	ldr	r0, [pc, #52]	@ (8002a10 <HAL_I2C_MspInit+0xd0>)
 80029da:	f000 fff7 	bl	80039cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	60bb      	str	r3, [r7, #8]
 80029e2:	4b09      	ldr	r3, [pc, #36]	@ (8002a08 <HAL_I2C_MspInit+0xc8>)
 80029e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e6:	4a08      	ldr	r2, [pc, #32]	@ (8002a08 <HAL_I2C_MspInit+0xc8>)
 80029e8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80029ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80029ee:	4b06      	ldr	r3, [pc, #24]	@ (8002a08 <HAL_I2C_MspInit+0xc8>)
 80029f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80029f6:	60bb      	str	r3, [r7, #8]
 80029f8:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 80029fa:	bf00      	nop
 80029fc:	3728      	adds	r7, #40	@ 0x28
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40005c00 	.word	0x40005c00
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	40020800 	.word	0x40020800
 8002a10:	40020000 	.word	0x40020000

08002a14 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b09a      	sub	sp, #104	@ 0x68
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a1c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	605a      	str	r2, [r3, #4]
 8002a26:	609a      	str	r2, [r3, #8]
 8002a28:	60da      	str	r2, [r3, #12]
 8002a2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a30:	2230      	movs	r2, #48	@ 0x30
 8002a32:	2100      	movs	r1, #0
 8002a34:	4618      	mov	r0, r3
 8002a36:	f004 fbb7 	bl	80071a8 <memset>
  if(hltdc->Instance==LTDC)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a81      	ldr	r2, [pc, #516]	@ (8002c44 <HAL_LTDC_MspInit+0x230>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	f040 80fb 	bne.w	8002c3c <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002a46:	2308      	movs	r3, #8
 8002a48:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
 8002a4a:	23c8      	movs	r3, #200	@ 0xc8
 8002a4c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8002a4e:	2302      	movs	r3, #2
 8002a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 8002a52:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8002a56:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f003 fa69 	bl	8005f34 <HAL_RCCEx_PeriphCLKConfig>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8002a68:	f7ff ff3c 	bl	80028e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	623b      	str	r3, [r7, #32]
 8002a70:	4b75      	ldr	r3, [pc, #468]	@ (8002c48 <HAL_LTDC_MspInit+0x234>)
 8002a72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a74:	4a74      	ldr	r2, [pc, #464]	@ (8002c48 <HAL_LTDC_MspInit+0x234>)
 8002a76:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002a7a:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a7c:	4b72      	ldr	r3, [pc, #456]	@ (8002c48 <HAL_LTDC_MspInit+0x234>)
 8002a7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a80:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a84:	623b      	str	r3, [r7, #32]
 8002a86:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a88:	2300      	movs	r3, #0
 8002a8a:	61fb      	str	r3, [r7, #28]
 8002a8c:	4b6e      	ldr	r3, [pc, #440]	@ (8002c48 <HAL_LTDC_MspInit+0x234>)
 8002a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a90:	4a6d      	ldr	r2, [pc, #436]	@ (8002c48 <HAL_LTDC_MspInit+0x234>)
 8002a92:	f043 0320 	orr.w	r3, r3, #32
 8002a96:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a98:	4b6b      	ldr	r3, [pc, #428]	@ (8002c48 <HAL_LTDC_MspInit+0x234>)
 8002a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9c:	f003 0320 	and.w	r3, r3, #32
 8002aa0:	61fb      	str	r3, [r7, #28]
 8002aa2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	61bb      	str	r3, [r7, #24]
 8002aa8:	4b67      	ldr	r3, [pc, #412]	@ (8002c48 <HAL_LTDC_MspInit+0x234>)
 8002aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aac:	4a66      	ldr	r2, [pc, #408]	@ (8002c48 <HAL_LTDC_MspInit+0x234>)
 8002aae:	f043 0301 	orr.w	r3, r3, #1
 8002ab2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ab4:	4b64      	ldr	r3, [pc, #400]	@ (8002c48 <HAL_LTDC_MspInit+0x234>)
 8002ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	61bb      	str	r3, [r7, #24]
 8002abe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	617b      	str	r3, [r7, #20]
 8002ac4:	4b60      	ldr	r3, [pc, #384]	@ (8002c48 <HAL_LTDC_MspInit+0x234>)
 8002ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac8:	4a5f      	ldr	r2, [pc, #380]	@ (8002c48 <HAL_LTDC_MspInit+0x234>)
 8002aca:	f043 0302 	orr.w	r3, r3, #2
 8002ace:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ad0:	4b5d      	ldr	r3, [pc, #372]	@ (8002c48 <HAL_LTDC_MspInit+0x234>)
 8002ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	617b      	str	r3, [r7, #20]
 8002ada:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002adc:	2300      	movs	r3, #0
 8002ade:	613b      	str	r3, [r7, #16]
 8002ae0:	4b59      	ldr	r3, [pc, #356]	@ (8002c48 <HAL_LTDC_MspInit+0x234>)
 8002ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae4:	4a58      	ldr	r2, [pc, #352]	@ (8002c48 <HAL_LTDC_MspInit+0x234>)
 8002ae6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002aea:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aec:	4b56      	ldr	r3, [pc, #344]	@ (8002c48 <HAL_LTDC_MspInit+0x234>)
 8002aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002af4:	613b      	str	r3, [r7, #16]
 8002af6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002af8:	2300      	movs	r3, #0
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	4b52      	ldr	r3, [pc, #328]	@ (8002c48 <HAL_LTDC_MspInit+0x234>)
 8002afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b00:	4a51      	ldr	r2, [pc, #324]	@ (8002c48 <HAL_LTDC_MspInit+0x234>)
 8002b02:	f043 0304 	orr.w	r3, r3, #4
 8002b06:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b08:	4b4f      	ldr	r3, [pc, #316]	@ (8002c48 <HAL_LTDC_MspInit+0x234>)
 8002b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	60fb      	str	r3, [r7, #12]
 8002b12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b14:	2300      	movs	r3, #0
 8002b16:	60bb      	str	r3, [r7, #8]
 8002b18:	4b4b      	ldr	r3, [pc, #300]	@ (8002c48 <HAL_LTDC_MspInit+0x234>)
 8002b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b1c:	4a4a      	ldr	r2, [pc, #296]	@ (8002c48 <HAL_LTDC_MspInit+0x234>)
 8002b1e:	f043 0308 	orr.w	r3, r3, #8
 8002b22:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b24:	4b48      	ldr	r3, [pc, #288]	@ (8002c48 <HAL_LTDC_MspInit+0x234>)
 8002b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b28:	f003 0308 	and.w	r3, r3, #8
 8002b2c:	60bb      	str	r3, [r7, #8]
 8002b2e:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002b30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b34:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b36:	2302      	movs	r3, #2
 8002b38:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b42:	230e      	movs	r3, #14
 8002b44:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002b46:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	483f      	ldr	r0, [pc, #252]	@ (8002c4c <HAL_LTDC_MspInit+0x238>)
 8002b4e:	f000 ff3d 	bl	80039cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002b52:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002b56:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b58:	2302      	movs	r3, #2
 8002b5a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b60:	2300      	movs	r3, #0
 8002b62:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b64:	230e      	movs	r3, #14
 8002b66:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b68:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4838      	ldr	r0, [pc, #224]	@ (8002c50 <HAL_LTDC_MspInit+0x23c>)
 8002b70:	f000 ff2c 	bl	80039cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002b74:	2303      	movs	r3, #3
 8002b76:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b78:	2302      	movs	r3, #2
 8002b7a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b80:	2300      	movs	r3, #0
 8002b82:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002b84:	2309      	movs	r3, #9
 8002b86:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b88:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	4831      	ldr	r0, [pc, #196]	@ (8002c54 <HAL_LTDC_MspInit+0x240>)
 8002b90:	f000 ff1c 	bl	80039cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002b94:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002b98:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ba6:	230e      	movs	r3, #14
 8002ba8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002baa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4828      	ldr	r0, [pc, #160]	@ (8002c54 <HAL_LTDC_MspInit+0x240>)
 8002bb2:	f000 ff0b 	bl	80039cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002bb6:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002bba:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002bc8:	230e      	movs	r3, #14
 8002bca:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002bcc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4821      	ldr	r0, [pc, #132]	@ (8002c58 <HAL_LTDC_MspInit+0x244>)
 8002bd4:	f000 fefa 	bl	80039cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002bd8:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002bdc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bde:	2302      	movs	r3, #2
 8002be0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be2:	2300      	movs	r3, #0
 8002be4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be6:	2300      	movs	r3, #0
 8002be8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002bea:	230e      	movs	r3, #14
 8002bec:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bee:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	4819      	ldr	r0, [pc, #100]	@ (8002c5c <HAL_LTDC_MspInit+0x248>)
 8002bf6:	f000 fee9 	bl	80039cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002bfa:	2348      	movs	r3, #72	@ 0x48
 8002bfc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c02:	2300      	movs	r3, #0
 8002c04:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c06:	2300      	movs	r3, #0
 8002c08:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002c0a:	230e      	movs	r3, #14
 8002c0c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c0e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002c12:	4619      	mov	r1, r3
 8002c14:	4812      	ldr	r0, [pc, #72]	@ (8002c60 <HAL_LTDC_MspInit+0x24c>)
 8002c16:	f000 fed9 	bl	80039cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002c1a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002c1e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c20:	2302      	movs	r3, #2
 8002c22:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002c2c:	2309      	movs	r3, #9
 8002c2e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c30:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002c34:	4619      	mov	r1, r3
 8002c36:	4808      	ldr	r0, [pc, #32]	@ (8002c58 <HAL_LTDC_MspInit+0x244>)
 8002c38:	f000 fec8 	bl	80039cc <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002c3c:	bf00      	nop
 8002c3e:	3768      	adds	r7, #104	@ 0x68
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	40016800 	.word	0x40016800
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	40021400 	.word	0x40021400
 8002c50:	40020000 	.word	0x40020000
 8002c54:	40020400 	.word	0x40020400
 8002c58:	40021800 	.word	0x40021800
 8002c5c:	40020800 	.word	0x40020800
 8002c60:	40020c00 	.word	0x40020c00

08002c64 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a0b      	ldr	r2, [pc, #44]	@ (8002ca0 <HAL_RNG_MspInit+0x3c>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d10d      	bne.n	8002c92 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002c76:	2300      	movs	r3, #0
 8002c78:	60fb      	str	r3, [r7, #12]
 8002c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8002ca4 <HAL_RNG_MspInit+0x40>)
 8002c7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c7e:	4a09      	ldr	r2, [pc, #36]	@ (8002ca4 <HAL_RNG_MspInit+0x40>)
 8002c80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c84:	6353      	str	r3, [r2, #52]	@ 0x34
 8002c86:	4b07      	ldr	r3, [pc, #28]	@ (8002ca4 <HAL_RNG_MspInit+0x40>)
 8002c88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8002c92:	bf00      	nop
 8002c94:	3714      	adds	r7, #20
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	50060800 	.word	0x50060800
 8002ca4:	40023800 	.word	0x40023800

08002ca8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b08a      	sub	sp, #40	@ 0x28
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb0:	f107 0314 	add.w	r3, r7, #20
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	605a      	str	r2, [r3, #4]
 8002cba:	609a      	str	r2, [r3, #8]
 8002cbc:	60da      	str	r2, [r3, #12]
 8002cbe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a19      	ldr	r2, [pc, #100]	@ (8002d2c <HAL_SPI_MspInit+0x84>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d12c      	bne.n	8002d24 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002cca:	2300      	movs	r3, #0
 8002ccc:	613b      	str	r3, [r7, #16]
 8002cce:	4b18      	ldr	r3, [pc, #96]	@ (8002d30 <HAL_SPI_MspInit+0x88>)
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cd2:	4a17      	ldr	r2, [pc, #92]	@ (8002d30 <HAL_SPI_MspInit+0x88>)
 8002cd4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002cd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cda:	4b15      	ldr	r3, [pc, #84]	@ (8002d30 <HAL_SPI_MspInit+0x88>)
 8002cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ce2:	613b      	str	r3, [r7, #16]
 8002ce4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60fb      	str	r3, [r7, #12]
 8002cea:	4b11      	ldr	r3, [pc, #68]	@ (8002d30 <HAL_SPI_MspInit+0x88>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cee:	4a10      	ldr	r2, [pc, #64]	@ (8002d30 <HAL_SPI_MspInit+0x88>)
 8002cf0:	f043 0320 	orr.w	r3, r3, #32
 8002cf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8002d30 <HAL_SPI_MspInit+0x88>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfa:	f003 0320 	and.w	r3, r3, #32
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002d02:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d08:	2302      	movs	r3, #2
 8002d0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d10:	2300      	movs	r3, #0
 8002d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002d14:	2305      	movs	r3, #5
 8002d16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002d18:	f107 0314 	add.w	r3, r7, #20
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4805      	ldr	r0, [pc, #20]	@ (8002d34 <HAL_SPI_MspInit+0x8c>)
 8002d20:	f000 fe54 	bl	80039cc <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8002d24:	bf00      	nop
 8002d26:	3728      	adds	r7, #40	@ 0x28
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40015000 	.word	0x40015000
 8002d30:	40023800 	.word	0x40023800
 8002d34:	40021400 	.word	0x40021400

08002d38 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a08      	ldr	r2, [pc, #32]	@ (8002d68 <HAL_SPI_MspDeInit+0x30>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d10a      	bne.n	8002d60 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002d4a:	4b08      	ldr	r3, [pc, #32]	@ (8002d6c <HAL_SPI_MspDeInit+0x34>)
 8002d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d4e:	4a07      	ldr	r2, [pc, #28]	@ (8002d6c <HAL_SPI_MspDeInit+0x34>)
 8002d50:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002d54:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002d56:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8002d5a:	4805      	ldr	r0, [pc, #20]	@ (8002d70 <HAL_SPI_MspDeInit+0x38>)
 8002d5c:	f000 ffe2 	bl	8003d24 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002d60:	bf00      	nop
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40015000 	.word	0x40015000
 8002d6c:	40023800 	.word	0x40023800
 8002d70:	40021400 	.word	0x40021400

08002d74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d84:	d10d      	bne.n	8002da2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d86:	2300      	movs	r3, #0
 8002d88:	60fb      	str	r3, [r7, #12]
 8002d8a:	4b09      	ldr	r3, [pc, #36]	@ (8002db0 <HAL_TIM_Base_MspInit+0x3c>)
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8e:	4a08      	ldr	r2, [pc, #32]	@ (8002db0 <HAL_TIM_Base_MspInit+0x3c>)
 8002d90:	f043 0301 	orr.w	r3, r3, #1
 8002d94:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d96:	4b06      	ldr	r3, [pc, #24]	@ (8002db0 <HAL_TIM_Base_MspInit+0x3c>)
 8002d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	60fb      	str	r3, [r7, #12]
 8002da0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002da2:	bf00      	nop
 8002da4:	3714      	adds	r7, #20
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	40023800 	.word	0x40023800

08002db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002db8:	bf00      	nop
 8002dba:	e7fd      	b.n	8002db8 <NMI_Handler+0x4>

08002dbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dc0:	bf00      	nop
 8002dc2:	e7fd      	b.n	8002dc0 <HardFault_Handler+0x4>

08002dc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dc8:	bf00      	nop
 8002dca:	e7fd      	b.n	8002dc8 <MemManage_Handler+0x4>

08002dcc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dd0:	bf00      	nop
 8002dd2:	e7fd      	b.n	8002dd0 <BusFault_Handler+0x4>

08002dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dd8:	bf00      	nop
 8002dda:	e7fd      	b.n	8002dd8 <UsageFault_Handler+0x4>

08002ddc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002de0:	bf00      	nop
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dea:	b480      	push	{r7}
 8002dec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dee:	bf00      	nop
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dfc:	bf00      	nop
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
	...

08002e08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void) {
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8002e0c:	f000 fcb4 	bl	8003778 <HAL_IncTick>

  static uint32_t tick_count = 0;
  tick_count++;
 8002e10:	4b14      	ldr	r3, [pc, #80]	@ (8002e64 <SysTick_Handler+0x5c>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	3301      	adds	r3, #1
 8002e16:	4a13      	ldr	r2, [pc, #76]	@ (8002e64 <SysTick_Handler+0x5c>)
 8002e18:	6013      	str	r3, [r2, #0]

  // Add events periodically
  if ((tick_count % SCHEDULER_TICK_MS) == 0) {
 8002e1a:	4b12      	ldr	r3, [pc, #72]	@ (8002e64 <SysTick_Handler+0x5c>)
 8002e1c:	6819      	ldr	r1, [r3, #0]
 8002e1e:	4b12      	ldr	r3, [pc, #72]	@ (8002e68 <SysTick_Handler+0x60>)
 8002e20:	fba3 2301 	umull	r2, r3, r3, r1
 8002e24:	08da      	lsrs	r2, r3, #3
 8002e26:	4613      	mov	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	4413      	add	r3, r2
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	1aca      	subs	r2, r1, r3
 8002e30:	2a00      	cmp	r2, #0
 8002e32:	d105      	bne.n	8002e40 <SysTick_Handler+0x38>
     scheduler_ticks = 1;
 8002e34:	4b0d      	ldr	r3, [pc, #52]	@ (8002e6c <SysTick_Handler+0x64>)
 8002e36:	2201      	movs	r2, #1
 8002e38:	601a      	str	r2, [r3, #0]
     addSchedulerEvent(HW_BUTTON_POLLING_EVENT);
 8002e3a:	2002      	movs	r0, #2
 8002e3c:	f7fe fe72 	bl	8001b24 <addSchedulerEvent>
  }
  if ((tick_count % 50) == 0) { // Touch poll rate
 8002e40:	4b08      	ldr	r3, [pc, #32]	@ (8002e64 <SysTick_Handler+0x5c>)
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	4b0a      	ldr	r3, [pc, #40]	@ (8002e70 <SysTick_Handler+0x68>)
 8002e46:	fba3 1302 	umull	r1, r3, r3, r2
 8002e4a:	091b      	lsrs	r3, r3, #4
 8002e4c:	2132      	movs	r1, #50	@ 0x32
 8002e4e:	fb01 f303 	mul.w	r3, r1, r3
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d102      	bne.n	8002e5e <SysTick_Handler+0x56>
      addSchedulerEvent(TOUCH_POLLING_EVENT);
 8002e58:	2001      	movs	r0, #1
 8002e5a:	f7fe fe63 	bl	8001b24 <addSchedulerEvent>
  }

}
 8002e5e:	bf00      	nop
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	20025be0 	.word	0x20025be0
 8002e68:	cccccccd 	.word	0xcccccccd
 8002e6c:	20025bdc 	.word	0x20025bdc
 8002e70:	51eb851f 	.word	0x51eb851f

08002e74 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8002e7a:	f000 f9cd 	bl	8003218 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8002e7e:	f000 f98d 	bl	800319c <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002e82:	2202      	movs	r2, #2
 8002e84:	2103      	movs	r1, #3
 8002e86:	2082      	movs	r0, #130	@ 0x82
 8002e88:	f000 fa1a 	bl	80032c0 <I2C3_Write>
    HAL_Delay(5);
 8002e8c:	2005      	movs	r0, #5
 8002e8e:	f000 fc93 	bl	80037b8 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002e92:	2200      	movs	r2, #0
 8002e94:	2103      	movs	r1, #3
 8002e96:	2082      	movs	r0, #130	@ 0x82
 8002e98:	f000 fa12 	bl	80032c0 <I2C3_Write>
    HAL_Delay(2);
 8002e9c:	2002      	movs	r0, #2
 8002e9e:	f000 fc8b 	bl	80037b8 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8002ea2:	1cba      	adds	r2, r7, #2
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	2082      	movs	r0, #130	@ 0x82
 8002eaa:	f000 fa59 	bl	8003360 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8002eae:	887b      	ldrh	r3, [r7, #2]
 8002eb0:	021b      	lsls	r3, r3, #8
 8002eb2:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8002eb4:	887b      	ldrh	r3, [r7, #2]
 8002eb6:	0a1b      	lsrs	r3, r3, #8
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	88fb      	ldrh	r3, [r7, #6]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8002ec0:	88fb      	ldrh	r3, [r7, #6]
 8002ec2:	f640 0211 	movw	r2, #2065	@ 0x811
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d001      	beq.n	8002ece <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e075      	b.n	8002fba <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002ece:	2202      	movs	r2, #2
 8002ed0:	2103      	movs	r1, #3
 8002ed2:	2082      	movs	r0, #130	@ 0x82
 8002ed4:	f000 f9f4 	bl	80032c0 <I2C3_Write>
    HAL_Delay(5);
 8002ed8:	2005      	movs	r0, #5
 8002eda:	f000 fc6d 	bl	80037b8 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002ede:	2200      	movs	r2, #0
 8002ee0:	2103      	movs	r1, #3
 8002ee2:	2082      	movs	r0, #130	@ 0x82
 8002ee4:	f000 f9ec 	bl	80032c0 <I2C3_Write>
    HAL_Delay(2);
 8002ee8:	2002      	movs	r0, #2
 8002eea:	f000 fc65 	bl	80037b8 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002eee:	2004      	movs	r0, #4
 8002ef0:	f000 f867 	bl	8002fc2 <STMPE811_Read>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8002ef8:	797b      	ldrb	r3, [r7, #5]
 8002efa:	f023 0301 	bic.w	r3, r3, #1
 8002efe:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002f00:	797b      	ldrb	r3, [r7, #5]
 8002f02:	461a      	mov	r2, r3
 8002f04:	2104      	movs	r1, #4
 8002f06:	2082      	movs	r0, #130	@ 0x82
 8002f08:	f000 f9da 	bl	80032c0 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002f0c:	2004      	movs	r0, #4
 8002f0e:	f000 f858 	bl	8002fc2 <STMPE811_Read>
 8002f12:	4603      	mov	r3, r0
 8002f14:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8002f16:	797b      	ldrb	r3, [r7, #5]
 8002f18:	f023 0302 	bic.w	r3, r3, #2
 8002f1c:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002f1e:	797b      	ldrb	r3, [r7, #5]
 8002f20:	461a      	mov	r2, r3
 8002f22:	2104      	movs	r1, #4
 8002f24:	2082      	movs	r0, #130	@ 0x82
 8002f26:	f000 f9cb 	bl	80032c0 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8002f2a:	2249      	movs	r2, #73	@ 0x49
 8002f2c:	2120      	movs	r1, #32
 8002f2e:	2082      	movs	r0, #130	@ 0x82
 8002f30:	f000 f9c6 	bl	80032c0 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8002f34:	2002      	movs	r0, #2
 8002f36:	f000 fc3f 	bl	80037b8 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	2121      	movs	r1, #33	@ 0x21
 8002f3e:	2082      	movs	r0, #130	@ 0x82
 8002f40:	f000 f9be 	bl	80032c0 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8002f44:	2017      	movs	r0, #23
 8002f46:	f000 f83c 	bl	8002fc2 <STMPE811_Read>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8002f4e:	797b      	ldrb	r3, [r7, #5]
 8002f50:	f043 031e 	orr.w	r3, r3, #30
 8002f54:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8002f56:	797b      	ldrb	r3, [r7, #5]
 8002f58:	461a      	mov	r2, r3
 8002f5a:	2117      	movs	r1, #23
 8002f5c:	2082      	movs	r0, #130	@ 0x82
 8002f5e:	f000 f9af 	bl	80032c0 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8002f62:	229a      	movs	r2, #154	@ 0x9a
 8002f64:	2141      	movs	r1, #65	@ 0x41
 8002f66:	2082      	movs	r0, #130	@ 0x82
 8002f68:	f000 f9aa 	bl	80032c0 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	214a      	movs	r1, #74	@ 0x4a
 8002f70:	2082      	movs	r0, #130	@ 0x82
 8002f72:	f000 f9a5 	bl	80032c0 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002f76:	2201      	movs	r2, #1
 8002f78:	214b      	movs	r1, #75	@ 0x4b
 8002f7a:	2082      	movs	r0, #130	@ 0x82
 8002f7c:	f000 f9a0 	bl	80032c0 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002f80:	2200      	movs	r2, #0
 8002f82:	214b      	movs	r1, #75	@ 0x4b
 8002f84:	2082      	movs	r0, #130	@ 0x82
 8002f86:	f000 f99b 	bl	80032c0 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	2156      	movs	r1, #86	@ 0x56
 8002f8e:	2082      	movs	r0, #130	@ 0x82
 8002f90:	f000 f996 	bl	80032c0 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8002f94:	2201      	movs	r2, #1
 8002f96:	2158      	movs	r1, #88	@ 0x58
 8002f98:	2082      	movs	r0, #130	@ 0x82
 8002f9a:	f000 f991 	bl	80032c0 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8002f9e:	2203      	movs	r2, #3
 8002fa0:	2140      	movs	r1, #64	@ 0x40
 8002fa2:	2082      	movs	r0, #130	@ 0x82
 8002fa4:	f000 f98c 	bl	80032c0 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8002fa8:	22ff      	movs	r2, #255	@ 0xff
 8002faa:	210b      	movs	r1, #11
 8002fac:	2082      	movs	r0, #130	@ 0x82
 8002fae:	f000 f987 	bl	80032c0 <I2C3_Write>
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8002fb2:	20c8      	movs	r0, #200	@ 0xc8
 8002fb4:	f000 fc00 	bl	80037b8 <HAL_Delay>

    return STMPE811_State_Ok;
 8002fb8:	2302      	movs	r3, #2

}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b084      	sub	sp, #16
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	4603      	mov	r3, r0
 8002fca:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8002fcc:	f107 020f 	add.w	r2, r7, #15
 8002fd0:	79fb      	ldrb	r3, [r7, #7]
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	2082      	movs	r0, #130	@ 0x82
 8002fd6:	f000 f99d 	bl	8003314 <I2C3_Read>

    return readData;
 8002fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	791a      	ldrb	r2, [r3, #4]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 8002ff4:	2040      	movs	r0, #64	@ 0x40
 8002ff6:	f7ff ffe4 	bl	8002fc2 <STMPE811_Read>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 8002ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003002:	2b00      	cmp	r3, #0
 8003004:	db0e      	blt.n	8003024 <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 800300c:	2201      	movs	r2, #1
 800300e:	214b      	movs	r1, #75	@ 0x4b
 8003010:	2082      	movs	r0, #130	@ 0x82
 8003012:	f000 f955 	bl	80032c0 <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8003016:	2200      	movs	r2, #0
 8003018:	214b      	movs	r1, #75	@ 0x4b
 800301a:	2082      	movs	r0, #130	@ 0x82
 800301c:	f000 f950 	bl	80032c0 <I2C3_Write>

        return STMPE811_State_Released;
 8003020:	2301      	movs	r3, #1
 8003022:	e0a7      	b.n	8003174 <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	799b      	ldrb	r3, [r3, #6]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d117      	bne.n	800305c <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	881b      	ldrh	r3, [r3, #0]
 8003030:	4618      	mov	r0, r3
 8003032:	f000 f9b7 	bl	80033a4 <TM_STMPE811_ReadX>
 8003036:	4603      	mov	r3, r0
 8003038:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 800303c:	b29a      	uxth	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	885b      	ldrh	r3, [r3, #2]
 8003046:	4618      	mov	r0, r3
 8003048:	f000 fa0c 	bl	8003464 <TM_STMPE811_ReadY>
 800304c:	4603      	mov	r3, r0
 800304e:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8003052:	3301      	adds	r3, #1
 8003054:	b29a      	uxth	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	805a      	strh	r2, [r3, #2]
 800305a:	e048      	b.n	80030ee <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	799b      	ldrb	r3, [r3, #6]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d112      	bne.n	800308a <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	881b      	ldrh	r3, [r3, #0]
 8003068:	4618      	mov	r0, r3
 800306a:	f000 f99b 	bl	80033a4 <TM_STMPE811_ReadX>
 800306e:	4603      	mov	r3, r0
 8003070:	461a      	mov	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	885b      	ldrh	r3, [r3, #2]
 800307a:	4618      	mov	r0, r3
 800307c:	f000 f9f2 	bl	8003464 <TM_STMPE811_ReadY>
 8003080:	4603      	mov	r3, r0
 8003082:	461a      	mov	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	805a      	strh	r2, [r3, #2]
 8003088:	e031      	b.n	80030ee <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	799b      	ldrb	r3, [r3, #6]
 800308e:	2b02      	cmp	r3, #2
 8003090:	d115      	bne.n	80030be <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	885b      	ldrh	r3, [r3, #2]
 8003096:	4618      	mov	r0, r3
 8003098:	f000 f984 	bl	80033a4 <TM_STMPE811_ReadX>
 800309c:	4603      	mov	r3, r0
 800309e:	461a      	mov	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	881b      	ldrh	r3, [r3, #0]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 f9db 	bl	8003464 <TM_STMPE811_ReadY>
 80030ae:	4603      	mov	r3, r0
 80030b0:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80030b4:	3301      	adds	r3, #1
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	801a      	strh	r2, [r3, #0]
 80030bc:	e017      	b.n	80030ee <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	799b      	ldrb	r3, [r3, #6]
 80030c2:	2b03      	cmp	r3, #3
 80030c4:	d113      	bne.n	80030ee <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	881b      	ldrh	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 f96a 	bl	80033a4 <TM_STMPE811_ReadX>
 80030d0:	4603      	mov	r3, r0
 80030d2:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	881b      	ldrh	r3, [r3, #0]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f000 f9bf 	bl	8003464 <TM_STMPE811_ReadY>
 80030e6:	4603      	mov	r3, r0
 80030e8:	461a      	mov	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80030ee:	2201      	movs	r2, #1
 80030f0:	214b      	movs	r1, #75	@ 0x4b
 80030f2:	2082      	movs	r0, #130	@ 0x82
 80030f4:	f000 f8e4 	bl	80032c0 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80030f8:	2200      	movs	r2, #0
 80030fa:	214b      	movs	r1, #75	@ 0x4b
 80030fc:	2082      	movs	r0, #130	@ 0x82
 80030fe:	f000 f8df 	bl	80032c0 <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	799b      	ldrb	r3, [r3, #6]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <STMPE811_ReadTouch+0x12e>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	799b      	ldrb	r3, [r3, #6]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d115      	bne.n	800313e <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	881b      	ldrh	r3, [r3, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d027      	beq.n	800316a <STMPE811_ReadTouch+0x186>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	881b      	ldrh	r3, [r3, #0]
 800311e:	2bee      	cmp	r3, #238	@ 0xee
 8003120:	d823      	bhi.n	800316a <STMPE811_ReadTouch+0x186>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	885b      	ldrh	r3, [r3, #2]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d01f      	beq.n	800316a <STMPE811_ReadTouch+0x186>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	885b      	ldrh	r3, [r3, #2]
 800312e:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8003132:	d81a      	bhi.n	800316a <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 800313a:	2300      	movs	r3, #0
 800313c:	e01a      	b.n	8003174 <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	881b      	ldrh	r3, [r3, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d012      	beq.n	800316c <STMPE811_ReadTouch+0x188>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	881b      	ldrh	r3, [r3, #0]
 800314a:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 800314e:	d80d      	bhi.n	800316c <STMPE811_ReadTouch+0x188>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	885b      	ldrh	r3, [r3, #2]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d009      	beq.n	800316c <STMPE811_ReadTouch+0x188>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	885b      	ldrh	r3, [r3, #2]
 800315c:	2bee      	cmp	r3, #238	@ 0xee
 800315e:	d805      	bhi.n	800316c <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8003166:	2300      	movs	r3, #0
 8003168:	e004      	b.n	8003174 <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 800316a:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 8003172:	2301      	movs	r3, #1
}
 8003174:	4618      	mov	r0, r3
 8003176:	3710      	adds	r7, #16
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <verifyHAL_I2C_IS_OKAY>:
    }
    return true;
}

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8003180:	4b05      	ldr	r3, [pc, #20]	@ (8003198 <verifyHAL_I2C_IS_OKAY+0x1c>)
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8003188:	bf00      	nop
 800318a:	e7fd      	b.n	8003188 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 800318c:	bf00      	nop
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	20025c38 	.word	0x20025c38

0800319c <I2C3_Init>:

static void I2C3_Init()
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 80031a2:	2300      	movs	r3, #0
 80031a4:	603b      	str	r3, [r7, #0]
 80031a6:	4b18      	ldr	r3, [pc, #96]	@ (8003208 <I2C3_Init+0x6c>)
 80031a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031aa:	4a17      	ldr	r2, [pc, #92]	@ (8003208 <I2C3_Init+0x6c>)
 80031ac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80031b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80031b2:	4b15      	ldr	r3, [pc, #84]	@ (8003208 <I2C3_Init+0x6c>)
 80031b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80031ba:	603b      	str	r3, [r7, #0]
 80031bc:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 80031be:	4b13      	ldr	r3, [pc, #76]	@ (800320c <I2C3_Init+0x70>)
 80031c0:	4a13      	ldr	r2, [pc, #76]	@ (8003210 <I2C3_Init+0x74>)
 80031c2:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 80031c4:	4b11      	ldr	r3, [pc, #68]	@ (800320c <I2C3_Init+0x70>)
 80031c6:	4a13      	ldr	r2, [pc, #76]	@ (8003214 <I2C3_Init+0x78>)
 80031c8:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80031ca:	4b10      	ldr	r3, [pc, #64]	@ (800320c <I2C3_Init+0x70>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 80031d0:	4b0e      	ldr	r3, [pc, #56]	@ (800320c <I2C3_Init+0x70>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80031d6:	4b0d      	ldr	r3, [pc, #52]	@ (800320c <I2C3_Init+0x70>)
 80031d8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80031dc:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 80031de:	4b0b      	ldr	r3, [pc, #44]	@ (800320c <I2C3_Init+0x70>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80031e4:	4b09      	ldr	r3, [pc, #36]	@ (800320c <I2C3_Init+0x70>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 80031ea:	4808      	ldr	r0, [pc, #32]	@ (800320c <I2C3_Init+0x70>)
 80031ec:	f000 fed8 	bl	8003fa0 <HAL_I2C_Init>
 80031f0:	4603      	mov	r3, r0
 80031f2:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 80031f4:	79fb      	ldrb	r3, [r7, #7]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 80031fa:	bf00      	nop
 80031fc:	e7fd      	b.n	80031fa <I2C3_Init+0x5e>
    }
    return;
 80031fe:	bf00      	nop
}
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	40023800 	.word	0x40023800
 800320c:	20025be4 	.word	0x20025be4
 8003210:	40005c00 	.word	0x40005c00
 8003214:	000186a0 	.word	0x000186a0

08003218 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b088      	sub	sp, #32
 800321c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800321e:	f107 030c 	add.w	r3, r7, #12
 8003222:	2200      	movs	r2, #0
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	605a      	str	r2, [r3, #4]
 8003228:	609a      	str	r2, [r3, #8]
 800322a:	60da      	str	r2, [r3, #12]
 800322c:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800322e:	2300      	movs	r3, #0
 8003230:	60bb      	str	r3, [r7, #8]
 8003232:	4b20      	ldr	r3, [pc, #128]	@ (80032b4 <I2C3_MspInit+0x9c>)
 8003234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003236:	4a1f      	ldr	r2, [pc, #124]	@ (80032b4 <I2C3_MspInit+0x9c>)
 8003238:	f043 0304 	orr.w	r3, r3, #4
 800323c:	6313      	str	r3, [r2, #48]	@ 0x30
 800323e:	4b1d      	ldr	r3, [pc, #116]	@ (80032b4 <I2C3_MspInit+0x9c>)
 8003240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003242:	f003 0304 	and.w	r3, r3, #4
 8003246:	60bb      	str	r3, [r7, #8]
 8003248:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800324a:	2300      	movs	r3, #0
 800324c:	607b      	str	r3, [r7, #4]
 800324e:	4b19      	ldr	r3, [pc, #100]	@ (80032b4 <I2C3_MspInit+0x9c>)
 8003250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003252:	4a18      	ldr	r2, [pc, #96]	@ (80032b4 <I2C3_MspInit+0x9c>)
 8003254:	f043 0301 	orr.w	r3, r3, #1
 8003258:	6313      	str	r3, [r2, #48]	@ 0x30
 800325a:	4b16      	ldr	r3, [pc, #88]	@ (80032b4 <I2C3_MspInit+0x9c>)
 800325c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	607b      	str	r3, [r7, #4]
 8003264:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8003266:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800326a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800326c:	2312      	movs	r3, #18
 800326e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003270:	2300      	movs	r3, #0
 8003272:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003274:	2300      	movs	r3, #0
 8003276:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003278:	2304      	movs	r3, #4
 800327a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800327c:	f107 030c 	add.w	r3, r7, #12
 8003280:	4619      	mov	r1, r3
 8003282:	480d      	ldr	r0, [pc, #52]	@ (80032b8 <I2C3_MspInit+0xa0>)
 8003284:	f000 fba2 	bl	80039cc <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8003288:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800328c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800328e:	2312      	movs	r3, #18
 8003290:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003292:	2300      	movs	r3, #0
 8003294:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003296:	2300      	movs	r3, #0
 8003298:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800329a:	2304      	movs	r3, #4
 800329c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800329e:	f107 030c 	add.w	r3, r7, #12
 80032a2:	4619      	mov	r1, r3
 80032a4:	4805      	ldr	r0, [pc, #20]	@ (80032bc <I2C3_MspInit+0xa4>)
 80032a6:	f000 fb91 	bl	80039cc <HAL_GPIO_Init>
    
}
 80032aa:	bf00      	nop
 80032ac:	3720      	adds	r7, #32
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	40023800 	.word	0x40023800
 80032b8:	40020800 	.word	0x40020800
 80032bc:	40020000 	.word	0x40020000

080032c0 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b088      	sub	sp, #32
 80032c4:	af04      	add	r7, sp, #16
 80032c6:	4603      	mov	r3, r0
 80032c8:	80fb      	strh	r3, [r7, #6]
 80032ca:	460b      	mov	r3, r1
 80032cc:	717b      	strb	r3, [r7, #5]
 80032ce:	4613      	mov	r3, r2
 80032d0:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 80032d2:	793b      	ldrb	r3, [r7, #4]
 80032d4:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 80032d6:	797b      	ldrb	r3, [r7, #5]
 80032d8:	b29a      	uxth	r2, r3
 80032da:	88f9      	ldrh	r1, [r7, #6]
 80032dc:	4b0a      	ldr	r3, [pc, #40]	@ (8003308 <I2C3_Write+0x48>)
 80032de:	9302      	str	r3, [sp, #8]
 80032e0:	2301      	movs	r3, #1
 80032e2:	9301      	str	r3, [sp, #4]
 80032e4:	f107 030f 	add.w	r3, r7, #15
 80032e8:	9300      	str	r3, [sp, #0]
 80032ea:	2301      	movs	r3, #1
 80032ec:	4807      	ldr	r0, [pc, #28]	@ (800330c <I2C3_Write+0x4c>)
 80032ee:	f000 ff9b 	bl	8004228 <HAL_I2C_Mem_Write>
 80032f2:	4603      	mov	r3, r0
 80032f4:	461a      	mov	r2, r3
 80032f6:	4b06      	ldr	r3, [pc, #24]	@ (8003310 <I2C3_Write+0x50>)
 80032f8:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 80032fa:	f7ff ff3f 	bl	800317c <verifyHAL_I2C_IS_OKAY>
}
 80032fe:	bf00      	nop
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	0003d090 	.word	0x0003d090
 800330c:	20025be4 	.word	0x20025be4
 8003310:	20025c38 	.word	0x20025c38

08003314 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af04      	add	r7, sp, #16
 800331a:	4603      	mov	r3, r0
 800331c:	603a      	str	r2, [r7, #0]
 800331e:	71fb      	strb	r3, [r7, #7]
 8003320:	460b      	mov	r3, r1
 8003322:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8003324:	79fb      	ldrb	r3, [r7, #7]
 8003326:	b299      	uxth	r1, r3
 8003328:	79bb      	ldrb	r3, [r7, #6]
 800332a:	b29a      	uxth	r2, r3
 800332c:	4b09      	ldr	r3, [pc, #36]	@ (8003354 <I2C3_Read+0x40>)
 800332e:	9302      	str	r3, [sp, #8]
 8003330:	2301      	movs	r3, #1
 8003332:	9301      	str	r3, [sp, #4]
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	2301      	movs	r3, #1
 800333a:	4807      	ldr	r0, [pc, #28]	@ (8003358 <I2C3_Read+0x44>)
 800333c:	f001 f86e 	bl	800441c <HAL_I2C_Mem_Read>
 8003340:	4603      	mov	r3, r0
 8003342:	461a      	mov	r2, r3
 8003344:	4b05      	ldr	r3, [pc, #20]	@ (800335c <I2C3_Read+0x48>)
 8003346:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8003348:	f7ff ff18 	bl	800317c <verifyHAL_I2C_IS_OKAY>
}
 800334c:	bf00      	nop
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	0003d090 	.word	0x0003d090
 8003358:	20025be4 	.word	0x20025be4
 800335c:	20025c38 	.word	0x20025c38

08003360 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af04      	add	r7, sp, #16
 8003366:	603a      	str	r2, [r7, #0]
 8003368:	461a      	mov	r2, r3
 800336a:	4603      	mov	r3, r0
 800336c:	71fb      	strb	r3, [r7, #7]
 800336e:	460b      	mov	r3, r1
 8003370:	71bb      	strb	r3, [r7, #6]
 8003372:	4613      	mov	r3, r2
 8003374:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8003376:	79fb      	ldrb	r3, [r7, #7]
 8003378:	b299      	uxth	r1, r3
 800337a:	79bb      	ldrb	r3, [r7, #6]
 800337c:	b29a      	uxth	r2, r3
 800337e:	4b07      	ldr	r3, [pc, #28]	@ (800339c <I2C3_MulitByteRead+0x3c>)
 8003380:	9302      	str	r3, [sp, #8]
 8003382:	88bb      	ldrh	r3, [r7, #4]
 8003384:	9301      	str	r3, [sp, #4]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	2301      	movs	r3, #1
 800338c:	4804      	ldr	r0, [pc, #16]	@ (80033a0 <I2C3_MulitByteRead+0x40>)
 800338e:	f001 f845 	bl	800441c <HAL_I2C_Mem_Read>
}
 8003392:	bf00      	nop
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	0003d090 	.word	0x0003d090
 80033a0:	20025be4 	.word	0x20025be4

080033a4 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	4603      	mov	r3, r0
 80033ac:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 80033ae:	204d      	movs	r0, #77	@ 0x4d
 80033b0:	f7ff fe07 	bl	8002fc2 <STMPE811_Read>
 80033b4:	4603      	mov	r3, r0
 80033b6:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 80033b8:	204e      	movs	r0, #78	@ 0x4e
 80033ba:	f7ff fe02 	bl	8002fc2 <STMPE811_Read>
 80033be:	4603      	mov	r3, r0
 80033c0:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 80033c2:	7a7b      	ldrb	r3, [r7, #9]
 80033c4:	b21b      	sxth	r3, r3
 80033c6:	021b      	lsls	r3, r3, #8
 80033c8:	b21a      	sxth	r2, r3
 80033ca:	7a3b      	ldrb	r3, [r7, #8]
 80033cc:	b21b      	sxth	r3, r3
 80033ce:	4313      	orrs	r3, r2
 80033d0:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 80033d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80033d6:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80033da:	4293      	cmp	r3, r2
 80033dc:	dc06      	bgt.n	80033ec <TM_STMPE811_ReadX+0x48>
        val = 3900 - val;
 80033de:	89fb      	ldrh	r3, [r7, #14]
 80033e0:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 80033e4:	330c      	adds	r3, #12
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	81fb      	strh	r3, [r7, #14]
 80033ea:	e005      	b.n	80033f8 <TM_STMPE811_ReadX+0x54>
    } else {
        val = 3800 - val;
 80033ec:	89fb      	ldrh	r3, [r7, #14]
 80033ee:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 80033f2:	3308      	adds	r3, #8
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 80033f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80033fc:	4a18      	ldr	r2, [pc, #96]	@ (8003460 <TM_STMPE811_ReadX+0xbc>)
 80033fe:	fb82 1203 	smull	r1, r2, r2, r3
 8003402:	441a      	add	r2, r3
 8003404:	10d2      	asrs	r2, r2, #3
 8003406:	17db      	asrs	r3, r3, #31
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 800340c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003410:	2bef      	cmp	r3, #239	@ 0xef
 8003412:	dd02      	ble.n	800341a <TM_STMPE811_ReadX+0x76>
        val = 239;
 8003414:	23ef      	movs	r3, #239	@ 0xef
 8003416:	81fb      	strh	r3, [r7, #14]
 8003418:	e005      	b.n	8003426 <TM_STMPE811_ReadX+0x82>
    } else if (val < 0) {
 800341a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800341e:	2b00      	cmp	r3, #0
 8003420:	da01      	bge.n	8003426 <TM_STMPE811_ReadX+0x82>
        val = 0;
 8003422:	2300      	movs	r3, #0
 8003424:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8003426:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800342a:	88fb      	ldrh	r3, [r7, #6]
 800342c:	429a      	cmp	r2, r3
 800342e:	dd05      	ble.n	800343c <TM_STMPE811_ReadX+0x98>
 8003430:	89fa      	ldrh	r2, [r7, #14]
 8003432:	88fb      	ldrh	r3, [r7, #6]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	b29b      	uxth	r3, r3
 8003438:	b21b      	sxth	r3, r3
 800343a:	e004      	b.n	8003446 <TM_STMPE811_ReadX+0xa2>
 800343c:	89fb      	ldrh	r3, [r7, #14]
 800343e:	88fa      	ldrh	r2, [r7, #6]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	b29b      	uxth	r3, r3
 8003444:	b21b      	sxth	r3, r3
 8003446:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8003448:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800344c:	2b04      	cmp	r3, #4
 800344e:	dd01      	ble.n	8003454 <TM_STMPE811_ReadX+0xb0>
        return val;
 8003450:	89fb      	ldrh	r3, [r7, #14]
 8003452:	e000      	b.n	8003456 <TM_STMPE811_ReadX+0xb2>
    }
    return x;
 8003454:	88fb      	ldrh	r3, [r7, #6]
}
 8003456:	4618      	mov	r0, r3
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	88888889 	.word	0x88888889

08003464 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	4603      	mov	r3, r0
 800346c:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 800346e:	204f      	movs	r0, #79	@ 0x4f
 8003470:	f7ff fda7 	bl	8002fc2 <STMPE811_Read>
 8003474:	4603      	mov	r3, r0
 8003476:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8003478:	2050      	movs	r0, #80	@ 0x50
 800347a:	f7ff fda2 	bl	8002fc2 <STMPE811_Read>
 800347e:	4603      	mov	r3, r0
 8003480:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8003482:	7a7b      	ldrb	r3, [r7, #9]
 8003484:	b21b      	sxth	r3, r3
 8003486:	021b      	lsls	r3, r3, #8
 8003488:	b21a      	sxth	r2, r3
 800348a:	7a3b      	ldrb	r3, [r7, #8]
 800348c:	b21b      	sxth	r3, r3
 800348e:	4313      	orrs	r3, r2
 8003490:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8003492:	89fb      	ldrh	r3, [r7, #14]
 8003494:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003498:	b29b      	uxth	r3, r3
 800349a:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 800349c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80034a0:	4a18      	ldr	r2, [pc, #96]	@ (8003504 <TM_STMPE811_ReadY+0xa0>)
 80034a2:	fb82 1203 	smull	r1, r2, r2, r3
 80034a6:	1052      	asrs	r2, r2, #1
 80034a8:	17db      	asrs	r3, r3, #31
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 80034ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	dc02      	bgt.n	80034bc <TM_STMPE811_ReadY+0x58>
        val = 0;
 80034b6:	2300      	movs	r3, #0
 80034b8:	81fb      	strh	r3, [r7, #14]
 80034ba:	e007      	b.n	80034cc <TM_STMPE811_ReadY+0x68>
    } else if (val >= 320) {
 80034bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80034c0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80034c4:	db02      	blt.n	80034cc <TM_STMPE811_ReadY+0x68>
        val = 319;
 80034c6:	f240 133f 	movw	r3, #319	@ 0x13f
 80034ca:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 80034cc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80034d0:	88fb      	ldrh	r3, [r7, #6]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	dd05      	ble.n	80034e2 <TM_STMPE811_ReadY+0x7e>
 80034d6:	89fa      	ldrh	r2, [r7, #14]
 80034d8:	88fb      	ldrh	r3, [r7, #6]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	b29b      	uxth	r3, r3
 80034de:	b21b      	sxth	r3, r3
 80034e0:	e004      	b.n	80034ec <TM_STMPE811_ReadY+0x88>
 80034e2:	89fb      	ldrh	r3, [r7, #14]
 80034e4:	88fa      	ldrh	r2, [r7, #6]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	b21b      	sxth	r3, r3
 80034ec:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 80034ee:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	dd01      	ble.n	80034fa <TM_STMPE811_ReadY+0x96>
        return val;
 80034f6:	89fb      	ldrh	r3, [r7, #14]
 80034f8:	e000      	b.n	80034fc <TM_STMPE811_ReadY+0x98>
    }
    return y;
 80034fa:	88fb      	ldrh	r3, [r7, #6]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	2e8ba2e9 	.word	0x2e8ba2e9

08003508 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
}
 800350c:	bf00      	nop
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr

08003516 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b086      	sub	sp, #24
 800351a:	af00      	add	r7, sp, #0
 800351c:	60f8      	str	r0, [r7, #12]
 800351e:	60b9      	str	r1, [r7, #8]
 8003520:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003522:	2300      	movs	r3, #0
 8003524:	617b      	str	r3, [r7, #20]
 8003526:	e00a      	b.n	800353e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003528:	f3af 8000 	nop.w
 800352c:	4601      	mov	r1, r0
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	1c5a      	adds	r2, r3, #1
 8003532:	60ba      	str	r2, [r7, #8]
 8003534:	b2ca      	uxtb	r2, r1
 8003536:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	3301      	adds	r3, #1
 800353c:	617b      	str	r3, [r7, #20]
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	429a      	cmp	r2, r3
 8003544:	dbf0      	blt.n	8003528 <_read+0x12>
  }

  return len;
 8003546:	687b      	ldr	r3, [r7, #4]
}
 8003548:	4618      	mov	r0, r3
 800354a:	3718      	adds	r7, #24
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800355c:	2300      	movs	r3, #0
 800355e:	617b      	str	r3, [r7, #20]
 8003560:	e009      	b.n	8003576 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	1c5a      	adds	r2, r3, #1
 8003566:	60ba      	str	r2, [r7, #8]
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	3301      	adds	r3, #1
 8003574:	617b      	str	r3, [r7, #20]
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	429a      	cmp	r2, r3
 800357c:	dbf1      	blt.n	8003562 <_write+0x12>
  }
  return len;
 800357e:	687b      	ldr	r3, [r7, #4]
}
 8003580:	4618      	mov	r0, r3
 8003582:	3718      	adds	r7, #24
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <_close>:

int _close(int file)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003590:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003594:	4618      	mov	r0, r3
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80035b0:	605a      	str	r2, [r3, #4]
  return 0;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <_isatty>:

int _isatty(int file)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80035c8:	2301      	movs	r3, #1
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr

080035d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b085      	sub	sp, #20
 80035da:	af00      	add	r7, sp, #0
 80035dc:	60f8      	str	r0, [r7, #12]
 80035de:	60b9      	str	r1, [r7, #8]
 80035e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3714      	adds	r7, #20
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035f8:	4a14      	ldr	r2, [pc, #80]	@ (800364c <_sbrk+0x5c>)
 80035fa:	4b15      	ldr	r3, [pc, #84]	@ (8003650 <_sbrk+0x60>)
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003604:	4b13      	ldr	r3, [pc, #76]	@ (8003654 <_sbrk+0x64>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d102      	bne.n	8003612 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800360c:	4b11      	ldr	r3, [pc, #68]	@ (8003654 <_sbrk+0x64>)
 800360e:	4a12      	ldr	r2, [pc, #72]	@ (8003658 <_sbrk+0x68>)
 8003610:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003612:	4b10      	ldr	r3, [pc, #64]	@ (8003654 <_sbrk+0x64>)
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4413      	add	r3, r2
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	429a      	cmp	r2, r3
 800361e:	d207      	bcs.n	8003630 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003620:	f003 fdca 	bl	80071b8 <__errno>
 8003624:	4603      	mov	r3, r0
 8003626:	220c      	movs	r2, #12
 8003628:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800362a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800362e:	e009      	b.n	8003644 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003630:	4b08      	ldr	r3, [pc, #32]	@ (8003654 <_sbrk+0x64>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003636:	4b07      	ldr	r3, [pc, #28]	@ (8003654 <_sbrk+0x64>)
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4413      	add	r3, r2
 800363e:	4a05      	ldr	r2, [pc, #20]	@ (8003654 <_sbrk+0x64>)
 8003640:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003642:	68fb      	ldr	r3, [r7, #12]
}
 8003644:	4618      	mov	r0, r3
 8003646:	3718      	adds	r7, #24
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	20030000 	.word	0x20030000
 8003650:	00000400 	.word	0x00000400
 8003654:	20025c3c 	.word	0x20025c3c
 8003658:	20025d90 	.word	0x20025d90

0800365c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003660:	4b06      	ldr	r3, [pc, #24]	@ (800367c <SystemInit+0x20>)
 8003662:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003666:	4a05      	ldr	r2, [pc, #20]	@ (800367c <SystemInit+0x20>)
 8003668:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800366c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003670:	bf00      	nop
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	e000ed00 	.word	0xe000ed00

08003680 <Reset_Handler>:
 8003680:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80036b8 <LoopFillZerobss+0xe>
 8003684:	f7ff ffea 	bl	800365c <SystemInit>
 8003688:	480c      	ldr	r0, [pc, #48]	@ (80036bc <LoopFillZerobss+0x12>)
 800368a:	490d      	ldr	r1, [pc, #52]	@ (80036c0 <LoopFillZerobss+0x16>)
 800368c:	4a0d      	ldr	r2, [pc, #52]	@ (80036c4 <LoopFillZerobss+0x1a>)
 800368e:	2300      	movs	r3, #0
 8003690:	e002      	b.n	8003698 <LoopCopyDataInit>

08003692 <CopyDataInit>:
 8003692:	58d4      	ldr	r4, [r2, r3]
 8003694:	50c4      	str	r4, [r0, r3]
 8003696:	3304      	adds	r3, #4

08003698 <LoopCopyDataInit>:
 8003698:	18c4      	adds	r4, r0, r3
 800369a:	428c      	cmp	r4, r1
 800369c:	d3f9      	bcc.n	8003692 <CopyDataInit>
 800369e:	4a0a      	ldr	r2, [pc, #40]	@ (80036c8 <LoopFillZerobss+0x1e>)
 80036a0:	4c0a      	ldr	r4, [pc, #40]	@ (80036cc <LoopFillZerobss+0x22>)
 80036a2:	2300      	movs	r3, #0
 80036a4:	e001      	b.n	80036aa <LoopFillZerobss>

080036a6 <FillZerobss>:
 80036a6:	6013      	str	r3, [r2, #0]
 80036a8:	3204      	adds	r2, #4

080036aa <LoopFillZerobss>:
 80036aa:	42a2      	cmp	r2, r4
 80036ac:	d3fb      	bcc.n	80036a6 <FillZerobss>
 80036ae:	f003 fd89 	bl	80071c4 <__libc_init_array>
 80036b2:	f7fe fd26 	bl	8002102 <main>
 80036b6:	4770      	bx	lr
 80036b8:	20030000 	.word	0x20030000
 80036bc:	20000000 	.word	0x20000000
 80036c0:	20000080 	.word	0x20000080
 80036c4:	08009b58 	.word	0x08009b58
 80036c8:	20000080 	.word	0x20000080
 80036cc:	20025d90 	.word	0x20025d90

080036d0 <ADC_IRQHandler>:
 80036d0:	e7fe      	b.n	80036d0 <ADC_IRQHandler>
	...

080036d4 <HAL_Init>:
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	4b0e      	ldr	r3, [pc, #56]	@ (8003714 <HAL_Init+0x40>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a0d      	ldr	r2, [pc, #52]	@ (8003714 <HAL_Init+0x40>)
 80036de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036e2:	6013      	str	r3, [r2, #0]
 80036e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003714 <HAL_Init+0x40>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a0a      	ldr	r2, [pc, #40]	@ (8003714 <HAL_Init+0x40>)
 80036ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80036ee:	6013      	str	r3, [r2, #0]
 80036f0:	4b08      	ldr	r3, [pc, #32]	@ (8003714 <HAL_Init+0x40>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a07      	ldr	r2, [pc, #28]	@ (8003714 <HAL_Init+0x40>)
 80036f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036fa:	6013      	str	r3, [r2, #0]
 80036fc:	2003      	movs	r0, #3
 80036fe:	f000 f931 	bl	8003964 <HAL_NVIC_SetPriorityGrouping>
 8003702:	2000      	movs	r0, #0
 8003704:	f000 f808 	bl	8003718 <HAL_InitTick>
 8003708:	f7ff f8f2 	bl	80028f0 <HAL_MspInit>
 800370c:	2300      	movs	r3, #0
 800370e:	4618      	mov	r0, r3
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	40023c00 	.word	0x40023c00

08003718 <HAL_InitTick>:
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	4b12      	ldr	r3, [pc, #72]	@ (800376c <HAL_InitTick+0x54>)
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	4b12      	ldr	r3, [pc, #72]	@ (8003770 <HAL_InitTick+0x58>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	4619      	mov	r1, r3
 800372a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800372e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003732:	fbb2 f3f3 	udiv	r3, r2, r3
 8003736:	4618      	mov	r0, r3
 8003738:	f000 f93b 	bl	80039b2 <HAL_SYSTICK_Config>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <HAL_InitTick+0x2e>
 8003742:	2301      	movs	r3, #1
 8003744:	e00e      	b.n	8003764 <HAL_InitTick+0x4c>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2b0f      	cmp	r3, #15
 800374a:	d80a      	bhi.n	8003762 <HAL_InitTick+0x4a>
 800374c:	2200      	movs	r2, #0
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003754:	f000 f911 	bl	800397a <HAL_NVIC_SetPriority>
 8003758:	4a06      	ldr	r2, [pc, #24]	@ (8003774 <HAL_InitTick+0x5c>)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6013      	str	r3, [r2, #0]
 800375e:	2300      	movs	r3, #0
 8003760:	e000      	b.n	8003764 <HAL_InitTick+0x4c>
 8003762:	2301      	movs	r3, #1
 8003764:	4618      	mov	r0, r3
 8003766:	3708      	adds	r7, #8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	20000018 	.word	0x20000018
 8003770:	20000020 	.word	0x20000020
 8003774:	2000001c 	.word	0x2000001c

08003778 <HAL_IncTick>:
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0
 800377c:	4b06      	ldr	r3, [pc, #24]	@ (8003798 <HAL_IncTick+0x20>)
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	461a      	mov	r2, r3
 8003782:	4b06      	ldr	r3, [pc, #24]	@ (800379c <HAL_IncTick+0x24>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4413      	add	r3, r2
 8003788:	4a04      	ldr	r2, [pc, #16]	@ (800379c <HAL_IncTick+0x24>)
 800378a:	6013      	str	r3, [r2, #0]
 800378c:	bf00      	nop
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	20000020 	.word	0x20000020
 800379c:	20025c40 	.word	0x20025c40

080037a0 <HAL_GetTick>:
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	4b03      	ldr	r3, [pc, #12]	@ (80037b4 <HAL_GetTick+0x14>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4618      	mov	r0, r3
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	20025c40 	.word	0x20025c40

080037b8 <HAL_Delay>:
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	f7ff ffee 	bl	80037a0 <HAL_GetTick>
 80037c4:	60b8      	str	r0, [r7, #8]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	60fb      	str	r3, [r7, #12]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80037d0:	d005      	beq.n	80037de <HAL_Delay+0x26>
 80037d2:	4b0a      	ldr	r3, [pc, #40]	@ (80037fc <HAL_Delay+0x44>)
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	461a      	mov	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	4413      	add	r3, r2
 80037dc:	60fb      	str	r3, [r7, #12]
 80037de:	bf00      	nop
 80037e0:	f7ff ffde 	bl	80037a0 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d8f7      	bhi.n	80037e0 <HAL_Delay+0x28>
 80037f0:	bf00      	nop
 80037f2:	bf00      	nop
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	20000020 	.word	0x20000020

08003800 <__NVIC_SetPriorityGrouping>:
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	4b0c      	ldr	r3, [pc, #48]	@ (8003844 <__NVIC_SetPriorityGrouping+0x44>)
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	60bb      	str	r3, [r7, #8]
 8003816:	68ba      	ldr	r2, [r7, #8]
 8003818:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800381c:	4013      	ands	r3, r2
 800381e:	60bb      	str	r3, [r7, #8]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	021a      	lsls	r2, r3, #8
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	4313      	orrs	r3, r2
 8003828:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800382c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003830:	60bb      	str	r3, [r7, #8]
 8003832:	4a04      	ldr	r2, [pc, #16]	@ (8003844 <__NVIC_SetPriorityGrouping+0x44>)
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	60d3      	str	r3, [r2, #12]
 8003838:	bf00      	nop
 800383a:	3714      	adds	r7, #20
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	e000ed00 	.word	0xe000ed00

08003848 <__NVIC_GetPriorityGrouping>:
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0
 800384c:	4b04      	ldr	r3, [pc, #16]	@ (8003860 <__NVIC_GetPriorityGrouping+0x18>)
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	0a1b      	lsrs	r3, r3, #8
 8003852:	f003 0307 	and.w	r3, r3, #7
 8003856:	4618      	mov	r0, r3
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr
 8003860:	e000ed00 	.word	0xe000ed00

08003864 <__NVIC_SetPriority>:
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	4603      	mov	r3, r0
 800386c:	6039      	str	r1, [r7, #0]
 800386e:	71fb      	strb	r3, [r7, #7]
 8003870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003874:	2b00      	cmp	r3, #0
 8003876:	db0a      	blt.n	800388e <__NVIC_SetPriority+0x2a>
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	b2da      	uxtb	r2, r3
 800387c:	490c      	ldr	r1, [pc, #48]	@ (80038b0 <__NVIC_SetPriority+0x4c>)
 800387e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003882:	0112      	lsls	r2, r2, #4
 8003884:	b2d2      	uxtb	r2, r2
 8003886:	440b      	add	r3, r1
 8003888:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 800388c:	e00a      	b.n	80038a4 <__NVIC_SetPriority+0x40>
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	b2da      	uxtb	r2, r3
 8003892:	4908      	ldr	r1, [pc, #32]	@ (80038b4 <__NVIC_SetPriority+0x50>)
 8003894:	79fb      	ldrb	r3, [r7, #7]
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	3b04      	subs	r3, #4
 800389c:	0112      	lsls	r2, r2, #4
 800389e:	b2d2      	uxtb	r2, r2
 80038a0:	440b      	add	r3, r1
 80038a2:	761a      	strb	r2, [r3, #24]
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr
 80038b0:	e000e100 	.word	0xe000e100
 80038b4:	e000ed00 	.word	0xe000ed00

080038b8 <NVIC_EncodePriority>:
 80038b8:	b480      	push	{r7}
 80038ba:	b089      	sub	sp, #36	@ 0x24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	607a      	str	r2, [r7, #4]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	61fb      	str	r3, [r7, #28]
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	f1c3 0307 	rsb	r3, r3, #7
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	bf28      	it	cs
 80038d6:	2304      	movcs	r3, #4
 80038d8:	61bb      	str	r3, [r7, #24]
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	3304      	adds	r3, #4
 80038de:	2b06      	cmp	r3, #6
 80038e0:	d902      	bls.n	80038e8 <NVIC_EncodePriority+0x30>
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	3b03      	subs	r3, #3
 80038e6:	e000      	b.n	80038ea <NVIC_EncodePriority+0x32>
 80038e8:	2300      	movs	r3, #0
 80038ea:	617b      	str	r3, [r7, #20]
 80038ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	fa02 f303 	lsl.w	r3, r2, r3
 80038f6:	43da      	mvns	r2, r3
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	401a      	ands	r2, r3
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	409a      	lsls	r2, r3
 8003900:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	fa01 f303 	lsl.w	r3, r1, r3
 800390a:	43d9      	mvns	r1, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	400b      	ands	r3, r1
 8003910:	4313      	orrs	r3, r2
 8003912:	4618      	mov	r0, r3
 8003914:	3724      	adds	r7, #36	@ 0x24
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
	...

08003920 <SysTick_Config>:
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	3b01      	subs	r3, #1
 800392c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003930:	d301      	bcc.n	8003936 <SysTick_Config+0x16>
 8003932:	2301      	movs	r3, #1
 8003934:	e00f      	b.n	8003956 <SysTick_Config+0x36>
 8003936:	4a0a      	ldr	r2, [pc, #40]	@ (8003960 <SysTick_Config+0x40>)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	3b01      	subs	r3, #1
 800393c:	6053      	str	r3, [r2, #4]
 800393e:	210f      	movs	r1, #15
 8003940:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003944:	f7ff ff8e 	bl	8003864 <__NVIC_SetPriority>
 8003948:	4b05      	ldr	r3, [pc, #20]	@ (8003960 <SysTick_Config+0x40>)
 800394a:	2200      	movs	r2, #0
 800394c:	609a      	str	r2, [r3, #8]
 800394e:	4b04      	ldr	r3, [pc, #16]	@ (8003960 <SysTick_Config+0x40>)
 8003950:	2207      	movs	r2, #7
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	2300      	movs	r3, #0
 8003956:	4618      	mov	r0, r3
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	e000e010 	.word	0xe000e010

08003964 <HAL_NVIC_SetPriorityGrouping>:
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f7ff ff47 	bl	8003800 <__NVIC_SetPriorityGrouping>
 8003972:	bf00      	nop
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <HAL_NVIC_SetPriority>:
 800397a:	b580      	push	{r7, lr}
 800397c:	b086      	sub	sp, #24
 800397e:	af00      	add	r7, sp, #0
 8003980:	4603      	mov	r3, r0
 8003982:	60b9      	str	r1, [r7, #8]
 8003984:	607a      	str	r2, [r7, #4]
 8003986:	73fb      	strb	r3, [r7, #15]
 8003988:	2300      	movs	r3, #0
 800398a:	617b      	str	r3, [r7, #20]
 800398c:	f7ff ff5c 	bl	8003848 <__NVIC_GetPriorityGrouping>
 8003990:	6178      	str	r0, [r7, #20]
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	68b9      	ldr	r1, [r7, #8]
 8003996:	6978      	ldr	r0, [r7, #20]
 8003998:	f7ff ff8e 	bl	80038b8 <NVIC_EncodePriority>
 800399c:	4602      	mov	r2, r0
 800399e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039a2:	4611      	mov	r1, r2
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff ff5d 	bl	8003864 <__NVIC_SetPriority>
 80039aa:	bf00      	nop
 80039ac:	3718      	adds	r7, #24
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HAL_SYSTICK_Config>:
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b082      	sub	sp, #8
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f7ff ffb0 	bl	8003920 <SysTick_Config>
 80039c0:	4603      	mov	r3, r0
 80039c2:	4618      	mov	r0, r3
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
	...

080039cc <HAL_GPIO_Init>:
 80039cc:	b480      	push	{r7}
 80039ce:	b089      	sub	sp, #36	@ 0x24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
 80039d6:	2300      	movs	r3, #0
 80039d8:	617b      	str	r3, [r7, #20]
 80039da:	2300      	movs	r3, #0
 80039dc:	613b      	str	r3, [r7, #16]
 80039de:	2300      	movs	r3, #0
 80039e0:	61bb      	str	r3, [r7, #24]
 80039e2:	2300      	movs	r3, #0
 80039e4:	61fb      	str	r3, [r7, #28]
 80039e6:	e177      	b.n	8003cd8 <HAL_GPIO_Init+0x30c>
 80039e8:	2201      	movs	r2, #1
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	fa02 f303 	lsl.w	r3, r2, r3
 80039f0:	617b      	str	r3, [r7, #20]
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	4013      	ands	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	f040 8166 	bne.w	8003cd2 <HAL_GPIO_Init+0x306>
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f003 0303 	and.w	r3, r3, #3
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d005      	beq.n	8003a1e <HAL_GPIO_Init+0x52>
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f003 0303 	and.w	r3, r3, #3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d130      	bne.n	8003a80 <HAL_GPIO_Init+0xb4>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	61bb      	str	r3, [r7, #24]
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	2203      	movs	r2, #3
 8003a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2e:	43db      	mvns	r3, r3
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	4013      	ands	r3, r2
 8003a34:	61bb      	str	r3, [r7, #24]
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	68da      	ldr	r2, [r3, #12]
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a42:	69ba      	ldr	r2, [r7, #24]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	61bb      	str	r3, [r7, #24]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	609a      	str	r2, [r3, #8]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	61bb      	str	r3, [r7, #24]
 8003a54:	2201      	movs	r2, #1
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5c:	43db      	mvns	r3, r3
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	4013      	ands	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	091b      	lsrs	r3, r3, #4
 8003a6a:	f003 0201 	and.w	r2, r3, #1
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	fa02 f303 	lsl.w	r3, r2, r3
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	61bb      	str	r3, [r7, #24]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	69ba      	ldr	r2, [r7, #24]
 8003a7e:	605a      	str	r2, [r3, #4]
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f003 0303 	and.w	r3, r3, #3
 8003a88:	2b03      	cmp	r3, #3
 8003a8a:	d017      	beq.n	8003abc <HAL_GPIO_Init+0xf0>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	61bb      	str	r3, [r7, #24]
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	2203      	movs	r2, #3
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	43db      	mvns	r3, r3
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	61bb      	str	r3, [r7, #24]
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	61bb      	str	r3, [r7, #24]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	60da      	str	r2, [r3, #12]
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f003 0303 	and.w	r3, r3, #3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d123      	bne.n	8003b10 <HAL_GPIO_Init+0x144>
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	08da      	lsrs	r2, r3, #3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	3208      	adds	r2, #8
 8003ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ad4:	61bb      	str	r3, [r7, #24]
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	f003 0307 	and.w	r3, r3, #7
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	220f      	movs	r2, #15
 8003ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae4:	43db      	mvns	r3, r3
 8003ae6:	69ba      	ldr	r2, [r7, #24]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	61bb      	str	r3, [r7, #24]
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	691a      	ldr	r2, [r3, #16]
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	f003 0307 	and.w	r3, r3, #7
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	fa02 f303 	lsl.w	r3, r2, r3
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	61bb      	str	r3, [r7, #24]
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	08da      	lsrs	r2, r3, #3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	3208      	adds	r2, #8
 8003b0a:	69b9      	ldr	r1, [r7, #24]
 8003b0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	61bb      	str	r3, [r7, #24]
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	005b      	lsls	r3, r3, #1
 8003b1a:	2203      	movs	r2, #3
 8003b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b20:	43db      	mvns	r3, r3
 8003b22:	69ba      	ldr	r2, [r7, #24]
 8003b24:	4013      	ands	r3, r2
 8003b26:	61bb      	str	r3, [r7, #24]
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f003 0203 	and.w	r2, r3, #3
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	fa02 f303 	lsl.w	r3, r2, r3
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	61bb      	str	r3, [r7, #24]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	601a      	str	r2, [r3, #0]
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 80c0 	beq.w	8003cd2 <HAL_GPIO_Init+0x306>
 8003b52:	2300      	movs	r3, #0
 8003b54:	60fb      	str	r3, [r7, #12]
 8003b56:	4b66      	ldr	r3, [pc, #408]	@ (8003cf0 <HAL_GPIO_Init+0x324>)
 8003b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b5a:	4a65      	ldr	r2, [pc, #404]	@ (8003cf0 <HAL_GPIO_Init+0x324>)
 8003b5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b60:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b62:	4b63      	ldr	r3, [pc, #396]	@ (8003cf0 <HAL_GPIO_Init+0x324>)
 8003b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b6a:	60fb      	str	r3, [r7, #12]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	4a61      	ldr	r2, [pc, #388]	@ (8003cf4 <HAL_GPIO_Init+0x328>)
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	089b      	lsrs	r3, r3, #2
 8003b74:	3302      	adds	r3, #2
 8003b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b7a:	61bb      	str	r3, [r7, #24]
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	f003 0303 	and.w	r3, r3, #3
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	220f      	movs	r2, #15
 8003b86:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8a:	43db      	mvns	r3, r3
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	61bb      	str	r3, [r7, #24]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a58      	ldr	r2, [pc, #352]	@ (8003cf8 <HAL_GPIO_Init+0x32c>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d037      	beq.n	8003c0a <HAL_GPIO_Init+0x23e>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a57      	ldr	r2, [pc, #348]	@ (8003cfc <HAL_GPIO_Init+0x330>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d031      	beq.n	8003c06 <HAL_GPIO_Init+0x23a>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a56      	ldr	r2, [pc, #344]	@ (8003d00 <HAL_GPIO_Init+0x334>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d02b      	beq.n	8003c02 <HAL_GPIO_Init+0x236>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a55      	ldr	r2, [pc, #340]	@ (8003d04 <HAL_GPIO_Init+0x338>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d025      	beq.n	8003bfe <HAL_GPIO_Init+0x232>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a54      	ldr	r2, [pc, #336]	@ (8003d08 <HAL_GPIO_Init+0x33c>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d01f      	beq.n	8003bfa <HAL_GPIO_Init+0x22e>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a53      	ldr	r2, [pc, #332]	@ (8003d0c <HAL_GPIO_Init+0x340>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d019      	beq.n	8003bf6 <HAL_GPIO_Init+0x22a>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a52      	ldr	r2, [pc, #328]	@ (8003d10 <HAL_GPIO_Init+0x344>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d013      	beq.n	8003bf2 <HAL_GPIO_Init+0x226>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a51      	ldr	r2, [pc, #324]	@ (8003d14 <HAL_GPIO_Init+0x348>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d00d      	beq.n	8003bee <HAL_GPIO_Init+0x222>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a50      	ldr	r2, [pc, #320]	@ (8003d18 <HAL_GPIO_Init+0x34c>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d007      	beq.n	8003bea <HAL_GPIO_Init+0x21e>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a4f      	ldr	r2, [pc, #316]	@ (8003d1c <HAL_GPIO_Init+0x350>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d101      	bne.n	8003be6 <HAL_GPIO_Init+0x21a>
 8003be2:	2309      	movs	r3, #9
 8003be4:	e012      	b.n	8003c0c <HAL_GPIO_Init+0x240>
 8003be6:	230a      	movs	r3, #10
 8003be8:	e010      	b.n	8003c0c <HAL_GPIO_Init+0x240>
 8003bea:	2308      	movs	r3, #8
 8003bec:	e00e      	b.n	8003c0c <HAL_GPIO_Init+0x240>
 8003bee:	2307      	movs	r3, #7
 8003bf0:	e00c      	b.n	8003c0c <HAL_GPIO_Init+0x240>
 8003bf2:	2306      	movs	r3, #6
 8003bf4:	e00a      	b.n	8003c0c <HAL_GPIO_Init+0x240>
 8003bf6:	2305      	movs	r3, #5
 8003bf8:	e008      	b.n	8003c0c <HAL_GPIO_Init+0x240>
 8003bfa:	2304      	movs	r3, #4
 8003bfc:	e006      	b.n	8003c0c <HAL_GPIO_Init+0x240>
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e004      	b.n	8003c0c <HAL_GPIO_Init+0x240>
 8003c02:	2302      	movs	r3, #2
 8003c04:	e002      	b.n	8003c0c <HAL_GPIO_Init+0x240>
 8003c06:	2301      	movs	r3, #1
 8003c08:	e000      	b.n	8003c0c <HAL_GPIO_Init+0x240>
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	69fa      	ldr	r2, [r7, #28]
 8003c0e:	f002 0203 	and.w	r2, r2, #3
 8003c12:	0092      	lsls	r2, r2, #2
 8003c14:	4093      	lsls	r3, r2
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	61bb      	str	r3, [r7, #24]
 8003c1c:	4935      	ldr	r1, [pc, #212]	@ (8003cf4 <HAL_GPIO_Init+0x328>)
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	089b      	lsrs	r3, r3, #2
 8003c22:	3302      	adds	r3, #2
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003c2a:	4b3d      	ldr	r3, [pc, #244]	@ (8003d20 <HAL_GPIO_Init+0x354>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	61bb      	str	r3, [r7, #24]
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	43db      	mvns	r3, r3
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	4013      	ands	r3, r2
 8003c38:	61bb      	str	r3, [r7, #24]
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d003      	beq.n	8003c4e <HAL_GPIO_Init+0x282>
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	61bb      	str	r3, [r7, #24]
 8003c4e:	4a34      	ldr	r2, [pc, #208]	@ (8003d20 <HAL_GPIO_Init+0x354>)
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	6093      	str	r3, [r2, #8]
 8003c54:	4b32      	ldr	r3, [pc, #200]	@ (8003d20 <HAL_GPIO_Init+0x354>)
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	61bb      	str	r3, [r7, #24]
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	43db      	mvns	r3, r3
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	4013      	ands	r3, r2
 8003c62:	61bb      	str	r3, [r7, #24]
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d003      	beq.n	8003c78 <HAL_GPIO_Init+0x2ac>
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	61bb      	str	r3, [r7, #24]
 8003c78:	4a29      	ldr	r2, [pc, #164]	@ (8003d20 <HAL_GPIO_Init+0x354>)
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	60d3      	str	r3, [r2, #12]
 8003c7e:	4b28      	ldr	r3, [pc, #160]	@ (8003d20 <HAL_GPIO_Init+0x354>)
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	61bb      	str	r3, [r7, #24]
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	43db      	mvns	r3, r3
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	61bb      	str	r3, [r7, #24]
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d003      	beq.n	8003ca2 <HAL_GPIO_Init+0x2d6>
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	61bb      	str	r3, [r7, #24]
 8003ca2:	4a1f      	ldr	r2, [pc, #124]	@ (8003d20 <HAL_GPIO_Init+0x354>)
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	6053      	str	r3, [r2, #4]
 8003ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8003d20 <HAL_GPIO_Init+0x354>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	61bb      	str	r3, [r7, #24]
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	43db      	mvns	r3, r3
 8003cb2:	69ba      	ldr	r2, [r7, #24]
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	61bb      	str	r3, [r7, #24]
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d003      	beq.n	8003ccc <HAL_GPIO_Init+0x300>
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	61bb      	str	r3, [r7, #24]
 8003ccc:	4a14      	ldr	r2, [pc, #80]	@ (8003d20 <HAL_GPIO_Init+0x354>)
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	6013      	str	r3, [r2, #0]
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	61fb      	str	r3, [r7, #28]
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	2b0f      	cmp	r3, #15
 8003cdc:	f67f ae84 	bls.w	80039e8 <HAL_GPIO_Init+0x1c>
 8003ce0:	bf00      	nop
 8003ce2:	bf00      	nop
 8003ce4:	3724      	adds	r7, #36	@ 0x24
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	40023800 	.word	0x40023800
 8003cf4:	40013800 	.word	0x40013800
 8003cf8:	40020000 	.word	0x40020000
 8003cfc:	40020400 	.word	0x40020400
 8003d00:	40020800 	.word	0x40020800
 8003d04:	40020c00 	.word	0x40020c00
 8003d08:	40021000 	.word	0x40021000
 8003d0c:	40021400 	.word	0x40021400
 8003d10:	40021800 	.word	0x40021800
 8003d14:	40021c00 	.word	0x40021c00
 8003d18:	40022000 	.word	0x40022000
 8003d1c:	40022400 	.word	0x40022400
 8003d20:	40013c00 	.word	0x40013c00

08003d24 <HAL_GPIO_DeInit>:
 8003d24:	b480      	push	{r7}
 8003d26:	b087      	sub	sp, #28
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
 8003d2e:	2300      	movs	r3, #0
 8003d30:	613b      	str	r3, [r7, #16]
 8003d32:	2300      	movs	r3, #0
 8003d34:	60fb      	str	r3, [r7, #12]
 8003d36:	2300      	movs	r3, #0
 8003d38:	60bb      	str	r3, [r7, #8]
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	617b      	str	r3, [r7, #20]
 8003d3e:	e0d9      	b.n	8003ef4 <HAL_GPIO_DeInit+0x1d0>
 8003d40:	2201      	movs	r2, #1
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	fa02 f303 	lsl.w	r3, r2, r3
 8003d48:	613b      	str	r3, [r7, #16]
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	4013      	ands	r3, r2
 8003d50:	60fb      	str	r3, [r7, #12]
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	f040 80c9 	bne.w	8003eee <HAL_GPIO_DeInit+0x1ca>
 8003d5c:	4a6b      	ldr	r2, [pc, #428]	@ (8003f0c <HAL_GPIO_DeInit+0x1e8>)
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	089b      	lsrs	r3, r3, #2
 8003d62:	3302      	adds	r3, #2
 8003d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d68:	60bb      	str	r3, [r7, #8]
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f003 0303 	and.w	r3, r3, #3
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	220f      	movs	r2, #15
 8003d74:	fa02 f303 	lsl.w	r3, r2, r3
 8003d78:	68ba      	ldr	r2, [r7, #8]
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	60bb      	str	r3, [r7, #8]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a63      	ldr	r2, [pc, #396]	@ (8003f10 <HAL_GPIO_DeInit+0x1ec>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d037      	beq.n	8003df6 <HAL_GPIO_DeInit+0xd2>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a62      	ldr	r2, [pc, #392]	@ (8003f14 <HAL_GPIO_DeInit+0x1f0>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d031      	beq.n	8003df2 <HAL_GPIO_DeInit+0xce>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a61      	ldr	r2, [pc, #388]	@ (8003f18 <HAL_GPIO_DeInit+0x1f4>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d02b      	beq.n	8003dee <HAL_GPIO_DeInit+0xca>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a60      	ldr	r2, [pc, #384]	@ (8003f1c <HAL_GPIO_DeInit+0x1f8>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d025      	beq.n	8003dea <HAL_GPIO_DeInit+0xc6>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a5f      	ldr	r2, [pc, #380]	@ (8003f20 <HAL_GPIO_DeInit+0x1fc>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d01f      	beq.n	8003de6 <HAL_GPIO_DeInit+0xc2>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a5e      	ldr	r2, [pc, #376]	@ (8003f24 <HAL_GPIO_DeInit+0x200>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d019      	beq.n	8003de2 <HAL_GPIO_DeInit+0xbe>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a5d      	ldr	r2, [pc, #372]	@ (8003f28 <HAL_GPIO_DeInit+0x204>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d013      	beq.n	8003dde <HAL_GPIO_DeInit+0xba>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a5c      	ldr	r2, [pc, #368]	@ (8003f2c <HAL_GPIO_DeInit+0x208>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d00d      	beq.n	8003dda <HAL_GPIO_DeInit+0xb6>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a5b      	ldr	r2, [pc, #364]	@ (8003f30 <HAL_GPIO_DeInit+0x20c>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d007      	beq.n	8003dd6 <HAL_GPIO_DeInit+0xb2>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a5a      	ldr	r2, [pc, #360]	@ (8003f34 <HAL_GPIO_DeInit+0x210>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d101      	bne.n	8003dd2 <HAL_GPIO_DeInit+0xae>
 8003dce:	2309      	movs	r3, #9
 8003dd0:	e012      	b.n	8003df8 <HAL_GPIO_DeInit+0xd4>
 8003dd2:	230a      	movs	r3, #10
 8003dd4:	e010      	b.n	8003df8 <HAL_GPIO_DeInit+0xd4>
 8003dd6:	2308      	movs	r3, #8
 8003dd8:	e00e      	b.n	8003df8 <HAL_GPIO_DeInit+0xd4>
 8003dda:	2307      	movs	r3, #7
 8003ddc:	e00c      	b.n	8003df8 <HAL_GPIO_DeInit+0xd4>
 8003dde:	2306      	movs	r3, #6
 8003de0:	e00a      	b.n	8003df8 <HAL_GPIO_DeInit+0xd4>
 8003de2:	2305      	movs	r3, #5
 8003de4:	e008      	b.n	8003df8 <HAL_GPIO_DeInit+0xd4>
 8003de6:	2304      	movs	r3, #4
 8003de8:	e006      	b.n	8003df8 <HAL_GPIO_DeInit+0xd4>
 8003dea:	2303      	movs	r3, #3
 8003dec:	e004      	b.n	8003df8 <HAL_GPIO_DeInit+0xd4>
 8003dee:	2302      	movs	r3, #2
 8003df0:	e002      	b.n	8003df8 <HAL_GPIO_DeInit+0xd4>
 8003df2:	2301      	movs	r3, #1
 8003df4:	e000      	b.n	8003df8 <HAL_GPIO_DeInit+0xd4>
 8003df6:	2300      	movs	r3, #0
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	f002 0203 	and.w	r2, r2, #3
 8003dfe:	0092      	lsls	r2, r2, #2
 8003e00:	4093      	lsls	r3, r2
 8003e02:	68ba      	ldr	r2, [r7, #8]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d132      	bne.n	8003e6e <HAL_GPIO_DeInit+0x14a>
 8003e08:	4b4b      	ldr	r3, [pc, #300]	@ (8003f38 <HAL_GPIO_DeInit+0x214>)
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	43db      	mvns	r3, r3
 8003e10:	4949      	ldr	r1, [pc, #292]	@ (8003f38 <HAL_GPIO_DeInit+0x214>)
 8003e12:	4013      	ands	r3, r2
 8003e14:	600b      	str	r3, [r1, #0]
 8003e16:	4b48      	ldr	r3, [pc, #288]	@ (8003f38 <HAL_GPIO_DeInit+0x214>)
 8003e18:	685a      	ldr	r2, [r3, #4]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	43db      	mvns	r3, r3
 8003e1e:	4946      	ldr	r1, [pc, #280]	@ (8003f38 <HAL_GPIO_DeInit+0x214>)
 8003e20:	4013      	ands	r3, r2
 8003e22:	604b      	str	r3, [r1, #4]
 8003e24:	4b44      	ldr	r3, [pc, #272]	@ (8003f38 <HAL_GPIO_DeInit+0x214>)
 8003e26:	68da      	ldr	r2, [r3, #12]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	43db      	mvns	r3, r3
 8003e2c:	4942      	ldr	r1, [pc, #264]	@ (8003f38 <HAL_GPIO_DeInit+0x214>)
 8003e2e:	4013      	ands	r3, r2
 8003e30:	60cb      	str	r3, [r1, #12]
 8003e32:	4b41      	ldr	r3, [pc, #260]	@ (8003f38 <HAL_GPIO_DeInit+0x214>)
 8003e34:	689a      	ldr	r2, [r3, #8]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	43db      	mvns	r3, r3
 8003e3a:	493f      	ldr	r1, [pc, #252]	@ (8003f38 <HAL_GPIO_DeInit+0x214>)
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	608b      	str	r3, [r1, #8]
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	f003 0303 	and.w	r3, r3, #3
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	220f      	movs	r2, #15
 8003e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4e:	60bb      	str	r3, [r7, #8]
 8003e50:	4a2e      	ldr	r2, [pc, #184]	@ (8003f0c <HAL_GPIO_DeInit+0x1e8>)
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	089b      	lsrs	r3, r3, #2
 8003e56:	3302      	adds	r3, #2
 8003e58:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	43da      	mvns	r2, r3
 8003e60:	482a      	ldr	r0, [pc, #168]	@ (8003f0c <HAL_GPIO_DeInit+0x1e8>)
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	089b      	lsrs	r3, r3, #2
 8003e66:	400a      	ands	r2, r1
 8003e68:	3302      	adds	r3, #2
 8003e6a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	2103      	movs	r1, #3
 8003e78:	fa01 f303 	lsl.w	r3, r1, r3
 8003e7c:	43db      	mvns	r3, r3
 8003e7e:	401a      	ands	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	08da      	lsrs	r2, r3, #3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	3208      	adds	r2, #8
 8003e8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f003 0307 	and.w	r3, r3, #7
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	220f      	movs	r2, #15
 8003e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9e:	43db      	mvns	r3, r3
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	08d2      	lsrs	r2, r2, #3
 8003ea4:	4019      	ands	r1, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	3208      	adds	r2, #8
 8003eaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68da      	ldr	r2, [r3, #12]
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	2103      	movs	r1, #3
 8003eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8003ebc:	43db      	mvns	r3, r3
 8003ebe:	401a      	ands	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	60da      	str	r2, [r3, #12]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685a      	ldr	r2, [r3, #4]
 8003ec8:	2101      	movs	r1, #1
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed0:	43db      	mvns	r3, r3
 8003ed2:	401a      	ands	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	605a      	str	r2, [r3, #4]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	2103      	movs	r1, #3
 8003ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee6:	43db      	mvns	r3, r3
 8003ee8:	401a      	ands	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	609a      	str	r2, [r3, #8]
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	617b      	str	r3, [r7, #20]
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	2b0f      	cmp	r3, #15
 8003ef8:	f67f af22 	bls.w	8003d40 <HAL_GPIO_DeInit+0x1c>
 8003efc:	bf00      	nop
 8003efe:	bf00      	nop
 8003f00:	371c      	adds	r7, #28
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	40013800 	.word	0x40013800
 8003f10:	40020000 	.word	0x40020000
 8003f14:	40020400 	.word	0x40020400
 8003f18:	40020800 	.word	0x40020800
 8003f1c:	40020c00 	.word	0x40020c00
 8003f20:	40021000 	.word	0x40021000
 8003f24:	40021400 	.word	0x40021400
 8003f28:	40021800 	.word	0x40021800
 8003f2c:	40021c00 	.word	0x40021c00
 8003f30:	40022000 	.word	0x40022000
 8003f34:	40022400 	.word	0x40022400
 8003f38:	40013c00 	.word	0x40013c00

08003f3c <HAL_GPIO_ReadPin>:
 8003f3c:	b480      	push	{r7}
 8003f3e:	b085      	sub	sp, #20
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	460b      	mov	r3, r1
 8003f46:	807b      	strh	r3, [r7, #2]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	691a      	ldr	r2, [r3, #16]
 8003f4c:	887b      	ldrh	r3, [r7, #2]
 8003f4e:	4013      	ands	r3, r2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d002      	beq.n	8003f5a <HAL_GPIO_ReadPin+0x1e>
 8003f54:	2301      	movs	r3, #1
 8003f56:	73fb      	strb	r3, [r7, #15]
 8003f58:	e001      	b.n	8003f5e <HAL_GPIO_ReadPin+0x22>
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	73fb      	strb	r3, [r7, #15]
 8003f5e:	7bfb      	ldrb	r3, [r7, #15]
 8003f60:	4618      	mov	r0, r3
 8003f62:	3714      	adds	r7, #20
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <HAL_GPIO_WritePin>:
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	460b      	mov	r3, r1
 8003f76:	807b      	strh	r3, [r7, #2]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	707b      	strb	r3, [r7, #1]
 8003f7c:	787b      	ldrb	r3, [r7, #1]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d003      	beq.n	8003f8a <HAL_GPIO_WritePin+0x1e>
 8003f82:	887a      	ldrh	r2, [r7, #2]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	619a      	str	r2, [r3, #24]
 8003f88:	e003      	b.n	8003f92 <HAL_GPIO_WritePin+0x26>
 8003f8a:	887b      	ldrh	r3, [r7, #2]
 8003f8c:	041a      	lsls	r2, r3, #16
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	619a      	str	r2, [r3, #24]
 8003f92:	bf00      	nop
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
	...

08003fa0 <HAL_I2C_Init>:
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_I2C_Init+0x12>
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e12b      	b.n	800420a <HAL_I2C_Init+0x26a>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d106      	bne.n	8003fcc <HAL_I2C_Init+0x2c>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f7fe fcba 	bl	8002940 <HAL_I2C_MspInit>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2224      	movs	r2, #36	@ 0x24
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f022 0201 	bic.w	r2, r2, #1
 8003fe2:	601a      	str	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ff2:	601a      	str	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004002:	601a      	str	r2, [r3, #0]
 8004004:	f001 ff82 	bl	8005f0c <HAL_RCC_GetPCLK1Freq>
 8004008:	60f8      	str	r0, [r7, #12]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	4a81      	ldr	r2, [pc, #516]	@ (8004214 <HAL_I2C_Init+0x274>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d807      	bhi.n	8004024 <HAL_I2C_Init+0x84>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4a80      	ldr	r2, [pc, #512]	@ (8004218 <HAL_I2C_Init+0x278>)
 8004018:	4293      	cmp	r3, r2
 800401a:	bf94      	ite	ls
 800401c:	2301      	movls	r3, #1
 800401e:	2300      	movhi	r3, #0
 8004020:	b2db      	uxtb	r3, r3
 8004022:	e006      	b.n	8004032 <HAL_I2C_Init+0x92>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	4a7d      	ldr	r2, [pc, #500]	@ (800421c <HAL_I2C_Init+0x27c>)
 8004028:	4293      	cmp	r3, r2
 800402a:	bf94      	ite	ls
 800402c:	2301      	movls	r3, #1
 800402e:	2300      	movhi	r3, #0
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <HAL_I2C_Init+0x9a>
 8004036:	2301      	movs	r3, #1
 8004038:	e0e7      	b.n	800420a <HAL_I2C_Init+0x26a>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	4a78      	ldr	r2, [pc, #480]	@ (8004220 <HAL_I2C_Init+0x280>)
 800403e:	fba2 2303 	umull	r2, r3, r2, r3
 8004042:	0c9b      	lsrs	r3, r3, #18
 8004044:	60bb      	str	r3, [r7, #8]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	430a      	orrs	r2, r1
 8004058:	605a      	str	r2, [r3, #4]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	4a6a      	ldr	r2, [pc, #424]	@ (8004214 <HAL_I2C_Init+0x274>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d802      	bhi.n	8004074 <HAL_I2C_Init+0xd4>
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	3301      	adds	r3, #1
 8004072:	e009      	b.n	8004088 <HAL_I2C_Init+0xe8>
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800407a:	fb02 f303 	mul.w	r3, r2, r3
 800407e:	4a69      	ldr	r2, [pc, #420]	@ (8004224 <HAL_I2C_Init+0x284>)
 8004080:	fba2 2303 	umull	r2, r3, r2, r3
 8004084:	099b      	lsrs	r3, r3, #6
 8004086:	3301      	adds	r3, #1
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	6812      	ldr	r2, [r2, #0]
 800408c:	430b      	orrs	r3, r1
 800408e:	6213      	str	r3, [r2, #32]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	69db      	ldr	r3, [r3, #28]
 8004096:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800409a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	495c      	ldr	r1, [pc, #368]	@ (8004214 <HAL_I2C_Init+0x274>)
 80040a4:	428b      	cmp	r3, r1
 80040a6:	d819      	bhi.n	80040dc <HAL_I2C_Init+0x13c>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	1e59      	subs	r1, r3, #1
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80040b6:	1c59      	adds	r1, r3, #1
 80040b8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80040bc:	400b      	ands	r3, r1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00a      	beq.n	80040d8 <HAL_I2C_Init+0x138>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	1e59      	subs	r1, r3, #1
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	005b      	lsls	r3, r3, #1
 80040cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80040d0:	3301      	adds	r3, #1
 80040d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040d6:	e051      	b.n	800417c <HAL_I2C_Init+0x1dc>
 80040d8:	2304      	movs	r3, #4
 80040da:	e04f      	b.n	800417c <HAL_I2C_Init+0x1dc>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d111      	bne.n	8004108 <HAL_I2C_Init+0x168>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	1e58      	subs	r0, r3, #1
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6859      	ldr	r1, [r3, #4]
 80040ec:	460b      	mov	r3, r1
 80040ee:	005b      	lsls	r3, r3, #1
 80040f0:	440b      	add	r3, r1
 80040f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80040f6:	3301      	adds	r3, #1
 80040f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	bf0c      	ite	eq
 8004100:	2301      	moveq	r3, #1
 8004102:	2300      	movne	r3, #0
 8004104:	b2db      	uxtb	r3, r3
 8004106:	e012      	b.n	800412e <HAL_I2C_Init+0x18e>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	1e58      	subs	r0, r3, #1
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6859      	ldr	r1, [r3, #4]
 8004110:	460b      	mov	r3, r1
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	440b      	add	r3, r1
 8004116:	0099      	lsls	r1, r3, #2
 8004118:	440b      	add	r3, r1
 800411a:	fbb0 f3f3 	udiv	r3, r0, r3
 800411e:	3301      	adds	r3, #1
 8004120:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004124:	2b00      	cmp	r3, #0
 8004126:	bf0c      	ite	eq
 8004128:	2301      	moveq	r3, #1
 800412a:	2300      	movne	r3, #0
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <HAL_I2C_Init+0x196>
 8004132:	2301      	movs	r3, #1
 8004134:	e022      	b.n	800417c <HAL_I2C_Init+0x1dc>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10e      	bne.n	800415c <HAL_I2C_Init+0x1bc>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	1e58      	subs	r0, r3, #1
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6859      	ldr	r1, [r3, #4]
 8004146:	460b      	mov	r3, r1
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	440b      	add	r3, r1
 800414c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004150:	3301      	adds	r3, #1
 8004152:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004156:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800415a:	e00f      	b.n	800417c <HAL_I2C_Init+0x1dc>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	1e58      	subs	r0, r3, #1
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6859      	ldr	r1, [r3, #4]
 8004164:	460b      	mov	r3, r1
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	440b      	add	r3, r1
 800416a:	0099      	lsls	r1, r3, #2
 800416c:	440b      	add	r3, r1
 800416e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004172:	3301      	adds	r3, #1
 8004174:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004178:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800417c:	6879      	ldr	r1, [r7, #4]
 800417e:	6809      	ldr	r1, [r1, #0]
 8004180:	4313      	orrs	r3, r2
 8004182:	61cb      	str	r3, [r1, #28]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	69da      	ldr	r2, [r3, #28]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	431a      	orrs	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	430a      	orrs	r2, r1
 800419e:	601a      	str	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80041aa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	6911      	ldr	r1, [r2, #16]
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	68d2      	ldr	r2, [r2, #12]
 80041b6:	4311      	orrs	r1, r2
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	6812      	ldr	r2, [r2, #0]
 80041bc:	430b      	orrs	r3, r1
 80041be:	6093      	str	r3, [r2, #8]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	695a      	ldr	r2, [r3, #20]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	431a      	orrs	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	430a      	orrs	r2, r1
 80041da:	60da      	str	r2, [r3, #12]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f042 0201 	orr.w	r2, r2, #1
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	641a      	str	r2, [r3, #64]	@ 0x40
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2220      	movs	r2, #32
 80041f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004208:	2300      	movs	r3, #0
 800420a:	4618      	mov	r0, r3
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	000186a0 	.word	0x000186a0
 8004218:	001e847f 	.word	0x001e847f
 800421c:	003d08ff 	.word	0x003d08ff
 8004220:	431bde83 	.word	0x431bde83
 8004224:	10624dd3 	.word	0x10624dd3

08004228 <HAL_I2C_Mem_Write>:
 8004228:	b580      	push	{r7, lr}
 800422a:	b088      	sub	sp, #32
 800422c:	af02      	add	r7, sp, #8
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	4608      	mov	r0, r1
 8004232:	4611      	mov	r1, r2
 8004234:	461a      	mov	r2, r3
 8004236:	4603      	mov	r3, r0
 8004238:	817b      	strh	r3, [r7, #10]
 800423a:	460b      	mov	r3, r1
 800423c:	813b      	strh	r3, [r7, #8]
 800423e:	4613      	mov	r3, r2
 8004240:	80fb      	strh	r3, [r7, #6]
 8004242:	f7ff faad 	bl	80037a0 <HAL_GetTick>
 8004246:	6178      	str	r0, [r7, #20]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b20      	cmp	r3, #32
 8004252:	f040 80d9 	bne.w	8004408 <HAL_I2C_Mem_Write+0x1e0>
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	9300      	str	r3, [sp, #0]
 800425a:	2319      	movs	r3, #25
 800425c:	2201      	movs	r2, #1
 800425e:	496d      	ldr	r1, [pc, #436]	@ (8004414 <HAL_I2C_Mem_Write+0x1ec>)
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f000 fc8b 	bl	8004b7c <I2C_WaitOnFlagUntilTimeout>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <HAL_I2C_Mem_Write+0x48>
 800426c:	2302      	movs	r3, #2
 800426e:	e0cc      	b.n	800440a <HAL_I2C_Mem_Write+0x1e2>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004276:	2b01      	cmp	r3, #1
 8004278:	d101      	bne.n	800427e <HAL_I2C_Mem_Write+0x56>
 800427a:	2302      	movs	r3, #2
 800427c:	e0c5      	b.n	800440a <HAL_I2C_Mem_Write+0x1e2>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0301 	and.w	r3, r3, #1
 8004290:	2b01      	cmp	r3, #1
 8004292:	d007      	beq.n	80042a4 <HAL_I2C_Mem_Write+0x7c>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f042 0201 	orr.w	r2, r2, #1
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042b2:	601a      	str	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2221      	movs	r2, #33	@ 0x21
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2240      	movs	r2, #64	@ 0x40
 80042c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	641a      	str	r2, [r3, #64]	@ 0x40
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6a3a      	ldr	r2, [r7, #32]
 80042ce:	625a      	str	r2, [r3, #36]	@ 0x24
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80042d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042da:	b29a      	uxth	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	851a      	strh	r2, [r3, #40]	@ 0x28
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4a4d      	ldr	r2, [pc, #308]	@ (8004418 <HAL_I2C_Mem_Write+0x1f0>)
 80042e4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80042e6:	88f8      	ldrh	r0, [r7, #6]
 80042e8:	893a      	ldrh	r2, [r7, #8]
 80042ea:	8979      	ldrh	r1, [r7, #10]
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	9301      	str	r3, [sp, #4]
 80042f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042f2:	9300      	str	r3, [sp, #0]
 80042f4:	4603      	mov	r3, r0
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f000 fac2 	bl	8004880 <I2C_RequestMemoryWrite>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d052      	beq.n	80043a8 <HAL_I2C_Mem_Write+0x180>
 8004302:	2301      	movs	r3, #1
 8004304:	e081      	b.n	800440a <HAL_I2C_Mem_Write+0x1e2>
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800430a:	68f8      	ldr	r0, [r7, #12]
 800430c:	f000 fd50 	bl	8004db0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00d      	beq.n	8004332 <HAL_I2C_Mem_Write+0x10a>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431a:	2b04      	cmp	r3, #4
 800431c:	d107      	bne.n	800432e <HAL_I2C_Mem_Write+0x106>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	2301      	movs	r3, #1
 8004330:	e06b      	b.n	800440a <HAL_I2C_Mem_Write+0x1e2>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004336:	781a      	ldrb	r2, [r3, #0]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	611a      	str	r2, [r3, #16]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004342:	1c5a      	adds	r2, r3, #1
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	625a      	str	r2, [r3, #36]	@ 0x24
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800434c:	3b01      	subs	r3, #1
 800434e:	b29a      	uxth	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004358:	b29b      	uxth	r3, r3
 800435a:	3b01      	subs	r3, #1
 800435c:	b29a      	uxth	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	695b      	ldr	r3, [r3, #20]
 8004368:	f003 0304 	and.w	r3, r3, #4
 800436c:	2b04      	cmp	r3, #4
 800436e:	d11b      	bne.n	80043a8 <HAL_I2C_Mem_Write+0x180>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004374:	2b00      	cmp	r3, #0
 8004376:	d017      	beq.n	80043a8 <HAL_I2C_Mem_Write+0x180>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437c:	781a      	ldrb	r2, [r3, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	611a      	str	r2, [r3, #16]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004388:	1c5a      	adds	r2, r3, #1
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	625a      	str	r2, [r3, #36]	@ 0x24
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004392:	3b01      	subs	r3, #1
 8004394:	b29a      	uxth	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	851a      	strh	r2, [r3, #40]	@ 0x28
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800439e:	b29b      	uxth	r3, r3
 80043a0:	3b01      	subs	r3, #1
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1aa      	bne.n	8004306 <HAL_I2C_Mem_Write+0xde>
 80043b0:	697a      	ldr	r2, [r7, #20]
 80043b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f000 fd43 	bl	8004e40 <I2C_WaitOnBTFFlagUntilTimeout>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00d      	beq.n	80043dc <HAL_I2C_Mem_Write+0x1b4>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c4:	2b04      	cmp	r3, #4
 80043c6:	d107      	bne.n	80043d8 <HAL_I2C_Mem_Write+0x1b0>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043d6:	601a      	str	r2, [r3, #0]
 80043d8:	2301      	movs	r3, #1
 80043da:	e016      	b.n	800440a <HAL_I2C_Mem_Write+0x1e2>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043ea:	601a      	str	r2, [r3, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2220      	movs	r2, #32
 80043f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004404:	2300      	movs	r3, #0
 8004406:	e000      	b.n	800440a <HAL_I2C_Mem_Write+0x1e2>
 8004408:	2302      	movs	r3, #2
 800440a:	4618      	mov	r0, r3
 800440c:	3718      	adds	r7, #24
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	00100002 	.word	0x00100002
 8004418:	ffff0000 	.word	0xffff0000

0800441c <HAL_I2C_Mem_Read>:
 800441c:	b580      	push	{r7, lr}
 800441e:	b08c      	sub	sp, #48	@ 0x30
 8004420:	af02      	add	r7, sp, #8
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	4608      	mov	r0, r1
 8004426:	4611      	mov	r1, r2
 8004428:	461a      	mov	r2, r3
 800442a:	4603      	mov	r3, r0
 800442c:	817b      	strh	r3, [r7, #10]
 800442e:	460b      	mov	r3, r1
 8004430:	813b      	strh	r3, [r7, #8]
 8004432:	4613      	mov	r3, r2
 8004434:	80fb      	strh	r3, [r7, #6]
 8004436:	f7ff f9b3 	bl	80037a0 <HAL_GetTick>
 800443a:	6278      	str	r0, [r7, #36]	@ 0x24
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b20      	cmp	r3, #32
 8004446:	f040 8214 	bne.w	8004872 <HAL_I2C_Mem_Read+0x456>
 800444a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800444c:	9300      	str	r3, [sp, #0]
 800444e:	2319      	movs	r3, #25
 8004450:	2201      	movs	r2, #1
 8004452:	497b      	ldr	r1, [pc, #492]	@ (8004640 <HAL_I2C_Mem_Read+0x224>)
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f000 fb91 	bl	8004b7c <I2C_WaitOnFlagUntilTimeout>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d001      	beq.n	8004464 <HAL_I2C_Mem_Read+0x48>
 8004460:	2302      	movs	r3, #2
 8004462:	e207      	b.n	8004874 <HAL_I2C_Mem_Read+0x458>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800446a:	2b01      	cmp	r3, #1
 800446c:	d101      	bne.n	8004472 <HAL_I2C_Mem_Read+0x56>
 800446e:	2302      	movs	r3, #2
 8004470:	e200      	b.n	8004874 <HAL_I2C_Mem_Read+0x458>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2201      	movs	r2, #1
 8004476:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	2b01      	cmp	r3, #1
 8004486:	d007      	beq.n	8004498 <HAL_I2C_Mem_Read+0x7c>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f042 0201 	orr.w	r2, r2, #1
 8004496:	601a      	str	r2, [r3, #0]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044a6:	601a      	str	r2, [r3, #0]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2222      	movs	r2, #34	@ 0x22
 80044ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2240      	movs	r2, #64	@ 0x40
 80044b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	641a      	str	r2, [r3, #64]	@ 0x40
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044c2:	625a      	str	r2, [r3, #36]	@ 0x24
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80044c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	4a5b      	ldr	r2, [pc, #364]	@ (8004644 <HAL_I2C_Mem_Read+0x228>)
 80044d8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80044da:	88f8      	ldrh	r0, [r7, #6]
 80044dc:	893a      	ldrh	r2, [r7, #8]
 80044de:	8979      	ldrh	r1, [r7, #10]
 80044e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e2:	9301      	str	r3, [sp, #4]
 80044e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044e6:	9300      	str	r3, [sp, #0]
 80044e8:	4603      	mov	r3, r0
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f000 fa5e 	bl	80049ac <I2C_RequestMemoryRead>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <HAL_I2C_Mem_Read+0xde>
 80044f6:	2301      	movs	r3, #1
 80044f8:	e1bc      	b.n	8004874 <HAL_I2C_Mem_Read+0x458>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d113      	bne.n	800452a <HAL_I2C_Mem_Read+0x10e>
 8004502:	2300      	movs	r3, #0
 8004504:	623b      	str	r3, [r7, #32]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	623b      	str	r3, [r7, #32]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	623b      	str	r3, [r7, #32]
 8004516:	6a3b      	ldr	r3, [r7, #32]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004526:	601a      	str	r2, [r3, #0]
 8004528:	e190      	b.n	800484c <HAL_I2C_Mem_Read+0x430>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800452e:	2b01      	cmp	r3, #1
 8004530:	d11b      	bne.n	800456a <HAL_I2C_Mem_Read+0x14e>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004540:	601a      	str	r2, [r3, #0]
 8004542:	2300      	movs	r3, #0
 8004544:	61fb      	str	r3, [r7, #28]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	61fb      	str	r3, [r7, #28]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	61fb      	str	r3, [r7, #28]
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004566:	601a      	str	r2, [r3, #0]
 8004568:	e170      	b.n	800484c <HAL_I2C_Mem_Read+0x430>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800456e:	2b02      	cmp	r3, #2
 8004570:	d11b      	bne.n	80045aa <HAL_I2C_Mem_Read+0x18e>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004580:	601a      	str	r2, [r3, #0]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004590:	601a      	str	r2, [r3, #0]
 8004592:	2300      	movs	r3, #0
 8004594:	61bb      	str	r3, [r7, #24]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	61bb      	str	r3, [r7, #24]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	61bb      	str	r3, [r7, #24]
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	e150      	b.n	800484c <HAL_I2C_Mem_Read+0x430>
 80045aa:	2300      	movs	r3, #0
 80045ac:	617b      	str	r3, [r7, #20]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	617b      	str	r3, [r7, #20]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	617b      	str	r3, [r7, #20]
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	e144      	b.n	800484c <HAL_I2C_Mem_Read+0x430>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045c6:	2b03      	cmp	r3, #3
 80045c8:	f200 80f1 	bhi.w	80047ae <HAL_I2C_Mem_Read+0x392>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d123      	bne.n	800461c <HAL_I2C_Mem_Read+0x200>
 80045d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045d6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f000 fc79 	bl	8004ed0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d001      	beq.n	80045e8 <HAL_I2C_Mem_Read+0x1cc>
 80045e4:	2301      	movs	r3, #1
 80045e6:	e145      	b.n	8004874 <HAL_I2C_Mem_Read+0x458>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	691a      	ldr	r2, [r3, #16]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f2:	b2d2      	uxtb	r2, r2
 80045f4:	701a      	strb	r2, [r3, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fa:	1c5a      	adds	r2, r3, #1
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	625a      	str	r2, [r3, #36]	@ 0x24
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004604:	3b01      	subs	r3, #1
 8004606:	b29a      	uxth	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004610:	b29b      	uxth	r3, r3
 8004612:	3b01      	subs	r3, #1
 8004614:	b29a      	uxth	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800461a:	e117      	b.n	800484c <HAL_I2C_Mem_Read+0x430>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004620:	2b02      	cmp	r3, #2
 8004622:	d14e      	bne.n	80046c2 <HAL_I2C_Mem_Read+0x2a6>
 8004624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004626:	9300      	str	r3, [sp, #0]
 8004628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800462a:	2200      	movs	r2, #0
 800462c:	4906      	ldr	r1, [pc, #24]	@ (8004648 <HAL_I2C_Mem_Read+0x22c>)
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f000 faa4 	bl	8004b7c <I2C_WaitOnFlagUntilTimeout>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d008      	beq.n	800464c <HAL_I2C_Mem_Read+0x230>
 800463a:	2301      	movs	r3, #1
 800463c:	e11a      	b.n	8004874 <HAL_I2C_Mem_Read+0x458>
 800463e:	bf00      	nop
 8004640:	00100002 	.word	0x00100002
 8004644:	ffff0000 	.word	0xffff0000
 8004648:	00010004 	.word	0x00010004
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800465a:	601a      	str	r2, [r3, #0]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	691a      	ldr	r2, [r3, #16]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004666:	b2d2      	uxtb	r2, r2
 8004668:	701a      	strb	r2, [r3, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466e:	1c5a      	adds	r2, r3, #1
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	625a      	str	r2, [r3, #36]	@ 0x24
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004678:	3b01      	subs	r3, #1
 800467a:	b29a      	uxth	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004684:	b29b      	uxth	r3, r3
 8004686:	3b01      	subs	r3, #1
 8004688:	b29a      	uxth	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	691a      	ldr	r2, [r3, #16]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004698:	b2d2      	uxtb	r2, r2
 800469a:	701a      	strb	r2, [r3, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a0:	1c5a      	adds	r2, r3, #1
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	625a      	str	r2, [r3, #36]	@ 0x24
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046aa:	3b01      	subs	r3, #1
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	851a      	strh	r2, [r3, #40]	@ 0x28
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	3b01      	subs	r3, #1
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80046c0:	e0c4      	b.n	800484c <HAL_I2C_Mem_Read+0x430>
 80046c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c4:	9300      	str	r3, [sp, #0]
 80046c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046c8:	2200      	movs	r2, #0
 80046ca:	496c      	ldr	r1, [pc, #432]	@ (800487c <HAL_I2C_Mem_Read+0x460>)
 80046cc:	68f8      	ldr	r0, [r7, #12]
 80046ce:	f000 fa55 	bl	8004b7c <I2C_WaitOnFlagUntilTimeout>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d001      	beq.n	80046dc <HAL_I2C_Mem_Read+0x2c0>
 80046d8:	2301      	movs	r3, #1
 80046da:	e0cb      	b.n	8004874 <HAL_I2C_Mem_Read+0x458>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046ea:	601a      	str	r2, [r3, #0]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	691a      	ldr	r2, [r3, #16]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f6:	b2d2      	uxtb	r2, r2
 80046f8:	701a      	strb	r2, [r3, #0]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fe:	1c5a      	adds	r2, r3, #1
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	625a      	str	r2, [r3, #36]	@ 0x24
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004708:	3b01      	subs	r3, #1
 800470a:	b29a      	uxth	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004714:	b29b      	uxth	r3, r3
 8004716:	3b01      	subs	r3, #1
 8004718:	b29a      	uxth	r2, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800471e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004720:	9300      	str	r3, [sp, #0]
 8004722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004724:	2200      	movs	r2, #0
 8004726:	4955      	ldr	r1, [pc, #340]	@ (800487c <HAL_I2C_Mem_Read+0x460>)
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f000 fa27 	bl	8004b7c <I2C_WaitOnFlagUntilTimeout>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d001      	beq.n	8004738 <HAL_I2C_Mem_Read+0x31c>
 8004734:	2301      	movs	r3, #1
 8004736:	e09d      	b.n	8004874 <HAL_I2C_Mem_Read+0x458>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004746:	601a      	str	r2, [r3, #0]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	691a      	ldr	r2, [r3, #16]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004752:	b2d2      	uxtb	r2, r2
 8004754:	701a      	strb	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475a:	1c5a      	adds	r2, r3, #1
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	625a      	str	r2, [r3, #36]	@ 0x24
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004764:	3b01      	subs	r3, #1
 8004766:	b29a      	uxth	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004770:	b29b      	uxth	r3, r3
 8004772:	3b01      	subs	r3, #1
 8004774:	b29a      	uxth	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	691a      	ldr	r2, [r3, #16]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004784:	b2d2      	uxtb	r2, r2
 8004786:	701a      	strb	r2, [r3, #0]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800478c:	1c5a      	adds	r2, r3, #1
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	625a      	str	r2, [r3, #36]	@ 0x24
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004796:	3b01      	subs	r3, #1
 8004798:	b29a      	uxth	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	3b01      	subs	r3, #1
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80047ac:	e04e      	b.n	800484c <HAL_I2C_Mem_Read+0x430>
 80047ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047b0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f000 fb8c 	bl	8004ed0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <HAL_I2C_Mem_Read+0x3a6>
 80047be:	2301      	movs	r3, #1
 80047c0:	e058      	b.n	8004874 <HAL_I2C_Mem_Read+0x458>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	691a      	ldr	r2, [r3, #16]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047cc:	b2d2      	uxtb	r2, r2
 80047ce:	701a      	strb	r2, [r3, #0]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d4:	1c5a      	adds	r2, r3, #1
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	625a      	str	r2, [r3, #36]	@ 0x24
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047de:	3b01      	subs	r3, #1
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	851a      	strh	r2, [r3, #40]	@ 0x28
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	3b01      	subs	r3, #1
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	f003 0304 	and.w	r3, r3, #4
 80047fe:	2b04      	cmp	r3, #4
 8004800:	d124      	bne.n	800484c <HAL_I2C_Mem_Read+0x430>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004806:	2b03      	cmp	r3, #3
 8004808:	d107      	bne.n	800481a <HAL_I2C_Mem_Read+0x3fe>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004818:	601a      	str	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	691a      	ldr	r2, [r3, #16]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004824:	b2d2      	uxtb	r2, r2
 8004826:	701a      	strb	r2, [r3, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800482c:	1c5a      	adds	r2, r3, #1
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	625a      	str	r2, [r3, #36]	@ 0x24
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004836:	3b01      	subs	r3, #1
 8004838:	b29a      	uxth	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004842:	b29b      	uxth	r3, r3
 8004844:	3b01      	subs	r3, #1
 8004846:	b29a      	uxth	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004850:	2b00      	cmp	r3, #0
 8004852:	f47f aeb6 	bne.w	80045c2 <HAL_I2C_Mem_Read+0x1a6>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2220      	movs	r2, #32
 800485a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800486e:	2300      	movs	r3, #0
 8004870:	e000      	b.n	8004874 <HAL_I2C_Mem_Read+0x458>
 8004872:	2302      	movs	r3, #2
 8004874:	4618      	mov	r0, r3
 8004876:	3728      	adds	r7, #40	@ 0x28
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	00010004 	.word	0x00010004

08004880 <I2C_RequestMemoryWrite>:
 8004880:	b580      	push	{r7, lr}
 8004882:	b088      	sub	sp, #32
 8004884:	af02      	add	r7, sp, #8
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	4608      	mov	r0, r1
 800488a:	4611      	mov	r1, r2
 800488c:	461a      	mov	r2, r3
 800488e:	4603      	mov	r3, r0
 8004890:	817b      	strh	r3, [r7, #10]
 8004892:	460b      	mov	r3, r1
 8004894:	813b      	strh	r3, [r7, #8]
 8004896:	4613      	mov	r3, r2
 8004898:	80fb      	strh	r3, [r7, #6]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048a8:	601a      	str	r2, [r3, #0]
 80048aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ac:	9300      	str	r3, [sp, #0]
 80048ae:	6a3b      	ldr	r3, [r7, #32]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f000 f960 	bl	8004b7c <I2C_WaitOnFlagUntilTimeout>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00d      	beq.n	80048de <I2C_RequestMemoryWrite+0x5e>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048d0:	d103      	bne.n	80048da <I2C_RequestMemoryWrite+0x5a>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048d8:	641a      	str	r2, [r3, #64]	@ 0x40
 80048da:	2303      	movs	r3, #3
 80048dc:	e05f      	b.n	800499e <I2C_RequestMemoryWrite+0x11e>
 80048de:	897b      	ldrh	r3, [r7, #10]
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	461a      	mov	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80048ec:	611a      	str	r2, [r3, #16]
 80048ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f0:	6a3a      	ldr	r2, [r7, #32]
 80048f2:	492d      	ldr	r1, [pc, #180]	@ (80049a8 <I2C_RequestMemoryWrite+0x128>)
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	f000 f9bb 	bl	8004c70 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d001      	beq.n	8004904 <I2C_RequestMemoryWrite+0x84>
 8004900:	2301      	movs	r3, #1
 8004902:	e04c      	b.n	800499e <I2C_RequestMemoryWrite+0x11e>
 8004904:	2300      	movs	r3, #0
 8004906:	617b      	str	r3, [r7, #20]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	617b      	str	r3, [r7, #20]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	617b      	str	r3, [r7, #20]
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800491c:	6a39      	ldr	r1, [r7, #32]
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	f000 fa46 	bl	8004db0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00d      	beq.n	8004946 <I2C_RequestMemoryWrite+0xc6>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800492e:	2b04      	cmp	r3, #4
 8004930:	d107      	bne.n	8004942 <I2C_RequestMemoryWrite+0xc2>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004940:	601a      	str	r2, [r3, #0]
 8004942:	2301      	movs	r3, #1
 8004944:	e02b      	b.n	800499e <I2C_RequestMemoryWrite+0x11e>
 8004946:	88fb      	ldrh	r3, [r7, #6]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d105      	bne.n	8004958 <I2C_RequestMemoryWrite+0xd8>
 800494c:	893b      	ldrh	r3, [r7, #8]
 800494e:	b2da      	uxtb	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	611a      	str	r2, [r3, #16]
 8004956:	e021      	b.n	800499c <I2C_RequestMemoryWrite+0x11c>
 8004958:	893b      	ldrh	r3, [r7, #8]
 800495a:	0a1b      	lsrs	r3, r3, #8
 800495c:	b29b      	uxth	r3, r3
 800495e:	b2da      	uxtb	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	611a      	str	r2, [r3, #16]
 8004966:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004968:	6a39      	ldr	r1, [r7, #32]
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f000 fa20 	bl	8004db0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00d      	beq.n	8004992 <I2C_RequestMemoryWrite+0x112>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800497a:	2b04      	cmp	r3, #4
 800497c:	d107      	bne.n	800498e <I2C_RequestMemoryWrite+0x10e>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	2301      	movs	r3, #1
 8004990:	e005      	b.n	800499e <I2C_RequestMemoryWrite+0x11e>
 8004992:	893b      	ldrh	r3, [r7, #8]
 8004994:	b2da      	uxtb	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	611a      	str	r2, [r3, #16]
 800499c:	2300      	movs	r3, #0
 800499e:	4618      	mov	r0, r3
 80049a0:	3718      	adds	r7, #24
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	00010002 	.word	0x00010002

080049ac <I2C_RequestMemoryRead>:
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b088      	sub	sp, #32
 80049b0:	af02      	add	r7, sp, #8
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	4608      	mov	r0, r1
 80049b6:	4611      	mov	r1, r2
 80049b8:	461a      	mov	r2, r3
 80049ba:	4603      	mov	r3, r0
 80049bc:	817b      	strh	r3, [r7, #10]
 80049be:	460b      	mov	r3, r1
 80049c0:	813b      	strh	r3, [r7, #8]
 80049c2:	4613      	mov	r3, r2
 80049c4:	80fb      	strh	r3, [r7, #6]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80049d4:	601a      	str	r2, [r3, #0]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049e4:	601a      	str	r2, [r3, #0]
 80049e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	6a3b      	ldr	r3, [r7, #32]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f000 f8c2 	bl	8004b7c <I2C_WaitOnFlagUntilTimeout>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00d      	beq.n	8004a1a <I2C_RequestMemoryRead+0x6e>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a0c:	d103      	bne.n	8004a16 <I2C_RequestMemoryRead+0x6a>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a14:	641a      	str	r2, [r3, #64]	@ 0x40
 8004a16:	2303      	movs	r3, #3
 8004a18:	e0aa      	b.n	8004b70 <I2C_RequestMemoryRead+0x1c4>
 8004a1a:	897b      	ldrh	r3, [r7, #10]
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	461a      	mov	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004a28:	611a      	str	r2, [r3, #16]
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2c:	6a3a      	ldr	r2, [r7, #32]
 8004a2e:	4952      	ldr	r1, [pc, #328]	@ (8004b78 <I2C_RequestMemoryRead+0x1cc>)
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f000 f91d 	bl	8004c70 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d001      	beq.n	8004a40 <I2C_RequestMemoryRead+0x94>
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e097      	b.n	8004b70 <I2C_RequestMemoryRead+0x1c4>
 8004a40:	2300      	movs	r3, #0
 8004a42:	617b      	str	r3, [r7, #20]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	617b      	str	r3, [r7, #20]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	617b      	str	r3, [r7, #20]
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a58:	6a39      	ldr	r1, [r7, #32]
 8004a5a:	68f8      	ldr	r0, [r7, #12]
 8004a5c:	f000 f9a8 	bl	8004db0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00d      	beq.n	8004a82 <I2C_RequestMemoryRead+0xd6>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a6a:	2b04      	cmp	r3, #4
 8004a6c:	d107      	bne.n	8004a7e <I2C_RequestMemoryRead+0xd2>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a7c:	601a      	str	r2, [r3, #0]
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e076      	b.n	8004b70 <I2C_RequestMemoryRead+0x1c4>
 8004a82:	88fb      	ldrh	r3, [r7, #6]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d105      	bne.n	8004a94 <I2C_RequestMemoryRead+0xe8>
 8004a88:	893b      	ldrh	r3, [r7, #8]
 8004a8a:	b2da      	uxtb	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	611a      	str	r2, [r3, #16]
 8004a92:	e021      	b.n	8004ad8 <I2C_RequestMemoryRead+0x12c>
 8004a94:	893b      	ldrh	r3, [r7, #8]
 8004a96:	0a1b      	lsrs	r3, r3, #8
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	b2da      	uxtb	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	611a      	str	r2, [r3, #16]
 8004aa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004aa4:	6a39      	ldr	r1, [r7, #32]
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	f000 f982 	bl	8004db0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00d      	beq.n	8004ace <I2C_RequestMemoryRead+0x122>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab6:	2b04      	cmp	r3, #4
 8004ab8:	d107      	bne.n	8004aca <I2C_RequestMemoryRead+0x11e>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ac8:	601a      	str	r2, [r3, #0]
 8004aca:	2301      	movs	r3, #1
 8004acc:	e050      	b.n	8004b70 <I2C_RequestMemoryRead+0x1c4>
 8004ace:	893b      	ldrh	r3, [r7, #8]
 8004ad0:	b2da      	uxtb	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	611a      	str	r2, [r3, #16]
 8004ad8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ada:	6a39      	ldr	r1, [r7, #32]
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f000 f967 	bl	8004db0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00d      	beq.n	8004b04 <I2C_RequestMemoryRead+0x158>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aec:	2b04      	cmp	r3, #4
 8004aee:	d107      	bne.n	8004b00 <I2C_RequestMemoryRead+0x154>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004afe:	601a      	str	r2, [r3, #0]
 8004b00:	2301      	movs	r3, #1
 8004b02:	e035      	b.n	8004b70 <I2C_RequestMemoryRead+0x1c4>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b12:	601a      	str	r2, [r3, #0]
 8004b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b16:	9300      	str	r3, [sp, #0]
 8004b18:	6a3b      	ldr	r3, [r7, #32]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f000 f82b 	bl	8004b7c <I2C_WaitOnFlagUntilTimeout>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00d      	beq.n	8004b48 <I2C_RequestMemoryRead+0x19c>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b3a:	d103      	bne.n	8004b44 <I2C_RequestMemoryRead+0x198>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b42:	641a      	str	r2, [r3, #64]	@ 0x40
 8004b44:	2303      	movs	r3, #3
 8004b46:	e013      	b.n	8004b70 <I2C_RequestMemoryRead+0x1c4>
 8004b48:	897b      	ldrh	r3, [r7, #10]
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	f043 0301 	orr.w	r3, r3, #1
 8004b50:	b2da      	uxtb	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	611a      	str	r2, [r3, #16]
 8004b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5a:	6a3a      	ldr	r2, [r7, #32]
 8004b5c:	4906      	ldr	r1, [pc, #24]	@ (8004b78 <I2C_RequestMemoryRead+0x1cc>)
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f000 f886 	bl	8004c70 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <I2C_RequestMemoryRead+0x1c2>
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e000      	b.n	8004b70 <I2C_RequestMemoryRead+0x1c4>
 8004b6e:	2300      	movs	r3, #0
 8004b70:	4618      	mov	r0, r3
 8004b72:	3718      	adds	r7, #24
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	00010002 	.word	0x00010002

08004b7c <I2C_WaitOnFlagUntilTimeout>:
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	603b      	str	r3, [r7, #0]
 8004b88:	4613      	mov	r3, r2
 8004b8a:	71fb      	strb	r3, [r7, #7]
 8004b8c:	e048      	b.n	8004c20 <I2C_WaitOnFlagUntilTimeout+0xa4>
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b94:	d044      	beq.n	8004c20 <I2C_WaitOnFlagUntilTimeout+0xa4>
 8004b96:	f7fe fe03 	bl	80037a0 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d302      	bcc.n	8004bac <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d139      	bne.n	8004c20 <I2C_WaitOnFlagUntilTimeout+0xa4>
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	0c1b      	lsrs	r3, r3, #16
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d10d      	bne.n	8004bd2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	43da      	mvns	r2, r3
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	bf0c      	ite	eq
 8004bc8:	2301      	moveq	r3, #1
 8004bca:	2300      	movne	r3, #0
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	461a      	mov	r2, r3
 8004bd0:	e00c      	b.n	8004bec <I2C_WaitOnFlagUntilTimeout+0x70>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	43da      	mvns	r2, r3
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	4013      	ands	r3, r2
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	bf0c      	ite	eq
 8004be4:	2301      	moveq	r3, #1
 8004be6:	2300      	movne	r3, #0
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	461a      	mov	r2, r3
 8004bec:	79fb      	ldrb	r3, [r7, #7]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d116      	bne.n	8004c20 <I2C_WaitOnFlagUntilTimeout+0xa4>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	631a      	str	r2, [r3, #48]	@ 0x30
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c0c:	f043 0220 	orr.w	r2, r3, #32
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	641a      	str	r2, [r3, #64]	@ 0x40
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e023      	b.n	8004c68 <I2C_WaitOnFlagUntilTimeout+0xec>
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	0c1b      	lsrs	r3, r3, #16
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d10d      	bne.n	8004c46 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	695b      	ldr	r3, [r3, #20]
 8004c30:	43da      	mvns	r2, r3
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	4013      	ands	r3, r2
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	bf0c      	ite	eq
 8004c3c:	2301      	moveq	r3, #1
 8004c3e:	2300      	movne	r3, #0
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	461a      	mov	r2, r3
 8004c44:	e00c      	b.n	8004c60 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	43da      	mvns	r2, r3
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	4013      	ands	r3, r2
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	bf0c      	ite	eq
 8004c58:	2301      	moveq	r3, #1
 8004c5a:	2300      	movne	r3, #0
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	461a      	mov	r2, r3
 8004c60:	79fb      	ldrb	r3, [r7, #7]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d093      	beq.n	8004b8e <I2C_WaitOnFlagUntilTimeout+0x12>
 8004c66:	2300      	movs	r3, #0
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3710      	adds	r7, #16
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
 8004c7c:	603b      	str	r3, [r7, #0]
 8004c7e:	e071      	b.n	8004d64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	695b      	ldr	r3, [r3, #20]
 8004c86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c8e:	d123      	bne.n	8004cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c9e:	601a      	str	r2, [r3, #0]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004ca8:	615a      	str	r2, [r3, #20]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	631a      	str	r2, [r3, #48]	@ 0x30
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc4:	f043 0204 	orr.w	r2, r3, #4
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	641a      	str	r2, [r3, #64]	@ 0x40
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e067      	b.n	8004da8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004cde:	d041      	beq.n	8004d64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 8004ce0:	f7fe fd5e 	bl	80037a0 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d302      	bcc.n	8004cf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d136      	bne.n	8004d64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	0c1b      	lsrs	r3, r3, #16
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d10c      	bne.n	8004d1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	43da      	mvns	r2, r3
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	bf14      	ite	ne
 8004d12:	2301      	movne	r3, #1
 8004d14:	2300      	moveq	r3, #0
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	e00b      	b.n	8004d32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	43da      	mvns	r2, r3
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	4013      	ands	r3, r2
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	bf14      	ite	ne
 8004d2c:	2301      	movne	r3, #1
 8004d2e:	2300      	moveq	r3, #0
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d016      	beq.n	8004d64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	631a      	str	r2, [r3, #48]	@ 0x30
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2220      	movs	r2, #32
 8004d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d50:	f043 0220 	orr.w	r2, r3, #32
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	641a      	str	r2, [r3, #64]	@ 0x40
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004d60:	2301      	movs	r3, #1
 8004d62:	e021      	b.n	8004da8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	0c1b      	lsrs	r3, r3, #16
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d10c      	bne.n	8004d88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	695b      	ldr	r3, [r3, #20]
 8004d74:	43da      	mvns	r2, r3
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	4013      	ands	r3, r2
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	bf14      	ite	ne
 8004d80:	2301      	movne	r3, #1
 8004d82:	2300      	moveq	r3, #0
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	e00b      	b.n	8004da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	43da      	mvns	r2, r3
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	4013      	ands	r3, r2
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	bf14      	ite	ne
 8004d9a:	2301      	movne	r3, #1
 8004d9c:	2300      	moveq	r3, #0
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	f47f af6d 	bne.w	8004c80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8004da6:	2300      	movs	r3, #0
 8004da8:	4618      	mov	r0, r3
 8004daa:	3710      	adds	r7, #16
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <I2C_WaitOnTXEFlagUntilTimeout>:
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	607a      	str	r2, [r7, #4]
 8004dbc:	e034      	b.n	8004e28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f000 f8e3 	bl	8004f8a <I2C_IsAcknowledgeFailed>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d001      	beq.n	8004dce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e034      	b.n	8004e38 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004dd4:	d028      	beq.n	8004e28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 8004dd6:	f7fe fce3 	bl	80037a0 <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	68ba      	ldr	r2, [r7, #8]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d302      	bcc.n	8004dec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d11d      	bne.n	8004e28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004df6:	2b80      	cmp	r3, #128	@ 0x80
 8004df8:	d016      	beq.n	8004e28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2220      	movs	r2, #32
 8004e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e14:	f043 0220 	orr.w	r2, r3, #32
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	641a      	str	r2, [r3, #64]	@ 0x40
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004e24:	2301      	movs	r3, #1
 8004e26:	e007      	b.n	8004e38 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e32:	2b80      	cmp	r3, #128	@ 0x80
 8004e34:	d1c3      	bne.n	8004dbe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
 8004e36:	2300      	movs	r3, #0
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3710      	adds	r7, #16
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <I2C_WaitOnBTFFlagUntilTimeout>:
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	607a      	str	r2, [r7, #4]
 8004e4c:	e034      	b.n	8004eb8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 8004e4e:	68f8      	ldr	r0, [r7, #12]
 8004e50:	f000 f89b 	bl	8004f8a <I2C_IsAcknowledgeFailed>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d001      	beq.n	8004e5e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e034      	b.n	8004ec8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e64:	d028      	beq.n	8004eb8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 8004e66:	f7fe fc9b 	bl	80037a0 <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	68ba      	ldr	r2, [r7, #8]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d302      	bcc.n	8004e7c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d11d      	bne.n	8004eb8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	f003 0304 	and.w	r3, r3, #4
 8004e86:	2b04      	cmp	r3, #4
 8004e88:	d016      	beq.n	8004eb8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2220      	movs	r2, #32
 8004e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea4:	f043 0220 	orr.w	r2, r3, #32
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	641a      	str	r2, [r3, #64]	@ 0x40
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e007      	b.n	8004ec8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	f003 0304 	and.w	r3, r3, #4
 8004ec2:	2b04      	cmp	r3, #4
 8004ec4:	d1c3      	bne.n	8004e4e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <I2C_WaitOnRXNEFlagUntilTimeout>:
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
 8004edc:	e049      	b.n	8004f72 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	695b      	ldr	r3, [r3, #20]
 8004ee4:	f003 0310 	and.w	r3, r3, #16
 8004ee8:	2b10      	cmp	r3, #16
 8004eea:	d119      	bne.n	8004f20 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f06f 0210 	mvn.w	r2, #16
 8004ef4:	615a      	str	r2, [r3, #20]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	631a      	str	r2, [r3, #48]	@ 0x30
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2220      	movs	r2, #32
 8004f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	641a      	str	r2, [r3, #64]	@ 0x40
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e030      	b.n	8004f82 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
 8004f20:	f7fe fc3e 	bl	80037a0 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	68ba      	ldr	r2, [r7, #8]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d302      	bcc.n	8004f36 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d11d      	bne.n	8004f72 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	695b      	ldr	r3, [r3, #20]
 8004f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f40:	2b40      	cmp	r3, #64	@ 0x40
 8004f42:	d016      	beq.n	8004f72 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2200      	movs	r2, #0
 8004f48:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2220      	movs	r2, #32
 8004f4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f5e:	f043 0220 	orr.w	r2, r3, #32
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	641a      	str	r2, [r3, #64]	@ 0x40
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e007      	b.n	8004f82 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f7c:	2b40      	cmp	r3, #64	@ 0x40
 8004f7e:	d1ae      	bne.n	8004ede <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
 8004f80:	2300      	movs	r3, #0
 8004f82:	4618      	mov	r0, r3
 8004f84:	3710      	adds	r7, #16
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <I2C_IsAcknowledgeFailed>:
 8004f8a:	b480      	push	{r7}
 8004f8c:	b083      	sub	sp, #12
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	695b      	ldr	r3, [r3, #20]
 8004f98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fa0:	d11b      	bne.n	8004fda <I2C_IsAcknowledgeFailed+0x50>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004faa:	615a      	str	r2, [r3, #20]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	631a      	str	r2, [r3, #48]	@ 0x30
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2220      	movs	r2, #32
 8004fb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc6:	f043 0204 	orr.w	r2, r3, #4
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	641a      	str	r2, [r3, #64]	@ 0x40
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e000      	b.n	8004fdc <I2C_IsAcknowledgeFailed+0x52>
 8004fda:	2300      	movs	r3, #0
 8004fdc:	4618      	mov	r0, r3
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <HAL_I2CEx_ConfigAnalogFilter>:
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b20      	cmp	r3, #32
 8004ffc:	d129      	bne.n	8005052 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2224      	movs	r2, #36	@ 0x24
 8005002:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f022 0201 	bic.w	r2, r2, #1
 8005014:	601a      	str	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f022 0210 	bic.w	r2, r2, #16
 8005024:	625a      	str	r2, [r3, #36]	@ 0x24
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	683a      	ldr	r2, [r7, #0]
 8005032:	430a      	orrs	r2, r1
 8005034:	625a      	str	r2, [r3, #36]	@ 0x24
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f042 0201 	orr.w	r2, r2, #1
 8005044:	601a      	str	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2220      	movs	r2, #32
 800504a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800504e:	2300      	movs	r3, #0
 8005050:	e000      	b.n	8005054 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
 8005052:	2302      	movs	r3, #2
 8005054:	4618      	mov	r0, r3
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <HAL_I2CEx_ConfigDigitalFilter>:
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
 800506a:	2300      	movs	r3, #0
 800506c:	81fb      	strh	r3, [r7, #14]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b20      	cmp	r3, #32
 8005078:	d12a      	bne.n	80050d0 <HAL_I2CEx_ConfigDigitalFilter+0x70>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2224      	movs	r2, #36	@ 0x24
 800507e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0201 	bic.w	r2, r2, #1
 8005090:	601a      	str	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005098:	81fb      	strh	r3, [r7, #14]
 800509a:	89fb      	ldrh	r3, [r7, #14]
 800509c:	f023 030f 	bic.w	r3, r3, #15
 80050a0:	81fb      	strh	r3, [r7, #14]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	89fb      	ldrh	r3, [r7, #14]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	81fb      	strh	r3, [r7, #14]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	89fa      	ldrh	r2, [r7, #14]
 80050b2:	625a      	str	r2, [r3, #36]	@ 0x24
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f042 0201 	orr.w	r2, r2, #1
 80050c2:	601a      	str	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2220      	movs	r2, #32
 80050c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80050cc:	2300      	movs	r3, #0
 80050ce:	e000      	b.n	80050d2 <HAL_I2CEx_ConfigDigitalFilter+0x72>
 80050d0:	2302      	movs	r3, #2
 80050d2:	4618      	mov	r0, r3
 80050d4:	3714      	adds	r7, #20
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
	...

080050e0 <HAL_LTDC_Init>:
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <HAL_LTDC_Init+0x12>
 80050ee:	2301      	movs	r3, #1
 80050f0:	e0bf      	b.n	8005272 <HAL_LTDC_Init+0x192>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d106      	bne.n	800510c <HAL_LTDC_Init+0x2c>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f7fd fc84 	bl	8002a14 <HAL_LTDC_MspInit>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2202      	movs	r2, #2
 8005110:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	699a      	ldr	r2, [r3, #24]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8005122:	619a      	str	r2, [r3, #24]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	6999      	ldr	r1, [r3, #24]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	431a      	orrs	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	431a      	orrs	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	431a      	orrs	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	430a      	orrs	r2, r1
 8005146:	619a      	str	r2, [r3, #24]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6899      	ldr	r1, [r3, #8]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	4b4a      	ldr	r3, [pc, #296]	@ (800527c <HAL_LTDC_Init+0x19c>)
 8005154:	400b      	ands	r3, r1
 8005156:	6093      	str	r3, [r2, #8]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	695b      	ldr	r3, [r3, #20]
 800515c:	041b      	lsls	r3, r3, #16
 800515e:	60fb      	str	r3, [r7, #12]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6899      	ldr	r1, [r3, #8]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	699a      	ldr	r2, [r3, #24]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	431a      	orrs	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	430a      	orrs	r2, r1
 8005174:	609a      	str	r2, [r3, #8]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68d9      	ldr	r1, [r3, #12]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	4b3e      	ldr	r3, [pc, #248]	@ (800527c <HAL_LTDC_Init+0x19c>)
 8005182:	400b      	ands	r3, r1
 8005184:	60d3      	str	r3, [r2, #12]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	69db      	ldr	r3, [r3, #28]
 800518a:	041b      	lsls	r3, r3, #16
 800518c:	60fb      	str	r3, [r7, #12]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68d9      	ldr	r1, [r3, #12]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a1a      	ldr	r2, [r3, #32]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	431a      	orrs	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	430a      	orrs	r2, r1
 80051a2:	60da      	str	r2, [r3, #12]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	6919      	ldr	r1, [r3, #16]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	4b33      	ldr	r3, [pc, #204]	@ (800527c <HAL_LTDC_Init+0x19c>)
 80051b0:	400b      	ands	r3, r1
 80051b2:	6113      	str	r3, [r2, #16]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b8:	041b      	lsls	r3, r3, #16
 80051ba:	60fb      	str	r3, [r7, #12]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	6919      	ldr	r1, [r3, #16]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	431a      	orrs	r2, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	430a      	orrs	r2, r1
 80051d0:	611a      	str	r2, [r3, #16]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	6959      	ldr	r1, [r3, #20]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	4b27      	ldr	r3, [pc, #156]	@ (800527c <HAL_LTDC_Init+0x19c>)
 80051de:	400b      	ands	r3, r1
 80051e0:	6153      	str	r3, [r2, #20]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e6:	041b      	lsls	r3, r3, #16
 80051e8:	60fb      	str	r3, [r7, #12]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	6959      	ldr	r1, [r3, #20]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	431a      	orrs	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	430a      	orrs	r2, r1
 80051fe:	615a      	str	r2, [r3, #20]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005206:	021b      	lsls	r3, r3, #8
 8005208:	60fb      	str	r3, [r7, #12]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005210:	041b      	lsls	r3, r3, #16
 8005212:	60bb      	str	r3, [r7, #8]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8005222:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800522a:	68ba      	ldr	r2, [r7, #8]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	4313      	orrs	r3, r2
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8005236:	431a      	orrs	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	430a      	orrs	r2, r1
 800523e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f042 0206 	orr.w	r2, r2, #6
 800524e:	635a      	str	r2, [r3, #52]	@ 0x34
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	699a      	ldr	r2, [r3, #24]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f042 0201 	orr.w	r2, r2, #1
 800525e:	619a      	str	r2, [r3, #24]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
 8005270:	2300      	movs	r3, #0
 8005272:	4618      	mov	r0, r3
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	f000f800 	.word	0xf000f800

08005280 <HAL_LTDC_ConfigLayer>:
 8005280:	b5b0      	push	{r4, r5, r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8005292:	2b01      	cmp	r3, #1
 8005294:	d101      	bne.n	800529a <HAL_LTDC_ConfigLayer+0x1a>
 8005296:	2302      	movs	r3, #2
 8005298:	e02c      	b.n	80052f4 <HAL_LTDC_ConfigLayer+0x74>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2201      	movs	r2, #1
 800529e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2202      	movs	r2, #2
 80052a6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2134      	movs	r1, #52	@ 0x34
 80052b0:	fb01 f303 	mul.w	r3, r1, r3
 80052b4:	4413      	add	r3, r2
 80052b6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	4614      	mov	r4, r2
 80052be:	461d      	mov	r5, r3
 80052c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80052c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80052c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80052cc:	682b      	ldr	r3, [r5, #0]
 80052ce:	6023      	str	r3, [r4, #0]
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	68b9      	ldr	r1, [r7, #8]
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f000 f811 	bl	80052fc <LTDC_SetConfig>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2201      	movs	r2, #1
 80052e0:	625a      	str	r2, [r3, #36]	@ 0x24
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
 80052f2:	2300      	movs	r3, #0
 80052f4:	4618      	mov	r0, r3
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bdb0      	pop	{r4, r5, r7, pc}

080052fc <LTDC_SetConfig>:
 80052fc:	b480      	push	{r7}
 80052fe:	b089      	sub	sp, #36	@ 0x24
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	685a      	ldr	r2, [r3, #4]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	0c1b      	lsrs	r3, r3, #16
 8005314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005318:	4413      	add	r3, r2
 800531a:	041b      	lsls	r3, r3, #16
 800531c:	61fb      	str	r3, [r7, #28]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	461a      	mov	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	01db      	lsls	r3, r3, #7
 8005328:	4413      	add	r3, r2
 800532a:	3384      	adds	r3, #132	@ 0x84
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	6812      	ldr	r2, [r2, #0]
 8005332:	4611      	mov	r1, r2
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	01d2      	lsls	r2, r2, #7
 8005338:	440a      	add	r2, r1
 800533a:	3284      	adds	r2, #132	@ 0x84
 800533c:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005340:	6053      	str	r3, [r2, #4]
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	0c1b      	lsrs	r3, r3, #16
 800534e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005352:	4413      	add	r3, r2
 8005354:	1c5a      	adds	r2, r3, #1
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4619      	mov	r1, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	01db      	lsls	r3, r3, #7
 8005360:	440b      	add	r3, r1
 8005362:	3384      	adds	r3, #132	@ 0x84
 8005364:	4619      	mov	r1, r3
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	4313      	orrs	r3, r2
 800536a:	604b      	str	r3, [r1, #4]
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	68da      	ldr	r2, [r3, #12]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800537a:	4413      	add	r3, r2
 800537c:	041b      	lsls	r3, r3, #16
 800537e:	61fb      	str	r3, [r7, #28]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	461a      	mov	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	01db      	lsls	r3, r3, #7
 800538a:	4413      	add	r3, r2
 800538c:	3384      	adds	r3, #132	@ 0x84
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	6812      	ldr	r2, [r2, #0]
 8005394:	4611      	mov	r1, r2
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	01d2      	lsls	r2, r2, #7
 800539a:	440a      	add	r2, r1
 800539c:	3284      	adds	r2, #132	@ 0x84
 800539e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80053a2:	6093      	str	r3, [r2, #8]
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	689a      	ldr	r2, [r3, #8]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053b2:	4413      	add	r3, r2
 80053b4:	1c5a      	adds	r2, r3, #1
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4619      	mov	r1, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	01db      	lsls	r3, r3, #7
 80053c0:	440b      	add	r3, r1
 80053c2:	3384      	adds	r3, #132	@ 0x84
 80053c4:	4619      	mov	r1, r3
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	608b      	str	r3, [r1, #8]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	461a      	mov	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	01db      	lsls	r3, r3, #7
 80053d6:	4413      	add	r3, r2
 80053d8:	3384      	adds	r3, #132	@ 0x84
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	6812      	ldr	r2, [r2, #0]
 80053e0:	4611      	mov	r1, r2
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	01d2      	lsls	r2, r2, #7
 80053e6:	440a      	add	r2, r1
 80053e8:	3284      	adds	r2, #132	@ 0x84
 80053ea:	f023 0307 	bic.w	r3, r3, #7
 80053ee:	6113      	str	r3, [r2, #16]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	461a      	mov	r2, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	01db      	lsls	r3, r3, #7
 80053fa:	4413      	add	r3, r2
 80053fc:	3384      	adds	r3, #132	@ 0x84
 80053fe:	461a      	mov	r2, r3
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	6113      	str	r3, [r2, #16]
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800540c:	021b      	lsls	r3, r3, #8
 800540e:	61fb      	str	r3, [r7, #28]
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005416:	041b      	lsls	r3, r3, #16
 8005418:	61bb      	str	r3, [r7, #24]
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	061b      	lsls	r3, r3, #24
 8005420:	617b      	str	r3, [r7, #20]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	461a      	mov	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	01db      	lsls	r3, r3, #7
 800542c:	4413      	add	r3, r2
 800542e:	3384      	adds	r3, #132	@ 0x84
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	461a      	mov	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	01db      	lsls	r3, r3, #7
 800543c:	4413      	add	r3, r2
 800543e:	3384      	adds	r3, #132	@ 0x84
 8005440:	461a      	mov	r2, r3
 8005442:	2300      	movs	r3, #0
 8005444:	6193      	str	r3, [r2, #24]
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800544c:	461a      	mov	r2, r3
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	431a      	orrs	r2, r3
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	431a      	orrs	r2, r3
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4619      	mov	r1, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	01db      	lsls	r3, r3, #7
 8005460:	440b      	add	r3, r1
 8005462:	3384      	adds	r3, #132	@ 0x84
 8005464:	4619      	mov	r1, r3
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	4313      	orrs	r3, r2
 800546a:	618b      	str	r3, [r1, #24]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	461a      	mov	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	01db      	lsls	r3, r3, #7
 8005476:	4413      	add	r3, r2
 8005478:	3384      	adds	r3, #132	@ 0x84
 800547a:	695b      	ldr	r3, [r3, #20]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	6812      	ldr	r2, [r2, #0]
 8005480:	4611      	mov	r1, r2
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	01d2      	lsls	r2, r2, #7
 8005486:	440a      	add	r2, r1
 8005488:	3284      	adds	r2, #132	@ 0x84
 800548a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800548e:	6153      	str	r3, [r2, #20]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	461a      	mov	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	01db      	lsls	r3, r3, #7
 800549a:	4413      	add	r3, r2
 800549c:	3384      	adds	r3, #132	@ 0x84
 800549e:	461a      	mov	r2, r3
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	695b      	ldr	r3, [r3, #20]
 80054a4:	6153      	str	r3, [r2, #20]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	461a      	mov	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	01db      	lsls	r3, r3, #7
 80054b0:	4413      	add	r3, r2
 80054b2:	3384      	adds	r3, #132	@ 0x84
 80054b4:	69db      	ldr	r3, [r3, #28]
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	6812      	ldr	r2, [r2, #0]
 80054ba:	4611      	mov	r1, r2
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	01d2      	lsls	r2, r2, #7
 80054c0:	440a      	add	r2, r1
 80054c2:	3284      	adds	r2, #132	@ 0x84
 80054c4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80054c8:	f023 0307 	bic.w	r3, r3, #7
 80054cc:	61d3      	str	r3, [r2, #28]
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	69da      	ldr	r2, [r3, #28]
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	6a1b      	ldr	r3, [r3, #32]
 80054d6:	68f9      	ldr	r1, [r7, #12]
 80054d8:	6809      	ldr	r1, [r1, #0]
 80054da:	4608      	mov	r0, r1
 80054dc:	6879      	ldr	r1, [r7, #4]
 80054de:	01c9      	lsls	r1, r1, #7
 80054e0:	4401      	add	r1, r0
 80054e2:	3184      	adds	r1, #132	@ 0x84
 80054e4:	4313      	orrs	r3, r2
 80054e6:	61cb      	str	r3, [r1, #28]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	461a      	mov	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	01db      	lsls	r3, r3, #7
 80054f2:	4413      	add	r3, r2
 80054f4:	3384      	adds	r3, #132	@ 0x84
 80054f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	461a      	mov	r2, r3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	01db      	lsls	r3, r3, #7
 8005502:	4413      	add	r3, r2
 8005504:	3384      	adds	r3, #132	@ 0x84
 8005506:	461a      	mov	r2, r3
 8005508:	2300      	movs	r3, #0
 800550a:	6293      	str	r3, [r2, #40]	@ 0x28
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	461a      	mov	r2, r3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	01db      	lsls	r3, r3, #7
 8005516:	4413      	add	r3, r2
 8005518:	3384      	adds	r3, #132	@ 0x84
 800551a:	461a      	mov	r2, r3
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005520:	6293      	str	r3, [r2, #40]	@ 0x28
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d102      	bne.n	8005530 <LTDC_SetConfig+0x234>
 800552a:	2304      	movs	r3, #4
 800552c:	61fb      	str	r3, [r7, #28]
 800552e:	e01b      	b.n	8005568 <LTDC_SetConfig+0x26c>
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d102      	bne.n	800553e <LTDC_SetConfig+0x242>
 8005538:	2303      	movs	r3, #3
 800553a:	61fb      	str	r3, [r7, #28]
 800553c:	e014      	b.n	8005568 <LTDC_SetConfig+0x26c>
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	2b04      	cmp	r3, #4
 8005544:	d00b      	beq.n	800555e <LTDC_SetConfig+0x262>
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	2b02      	cmp	r3, #2
 800554c:	d007      	beq.n	800555e <LTDC_SetConfig+0x262>
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	2b03      	cmp	r3, #3
 8005554:	d003      	beq.n	800555e <LTDC_SetConfig+0x262>
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	2b07      	cmp	r3, #7
 800555c:	d102      	bne.n	8005564 <LTDC_SetConfig+0x268>
 800555e:	2302      	movs	r3, #2
 8005560:	61fb      	str	r3, [r7, #28]
 8005562:	e001      	b.n	8005568 <LTDC_SetConfig+0x26c>
 8005564:	2301      	movs	r3, #1
 8005566:	61fb      	str	r3, [r7, #28]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	461a      	mov	r2, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	01db      	lsls	r3, r3, #7
 8005572:	4413      	add	r3, r2
 8005574:	3384      	adds	r3, #132	@ 0x84
 8005576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	6812      	ldr	r2, [r2, #0]
 800557c:	4611      	mov	r1, r2
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	01d2      	lsls	r2, r2, #7
 8005582:	440a      	add	r2, r1
 8005584:	3284      	adds	r2, #132	@ 0x84
 8005586:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800558a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005590:	69fa      	ldr	r2, [r7, #28]
 8005592:	fb02 f303 	mul.w	r3, r2, r3
 8005596:	041a      	lsls	r2, r3, #16
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	6859      	ldr	r1, [r3, #4]
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	1acb      	subs	r3, r1, r3
 80055a2:	69f9      	ldr	r1, [r7, #28]
 80055a4:	fb01 f303 	mul.w	r3, r1, r3
 80055a8:	3303      	adds	r3, #3
 80055aa:	68f9      	ldr	r1, [r7, #12]
 80055ac:	6809      	ldr	r1, [r1, #0]
 80055ae:	4608      	mov	r0, r1
 80055b0:	6879      	ldr	r1, [r7, #4]
 80055b2:	01c9      	lsls	r1, r1, #7
 80055b4:	4401      	add	r1, r0
 80055b6:	3184      	adds	r1, #132	@ 0x84
 80055b8:	4313      	orrs	r3, r2
 80055ba:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	461a      	mov	r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	01db      	lsls	r3, r3, #7
 80055c6:	4413      	add	r3, r2
 80055c8:	3384      	adds	r3, #132	@ 0x84
 80055ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	6812      	ldr	r2, [r2, #0]
 80055d0:	4611      	mov	r1, r2
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	01d2      	lsls	r2, r2, #7
 80055d6:	440a      	add	r2, r1
 80055d8:	3284      	adds	r2, #132	@ 0x84
 80055da:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80055de:	f023 0307 	bic.w	r3, r3, #7
 80055e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	461a      	mov	r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	01db      	lsls	r3, r3, #7
 80055ee:	4413      	add	r3, r2
 80055f0:	3384      	adds	r3, #132	@ 0x84
 80055f2:	461a      	mov	r2, r3
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	461a      	mov	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	01db      	lsls	r3, r3, #7
 8005604:	4413      	add	r3, r2
 8005606:	3384      	adds	r3, #132	@ 0x84
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	6812      	ldr	r2, [r2, #0]
 800560e:	4611      	mov	r1, r2
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	01d2      	lsls	r2, r2, #7
 8005614:	440a      	add	r2, r1
 8005616:	3284      	adds	r2, #132	@ 0x84
 8005618:	f043 0301 	orr.w	r3, r3, #1
 800561c:	6013      	str	r3, [r2, #0]
 800561e:	bf00      	nop
 8005620:	3724      	adds	r7, #36	@ 0x24
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
	...

0800562c <HAL_RCC_OscConfig>:
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d101      	bne.n	800563e <HAL_RCC_OscConfig+0x12>
 800563a:	2301      	movs	r3, #1
 800563c:	e267      	b.n	8005b0e <HAL_RCC_OscConfig+0x4e2>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b00      	cmp	r3, #0
 8005648:	d075      	beq.n	8005736 <HAL_RCC_OscConfig+0x10a>
 800564a:	4b88      	ldr	r3, [pc, #544]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f003 030c 	and.w	r3, r3, #12
 8005652:	2b04      	cmp	r3, #4
 8005654:	d00c      	beq.n	8005670 <HAL_RCC_OscConfig+0x44>
 8005656:	4b85      	ldr	r3, [pc, #532]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	f003 030c 	and.w	r3, r3, #12
 800565e:	2b08      	cmp	r3, #8
 8005660:	d112      	bne.n	8005688 <HAL_RCC_OscConfig+0x5c>
 8005662:	4b82      	ldr	r3, [pc, #520]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800566a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800566e:	d10b      	bne.n	8005688 <HAL_RCC_OscConfig+0x5c>
 8005670:	4b7e      	ldr	r3, [pc, #504]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d05b      	beq.n	8005734 <HAL_RCC_OscConfig+0x108>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d157      	bne.n	8005734 <HAL_RCC_OscConfig+0x108>
 8005684:	2301      	movs	r3, #1
 8005686:	e242      	b.n	8005b0e <HAL_RCC_OscConfig+0x4e2>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005690:	d106      	bne.n	80056a0 <HAL_RCC_OscConfig+0x74>
 8005692:	4b76      	ldr	r3, [pc, #472]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a75      	ldr	r2, [pc, #468]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 8005698:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800569c:	6013      	str	r3, [r2, #0]
 800569e:	e01d      	b.n	80056dc <HAL_RCC_OscConfig+0xb0>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80056a8:	d10c      	bne.n	80056c4 <HAL_RCC_OscConfig+0x98>
 80056aa:	4b70      	ldr	r3, [pc, #448]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a6f      	ldr	r2, [pc, #444]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 80056b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80056b4:	6013      	str	r3, [r2, #0]
 80056b6:	4b6d      	ldr	r3, [pc, #436]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a6c      	ldr	r2, [pc, #432]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 80056bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056c0:	6013      	str	r3, [r2, #0]
 80056c2:	e00b      	b.n	80056dc <HAL_RCC_OscConfig+0xb0>
 80056c4:	4b69      	ldr	r3, [pc, #420]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a68      	ldr	r2, [pc, #416]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 80056ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056ce:	6013      	str	r3, [r2, #0]
 80056d0:	4b66      	ldr	r3, [pc, #408]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a65      	ldr	r2, [pc, #404]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 80056d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80056da:	6013      	str	r3, [r2, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d013      	beq.n	800570c <HAL_RCC_OscConfig+0xe0>
 80056e4:	f7fe f85c 	bl	80037a0 <HAL_GetTick>
 80056e8:	6138      	str	r0, [r7, #16]
 80056ea:	e008      	b.n	80056fe <HAL_RCC_OscConfig+0xd2>
 80056ec:	f7fe f858 	bl	80037a0 <HAL_GetTick>
 80056f0:	4602      	mov	r2, r0
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	2b64      	cmp	r3, #100	@ 0x64
 80056f8:	d901      	bls.n	80056fe <HAL_RCC_OscConfig+0xd2>
 80056fa:	2303      	movs	r3, #3
 80056fc:	e207      	b.n	8005b0e <HAL_RCC_OscConfig+0x4e2>
 80056fe:	4b5b      	ldr	r3, [pc, #364]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d0f0      	beq.n	80056ec <HAL_RCC_OscConfig+0xc0>
 800570a:	e014      	b.n	8005736 <HAL_RCC_OscConfig+0x10a>
 800570c:	f7fe f848 	bl	80037a0 <HAL_GetTick>
 8005710:	6138      	str	r0, [r7, #16]
 8005712:	e008      	b.n	8005726 <HAL_RCC_OscConfig+0xfa>
 8005714:	f7fe f844 	bl	80037a0 <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	2b64      	cmp	r3, #100	@ 0x64
 8005720:	d901      	bls.n	8005726 <HAL_RCC_OscConfig+0xfa>
 8005722:	2303      	movs	r3, #3
 8005724:	e1f3      	b.n	8005b0e <HAL_RCC_OscConfig+0x4e2>
 8005726:	4b51      	ldr	r3, [pc, #324]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1f0      	bne.n	8005714 <HAL_RCC_OscConfig+0xe8>
 8005732:	e000      	b.n	8005736 <HAL_RCC_OscConfig+0x10a>
 8005734:	bf00      	nop
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0302 	and.w	r3, r3, #2
 800573e:	2b00      	cmp	r3, #0
 8005740:	d063      	beq.n	800580a <HAL_RCC_OscConfig+0x1de>
 8005742:	4b4a      	ldr	r3, [pc, #296]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f003 030c 	and.w	r3, r3, #12
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00b      	beq.n	8005766 <HAL_RCC_OscConfig+0x13a>
 800574e:	4b47      	ldr	r3, [pc, #284]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f003 030c 	and.w	r3, r3, #12
 8005756:	2b08      	cmp	r3, #8
 8005758:	d11c      	bne.n	8005794 <HAL_RCC_OscConfig+0x168>
 800575a:	4b44      	ldr	r3, [pc, #272]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d116      	bne.n	8005794 <HAL_RCC_OscConfig+0x168>
 8005766:	4b41      	ldr	r3, [pc, #260]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d005      	beq.n	800577e <HAL_RCC_OscConfig+0x152>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d001      	beq.n	800577e <HAL_RCC_OscConfig+0x152>
 800577a:	2301      	movs	r3, #1
 800577c:	e1c7      	b.n	8005b0e <HAL_RCC_OscConfig+0x4e2>
 800577e:	4b3b      	ldr	r3, [pc, #236]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	00db      	lsls	r3, r3, #3
 800578c:	4937      	ldr	r1, [pc, #220]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 800578e:	4313      	orrs	r3, r2
 8005790:	600b      	str	r3, [r1, #0]
 8005792:	e03a      	b.n	800580a <HAL_RCC_OscConfig+0x1de>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d020      	beq.n	80057de <HAL_RCC_OscConfig+0x1b2>
 800579c:	4b34      	ldr	r3, [pc, #208]	@ (8005870 <HAL_RCC_OscConfig+0x244>)
 800579e:	2201      	movs	r2, #1
 80057a0:	601a      	str	r2, [r3, #0]
 80057a2:	f7fd fffd 	bl	80037a0 <HAL_GetTick>
 80057a6:	6138      	str	r0, [r7, #16]
 80057a8:	e008      	b.n	80057bc <HAL_RCC_OscConfig+0x190>
 80057aa:	f7fd fff9 	bl	80037a0 <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d901      	bls.n	80057bc <HAL_RCC_OscConfig+0x190>
 80057b8:	2303      	movs	r3, #3
 80057ba:	e1a8      	b.n	8005b0e <HAL_RCC_OscConfig+0x4e2>
 80057bc:	4b2b      	ldr	r3, [pc, #172]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0302 	and.w	r3, r3, #2
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d0f0      	beq.n	80057aa <HAL_RCC_OscConfig+0x17e>
 80057c8:	4b28      	ldr	r3, [pc, #160]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	00db      	lsls	r3, r3, #3
 80057d6:	4925      	ldr	r1, [pc, #148]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 80057d8:	4313      	orrs	r3, r2
 80057da:	600b      	str	r3, [r1, #0]
 80057dc:	e015      	b.n	800580a <HAL_RCC_OscConfig+0x1de>
 80057de:	4b24      	ldr	r3, [pc, #144]	@ (8005870 <HAL_RCC_OscConfig+0x244>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	601a      	str	r2, [r3, #0]
 80057e4:	f7fd ffdc 	bl	80037a0 <HAL_GetTick>
 80057e8:	6138      	str	r0, [r7, #16]
 80057ea:	e008      	b.n	80057fe <HAL_RCC_OscConfig+0x1d2>
 80057ec:	f7fd ffd8 	bl	80037a0 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d901      	bls.n	80057fe <HAL_RCC_OscConfig+0x1d2>
 80057fa:	2303      	movs	r3, #3
 80057fc:	e187      	b.n	8005b0e <HAL_RCC_OscConfig+0x4e2>
 80057fe:	4b1b      	ldr	r3, [pc, #108]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0302 	and.w	r3, r3, #2
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1f0      	bne.n	80057ec <HAL_RCC_OscConfig+0x1c0>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 0308 	and.w	r3, r3, #8
 8005812:	2b00      	cmp	r3, #0
 8005814:	d036      	beq.n	8005884 <HAL_RCC_OscConfig+0x258>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d016      	beq.n	800584c <HAL_RCC_OscConfig+0x220>
 800581e:	4b15      	ldr	r3, [pc, #84]	@ (8005874 <HAL_RCC_OscConfig+0x248>)
 8005820:	2201      	movs	r2, #1
 8005822:	601a      	str	r2, [r3, #0]
 8005824:	f7fd ffbc 	bl	80037a0 <HAL_GetTick>
 8005828:	6138      	str	r0, [r7, #16]
 800582a:	e008      	b.n	800583e <HAL_RCC_OscConfig+0x212>
 800582c:	f7fd ffb8 	bl	80037a0 <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	2b02      	cmp	r3, #2
 8005838:	d901      	bls.n	800583e <HAL_RCC_OscConfig+0x212>
 800583a:	2303      	movs	r3, #3
 800583c:	e167      	b.n	8005b0e <HAL_RCC_OscConfig+0x4e2>
 800583e:	4b0b      	ldr	r3, [pc, #44]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 8005840:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005842:	f003 0302 	and.w	r3, r3, #2
 8005846:	2b00      	cmp	r3, #0
 8005848:	d0f0      	beq.n	800582c <HAL_RCC_OscConfig+0x200>
 800584a:	e01b      	b.n	8005884 <HAL_RCC_OscConfig+0x258>
 800584c:	4b09      	ldr	r3, [pc, #36]	@ (8005874 <HAL_RCC_OscConfig+0x248>)
 800584e:	2200      	movs	r2, #0
 8005850:	601a      	str	r2, [r3, #0]
 8005852:	f7fd ffa5 	bl	80037a0 <HAL_GetTick>
 8005856:	6138      	str	r0, [r7, #16]
 8005858:	e00e      	b.n	8005878 <HAL_RCC_OscConfig+0x24c>
 800585a:	f7fd ffa1 	bl	80037a0 <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	2b02      	cmp	r3, #2
 8005866:	d907      	bls.n	8005878 <HAL_RCC_OscConfig+0x24c>
 8005868:	2303      	movs	r3, #3
 800586a:	e150      	b.n	8005b0e <HAL_RCC_OscConfig+0x4e2>
 800586c:	40023800 	.word	0x40023800
 8005870:	42470000 	.word	0x42470000
 8005874:	42470e80 	.word	0x42470e80
 8005878:	4b88      	ldr	r3, [pc, #544]	@ (8005a9c <HAL_RCC_OscConfig+0x470>)
 800587a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800587c:	f003 0302 	and.w	r3, r3, #2
 8005880:	2b00      	cmp	r3, #0
 8005882:	d1ea      	bne.n	800585a <HAL_RCC_OscConfig+0x22e>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0304 	and.w	r3, r3, #4
 800588c:	2b00      	cmp	r3, #0
 800588e:	f000 8097 	beq.w	80059c0 <HAL_RCC_OscConfig+0x394>
 8005892:	2300      	movs	r3, #0
 8005894:	75fb      	strb	r3, [r7, #23]
 8005896:	4b81      	ldr	r3, [pc, #516]	@ (8005a9c <HAL_RCC_OscConfig+0x470>)
 8005898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800589a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d10f      	bne.n	80058c2 <HAL_RCC_OscConfig+0x296>
 80058a2:	2300      	movs	r3, #0
 80058a4:	60bb      	str	r3, [r7, #8]
 80058a6:	4b7d      	ldr	r3, [pc, #500]	@ (8005a9c <HAL_RCC_OscConfig+0x470>)
 80058a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058aa:	4a7c      	ldr	r2, [pc, #496]	@ (8005a9c <HAL_RCC_OscConfig+0x470>)
 80058ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80058b2:	4b7a      	ldr	r3, [pc, #488]	@ (8005a9c <HAL_RCC_OscConfig+0x470>)
 80058b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058ba:	60bb      	str	r3, [r7, #8]
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	2301      	movs	r3, #1
 80058c0:	75fb      	strb	r3, [r7, #23]
 80058c2:	4b77      	ldr	r3, [pc, #476]	@ (8005aa0 <HAL_RCC_OscConfig+0x474>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d118      	bne.n	8005900 <HAL_RCC_OscConfig+0x2d4>
 80058ce:	4b74      	ldr	r3, [pc, #464]	@ (8005aa0 <HAL_RCC_OscConfig+0x474>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a73      	ldr	r2, [pc, #460]	@ (8005aa0 <HAL_RCC_OscConfig+0x474>)
 80058d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058d8:	6013      	str	r3, [r2, #0]
 80058da:	f7fd ff61 	bl	80037a0 <HAL_GetTick>
 80058de:	6138      	str	r0, [r7, #16]
 80058e0:	e008      	b.n	80058f4 <HAL_RCC_OscConfig+0x2c8>
 80058e2:	f7fd ff5d 	bl	80037a0 <HAL_GetTick>
 80058e6:	4602      	mov	r2, r0
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d901      	bls.n	80058f4 <HAL_RCC_OscConfig+0x2c8>
 80058f0:	2303      	movs	r3, #3
 80058f2:	e10c      	b.n	8005b0e <HAL_RCC_OscConfig+0x4e2>
 80058f4:	4b6a      	ldr	r3, [pc, #424]	@ (8005aa0 <HAL_RCC_OscConfig+0x474>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d0f0      	beq.n	80058e2 <HAL_RCC_OscConfig+0x2b6>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d106      	bne.n	8005916 <HAL_RCC_OscConfig+0x2ea>
 8005908:	4b64      	ldr	r3, [pc, #400]	@ (8005a9c <HAL_RCC_OscConfig+0x470>)
 800590a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800590c:	4a63      	ldr	r2, [pc, #396]	@ (8005a9c <HAL_RCC_OscConfig+0x470>)
 800590e:	f043 0301 	orr.w	r3, r3, #1
 8005912:	6713      	str	r3, [r2, #112]	@ 0x70
 8005914:	e01c      	b.n	8005950 <HAL_RCC_OscConfig+0x324>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	2b05      	cmp	r3, #5
 800591c:	d10c      	bne.n	8005938 <HAL_RCC_OscConfig+0x30c>
 800591e:	4b5f      	ldr	r3, [pc, #380]	@ (8005a9c <HAL_RCC_OscConfig+0x470>)
 8005920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005922:	4a5e      	ldr	r2, [pc, #376]	@ (8005a9c <HAL_RCC_OscConfig+0x470>)
 8005924:	f043 0304 	orr.w	r3, r3, #4
 8005928:	6713      	str	r3, [r2, #112]	@ 0x70
 800592a:	4b5c      	ldr	r3, [pc, #368]	@ (8005a9c <HAL_RCC_OscConfig+0x470>)
 800592c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800592e:	4a5b      	ldr	r2, [pc, #364]	@ (8005a9c <HAL_RCC_OscConfig+0x470>)
 8005930:	f043 0301 	orr.w	r3, r3, #1
 8005934:	6713      	str	r3, [r2, #112]	@ 0x70
 8005936:	e00b      	b.n	8005950 <HAL_RCC_OscConfig+0x324>
 8005938:	4b58      	ldr	r3, [pc, #352]	@ (8005a9c <HAL_RCC_OscConfig+0x470>)
 800593a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800593c:	4a57      	ldr	r2, [pc, #348]	@ (8005a9c <HAL_RCC_OscConfig+0x470>)
 800593e:	f023 0301 	bic.w	r3, r3, #1
 8005942:	6713      	str	r3, [r2, #112]	@ 0x70
 8005944:	4b55      	ldr	r3, [pc, #340]	@ (8005a9c <HAL_RCC_OscConfig+0x470>)
 8005946:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005948:	4a54      	ldr	r2, [pc, #336]	@ (8005a9c <HAL_RCC_OscConfig+0x470>)
 800594a:	f023 0304 	bic.w	r3, r3, #4
 800594e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d015      	beq.n	8005984 <HAL_RCC_OscConfig+0x358>
 8005958:	f7fd ff22 	bl	80037a0 <HAL_GetTick>
 800595c:	6138      	str	r0, [r7, #16]
 800595e:	e00a      	b.n	8005976 <HAL_RCC_OscConfig+0x34a>
 8005960:	f7fd ff1e 	bl	80037a0 <HAL_GetTick>
 8005964:	4602      	mov	r2, r0
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800596e:	4293      	cmp	r3, r2
 8005970:	d901      	bls.n	8005976 <HAL_RCC_OscConfig+0x34a>
 8005972:	2303      	movs	r3, #3
 8005974:	e0cb      	b.n	8005b0e <HAL_RCC_OscConfig+0x4e2>
 8005976:	4b49      	ldr	r3, [pc, #292]	@ (8005a9c <HAL_RCC_OscConfig+0x470>)
 8005978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800597a:	f003 0302 	and.w	r3, r3, #2
 800597e:	2b00      	cmp	r3, #0
 8005980:	d0ee      	beq.n	8005960 <HAL_RCC_OscConfig+0x334>
 8005982:	e014      	b.n	80059ae <HAL_RCC_OscConfig+0x382>
 8005984:	f7fd ff0c 	bl	80037a0 <HAL_GetTick>
 8005988:	6138      	str	r0, [r7, #16]
 800598a:	e00a      	b.n	80059a2 <HAL_RCC_OscConfig+0x376>
 800598c:	f7fd ff08 	bl	80037a0 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	f241 3288 	movw	r2, #5000	@ 0x1388
 800599a:	4293      	cmp	r3, r2
 800599c:	d901      	bls.n	80059a2 <HAL_RCC_OscConfig+0x376>
 800599e:	2303      	movs	r3, #3
 80059a0:	e0b5      	b.n	8005b0e <HAL_RCC_OscConfig+0x4e2>
 80059a2:	4b3e      	ldr	r3, [pc, #248]	@ (8005a9c <HAL_RCC_OscConfig+0x470>)
 80059a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059a6:	f003 0302 	and.w	r3, r3, #2
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d1ee      	bne.n	800598c <HAL_RCC_OscConfig+0x360>
 80059ae:	7dfb      	ldrb	r3, [r7, #23]
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d105      	bne.n	80059c0 <HAL_RCC_OscConfig+0x394>
 80059b4:	4b39      	ldr	r3, [pc, #228]	@ (8005a9c <HAL_RCC_OscConfig+0x470>)
 80059b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b8:	4a38      	ldr	r2, [pc, #224]	@ (8005a9c <HAL_RCC_OscConfig+0x470>)
 80059ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059be:	6413      	str	r3, [r2, #64]	@ 0x40
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f000 80a1 	beq.w	8005b0c <HAL_RCC_OscConfig+0x4e0>
 80059ca:	4b34      	ldr	r3, [pc, #208]	@ (8005a9c <HAL_RCC_OscConfig+0x470>)
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f003 030c 	and.w	r3, r3, #12
 80059d2:	2b08      	cmp	r3, #8
 80059d4:	d05c      	beq.n	8005a90 <HAL_RCC_OscConfig+0x464>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d141      	bne.n	8005a62 <HAL_RCC_OscConfig+0x436>
 80059de:	4b31      	ldr	r3, [pc, #196]	@ (8005aa4 <HAL_RCC_OscConfig+0x478>)
 80059e0:	2200      	movs	r2, #0
 80059e2:	601a      	str	r2, [r3, #0]
 80059e4:	f7fd fedc 	bl	80037a0 <HAL_GetTick>
 80059e8:	6138      	str	r0, [r7, #16]
 80059ea:	e008      	b.n	80059fe <HAL_RCC_OscConfig+0x3d2>
 80059ec:	f7fd fed8 	bl	80037a0 <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d901      	bls.n	80059fe <HAL_RCC_OscConfig+0x3d2>
 80059fa:	2303      	movs	r3, #3
 80059fc:	e087      	b.n	8005b0e <HAL_RCC_OscConfig+0x4e2>
 80059fe:	4b27      	ldr	r3, [pc, #156]	@ (8005a9c <HAL_RCC_OscConfig+0x470>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1f0      	bne.n	80059ec <HAL_RCC_OscConfig+0x3c0>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	69da      	ldr	r2, [r3, #28]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	431a      	orrs	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a18:	019b      	lsls	r3, r3, #6
 8005a1a:	431a      	orrs	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a20:	085b      	lsrs	r3, r3, #1
 8005a22:	3b01      	subs	r3, #1
 8005a24:	041b      	lsls	r3, r3, #16
 8005a26:	431a      	orrs	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a2c:	061b      	lsls	r3, r3, #24
 8005a2e:	491b      	ldr	r1, [pc, #108]	@ (8005a9c <HAL_RCC_OscConfig+0x470>)
 8005a30:	4313      	orrs	r3, r2
 8005a32:	604b      	str	r3, [r1, #4]
 8005a34:	4b1b      	ldr	r3, [pc, #108]	@ (8005aa4 <HAL_RCC_OscConfig+0x478>)
 8005a36:	2201      	movs	r2, #1
 8005a38:	601a      	str	r2, [r3, #0]
 8005a3a:	f7fd feb1 	bl	80037a0 <HAL_GetTick>
 8005a3e:	6138      	str	r0, [r7, #16]
 8005a40:	e008      	b.n	8005a54 <HAL_RCC_OscConfig+0x428>
 8005a42:	f7fd fead 	bl	80037a0 <HAL_GetTick>
 8005a46:	4602      	mov	r2, r0
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d901      	bls.n	8005a54 <HAL_RCC_OscConfig+0x428>
 8005a50:	2303      	movs	r3, #3
 8005a52:	e05c      	b.n	8005b0e <HAL_RCC_OscConfig+0x4e2>
 8005a54:	4b11      	ldr	r3, [pc, #68]	@ (8005a9c <HAL_RCC_OscConfig+0x470>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d0f0      	beq.n	8005a42 <HAL_RCC_OscConfig+0x416>
 8005a60:	e054      	b.n	8005b0c <HAL_RCC_OscConfig+0x4e0>
 8005a62:	4b10      	ldr	r3, [pc, #64]	@ (8005aa4 <HAL_RCC_OscConfig+0x478>)
 8005a64:	2200      	movs	r2, #0
 8005a66:	601a      	str	r2, [r3, #0]
 8005a68:	f7fd fe9a 	bl	80037a0 <HAL_GetTick>
 8005a6c:	6138      	str	r0, [r7, #16]
 8005a6e:	e008      	b.n	8005a82 <HAL_RCC_OscConfig+0x456>
 8005a70:	f7fd fe96 	bl	80037a0 <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d901      	bls.n	8005a82 <HAL_RCC_OscConfig+0x456>
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e045      	b.n	8005b0e <HAL_RCC_OscConfig+0x4e2>
 8005a82:	4b06      	ldr	r3, [pc, #24]	@ (8005a9c <HAL_RCC_OscConfig+0x470>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1f0      	bne.n	8005a70 <HAL_RCC_OscConfig+0x444>
 8005a8e:	e03d      	b.n	8005b0c <HAL_RCC_OscConfig+0x4e0>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	699b      	ldr	r3, [r3, #24]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d107      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x47c>
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e038      	b.n	8005b0e <HAL_RCC_OscConfig+0x4e2>
 8005a9c:	40023800 	.word	0x40023800
 8005aa0:	40007000 	.word	0x40007000
 8005aa4:	42470060 	.word	0x42470060
 8005aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8005b18 <HAL_RCC_OscConfig+0x4ec>)
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	60fb      	str	r3, [r7, #12]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d028      	beq.n	8005b08 <HAL_RCC_OscConfig+0x4dc>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	69db      	ldr	r3, [r3, #28]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d121      	bne.n	8005b08 <HAL_RCC_OscConfig+0x4dc>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a1b      	ldr	r3, [r3, #32]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d11a      	bne.n	8005b08 <HAL_RCC_OscConfig+0x4dc>
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005ad8:	4013      	ands	r3, r2
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005ade:	0192      	lsls	r2, r2, #6
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d111      	bne.n	8005b08 <HAL_RCC_OscConfig+0x4dc>
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aee:	085b      	lsrs	r3, r3, #1
 8005af0:	3b01      	subs	r3, #1
 8005af2:	041b      	lsls	r3, r3, #16
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d107      	bne.n	8005b08 <HAL_RCC_OscConfig+0x4dc>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b02:	061b      	lsls	r3, r3, #24
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d001      	beq.n	8005b0c <HAL_RCC_OscConfig+0x4e0>
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e000      	b.n	8005b0e <HAL_RCC_OscConfig+0x4e2>
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3718      	adds	r7, #24
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	40023800 	.word	0x40023800

08005b1c <HAL_RCC_ClockConfig>:
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d101      	bne.n	8005b30 <HAL_RCC_ClockConfig+0x14>
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e0cc      	b.n	8005cca <HAL_RCC_ClockConfig+0x1ae>
 8005b30:	4b68      	ldr	r3, [pc, #416]	@ (8005cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 030f 	and.w	r3, r3, #15
 8005b38:	683a      	ldr	r2, [r7, #0]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d90c      	bls.n	8005b58 <HAL_RCC_ClockConfig+0x3c>
 8005b3e:	4b65      	ldr	r3, [pc, #404]	@ (8005cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8005b40:	683a      	ldr	r2, [r7, #0]
 8005b42:	b2d2      	uxtb	r2, r2
 8005b44:	701a      	strb	r2, [r3, #0]
 8005b46:	4b63      	ldr	r3, [pc, #396]	@ (8005cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 030f 	and.w	r3, r3, #15
 8005b4e:	683a      	ldr	r2, [r7, #0]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d001      	beq.n	8005b58 <HAL_RCC_ClockConfig+0x3c>
 8005b54:	2301      	movs	r3, #1
 8005b56:	e0b8      	b.n	8005cca <HAL_RCC_ClockConfig+0x1ae>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0302 	and.w	r3, r3, #2
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d020      	beq.n	8005ba6 <HAL_RCC_ClockConfig+0x8a>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 0304 	and.w	r3, r3, #4
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d005      	beq.n	8005b7c <HAL_RCC_ClockConfig+0x60>
 8005b70:	4b59      	ldr	r3, [pc, #356]	@ (8005cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	4a58      	ldr	r2, [pc, #352]	@ (8005cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b76:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005b7a:	6093      	str	r3, [r2, #8]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0308 	and.w	r3, r3, #8
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d005      	beq.n	8005b94 <HAL_RCC_ClockConfig+0x78>
 8005b88:	4b53      	ldr	r3, [pc, #332]	@ (8005cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	4a52      	ldr	r2, [pc, #328]	@ (8005cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b8e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005b92:	6093      	str	r3, [r2, #8]
 8005b94:	4b50      	ldr	r3, [pc, #320]	@ (8005cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	494d      	ldr	r1, [pc, #308]	@ (8005cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	608b      	str	r3, [r1, #8]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d044      	beq.n	8005c3c <HAL_RCC_ClockConfig+0x120>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d107      	bne.n	8005bca <HAL_RCC_ClockConfig+0xae>
 8005bba:	4b47      	ldr	r3, [pc, #284]	@ (8005cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d119      	bne.n	8005bfa <HAL_RCC_ClockConfig+0xde>
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e07f      	b.n	8005cca <HAL_RCC_ClockConfig+0x1ae>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d003      	beq.n	8005bda <HAL_RCC_ClockConfig+0xbe>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	2b03      	cmp	r3, #3
 8005bd8:	d107      	bne.n	8005bea <HAL_RCC_ClockConfig+0xce>
 8005bda:	4b3f      	ldr	r3, [pc, #252]	@ (8005cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d109      	bne.n	8005bfa <HAL_RCC_ClockConfig+0xde>
 8005be6:	2301      	movs	r3, #1
 8005be8:	e06f      	b.n	8005cca <HAL_RCC_ClockConfig+0x1ae>
 8005bea:	4b3b      	ldr	r3, [pc, #236]	@ (8005cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0302 	and.w	r3, r3, #2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d101      	bne.n	8005bfa <HAL_RCC_ClockConfig+0xde>
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e067      	b.n	8005cca <HAL_RCC_ClockConfig+0x1ae>
 8005bfa:	4b37      	ldr	r3, [pc, #220]	@ (8005cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f023 0203 	bic.w	r2, r3, #3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	4934      	ldr	r1, [pc, #208]	@ (8005cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	608b      	str	r3, [r1, #8]
 8005c0c:	f7fd fdc8 	bl	80037a0 <HAL_GetTick>
 8005c10:	60f8      	str	r0, [r7, #12]
 8005c12:	e00a      	b.n	8005c2a <HAL_RCC_ClockConfig+0x10e>
 8005c14:	f7fd fdc4 	bl	80037a0 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d901      	bls.n	8005c2a <HAL_RCC_ClockConfig+0x10e>
 8005c26:	2303      	movs	r3, #3
 8005c28:	e04f      	b.n	8005cca <HAL_RCC_ClockConfig+0x1ae>
 8005c2a:	4b2b      	ldr	r3, [pc, #172]	@ (8005cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f003 020c 	and.w	r2, r3, #12
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d1eb      	bne.n	8005c14 <HAL_RCC_ClockConfig+0xf8>
 8005c3c:	4b25      	ldr	r3, [pc, #148]	@ (8005cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 030f 	and.w	r3, r3, #15
 8005c44:	683a      	ldr	r2, [r7, #0]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d20c      	bcs.n	8005c64 <HAL_RCC_ClockConfig+0x148>
 8005c4a:	4b22      	ldr	r3, [pc, #136]	@ (8005cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c4c:	683a      	ldr	r2, [r7, #0]
 8005c4e:	b2d2      	uxtb	r2, r2
 8005c50:	701a      	strb	r2, [r3, #0]
 8005c52:	4b20      	ldr	r3, [pc, #128]	@ (8005cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 030f 	and.w	r3, r3, #15
 8005c5a:	683a      	ldr	r2, [r7, #0]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d001      	beq.n	8005c64 <HAL_RCC_ClockConfig+0x148>
 8005c60:	2301      	movs	r3, #1
 8005c62:	e032      	b.n	8005cca <HAL_RCC_ClockConfig+0x1ae>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0304 	and.w	r3, r3, #4
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d008      	beq.n	8005c82 <HAL_RCC_ClockConfig+0x166>
 8005c70:	4b19      	ldr	r3, [pc, #100]	@ (8005cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	4916      	ldr	r1, [pc, #88]	@ (8005cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	608b      	str	r3, [r1, #8]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 0308 	and.w	r3, r3, #8
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d009      	beq.n	8005ca2 <HAL_RCC_ClockConfig+0x186>
 8005c8e:	4b12      	ldr	r3, [pc, #72]	@ (8005cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	00db      	lsls	r3, r3, #3
 8005c9c:	490e      	ldr	r1, [pc, #56]	@ (8005cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	608b      	str	r3, [r1, #8]
 8005ca2:	f000 f821 	bl	8005ce8 <HAL_RCC_GetSysClockFreq>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8005cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	091b      	lsrs	r3, r3, #4
 8005cae:	f003 030f 	and.w	r3, r3, #15
 8005cb2:	490a      	ldr	r1, [pc, #40]	@ (8005cdc <HAL_RCC_ClockConfig+0x1c0>)
 8005cb4:	5ccb      	ldrb	r3, [r1, r3]
 8005cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8005cba:	4a09      	ldr	r2, [pc, #36]	@ (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005cbc:	6013      	str	r3, [r2, #0]
 8005cbe:	4b09      	ldr	r3, [pc, #36]	@ (8005ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f7fd fd28 	bl	8003718 <HAL_InitTick>
 8005cc8:	2300      	movs	r3, #0
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3710      	adds	r7, #16
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	40023c00 	.word	0x40023c00
 8005cd8:	40023800 	.word	0x40023800
 8005cdc:	08009afc 	.word	0x08009afc
 8005ce0:	20000018 	.word	0x20000018
 8005ce4:	2000001c 	.word	0x2000001c

08005ce8 <HAL_RCC_GetSysClockFreq>:
 8005ce8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cec:	b094      	sub	sp, #80	@ 0x50
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	643b      	str	r3, [r7, #64]	@ 0x40
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d00:	4b79      	ldr	r3, [pc, #484]	@ (8005ee8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f003 030c 	and.w	r3, r3, #12
 8005d08:	2b08      	cmp	r3, #8
 8005d0a:	d00d      	beq.n	8005d28 <HAL_RCC_GetSysClockFreq+0x40>
 8005d0c:	2b08      	cmp	r3, #8
 8005d0e:	f200 80e1 	bhi.w	8005ed4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d002      	beq.n	8005d1c <HAL_RCC_GetSysClockFreq+0x34>
 8005d16:	2b04      	cmp	r3, #4
 8005d18:	d003      	beq.n	8005d22 <HAL_RCC_GetSysClockFreq+0x3a>
 8005d1a:	e0db      	b.n	8005ed4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005d1c:	4b73      	ldr	r3, [pc, #460]	@ (8005eec <HAL_RCC_GetSysClockFreq+0x204>)
 8005d1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d20:	e0db      	b.n	8005eda <HAL_RCC_GetSysClockFreq+0x1f2>
 8005d22:	4b73      	ldr	r3, [pc, #460]	@ (8005ef0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005d24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d26:	e0d8      	b.n	8005eda <HAL_RCC_GetSysClockFreq+0x1f2>
 8005d28:	4b6f      	ldr	r3, [pc, #444]	@ (8005ee8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d30:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d32:	4b6d      	ldr	r3, [pc, #436]	@ (8005ee8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d063      	beq.n	8005e06 <HAL_RCC_GetSysClockFreq+0x11e>
 8005d3e:	4b6a      	ldr	r3, [pc, #424]	@ (8005ee8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	099b      	lsrs	r3, r3, #6
 8005d44:	2200      	movs	r2, #0
 8005d46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d48:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d50:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d52:	2300      	movs	r3, #0
 8005d54:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005d5a:	4622      	mov	r2, r4
 8005d5c:	462b      	mov	r3, r5
 8005d5e:	f04f 0000 	mov.w	r0, #0
 8005d62:	f04f 0100 	mov.w	r1, #0
 8005d66:	0159      	lsls	r1, r3, #5
 8005d68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d6c:	0150      	lsls	r0, r2, #5
 8005d6e:	4602      	mov	r2, r0
 8005d70:	460b      	mov	r3, r1
 8005d72:	4621      	mov	r1, r4
 8005d74:	1a51      	subs	r1, r2, r1
 8005d76:	6139      	str	r1, [r7, #16]
 8005d78:	4629      	mov	r1, r5
 8005d7a:	eb63 0301 	sbc.w	r3, r3, r1
 8005d7e:	617b      	str	r3, [r7, #20]
 8005d80:	f04f 0200 	mov.w	r2, #0
 8005d84:	f04f 0300 	mov.w	r3, #0
 8005d88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d8c:	4659      	mov	r1, fp
 8005d8e:	018b      	lsls	r3, r1, #6
 8005d90:	4651      	mov	r1, sl
 8005d92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005d96:	4651      	mov	r1, sl
 8005d98:	018a      	lsls	r2, r1, #6
 8005d9a:	4651      	mov	r1, sl
 8005d9c:	ebb2 0801 	subs.w	r8, r2, r1
 8005da0:	4659      	mov	r1, fp
 8005da2:	eb63 0901 	sbc.w	r9, r3, r1
 8005da6:	f04f 0200 	mov.w	r2, #0
 8005daa:	f04f 0300 	mov.w	r3, #0
 8005dae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005db2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005db6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005dba:	4690      	mov	r8, r2
 8005dbc:	4699      	mov	r9, r3
 8005dbe:	4623      	mov	r3, r4
 8005dc0:	eb18 0303 	adds.w	r3, r8, r3
 8005dc4:	60bb      	str	r3, [r7, #8]
 8005dc6:	462b      	mov	r3, r5
 8005dc8:	eb49 0303 	adc.w	r3, r9, r3
 8005dcc:	60fb      	str	r3, [r7, #12]
 8005dce:	f04f 0200 	mov.w	r2, #0
 8005dd2:	f04f 0300 	mov.w	r3, #0
 8005dd6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005dda:	4629      	mov	r1, r5
 8005ddc:	024b      	lsls	r3, r1, #9
 8005dde:	4621      	mov	r1, r4
 8005de0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005de4:	4621      	mov	r1, r4
 8005de6:	024a      	lsls	r2, r1, #9
 8005de8:	4610      	mov	r0, r2
 8005dea:	4619      	mov	r1, r3
 8005dec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dee:	2200      	movs	r2, #0
 8005df0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005df2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005df4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005df8:	f7fa fa52 	bl	80002a0 <__aeabi_uldivmod>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	460b      	mov	r3, r1
 8005e00:	4613      	mov	r3, r2
 8005e02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e04:	e058      	b.n	8005eb8 <HAL_RCC_GetSysClockFreq+0x1d0>
 8005e06:	4b38      	ldr	r3, [pc, #224]	@ (8005ee8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	099b      	lsrs	r3, r3, #6
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	4618      	mov	r0, r3
 8005e10:	4611      	mov	r1, r2
 8005e12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005e16:	623b      	str	r3, [r7, #32]
 8005e18:	2300      	movs	r3, #0
 8005e1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005e20:	4642      	mov	r2, r8
 8005e22:	464b      	mov	r3, r9
 8005e24:	f04f 0000 	mov.w	r0, #0
 8005e28:	f04f 0100 	mov.w	r1, #0
 8005e2c:	0159      	lsls	r1, r3, #5
 8005e2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e32:	0150      	lsls	r0, r2, #5
 8005e34:	4602      	mov	r2, r0
 8005e36:	460b      	mov	r3, r1
 8005e38:	4641      	mov	r1, r8
 8005e3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005e3e:	4649      	mov	r1, r9
 8005e40:	eb63 0b01 	sbc.w	fp, r3, r1
 8005e44:	f04f 0200 	mov.w	r2, #0
 8005e48:	f04f 0300 	mov.w	r3, #0
 8005e4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005e50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005e54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005e58:	ebb2 040a 	subs.w	r4, r2, sl
 8005e5c:	eb63 050b 	sbc.w	r5, r3, fp
 8005e60:	f04f 0200 	mov.w	r2, #0
 8005e64:	f04f 0300 	mov.w	r3, #0
 8005e68:	00eb      	lsls	r3, r5, #3
 8005e6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e6e:	00e2      	lsls	r2, r4, #3
 8005e70:	4614      	mov	r4, r2
 8005e72:	461d      	mov	r5, r3
 8005e74:	4643      	mov	r3, r8
 8005e76:	18e3      	adds	r3, r4, r3
 8005e78:	603b      	str	r3, [r7, #0]
 8005e7a:	464b      	mov	r3, r9
 8005e7c:	eb45 0303 	adc.w	r3, r5, r3
 8005e80:	607b      	str	r3, [r7, #4]
 8005e82:	f04f 0200 	mov.w	r2, #0
 8005e86:	f04f 0300 	mov.w	r3, #0
 8005e8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005e8e:	4629      	mov	r1, r5
 8005e90:	028b      	lsls	r3, r1, #10
 8005e92:	4621      	mov	r1, r4
 8005e94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005e98:	4621      	mov	r1, r4
 8005e9a:	028a      	lsls	r2, r1, #10
 8005e9c:	4610      	mov	r0, r2
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	61bb      	str	r3, [r7, #24]
 8005ea6:	61fa      	str	r2, [r7, #28]
 8005ea8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005eac:	f7fa f9f8 	bl	80002a0 <__aeabi_uldivmod>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8005ee8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	0c1b      	lsrs	r3, r3, #16
 8005ebe:	f003 0303 	and.w	r3, r3, #3
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	005b      	lsls	r3, r3, #1
 8005ec6:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ec8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005eca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ed0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ed2:	e002      	b.n	8005eda <HAL_RCC_GetSysClockFreq+0x1f2>
 8005ed4:	4b05      	ldr	r3, [pc, #20]	@ (8005eec <HAL_RCC_GetSysClockFreq+0x204>)
 8005ed6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ed8:	bf00      	nop
 8005eda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005edc:	4618      	mov	r0, r3
 8005ede:	3750      	adds	r7, #80	@ 0x50
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ee6:	bf00      	nop
 8005ee8:	40023800 	.word	0x40023800
 8005eec:	00f42400 	.word	0x00f42400
 8005ef0:	007a1200 	.word	0x007a1200

08005ef4 <HAL_RCC_GetHCLKFreq>:
 8005ef4:	b480      	push	{r7}
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	4b03      	ldr	r3, [pc, #12]	@ (8005f08 <HAL_RCC_GetHCLKFreq+0x14>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4618      	mov	r0, r3
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop
 8005f08:	20000018 	.word	0x20000018

08005f0c <HAL_RCC_GetPCLK1Freq>:
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	f7ff fff0 	bl	8005ef4 <HAL_RCC_GetHCLKFreq>
 8005f14:	4602      	mov	r2, r0
 8005f16:	4b05      	ldr	r3, [pc, #20]	@ (8005f2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	0a9b      	lsrs	r3, r3, #10
 8005f1c:	f003 0307 	and.w	r3, r3, #7
 8005f20:	4903      	ldr	r1, [pc, #12]	@ (8005f30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f22:	5ccb      	ldrb	r3, [r1, r3]
 8005f24:	fa22 f303 	lsr.w	r3, r2, r3
 8005f28:	4618      	mov	r0, r3
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	40023800 	.word	0x40023800
 8005f30:	08009b0c 	.word	0x08009b0c

08005f34 <HAL_RCCEx_PeriphCLKConfig>:
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b086      	sub	sp, #24
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	617b      	str	r3, [r7, #20]
 8005f40:	2300      	movs	r3, #0
 8005f42:	613b      	str	r3, [r7, #16]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 0301 	and.w	r3, r3, #1
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d10b      	bne.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0302 	and.w	r3, r3, #2
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d105      	bne.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d075      	beq.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x120>
 8005f68:	4b91      	ldr	r3, [pc, #580]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	601a      	str	r2, [r3, #0]
 8005f6e:	f7fd fc17 	bl	80037a0 <HAL_GetTick>
 8005f72:	6178      	str	r0, [r7, #20]
 8005f74:	e008      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005f76:	f7fd fc13 	bl	80037a0 <HAL_GetTick>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	1ad3      	subs	r3, r2, r3
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	d901      	bls.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005f84:	2303      	movs	r3, #3
 8005f86:	e189      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005f88:	4b8a      	ldr	r3, [pc, #552]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d1f0      	bne.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0301 	and.w	r3, r3, #1
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d009      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x80>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	019a      	lsls	r2, r3, #6
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	071b      	lsls	r3, r3, #28
 8005fac:	4981      	ldr	r1, [pc, #516]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0302 	and.w	r3, r3, #2
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d01f      	beq.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8005fc0:	4b7c      	ldr	r3, [pc, #496]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fc6:	0f1b      	lsrs	r3, r3, #28
 8005fc8:	f003 0307 	and.w	r3, r3, #7
 8005fcc:	613b      	str	r3, [r7, #16]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	019a      	lsls	r2, r3, #6
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	061b      	lsls	r3, r3, #24
 8005fda:	431a      	orrs	r2, r3
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	071b      	lsls	r3, r3, #28
 8005fe0:	4974      	ldr	r1, [pc, #464]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
 8005fe8:	4b72      	ldr	r3, [pc, #456]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005fee:	f023 021f 	bic.w	r2, r3, #31
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	69db      	ldr	r3, [r3, #28]
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	496e      	ldr	r1, [pc, #440]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006008:	2b00      	cmp	r3, #0
 800600a:	d00d      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	019a      	lsls	r2, r3, #6
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	061b      	lsls	r3, r3, #24
 8006018:	431a      	orrs	r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	071b      	lsls	r3, r3, #28
 8006020:	4964      	ldr	r1, [pc, #400]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006022:	4313      	orrs	r3, r2
 8006024:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
 8006028:	4b61      	ldr	r3, [pc, #388]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800602a:	2201      	movs	r2, #1
 800602c:	601a      	str	r2, [r3, #0]
 800602e:	f7fd fbb7 	bl	80037a0 <HAL_GetTick>
 8006032:	6178      	str	r0, [r7, #20]
 8006034:	e008      	b.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8006036:	f7fd fbb3 	bl	80037a0 <HAL_GetTick>
 800603a:	4602      	mov	r2, r0
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	2b02      	cmp	r3, #2
 8006042:	d901      	bls.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8006044:	2303      	movs	r3, #3
 8006046:	e129      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006048:	4b5a      	ldr	r3, [pc, #360]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006050:	2b00      	cmp	r3, #0
 8006052:	d0f0      	beq.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x102>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0304 	and.w	r3, r3, #4
 800605c:	2b00      	cmp	r3, #0
 800605e:	d105      	bne.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x138>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 0308 	and.w	r3, r3, #8
 8006068:	2b00      	cmp	r3, #0
 800606a:	d079      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 800606c:	4b52      	ldr	r3, [pc, #328]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800606e:	2200      	movs	r2, #0
 8006070:	601a      	str	r2, [r3, #0]
 8006072:	f7fd fb95 	bl	80037a0 <HAL_GetTick>
 8006076:	6178      	str	r0, [r7, #20]
 8006078:	e008      	b.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x158>
 800607a:	f7fd fb91 	bl	80037a0 <HAL_GetTick>
 800607e:	4602      	mov	r2, r0
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	2b02      	cmp	r3, #2
 8006086:	d901      	bls.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x158>
 8006088:	2303      	movs	r3, #3
 800608a:	e107      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x368>
 800608c:	4b49      	ldr	r3, [pc, #292]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006094:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006098:	d0ef      	beq.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x146>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 0304 	and.w	r3, r3, #4
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d020      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80060a6:	4b43      	ldr	r3, [pc, #268]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060ac:	0f1b      	lsrs	r3, r3, #28
 80060ae:	f003 0307 	and.w	r3, r3, #7
 80060b2:	613b      	str	r3, [r7, #16]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	019a      	lsls	r2, r3, #6
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	695b      	ldr	r3, [r3, #20]
 80060be:	061b      	lsls	r3, r3, #24
 80060c0:	431a      	orrs	r2, r3
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	071b      	lsls	r3, r3, #28
 80060c6:	493b      	ldr	r1, [pc, #236]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060c8:	4313      	orrs	r3, r2
 80060ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80060ce:	4b39      	ldr	r3, [pc, #228]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80060d4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6a1b      	ldr	r3, [r3, #32]
 80060dc:	3b01      	subs	r3, #1
 80060de:	021b      	lsls	r3, r3, #8
 80060e0:	4934      	ldr	r1, [pc, #208]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060e2:	4313      	orrs	r3, r2
 80060e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 0308 	and.w	r3, r3, #8
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d01e      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80060f4:	4b2f      	ldr	r3, [pc, #188]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060fa:	0e1b      	lsrs	r3, r3, #24
 80060fc:	f003 030f 	and.w	r3, r3, #15
 8006100:	613b      	str	r3, [r7, #16]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	019a      	lsls	r2, r3, #6
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	061b      	lsls	r3, r3, #24
 800610c:	431a      	orrs	r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	699b      	ldr	r3, [r3, #24]
 8006112:	071b      	lsls	r3, r3, #28
 8006114:	4927      	ldr	r1, [pc, #156]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006116:	4313      	orrs	r3, r2
 8006118:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800611c:	4b25      	ldr	r3, [pc, #148]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800611e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006122:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800612a:	4922      	ldr	r1, [pc, #136]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800612c:	4313      	orrs	r3, r2
 800612e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
 8006132:	4b21      	ldr	r3, [pc, #132]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006134:	2201      	movs	r2, #1
 8006136:	601a      	str	r2, [r3, #0]
 8006138:	f7fd fb32 	bl	80037a0 <HAL_GetTick>
 800613c:	6178      	str	r0, [r7, #20]
 800613e:	e008      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006140:	f7fd fb2e 	bl	80037a0 <HAL_GetTick>
 8006144:	4602      	mov	r2, r0
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	2b02      	cmp	r3, #2
 800614c:	d901      	bls.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800614e:	2303      	movs	r3, #3
 8006150:	e0a4      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006152:	4b18      	ldr	r3, [pc, #96]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800615a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800615e:	d1ef      	bne.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 0320 	and.w	r3, r3, #32
 8006168:	2b00      	cmp	r3, #0
 800616a:	f000 808b 	beq.w	8006284 <HAL_RCCEx_PeriphCLKConfig+0x350>
 800616e:	2300      	movs	r3, #0
 8006170:	60fb      	str	r3, [r7, #12]
 8006172:	4b10      	ldr	r3, [pc, #64]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006176:	4a0f      	ldr	r2, [pc, #60]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006178:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800617c:	6413      	str	r3, [r2, #64]	@ 0x40
 800617e:	4b0d      	ldr	r3, [pc, #52]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006182:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006186:	60fb      	str	r3, [r7, #12]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	4b0c      	ldr	r3, [pc, #48]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a0b      	ldr	r2, [pc, #44]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006190:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006194:	6013      	str	r3, [r2, #0]
 8006196:	f7fd fb03 	bl	80037a0 <HAL_GetTick>
 800619a:	6178      	str	r0, [r7, #20]
 800619c:	e010      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800619e:	f7fd faff 	bl	80037a0 <HAL_GetTick>
 80061a2:	4602      	mov	r2, r0
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d909      	bls.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 80061ac:	2303      	movs	r3, #3
 80061ae:	e075      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x368>
 80061b0:	42470068 	.word	0x42470068
 80061b4:	40023800 	.word	0x40023800
 80061b8:	42470070 	.word	0x42470070
 80061bc:	40007000 	.word	0x40007000
 80061c0:	4b38      	ldr	r3, [pc, #224]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d0e8      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80061cc:	4b36      	ldr	r3, [pc, #216]	@ (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80061ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061d4:	613b      	str	r3, [r7, #16]
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d02f      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x308>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d028      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x308>
 80061ea:	4b2f      	ldr	r3, [pc, #188]	@ (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80061ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061f2:	613b      	str	r3, [r7, #16]
 80061f4:	4b2d      	ldr	r3, [pc, #180]	@ (80062ac <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80061f6:	2201      	movs	r2, #1
 80061f8:	601a      	str	r2, [r3, #0]
 80061fa:	4b2c      	ldr	r3, [pc, #176]	@ (80062ac <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80061fc:	2200      	movs	r2, #0
 80061fe:	601a      	str	r2, [r3, #0]
 8006200:	4a29      	ldr	r2, [pc, #164]	@ (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	6713      	str	r3, [r2, #112]	@ 0x70
 8006206:	4b28      	ldr	r3, [pc, #160]	@ (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800620a:	f003 0301 	and.w	r3, r3, #1
 800620e:	2b01      	cmp	r3, #1
 8006210:	d114      	bne.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006212:	f7fd fac5 	bl	80037a0 <HAL_GetTick>
 8006216:	6178      	str	r0, [r7, #20]
 8006218:	e00a      	b.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800621a:	f7fd fac1 	bl	80037a0 <HAL_GetTick>
 800621e:	4602      	mov	r2, r0
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006228:	4293      	cmp	r3, r2
 800622a:	d901      	bls.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800622c:	2303      	movs	r3, #3
 800622e:	e035      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006230:	4b1d      	ldr	r3, [pc, #116]	@ (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006234:	f003 0302 	and.w	r3, r3, #2
 8006238:	2b00      	cmp	r3, #0
 800623a:	d0ee      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006240:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006244:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006248:	d10d      	bne.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800624a:	4b17      	ldr	r3, [pc, #92]	@ (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006256:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800625a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800625e:	4912      	ldr	r1, [pc, #72]	@ (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006260:	4313      	orrs	r3, r2
 8006262:	608b      	str	r3, [r1, #8]
 8006264:	e005      	b.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006266:	4b10      	ldr	r3, [pc, #64]	@ (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	4a0f      	ldr	r2, [pc, #60]	@ (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800626c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006270:	6093      	str	r3, [r2, #8]
 8006272:	4b0d      	ldr	r3, [pc, #52]	@ (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006274:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800627a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800627e:	490a      	ldr	r1, [pc, #40]	@ (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006280:	4313      	orrs	r3, r2
 8006282:	670b      	str	r3, [r1, #112]	@ 0x70
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 0310 	and.w	r3, r3, #16
 800628c:	2b00      	cmp	r3, #0
 800628e:	d004      	beq.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x366>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8006296:	4b06      	ldr	r3, [pc, #24]	@ (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006298:	601a      	str	r2, [r3, #0]
 800629a:	2300      	movs	r3, #0
 800629c:	4618      	mov	r0, r3
 800629e:	3718      	adds	r7, #24
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	40007000 	.word	0x40007000
 80062a8:	40023800 	.word	0x40023800
 80062ac:	42470e40 	.word	0x42470e40
 80062b0:	424711e0 	.word	0x424711e0

080062b4 <HAL_RNG_Init>:
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d101      	bne.n	80062c6 <HAL_RNG_Init+0x12>
 80062c2:	2301      	movs	r3, #1
 80062c4:	e01c      	b.n	8006300 <HAL_RNG_Init+0x4c>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	795b      	ldrb	r3, [r3, #5]
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d105      	bne.n	80062dc <HAL_RNG_Init+0x28>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	711a      	strb	r2, [r3, #4]
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f7fc fcc4 	bl	8002c64 <HAL_RNG_MspInit>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2202      	movs	r2, #2
 80062e0:	715a      	strb	r2, [r3, #5]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f042 0204 	orr.w	r2, r2, #4
 80062f0:	601a      	str	r2, [r3, #0]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2201      	movs	r2, #1
 80062f6:	715a      	strb	r2, [r3, #5]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	609a      	str	r2, [r3, #8]
 80062fe:	2300      	movs	r3, #0
 8006300:	4618      	mov	r0, r3
 8006302:	3708      	adds	r7, #8
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <HAL_RNG_GenerateRandomNumber>:
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
 8006312:	2300      	movs	r3, #0
 8006314:	73fb      	strb	r3, [r7, #15]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	791b      	ldrb	r3, [r3, #4]
 800631a:	2b01      	cmp	r3, #1
 800631c:	d101      	bne.n	8006322 <HAL_RNG_GenerateRandomNumber+0x1a>
 800631e:	2302      	movs	r3, #2
 8006320:	e044      	b.n	80063ac <HAL_RNG_GenerateRandomNumber+0xa4>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2201      	movs	r2, #1
 8006326:	711a      	strb	r2, [r3, #4]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	795b      	ldrb	r3, [r3, #5]
 800632c:	b2db      	uxtb	r3, r3
 800632e:	2b01      	cmp	r3, #1
 8006330:	d133      	bne.n	800639a <HAL_RNG_GenerateRandomNumber+0x92>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2202      	movs	r2, #2
 8006336:	715a      	strb	r2, [r3, #5]
 8006338:	f7fd fa32 	bl	80037a0 <HAL_GetTick>
 800633c:	60b8      	str	r0, [r7, #8]
 800633e:	e018      	b.n	8006372 <HAL_RNG_GenerateRandomNumber+0x6a>
 8006340:	f7fd fa2e 	bl	80037a0 <HAL_GetTick>
 8006344:	4602      	mov	r2, r0
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	2b02      	cmp	r3, #2
 800634c:	d911      	bls.n	8006372 <HAL_RNG_GenerateRandomNumber+0x6a>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	f003 0301 	and.w	r3, r3, #1
 8006358:	2b01      	cmp	r3, #1
 800635a:	d00a      	beq.n	8006372 <HAL_RNG_GenerateRandomNumber+0x6a>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	715a      	strb	r2, [r3, #5]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2202      	movs	r2, #2
 8006366:	609a      	str	r2, [r3, #8]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	711a      	strb	r2, [r3, #4]
 800636e:	2301      	movs	r3, #1
 8006370:	e01c      	b.n	80063ac <HAL_RNG_GenerateRandomNumber+0xa4>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	f003 0301 	and.w	r3, r3, #1
 800637c:	2b01      	cmp	r3, #1
 800637e:	d1df      	bne.n	8006340 <HAL_RNG_GenerateRandomNumber+0x38>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689a      	ldr	r2, [r3, #8]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	60da      	str	r2, [r3, #12]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	68da      	ldr	r2, [r3, #12]
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	601a      	str	r2, [r3, #0]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2201      	movs	r2, #1
 8006396:	715a      	strb	r2, [r3, #5]
 8006398:	e004      	b.n	80063a4 <HAL_RNG_GenerateRandomNumber+0x9c>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2204      	movs	r2, #4
 800639e:	609a      	str	r2, [r3, #8]
 80063a0:	2301      	movs	r3, #1
 80063a2:	73fb      	strb	r3, [r7, #15]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	711a      	strb	r2, [r3, #4]
 80063aa:	7bfb      	ldrb	r3, [r7, #15]
 80063ac:	4618      	mov	r0, r3
 80063ae:	3710      	adds	r7, #16
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <HAL_SPI_Init>:
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d101      	bne.n	80063c6 <HAL_SPI_Init+0x12>
 80063c2:	2301      	movs	r3, #1
 80063c4:	e07b      	b.n	80064be <HAL_SPI_Init+0x10a>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d108      	bne.n	80063e0 <HAL_SPI_Init+0x2c>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063d6:	d009      	beq.n	80063ec <HAL_SPI_Init+0x38>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	61da      	str	r2, [r3, #28]
 80063de:	e005      	b.n	80063ec <HAL_SPI_Init+0x38>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	611a      	str	r2, [r3, #16]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	615a      	str	r2, [r3, #20]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	629a      	str	r2, [r3, #40]	@ 0x28
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d106      	bne.n	800640c <HAL_SPI_Init+0x58>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f7fc fc4e 	bl	8002ca8 <HAL_SPI_MspInit>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2202      	movs	r2, #2
 8006410:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006422:	601a      	str	r2, [r3, #0]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006434:	431a      	orrs	r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800643e:	431a      	orrs	r2, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	f003 0302 	and.w	r3, r3, #2
 8006448:	431a      	orrs	r2, r3
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	695b      	ldr	r3, [r3, #20]
 800644e:	f003 0301 	and.w	r3, r3, #1
 8006452:	431a      	orrs	r2, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	699b      	ldr	r3, [r3, #24]
 8006458:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800645c:	431a      	orrs	r2, r3
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	69db      	ldr	r3, [r3, #28]
 8006462:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006466:	431a      	orrs	r2, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a1b      	ldr	r3, [r3, #32]
 800646c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006470:	ea42 0103 	orr.w	r1, r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006478:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	430a      	orrs	r2, r1
 8006482:	601a      	str	r2, [r3, #0]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	0c1b      	lsrs	r3, r3, #16
 800648a:	f003 0104 	and.w	r1, r3, #4
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006492:	f003 0210 	and.w	r2, r3, #16
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	430a      	orrs	r2, r1
 800649c:	605a      	str	r2, [r3, #4]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	69da      	ldr	r2, [r3, #28]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80064ac:	61da      	str	r2, [r3, #28]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	655a      	str	r2, [r3, #84]	@ 0x54
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80064bc:	2300      	movs	r3, #0
 80064be:	4618      	mov	r0, r3
 80064c0:	3708      	adds	r7, #8
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <HAL_SPI_DeInit>:
 80064c6:	b580      	push	{r7, lr}
 80064c8:	b082      	sub	sp, #8
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d101      	bne.n	80064d8 <HAL_SPI_DeInit+0x12>
 80064d4:	2301      	movs	r3, #1
 80064d6:	e01a      	b.n	800650e <HAL_SPI_DeInit+0x48>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2202      	movs	r2, #2
 80064dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80064ee:	601a      	str	r2, [r3, #0]
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f7fc fc21 	bl	8002d38 <HAL_SPI_MspDeInit>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	655a      	str	r2, [r3, #84]	@ 0x54
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800650c:	2300      	movs	r3, #0
 800650e:	4618      	mov	r0, r3
 8006510:	3708      	adds	r7, #8
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}

08006516 <HAL_SPI_Transmit>:
 8006516:	b580      	push	{r7, lr}
 8006518:	b088      	sub	sp, #32
 800651a:	af00      	add	r7, sp, #0
 800651c:	60f8      	str	r0, [r7, #12]
 800651e:	60b9      	str	r1, [r7, #8]
 8006520:	603b      	str	r3, [r7, #0]
 8006522:	4613      	mov	r3, r2
 8006524:	80fb      	strh	r3, [r7, #6]
 8006526:	f7fd f93b 	bl	80037a0 <HAL_GetTick>
 800652a:	61f8      	str	r0, [r7, #28]
 800652c:	88fb      	ldrh	r3, [r7, #6]
 800652e:	837b      	strh	r3, [r7, #26]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006536:	b2db      	uxtb	r3, r3
 8006538:	2b01      	cmp	r3, #1
 800653a:	d001      	beq.n	8006540 <HAL_SPI_Transmit+0x2a>
 800653c:	2302      	movs	r3, #2
 800653e:	e12a      	b.n	8006796 <HAL_SPI_Transmit+0x280>
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d002      	beq.n	800654c <HAL_SPI_Transmit+0x36>
 8006546:	88fb      	ldrh	r3, [r7, #6]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d101      	bne.n	8006550 <HAL_SPI_Transmit+0x3a>
 800654c:	2301      	movs	r3, #1
 800654e:	e122      	b.n	8006796 <HAL_SPI_Transmit+0x280>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006556:	2b01      	cmp	r3, #1
 8006558:	d101      	bne.n	800655e <HAL_SPI_Transmit+0x48>
 800655a:	2302      	movs	r3, #2
 800655c:	e11b      	b.n	8006796 <HAL_SPI_Transmit+0x280>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2201      	movs	r2, #1
 8006562:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2203      	movs	r2, #3
 800656a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	655a      	str	r2, [r3, #84]	@ 0x54
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	68ba      	ldr	r2, [r7, #8]
 8006578:	631a      	str	r2, [r3, #48]	@ 0x30
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	88fa      	ldrh	r2, [r7, #6]
 800657e:	869a      	strh	r2, [r3, #52]	@ 0x34
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	88fa      	ldrh	r2, [r7, #6]
 8006584:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2200      	movs	r2, #0
 800658a:	639a      	str	r2, [r3, #56]	@ 0x38
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2200      	movs	r2, #0
 8006590:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2200      	movs	r2, #0
 8006596:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2200      	movs	r2, #0
 800659c:	645a      	str	r2, [r3, #68]	@ 0x44
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	641a      	str	r2, [r3, #64]	@ 0x40
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065ac:	d10f      	bne.n	80065ce <HAL_SPI_Transmit+0xb8>
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065bc:	601a      	str	r2, [r3, #0]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80065cc:	601a      	str	r2, [r3, #0]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065d8:	2b40      	cmp	r3, #64	@ 0x40
 80065da:	d007      	beq.n	80065ec <HAL_SPI_Transmit+0xd6>
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065ea:	601a      	str	r2, [r3, #0]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065f4:	d152      	bne.n	800669c <HAL_SPI_Transmit+0x186>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d002      	beq.n	8006604 <HAL_SPI_Transmit+0xee>
 80065fe:	8b7b      	ldrh	r3, [r7, #26]
 8006600:	2b01      	cmp	r3, #1
 8006602:	d145      	bne.n	8006690 <HAL_SPI_Transmit+0x17a>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006608:	881a      	ldrh	r2, [r3, #0]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	60da      	str	r2, [r3, #12]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006614:	1c9a      	adds	r2, r3, #2
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	631a      	str	r2, [r3, #48]	@ 0x30
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800661e:	b29b      	uxth	r3, r3
 8006620:	3b01      	subs	r3, #1
 8006622:	b29a      	uxth	r2, r3
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006628:	e032      	b.n	8006690 <HAL_SPI_Transmit+0x17a>
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f003 0302 	and.w	r3, r3, #2
 8006634:	2b02      	cmp	r3, #2
 8006636:	d112      	bne.n	800665e <HAL_SPI_Transmit+0x148>
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800663c:	881a      	ldrh	r2, [r3, #0]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	60da      	str	r2, [r3, #12]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006648:	1c9a      	adds	r2, r3, #2
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	631a      	str	r2, [r3, #48]	@ 0x30
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006652:	b29b      	uxth	r3, r3
 8006654:	3b01      	subs	r3, #1
 8006656:	b29a      	uxth	r2, r3
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800665c:	e018      	b.n	8006690 <HAL_SPI_Transmit+0x17a>
 800665e:	f7fd f89f 	bl	80037a0 <HAL_GetTick>
 8006662:	4602      	mov	r2, r0
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	1ad3      	subs	r3, r2, r3
 8006668:	683a      	ldr	r2, [r7, #0]
 800666a:	429a      	cmp	r2, r3
 800666c:	d803      	bhi.n	8006676 <HAL_SPI_Transmit+0x160>
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006674:	d102      	bne.n	800667c <HAL_SPI_Transmit+0x166>
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d109      	bne.n	8006690 <HAL_SPI_Transmit+0x17a>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2200      	movs	r2, #0
 8006688:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800668c:	2303      	movs	r3, #3
 800668e:	e082      	b.n	8006796 <HAL_SPI_Transmit+0x280>
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006694:	b29b      	uxth	r3, r3
 8006696:	2b00      	cmp	r3, #0
 8006698:	d1c7      	bne.n	800662a <HAL_SPI_Transmit+0x114>
 800669a:	e053      	b.n	8006744 <HAL_SPI_Transmit+0x22e>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d002      	beq.n	80066aa <HAL_SPI_Transmit+0x194>
 80066a4:	8b7b      	ldrh	r3, [r7, #26]
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d147      	bne.n	800673a <HAL_SPI_Transmit+0x224>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	330c      	adds	r3, #12
 80066b4:	7812      	ldrb	r2, [r2, #0]
 80066b6:	701a      	strb	r2, [r3, #0]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066bc:	1c5a      	adds	r2, r3, #1
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	3b01      	subs	r3, #1
 80066ca:	b29a      	uxth	r2, r3
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	86da      	strh	r2, [r3, #54]	@ 0x36
 80066d0:	e033      	b.n	800673a <HAL_SPI_Transmit+0x224>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	f003 0302 	and.w	r3, r3, #2
 80066dc:	2b02      	cmp	r3, #2
 80066de:	d113      	bne.n	8006708 <HAL_SPI_Transmit+0x1f2>
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	330c      	adds	r3, #12
 80066ea:	7812      	ldrb	r2, [r2, #0]
 80066ec:	701a      	strb	r2, [r3, #0]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066f2:	1c5a      	adds	r2, r3, #1
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	3b01      	subs	r3, #1
 8006700:	b29a      	uxth	r2, r3
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006706:	e018      	b.n	800673a <HAL_SPI_Transmit+0x224>
 8006708:	f7fd f84a 	bl	80037a0 <HAL_GetTick>
 800670c:	4602      	mov	r2, r0
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	683a      	ldr	r2, [r7, #0]
 8006714:	429a      	cmp	r2, r3
 8006716:	d803      	bhi.n	8006720 <HAL_SPI_Transmit+0x20a>
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800671e:	d102      	bne.n	8006726 <HAL_SPI_Transmit+0x210>
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d109      	bne.n	800673a <HAL_SPI_Transmit+0x224>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2201      	movs	r2, #1
 800672a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8006736:	2303      	movs	r3, #3
 8006738:	e02d      	b.n	8006796 <HAL_SPI_Transmit+0x280>
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800673e:	b29b      	uxth	r3, r3
 8006740:	2b00      	cmp	r3, #0
 8006742:	d1c6      	bne.n	80066d2 <HAL_SPI_Transmit+0x1bc>
 8006744:	69fa      	ldr	r2, [r7, #28]
 8006746:	6839      	ldr	r1, [r7, #0]
 8006748:	68f8      	ldr	r0, [r7, #12]
 800674a:	f000 f8bf 	bl	80068cc <SPI_EndRxTxTransaction>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d002      	beq.n	800675a <HAL_SPI_Transmit+0x244>
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2220      	movs	r2, #32
 8006758:	655a      	str	r2, [r3, #84]	@ 0x54
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d10a      	bne.n	8006778 <HAL_SPI_Transmit+0x262>
 8006762:	2300      	movs	r3, #0
 8006764:	617b      	str	r3, [r7, #20]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	617b      	str	r3, [r7, #20]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	617b      	str	r3, [r7, #20]
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2200      	movs	r2, #0
 8006784:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800678c:	2b00      	cmp	r3, #0
 800678e:	d001      	beq.n	8006794 <HAL_SPI_Transmit+0x27e>
 8006790:	2301      	movs	r3, #1
 8006792:	e000      	b.n	8006796 <HAL_SPI_Transmit+0x280>
 8006794:	2300      	movs	r3, #0
 8006796:	4618      	mov	r0, r3
 8006798:	3720      	adds	r7, #32
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}

0800679e <HAL_SPI_GetState>:
 800679e:	b480      	push	{r7}
 80067a0:	b083      	sub	sp, #12
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	4618      	mov	r0, r3
 80067b0:	370c      	adds	r7, #12
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
	...

080067bc <SPI_WaitFlagStateUntilTimeout>:
 80067bc:	b580      	push	{r7, lr}
 80067be:	b088      	sub	sp, #32
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	60b9      	str	r1, [r7, #8]
 80067c6:	603b      	str	r3, [r7, #0]
 80067c8:	4613      	mov	r3, r2
 80067ca:	71fb      	strb	r3, [r7, #7]
 80067cc:	f7fc ffe8 	bl	80037a0 <HAL_GetTick>
 80067d0:	4602      	mov	r2, r0
 80067d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067d4:	1a9b      	subs	r3, r3, r2
 80067d6:	683a      	ldr	r2, [r7, #0]
 80067d8:	4413      	add	r3, r2
 80067da:	61fb      	str	r3, [r7, #28]
 80067dc:	f7fc ffe0 	bl	80037a0 <HAL_GetTick>
 80067e0:	61b8      	str	r0, [r7, #24]
 80067e2:	4b39      	ldr	r3, [pc, #228]	@ (80068c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	015b      	lsls	r3, r3, #5
 80067e8:	0d1b      	lsrs	r3, r3, #20
 80067ea:	69fa      	ldr	r2, [r7, #28]
 80067ec:	fb02 f303 	mul.w	r3, r2, r3
 80067f0:	617b      	str	r3, [r7, #20]
 80067f2:	e054      	b.n	800689e <SPI_WaitFlagStateUntilTimeout+0xe2>
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80067fa:	d050      	beq.n	800689e <SPI_WaitFlagStateUntilTimeout+0xe2>
 80067fc:	f7fc ffd0 	bl	80037a0 <HAL_GetTick>
 8006800:	4602      	mov	r2, r0
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	69fa      	ldr	r2, [r7, #28]
 8006808:	429a      	cmp	r2, r3
 800680a:	d902      	bls.n	8006812 <SPI_WaitFlagStateUntilTimeout+0x56>
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d13d      	bne.n	800688e <SPI_WaitFlagStateUntilTimeout+0xd2>
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	685a      	ldr	r2, [r3, #4]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006820:	605a      	str	r2, [r3, #4]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800682a:	d111      	bne.n	8006850 <SPI_WaitFlagStateUntilTimeout+0x94>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006834:	d004      	beq.n	8006840 <SPI_WaitFlagStateUntilTimeout+0x84>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800683e:	d107      	bne.n	8006850 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800684e:	601a      	str	r2, [r3, #0]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006854:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006858:	d10f      	bne.n	800687a <SPI_WaitFlagStateUntilTimeout+0xbe>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006868:	601a      	str	r2, [r3, #0]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006878:	601a      	str	r2, [r3, #0]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2201      	movs	r2, #1
 800687e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2200      	movs	r2, #0
 8006886:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800688a:	2303      	movs	r3, #3
 800688c:	e017      	b.n	80068be <SPI_WaitFlagStateUntilTimeout+0x102>
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d101      	bne.n	8006898 <SPI_WaitFlagStateUntilTimeout+0xdc>
 8006894:	2300      	movs	r3, #0
 8006896:	61fb      	str	r3, [r7, #28]
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	3b01      	subs	r3, #1
 800689c:	617b      	str	r3, [r7, #20]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	689a      	ldr	r2, [r3, #8]
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	4013      	ands	r3, r2
 80068a8:	68ba      	ldr	r2, [r7, #8]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	bf0c      	ite	eq
 80068ae:	2301      	moveq	r3, #1
 80068b0:	2300      	movne	r3, #0
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	461a      	mov	r2, r3
 80068b6:	79fb      	ldrb	r3, [r7, #7]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d19b      	bne.n	80067f4 <SPI_WaitFlagStateUntilTimeout+0x38>
 80068bc:	2300      	movs	r3, #0
 80068be:	4618      	mov	r0, r3
 80068c0:	3720      	adds	r7, #32
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	20000018 	.word	0x20000018

080068cc <SPI_EndRxTxTransaction>:
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b088      	sub	sp, #32
 80068d0:	af02      	add	r7, sp, #8
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	607a      	str	r2, [r7, #4]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	9300      	str	r3, [sp, #0]
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	2201      	movs	r2, #1
 80068e0:	2102      	movs	r1, #2
 80068e2:	68f8      	ldr	r0, [r7, #12]
 80068e4:	f7ff ff6a 	bl	80067bc <SPI_WaitFlagStateUntilTimeout>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d007      	beq.n	80068fe <SPI_EndRxTxTransaction+0x32>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068f2:	f043 0220 	orr.w	r2, r3, #32
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	655a      	str	r2, [r3, #84]	@ 0x54
 80068fa:	2303      	movs	r3, #3
 80068fc:	e032      	b.n	8006964 <SPI_EndRxTxTransaction+0x98>
 80068fe:	4b1b      	ldr	r3, [pc, #108]	@ (800696c <SPI_EndRxTxTransaction+0xa0>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a1b      	ldr	r2, [pc, #108]	@ (8006970 <SPI_EndRxTxTransaction+0xa4>)
 8006904:	fba2 2303 	umull	r2, r3, r2, r3
 8006908:	0d5b      	lsrs	r3, r3, #21
 800690a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800690e:	fb02 f303 	mul.w	r3, r2, r3
 8006912:	617b      	str	r3, [r7, #20]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800691c:	d112      	bne.n	8006944 <SPI_EndRxTxTransaction+0x78>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	9300      	str	r3, [sp, #0]
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	2200      	movs	r2, #0
 8006926:	2180      	movs	r1, #128	@ 0x80
 8006928:	68f8      	ldr	r0, [r7, #12]
 800692a:	f7ff ff47 	bl	80067bc <SPI_WaitFlagStateUntilTimeout>
 800692e:	4603      	mov	r3, r0
 8006930:	2b00      	cmp	r3, #0
 8006932:	d016      	beq.n	8006962 <SPI_EndRxTxTransaction+0x96>
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006938:	f043 0220 	orr.w	r2, r3, #32
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	655a      	str	r2, [r3, #84]	@ 0x54
 8006940:	2303      	movs	r3, #3
 8006942:	e00f      	b.n	8006964 <SPI_EndRxTxTransaction+0x98>
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00a      	beq.n	8006960 <SPI_EndRxTxTransaction+0x94>
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	3b01      	subs	r3, #1
 800694e:	617b      	str	r3, [r7, #20]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800695a:	2b80      	cmp	r3, #128	@ 0x80
 800695c:	d0f2      	beq.n	8006944 <SPI_EndRxTxTransaction+0x78>
 800695e:	e000      	b.n	8006962 <SPI_EndRxTxTransaction+0x96>
 8006960:	bf00      	nop
 8006962:	2300      	movs	r3, #0
 8006964:	4618      	mov	r0, r3
 8006966:	3718      	adds	r7, #24
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	20000018 	.word	0x20000018
 8006970:	165e9f81 	.word	0x165e9f81

08006974 <HAL_TIM_Base_Init>:
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d101      	bne.n	8006986 <HAL_TIM_Base_Init+0x12>
 8006982:	2301      	movs	r3, #1
 8006984:	e041      	b.n	8006a0a <HAL_TIM_Base_Init+0x96>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800698c:	b2db      	uxtb	r3, r3
 800698e:	2b00      	cmp	r3, #0
 8006990:	d106      	bne.n	80069a0 <HAL_TIM_Base_Init+0x2c>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f7fc f9ea 	bl	8002d74 <HAL_TIM_Base_MspInit>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2202      	movs	r2, #2
 80069a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	3304      	adds	r3, #4
 80069b0:	4619      	mov	r1, r3
 80069b2:	4610      	mov	r0, r2
 80069b4:	f000 f8f4 	bl	8006ba0 <TIM_Base_SetConfig>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006a08:	2300      	movs	r3, #0
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3708      	adds	r7, #8
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}

08006a12 <HAL_TIM_ConfigClockSource>:
 8006a12:	b580      	push	{r7, lr}
 8006a14:	b084      	sub	sp, #16
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
 8006a1a:	6039      	str	r1, [r7, #0]
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	73fb      	strb	r3, [r7, #15]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d101      	bne.n	8006a2e <HAL_TIM_ConfigClockSource+0x1c>
 8006a2a:	2302      	movs	r3, #2
 8006a2c:	e0b4      	b.n	8006b98 <HAL_TIM_ConfigClockSource+0x186>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2201      	movs	r2, #1
 8006a32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2202      	movs	r2, #2
 8006a3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	60bb      	str	r3, [r7, #8]
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006a4c:	60bb      	str	r3, [r7, #8]
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a54:	60bb      	str	r3, [r7, #8]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68ba      	ldr	r2, [r7, #8]
 8006a5c:	609a      	str	r2, [r3, #8]
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a66:	d03e      	beq.n	8006ae6 <HAL_TIM_ConfigClockSource+0xd4>
 8006a68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a6c:	f200 8087 	bhi.w	8006b7e <HAL_TIM_ConfigClockSource+0x16c>
 8006a70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a74:	f000 8086 	beq.w	8006b84 <HAL_TIM_ConfigClockSource+0x172>
 8006a78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a7c:	d87f      	bhi.n	8006b7e <HAL_TIM_ConfigClockSource+0x16c>
 8006a7e:	2b70      	cmp	r3, #112	@ 0x70
 8006a80:	d01a      	beq.n	8006ab8 <HAL_TIM_ConfigClockSource+0xa6>
 8006a82:	2b70      	cmp	r3, #112	@ 0x70
 8006a84:	d87b      	bhi.n	8006b7e <HAL_TIM_ConfigClockSource+0x16c>
 8006a86:	2b60      	cmp	r3, #96	@ 0x60
 8006a88:	d050      	beq.n	8006b2c <HAL_TIM_ConfigClockSource+0x11a>
 8006a8a:	2b60      	cmp	r3, #96	@ 0x60
 8006a8c:	d877      	bhi.n	8006b7e <HAL_TIM_ConfigClockSource+0x16c>
 8006a8e:	2b50      	cmp	r3, #80	@ 0x50
 8006a90:	d03c      	beq.n	8006b0c <HAL_TIM_ConfigClockSource+0xfa>
 8006a92:	2b50      	cmp	r3, #80	@ 0x50
 8006a94:	d873      	bhi.n	8006b7e <HAL_TIM_ConfigClockSource+0x16c>
 8006a96:	2b40      	cmp	r3, #64	@ 0x40
 8006a98:	d058      	beq.n	8006b4c <HAL_TIM_ConfigClockSource+0x13a>
 8006a9a:	2b40      	cmp	r3, #64	@ 0x40
 8006a9c:	d86f      	bhi.n	8006b7e <HAL_TIM_ConfigClockSource+0x16c>
 8006a9e:	2b30      	cmp	r3, #48	@ 0x30
 8006aa0:	d064      	beq.n	8006b6c <HAL_TIM_ConfigClockSource+0x15a>
 8006aa2:	2b30      	cmp	r3, #48	@ 0x30
 8006aa4:	d86b      	bhi.n	8006b7e <HAL_TIM_ConfigClockSource+0x16c>
 8006aa6:	2b20      	cmp	r3, #32
 8006aa8:	d060      	beq.n	8006b6c <HAL_TIM_ConfigClockSource+0x15a>
 8006aaa:	2b20      	cmp	r3, #32
 8006aac:	d867      	bhi.n	8006b7e <HAL_TIM_ConfigClockSource+0x16c>
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d05c      	beq.n	8006b6c <HAL_TIM_ConfigClockSource+0x15a>
 8006ab2:	2b10      	cmp	r3, #16
 8006ab4:	d05a      	beq.n	8006b6c <HAL_TIM_ConfigClockSource+0x15a>
 8006ab6:	e062      	b.n	8006b7e <HAL_TIM_ConfigClockSource+0x16c>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6818      	ldr	r0, [r3, #0]
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	6899      	ldr	r1, [r3, #8]
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	685a      	ldr	r2, [r3, #4]
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	f000 f990 	bl	8006dec <TIM_ETR_SetConfig>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	60bb      	str	r3, [r7, #8]
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006ada:	60bb      	str	r3, [r7, #8]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	68ba      	ldr	r2, [r7, #8]
 8006ae2:	609a      	str	r2, [r3, #8]
 8006ae4:	e04f      	b.n	8006b86 <HAL_TIM_ConfigClockSource+0x174>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6818      	ldr	r0, [r3, #0]
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	6899      	ldr	r1, [r3, #8]
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	685a      	ldr	r2, [r3, #4]
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	f000 f979 	bl	8006dec <TIM_ETR_SetConfig>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	689a      	ldr	r2, [r3, #8]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006b08:	609a      	str	r2, [r3, #8]
 8006b0a:	e03c      	b.n	8006b86 <HAL_TIM_ConfigClockSource+0x174>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6818      	ldr	r0, [r3, #0]
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	6859      	ldr	r1, [r3, #4]
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	461a      	mov	r2, r3
 8006b1a:	f000 f8ed 	bl	8006cf8 <TIM_TI1_ConfigInputStage>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2150      	movs	r1, #80	@ 0x50
 8006b24:	4618      	mov	r0, r3
 8006b26:	f000 f946 	bl	8006db6 <TIM_ITRx_SetConfig>
 8006b2a:	e02c      	b.n	8006b86 <HAL_TIM_ConfigClockSource+0x174>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6818      	ldr	r0, [r3, #0]
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	6859      	ldr	r1, [r3, #4]
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	461a      	mov	r2, r3
 8006b3a:	f000 f90c 	bl	8006d56 <TIM_TI2_ConfigInputStage>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2160      	movs	r1, #96	@ 0x60
 8006b44:	4618      	mov	r0, r3
 8006b46:	f000 f936 	bl	8006db6 <TIM_ITRx_SetConfig>
 8006b4a:	e01c      	b.n	8006b86 <HAL_TIM_ConfigClockSource+0x174>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6818      	ldr	r0, [r3, #0]
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	6859      	ldr	r1, [r3, #4]
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	461a      	mov	r2, r3
 8006b5a:	f000 f8cd 	bl	8006cf8 <TIM_TI1_ConfigInputStage>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2140      	movs	r1, #64	@ 0x40
 8006b64:	4618      	mov	r0, r3
 8006b66:	f000 f926 	bl	8006db6 <TIM_ITRx_SetConfig>
 8006b6a:	e00c      	b.n	8006b86 <HAL_TIM_ConfigClockSource+0x174>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4619      	mov	r1, r3
 8006b76:	4610      	mov	r0, r2
 8006b78:	f000 f91d 	bl	8006db6 <TIM_ITRx_SetConfig>
 8006b7c:	e003      	b.n	8006b86 <HAL_TIM_ConfigClockSource+0x174>
 8006b7e:	2301      	movs	r3, #1
 8006b80:	73fb      	strb	r3, [r7, #15]
 8006b82:	e000      	b.n	8006b86 <HAL_TIM_ConfigClockSource+0x174>
 8006b84:	bf00      	nop
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006b96:	7bfb      	ldrb	r3, [r7, #15]
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3710      	adds	r7, #16
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <TIM_Base_SetConfig>:
 8006ba0:	b480      	push	{r7}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	60fb      	str	r3, [r7, #12]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a46      	ldr	r2, [pc, #280]	@ (8006ccc <TIM_Base_SetConfig+0x12c>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d013      	beq.n	8006be0 <TIM_Base_SetConfig+0x40>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bbe:	d00f      	beq.n	8006be0 <TIM_Base_SetConfig+0x40>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4a43      	ldr	r2, [pc, #268]	@ (8006cd0 <TIM_Base_SetConfig+0x130>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d00b      	beq.n	8006be0 <TIM_Base_SetConfig+0x40>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4a42      	ldr	r2, [pc, #264]	@ (8006cd4 <TIM_Base_SetConfig+0x134>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d007      	beq.n	8006be0 <TIM_Base_SetConfig+0x40>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	4a41      	ldr	r2, [pc, #260]	@ (8006cd8 <TIM_Base_SetConfig+0x138>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d003      	beq.n	8006be0 <TIM_Base_SetConfig+0x40>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	4a40      	ldr	r2, [pc, #256]	@ (8006cdc <TIM_Base_SetConfig+0x13c>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d108      	bne.n	8006bf2 <TIM_Base_SetConfig+0x52>
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006be6:	60fb      	str	r3, [r7, #12]
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	60fb      	str	r3, [r7, #12]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a35      	ldr	r2, [pc, #212]	@ (8006ccc <TIM_Base_SetConfig+0x12c>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d02b      	beq.n	8006c52 <TIM_Base_SetConfig+0xb2>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c00:	d027      	beq.n	8006c52 <TIM_Base_SetConfig+0xb2>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a32      	ldr	r2, [pc, #200]	@ (8006cd0 <TIM_Base_SetConfig+0x130>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d023      	beq.n	8006c52 <TIM_Base_SetConfig+0xb2>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a31      	ldr	r2, [pc, #196]	@ (8006cd4 <TIM_Base_SetConfig+0x134>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d01f      	beq.n	8006c52 <TIM_Base_SetConfig+0xb2>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a30      	ldr	r2, [pc, #192]	@ (8006cd8 <TIM_Base_SetConfig+0x138>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d01b      	beq.n	8006c52 <TIM_Base_SetConfig+0xb2>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a2f      	ldr	r2, [pc, #188]	@ (8006cdc <TIM_Base_SetConfig+0x13c>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d017      	beq.n	8006c52 <TIM_Base_SetConfig+0xb2>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a2e      	ldr	r2, [pc, #184]	@ (8006ce0 <TIM_Base_SetConfig+0x140>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d013      	beq.n	8006c52 <TIM_Base_SetConfig+0xb2>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a2d      	ldr	r2, [pc, #180]	@ (8006ce4 <TIM_Base_SetConfig+0x144>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d00f      	beq.n	8006c52 <TIM_Base_SetConfig+0xb2>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4a2c      	ldr	r2, [pc, #176]	@ (8006ce8 <TIM_Base_SetConfig+0x148>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d00b      	beq.n	8006c52 <TIM_Base_SetConfig+0xb2>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4a2b      	ldr	r2, [pc, #172]	@ (8006cec <TIM_Base_SetConfig+0x14c>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d007      	beq.n	8006c52 <TIM_Base_SetConfig+0xb2>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a2a      	ldr	r2, [pc, #168]	@ (8006cf0 <TIM_Base_SetConfig+0x150>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d003      	beq.n	8006c52 <TIM_Base_SetConfig+0xb2>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a29      	ldr	r2, [pc, #164]	@ (8006cf4 <TIM_Base_SetConfig+0x154>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d108      	bne.n	8006c64 <TIM_Base_SetConfig+0xc4>
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c58:	60fb      	str	r3, [r7, #12]
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	68db      	ldr	r3, [r3, #12]
 8006c5e:	68fa      	ldr	r2, [r7, #12]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	60fb      	str	r3, [r7, #12]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	695b      	ldr	r3, [r3, #20]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	60fb      	str	r3, [r7, #12]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	601a      	str	r2, [r3, #0]
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	689a      	ldr	r2, [r3, #8]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	629a      	str	r2, [r3, #40]	@ 0x28
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a10      	ldr	r2, [pc, #64]	@ (8006ccc <TIM_Base_SetConfig+0x12c>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d003      	beq.n	8006c98 <TIM_Base_SetConfig+0xf8>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a12      	ldr	r2, [pc, #72]	@ (8006cdc <TIM_Base_SetConfig+0x13c>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d103      	bne.n	8006ca0 <TIM_Base_SetConfig+0x100>
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	691a      	ldr	r2, [r3, #16]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	615a      	str	r2, [r3, #20]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	f003 0301 	and.w	r3, r3, #1
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d105      	bne.n	8006cbe <TIM_Base_SetConfig+0x11e>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	691b      	ldr	r3, [r3, #16]
 8006cb6:	f023 0201 	bic.w	r2, r3, #1
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	611a      	str	r2, [r3, #16]
 8006cbe:	bf00      	nop
 8006cc0:	3714      	adds	r7, #20
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr
 8006cca:	bf00      	nop
 8006ccc:	40010000 	.word	0x40010000
 8006cd0:	40000400 	.word	0x40000400
 8006cd4:	40000800 	.word	0x40000800
 8006cd8:	40000c00 	.word	0x40000c00
 8006cdc:	40010400 	.word	0x40010400
 8006ce0:	40014000 	.word	0x40014000
 8006ce4:	40014400 	.word	0x40014400
 8006ce8:	40014800 	.word	0x40014800
 8006cec:	40001800 	.word	0x40001800
 8006cf0:	40001c00 	.word	0x40001c00
 8006cf4:	40002000 	.word	0x40002000

08006cf8 <TIM_TI1_ConfigInputStage>:
 8006cf8:	b480      	push	{r7}
 8006cfa:	b087      	sub	sp, #28
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	607a      	str	r2, [r7, #4]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6a1b      	ldr	r3, [r3, #32]
 8006d08:	617b      	str	r3, [r7, #20]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6a1b      	ldr	r3, [r3, #32]
 8006d0e:	f023 0201 	bic.w	r2, r3, #1
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	621a      	str	r2, [r3, #32]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	699b      	ldr	r3, [r3, #24]
 8006d1a:	613b      	str	r3, [r7, #16]
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d22:	613b      	str	r3, [r7, #16]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	011b      	lsls	r3, r3, #4
 8006d28:	693a      	ldr	r2, [r7, #16]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	613b      	str	r3, [r7, #16]
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	f023 030a 	bic.w	r3, r3, #10
 8006d34:	617b      	str	r3, [r7, #20]
 8006d36:	697a      	ldr	r2, [r7, #20]
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	617b      	str	r3, [r7, #20]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	693a      	ldr	r2, [r7, #16]
 8006d42:	619a      	str	r2, [r3, #24]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	697a      	ldr	r2, [r7, #20]
 8006d48:	621a      	str	r2, [r3, #32]
 8006d4a:	bf00      	nop
 8006d4c:	371c      	adds	r7, #28
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr

08006d56 <TIM_TI2_ConfigInputStage>:
 8006d56:	b480      	push	{r7}
 8006d58:	b087      	sub	sp, #28
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	60f8      	str	r0, [r7, #12]
 8006d5e:	60b9      	str	r1, [r7, #8]
 8006d60:	607a      	str	r2, [r7, #4]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	6a1b      	ldr	r3, [r3, #32]
 8006d66:	617b      	str	r3, [r7, #20]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6a1b      	ldr	r3, [r3, #32]
 8006d6c:	f023 0210 	bic.w	r2, r3, #16
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	621a      	str	r2, [r3, #32]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	699b      	ldr	r3, [r3, #24]
 8006d78:	613b      	str	r3, [r7, #16]
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006d80:	613b      	str	r3, [r7, #16]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	031b      	lsls	r3, r3, #12
 8006d86:	693a      	ldr	r2, [r7, #16]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	613b      	str	r3, [r7, #16]
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006d92:	617b      	str	r3, [r7, #20]
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	011b      	lsls	r3, r3, #4
 8006d98:	697a      	ldr	r2, [r7, #20]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	617b      	str	r3, [r7, #20]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	693a      	ldr	r2, [r7, #16]
 8006da2:	619a      	str	r2, [r3, #24]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	697a      	ldr	r2, [r7, #20]
 8006da8:	621a      	str	r2, [r3, #32]
 8006daa:	bf00      	nop
 8006dac:	371c      	adds	r7, #28
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr

08006db6 <TIM_ITRx_SetConfig>:
 8006db6:	b480      	push	{r7}
 8006db8:	b085      	sub	sp, #20
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
 8006dbe:	6039      	str	r1, [r7, #0]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	60fb      	str	r3, [r7, #12]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dcc:	60fb      	str	r3, [r7, #12]
 8006dce:	683a      	ldr	r2, [r7, #0]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	f043 0307 	orr.w	r3, r3, #7
 8006dd8:	60fb      	str	r3, [r7, #12]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	68fa      	ldr	r2, [r7, #12]
 8006dde:	609a      	str	r2, [r3, #8]
 8006de0:	bf00      	nop
 8006de2:	3714      	adds	r7, #20
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <TIM_ETR_SetConfig>:
 8006dec:	b480      	push	{r7}
 8006dee:	b087      	sub	sp, #28
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	607a      	str	r2, [r7, #4]
 8006df8:	603b      	str	r3, [r7, #0]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	617b      	str	r3, [r7, #20]
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006e06:	617b      	str	r3, [r7, #20]
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	021a      	lsls	r2, r3, #8
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	431a      	orrs	r2, r3
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	697a      	ldr	r2, [r7, #20]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	617b      	str	r3, [r7, #20]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	697a      	ldr	r2, [r7, #20]
 8006e1e:	609a      	str	r2, [r3, #8]
 8006e20:	bf00      	nop
 8006e22:	371c      	adds	r7, #28
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <HAL_TIMEx_MasterConfigSynchronization>:
 8006e2c:	b480      	push	{r7}
 8006e2e:	b085      	sub	sp, #20
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d101      	bne.n	8006e44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e40:	2302      	movs	r3, #2
 8006e42:	e05a      	b.n	8006efa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2202      	movs	r2, #2
 8006e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	60fb      	str	r3, [r7, #12]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	60bb      	str	r3, [r7, #8]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e6a:	60fb      	str	r3, [r7, #12]
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	60fb      	str	r3, [r7, #12]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	605a      	str	r2, [r3, #4]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a21      	ldr	r2, [pc, #132]	@ (8006f08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d022      	beq.n	8006ece <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e90:	d01d      	beq.n	8006ece <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a1d      	ldr	r2, [pc, #116]	@ (8006f0c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d018      	beq.n	8006ece <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a1b      	ldr	r2, [pc, #108]	@ (8006f10 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d013      	beq.n	8006ece <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a1a      	ldr	r2, [pc, #104]	@ (8006f14 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d00e      	beq.n	8006ece <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a18      	ldr	r2, [pc, #96]	@ (8006f18 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d009      	beq.n	8006ece <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a17      	ldr	r2, [pc, #92]	@ (8006f1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d004      	beq.n	8006ece <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a15      	ldr	r2, [pc, #84]	@ (8006f20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d10c      	bne.n	8006ee8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ed4:	60bb      	str	r3, [r7, #8]
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	68ba      	ldr	r2, [r7, #8]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	60bb      	str	r3, [r7, #8]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	68ba      	ldr	r2, [r7, #8]
 8006ee6:	609a      	str	r2, [r3, #8]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006ef8:	2300      	movs	r3, #0
 8006efa:	4618      	mov	r0, r3
 8006efc:	3714      	adds	r7, #20
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop
 8006f08:	40010000 	.word	0x40010000
 8006f0c:	40000400 	.word	0x40000400
 8006f10:	40000800 	.word	0x40000800
 8006f14:	40000c00 	.word	0x40000c00
 8006f18:	40010400 	.word	0x40010400
 8006f1c:	40014000 	.word	0x40014000
 8006f20:	40001800 	.word	0x40001800

08006f24 <siprintf>:
 8006f24:	b40e      	push	{r1, r2, r3}
 8006f26:	b510      	push	{r4, lr}
 8006f28:	b09d      	sub	sp, #116	@ 0x74
 8006f2a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006f2c:	9002      	str	r0, [sp, #8]
 8006f2e:	9006      	str	r0, [sp, #24]
 8006f30:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006f34:	480a      	ldr	r0, [pc, #40]	@ (8006f60 <siprintf+0x3c>)
 8006f36:	9107      	str	r1, [sp, #28]
 8006f38:	9104      	str	r1, [sp, #16]
 8006f3a:	490a      	ldr	r1, [pc, #40]	@ (8006f64 <siprintf+0x40>)
 8006f3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f40:	9105      	str	r1, [sp, #20]
 8006f42:	2400      	movs	r4, #0
 8006f44:	a902      	add	r1, sp, #8
 8006f46:	6800      	ldr	r0, [r0, #0]
 8006f48:	9301      	str	r3, [sp, #4]
 8006f4a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006f4c:	f000 f9bc 	bl	80072c8 <_svfiprintf_r>
 8006f50:	9b02      	ldr	r3, [sp, #8]
 8006f52:	701c      	strb	r4, [r3, #0]
 8006f54:	b01d      	add	sp, #116	@ 0x74
 8006f56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f5a:	b003      	add	sp, #12
 8006f5c:	4770      	bx	lr
 8006f5e:	bf00      	nop
 8006f60:	20000030 	.word	0x20000030
 8006f64:	ffff0208 	.word	0xffff0208

08006f68 <std>:
 8006f68:	2300      	movs	r3, #0
 8006f6a:	b510      	push	{r4, lr}
 8006f6c:	4604      	mov	r4, r0
 8006f6e:	e9c0 3300 	strd	r3, r3, [r0]
 8006f72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f76:	6083      	str	r3, [r0, #8]
 8006f78:	8181      	strh	r1, [r0, #12]
 8006f7a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006f7c:	81c2      	strh	r2, [r0, #14]
 8006f7e:	6183      	str	r3, [r0, #24]
 8006f80:	4619      	mov	r1, r3
 8006f82:	2208      	movs	r2, #8
 8006f84:	305c      	adds	r0, #92	@ 0x5c
 8006f86:	f000 f90f 	bl	80071a8 <memset>
 8006f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8006fc0 <std+0x58>)
 8006f8c:	6263      	str	r3, [r4, #36]	@ 0x24
 8006f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8006fc4 <std+0x5c>)
 8006f90:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006f92:	4b0d      	ldr	r3, [pc, #52]	@ (8006fc8 <std+0x60>)
 8006f94:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006f96:	4b0d      	ldr	r3, [pc, #52]	@ (8006fcc <std+0x64>)
 8006f98:	6323      	str	r3, [r4, #48]	@ 0x30
 8006f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8006fd0 <std+0x68>)
 8006f9c:	6224      	str	r4, [r4, #32]
 8006f9e:	429c      	cmp	r4, r3
 8006fa0:	d006      	beq.n	8006fb0 <std+0x48>
 8006fa2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006fa6:	4294      	cmp	r4, r2
 8006fa8:	d002      	beq.n	8006fb0 <std+0x48>
 8006faa:	33d0      	adds	r3, #208	@ 0xd0
 8006fac:	429c      	cmp	r4, r3
 8006fae:	d105      	bne.n	8006fbc <std+0x54>
 8006fb0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006fb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fb8:	f000 b928 	b.w	800720c <__retarget_lock_init_recursive>
 8006fbc:	bd10      	pop	{r4, pc}
 8006fbe:	bf00      	nop
 8006fc0:	08007a8d 	.word	0x08007a8d
 8006fc4:	08007aaf 	.word	0x08007aaf
 8006fc8:	08007ae7 	.word	0x08007ae7
 8006fcc:	08007b0b 	.word	0x08007b0b
 8006fd0:	20025c44 	.word	0x20025c44

08006fd4 <stdio_exit_handler>:
 8006fd4:	4a02      	ldr	r2, [pc, #8]	@ (8006fe0 <stdio_exit_handler+0xc>)
 8006fd6:	4903      	ldr	r1, [pc, #12]	@ (8006fe4 <stdio_exit_handler+0x10>)
 8006fd8:	4803      	ldr	r0, [pc, #12]	@ (8006fe8 <stdio_exit_handler+0x14>)
 8006fda:	f000 b869 	b.w	80070b0 <_fwalk_sglue>
 8006fde:	bf00      	nop
 8006fe0:	20000024 	.word	0x20000024
 8006fe4:	08007a25 	.word	0x08007a25
 8006fe8:	20000034 	.word	0x20000034

08006fec <cleanup_stdio>:
 8006fec:	6841      	ldr	r1, [r0, #4]
 8006fee:	4b0c      	ldr	r3, [pc, #48]	@ (8007020 <cleanup_stdio+0x34>)
 8006ff0:	4299      	cmp	r1, r3
 8006ff2:	b510      	push	{r4, lr}
 8006ff4:	4604      	mov	r4, r0
 8006ff6:	d001      	beq.n	8006ffc <cleanup_stdio+0x10>
 8006ff8:	f000 fd14 	bl	8007a24 <_fflush_r>
 8006ffc:	68a1      	ldr	r1, [r4, #8]
 8006ffe:	4b09      	ldr	r3, [pc, #36]	@ (8007024 <cleanup_stdio+0x38>)
 8007000:	4299      	cmp	r1, r3
 8007002:	d002      	beq.n	800700a <cleanup_stdio+0x1e>
 8007004:	4620      	mov	r0, r4
 8007006:	f000 fd0d 	bl	8007a24 <_fflush_r>
 800700a:	68e1      	ldr	r1, [r4, #12]
 800700c:	4b06      	ldr	r3, [pc, #24]	@ (8007028 <cleanup_stdio+0x3c>)
 800700e:	4299      	cmp	r1, r3
 8007010:	d004      	beq.n	800701c <cleanup_stdio+0x30>
 8007012:	4620      	mov	r0, r4
 8007014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007018:	f000 bd04 	b.w	8007a24 <_fflush_r>
 800701c:	bd10      	pop	{r4, pc}
 800701e:	bf00      	nop
 8007020:	20025c44 	.word	0x20025c44
 8007024:	20025cac 	.word	0x20025cac
 8007028:	20025d14 	.word	0x20025d14

0800702c <global_stdio_init.part.0>:
 800702c:	b510      	push	{r4, lr}
 800702e:	4b0b      	ldr	r3, [pc, #44]	@ (800705c <global_stdio_init.part.0+0x30>)
 8007030:	4c0b      	ldr	r4, [pc, #44]	@ (8007060 <global_stdio_init.part.0+0x34>)
 8007032:	4a0c      	ldr	r2, [pc, #48]	@ (8007064 <global_stdio_init.part.0+0x38>)
 8007034:	601a      	str	r2, [r3, #0]
 8007036:	4620      	mov	r0, r4
 8007038:	2200      	movs	r2, #0
 800703a:	2104      	movs	r1, #4
 800703c:	f7ff ff94 	bl	8006f68 <std>
 8007040:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007044:	2201      	movs	r2, #1
 8007046:	2109      	movs	r1, #9
 8007048:	f7ff ff8e 	bl	8006f68 <std>
 800704c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007050:	2202      	movs	r2, #2
 8007052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007056:	2112      	movs	r1, #18
 8007058:	f7ff bf86 	b.w	8006f68 <std>
 800705c:	20025d7c 	.word	0x20025d7c
 8007060:	20025c44 	.word	0x20025c44
 8007064:	08006fd5 	.word	0x08006fd5

08007068 <__sfp_lock_acquire>:
 8007068:	4801      	ldr	r0, [pc, #4]	@ (8007070 <__sfp_lock_acquire+0x8>)
 800706a:	f000 b8d0 	b.w	800720e <__retarget_lock_acquire_recursive>
 800706e:	bf00      	nop
 8007070:	20025d81 	.word	0x20025d81

08007074 <__sfp_lock_release>:
 8007074:	4801      	ldr	r0, [pc, #4]	@ (800707c <__sfp_lock_release+0x8>)
 8007076:	f000 b8cb 	b.w	8007210 <__retarget_lock_release_recursive>
 800707a:	bf00      	nop
 800707c:	20025d81 	.word	0x20025d81

08007080 <__sinit>:
 8007080:	b510      	push	{r4, lr}
 8007082:	4604      	mov	r4, r0
 8007084:	f7ff fff0 	bl	8007068 <__sfp_lock_acquire>
 8007088:	6a23      	ldr	r3, [r4, #32]
 800708a:	b11b      	cbz	r3, 8007094 <__sinit+0x14>
 800708c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007090:	f7ff bff0 	b.w	8007074 <__sfp_lock_release>
 8007094:	4b04      	ldr	r3, [pc, #16]	@ (80070a8 <__sinit+0x28>)
 8007096:	6223      	str	r3, [r4, #32]
 8007098:	4b04      	ldr	r3, [pc, #16]	@ (80070ac <__sinit+0x2c>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d1f5      	bne.n	800708c <__sinit+0xc>
 80070a0:	f7ff ffc4 	bl	800702c <global_stdio_init.part.0>
 80070a4:	e7f2      	b.n	800708c <__sinit+0xc>
 80070a6:	bf00      	nop
 80070a8:	08006fed 	.word	0x08006fed
 80070ac:	20025d7c 	.word	0x20025d7c

080070b0 <_fwalk_sglue>:
 80070b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070b4:	4607      	mov	r7, r0
 80070b6:	4688      	mov	r8, r1
 80070b8:	4614      	mov	r4, r2
 80070ba:	2600      	movs	r6, #0
 80070bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070c0:	f1b9 0901 	subs.w	r9, r9, #1
 80070c4:	d505      	bpl.n	80070d2 <_fwalk_sglue+0x22>
 80070c6:	6824      	ldr	r4, [r4, #0]
 80070c8:	2c00      	cmp	r4, #0
 80070ca:	d1f7      	bne.n	80070bc <_fwalk_sglue+0xc>
 80070cc:	4630      	mov	r0, r6
 80070ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070d2:	89ab      	ldrh	r3, [r5, #12]
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d907      	bls.n	80070e8 <_fwalk_sglue+0x38>
 80070d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80070dc:	3301      	adds	r3, #1
 80070de:	d003      	beq.n	80070e8 <_fwalk_sglue+0x38>
 80070e0:	4629      	mov	r1, r5
 80070e2:	4638      	mov	r0, r7
 80070e4:	47c0      	blx	r8
 80070e6:	4306      	orrs	r6, r0
 80070e8:	3568      	adds	r5, #104	@ 0x68
 80070ea:	e7e9      	b.n	80070c0 <_fwalk_sglue+0x10>

080070ec <_puts_r>:
 80070ec:	6a03      	ldr	r3, [r0, #32]
 80070ee:	b570      	push	{r4, r5, r6, lr}
 80070f0:	6884      	ldr	r4, [r0, #8]
 80070f2:	4605      	mov	r5, r0
 80070f4:	460e      	mov	r6, r1
 80070f6:	b90b      	cbnz	r3, 80070fc <_puts_r+0x10>
 80070f8:	f7ff ffc2 	bl	8007080 <__sinit>
 80070fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80070fe:	07db      	lsls	r3, r3, #31
 8007100:	d405      	bmi.n	800710e <_puts_r+0x22>
 8007102:	89a3      	ldrh	r3, [r4, #12]
 8007104:	0598      	lsls	r0, r3, #22
 8007106:	d402      	bmi.n	800710e <_puts_r+0x22>
 8007108:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800710a:	f000 f880 	bl	800720e <__retarget_lock_acquire_recursive>
 800710e:	89a3      	ldrh	r3, [r4, #12]
 8007110:	0719      	lsls	r1, r3, #28
 8007112:	d502      	bpl.n	800711a <_puts_r+0x2e>
 8007114:	6923      	ldr	r3, [r4, #16]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d135      	bne.n	8007186 <_puts_r+0x9a>
 800711a:	4621      	mov	r1, r4
 800711c:	4628      	mov	r0, r5
 800711e:	f000 fd65 	bl	8007bec <__swsetup_r>
 8007122:	b380      	cbz	r0, 8007186 <_puts_r+0x9a>
 8007124:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8007128:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800712a:	07da      	lsls	r2, r3, #31
 800712c:	d405      	bmi.n	800713a <_puts_r+0x4e>
 800712e:	89a3      	ldrh	r3, [r4, #12]
 8007130:	059b      	lsls	r3, r3, #22
 8007132:	d402      	bmi.n	800713a <_puts_r+0x4e>
 8007134:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007136:	f000 f86b 	bl	8007210 <__retarget_lock_release_recursive>
 800713a:	4628      	mov	r0, r5
 800713c:	bd70      	pop	{r4, r5, r6, pc}
 800713e:	2b00      	cmp	r3, #0
 8007140:	da04      	bge.n	800714c <_puts_r+0x60>
 8007142:	69a2      	ldr	r2, [r4, #24]
 8007144:	429a      	cmp	r2, r3
 8007146:	dc17      	bgt.n	8007178 <_puts_r+0x8c>
 8007148:	290a      	cmp	r1, #10
 800714a:	d015      	beq.n	8007178 <_puts_r+0x8c>
 800714c:	6823      	ldr	r3, [r4, #0]
 800714e:	1c5a      	adds	r2, r3, #1
 8007150:	6022      	str	r2, [r4, #0]
 8007152:	7019      	strb	r1, [r3, #0]
 8007154:	68a3      	ldr	r3, [r4, #8]
 8007156:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800715a:	3b01      	subs	r3, #1
 800715c:	60a3      	str	r3, [r4, #8]
 800715e:	2900      	cmp	r1, #0
 8007160:	d1ed      	bne.n	800713e <_puts_r+0x52>
 8007162:	2b00      	cmp	r3, #0
 8007164:	da11      	bge.n	800718a <_puts_r+0x9e>
 8007166:	4622      	mov	r2, r4
 8007168:	210a      	movs	r1, #10
 800716a:	4628      	mov	r0, r5
 800716c:	f000 fcff 	bl	8007b6e <__swbuf_r>
 8007170:	3001      	adds	r0, #1
 8007172:	d0d7      	beq.n	8007124 <_puts_r+0x38>
 8007174:	250a      	movs	r5, #10
 8007176:	e7d7      	b.n	8007128 <_puts_r+0x3c>
 8007178:	4622      	mov	r2, r4
 800717a:	4628      	mov	r0, r5
 800717c:	f000 fcf7 	bl	8007b6e <__swbuf_r>
 8007180:	3001      	adds	r0, #1
 8007182:	d1e7      	bne.n	8007154 <_puts_r+0x68>
 8007184:	e7ce      	b.n	8007124 <_puts_r+0x38>
 8007186:	3e01      	subs	r6, #1
 8007188:	e7e4      	b.n	8007154 <_puts_r+0x68>
 800718a:	6823      	ldr	r3, [r4, #0]
 800718c:	1c5a      	adds	r2, r3, #1
 800718e:	6022      	str	r2, [r4, #0]
 8007190:	220a      	movs	r2, #10
 8007192:	701a      	strb	r2, [r3, #0]
 8007194:	e7ee      	b.n	8007174 <_puts_r+0x88>
	...

08007198 <puts>:
 8007198:	4b02      	ldr	r3, [pc, #8]	@ (80071a4 <puts+0xc>)
 800719a:	4601      	mov	r1, r0
 800719c:	6818      	ldr	r0, [r3, #0]
 800719e:	f7ff bfa5 	b.w	80070ec <_puts_r>
 80071a2:	bf00      	nop
 80071a4:	20000030 	.word	0x20000030

080071a8 <memset>:
 80071a8:	4402      	add	r2, r0
 80071aa:	4603      	mov	r3, r0
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d100      	bne.n	80071b2 <memset+0xa>
 80071b0:	4770      	bx	lr
 80071b2:	f803 1b01 	strb.w	r1, [r3], #1
 80071b6:	e7f9      	b.n	80071ac <memset+0x4>

080071b8 <__errno>:
 80071b8:	4b01      	ldr	r3, [pc, #4]	@ (80071c0 <__errno+0x8>)
 80071ba:	6818      	ldr	r0, [r3, #0]
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop
 80071c0:	20000030 	.word	0x20000030

080071c4 <__libc_init_array>:
 80071c4:	b570      	push	{r4, r5, r6, lr}
 80071c6:	4d0d      	ldr	r5, [pc, #52]	@ (80071fc <__libc_init_array+0x38>)
 80071c8:	4c0d      	ldr	r4, [pc, #52]	@ (8007200 <__libc_init_array+0x3c>)
 80071ca:	1b64      	subs	r4, r4, r5
 80071cc:	10a4      	asrs	r4, r4, #2
 80071ce:	2600      	movs	r6, #0
 80071d0:	42a6      	cmp	r6, r4
 80071d2:	d109      	bne.n	80071e8 <__libc_init_array+0x24>
 80071d4:	4d0b      	ldr	r5, [pc, #44]	@ (8007204 <__libc_init_array+0x40>)
 80071d6:	4c0c      	ldr	r4, [pc, #48]	@ (8007208 <__libc_init_array+0x44>)
 80071d8:	f000 feb2 	bl	8007f40 <_init>
 80071dc:	1b64      	subs	r4, r4, r5
 80071de:	10a4      	asrs	r4, r4, #2
 80071e0:	2600      	movs	r6, #0
 80071e2:	42a6      	cmp	r6, r4
 80071e4:	d105      	bne.n	80071f2 <__libc_init_array+0x2e>
 80071e6:	bd70      	pop	{r4, r5, r6, pc}
 80071e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80071ec:	4798      	blx	r3
 80071ee:	3601      	adds	r6, #1
 80071f0:	e7ee      	b.n	80071d0 <__libc_init_array+0xc>
 80071f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80071f6:	4798      	blx	r3
 80071f8:	3601      	adds	r6, #1
 80071fa:	e7f2      	b.n	80071e2 <__libc_init_array+0x1e>
 80071fc:	08009b50 	.word	0x08009b50
 8007200:	08009b50 	.word	0x08009b50
 8007204:	08009b50 	.word	0x08009b50
 8007208:	08009b54 	.word	0x08009b54

0800720c <__retarget_lock_init_recursive>:
 800720c:	4770      	bx	lr

0800720e <__retarget_lock_acquire_recursive>:
 800720e:	4770      	bx	lr

08007210 <__retarget_lock_release_recursive>:
 8007210:	4770      	bx	lr

08007212 <__ssputs_r>:
 8007212:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007216:	688e      	ldr	r6, [r1, #8]
 8007218:	461f      	mov	r7, r3
 800721a:	42be      	cmp	r6, r7
 800721c:	680b      	ldr	r3, [r1, #0]
 800721e:	4682      	mov	sl, r0
 8007220:	460c      	mov	r4, r1
 8007222:	4690      	mov	r8, r2
 8007224:	d82d      	bhi.n	8007282 <__ssputs_r+0x70>
 8007226:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800722a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800722e:	d026      	beq.n	800727e <__ssputs_r+0x6c>
 8007230:	6965      	ldr	r5, [r4, #20]
 8007232:	6909      	ldr	r1, [r1, #16]
 8007234:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007238:	eba3 0901 	sub.w	r9, r3, r1
 800723c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007240:	1c7b      	adds	r3, r7, #1
 8007242:	444b      	add	r3, r9
 8007244:	106d      	asrs	r5, r5, #1
 8007246:	429d      	cmp	r5, r3
 8007248:	bf38      	it	cc
 800724a:	461d      	movcc	r5, r3
 800724c:	0553      	lsls	r3, r2, #21
 800724e:	d527      	bpl.n	80072a0 <__ssputs_r+0x8e>
 8007250:	4629      	mov	r1, r5
 8007252:	f000 f957 	bl	8007504 <_malloc_r>
 8007256:	4606      	mov	r6, r0
 8007258:	b360      	cbz	r0, 80072b4 <__ssputs_r+0xa2>
 800725a:	6921      	ldr	r1, [r4, #16]
 800725c:	464a      	mov	r2, r9
 800725e:	f000 fe0f 	bl	8007e80 <memcpy>
 8007262:	89a3      	ldrh	r3, [r4, #12]
 8007264:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007268:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800726c:	81a3      	strh	r3, [r4, #12]
 800726e:	6126      	str	r6, [r4, #16]
 8007270:	6165      	str	r5, [r4, #20]
 8007272:	444e      	add	r6, r9
 8007274:	eba5 0509 	sub.w	r5, r5, r9
 8007278:	6026      	str	r6, [r4, #0]
 800727a:	60a5      	str	r5, [r4, #8]
 800727c:	463e      	mov	r6, r7
 800727e:	42be      	cmp	r6, r7
 8007280:	d900      	bls.n	8007284 <__ssputs_r+0x72>
 8007282:	463e      	mov	r6, r7
 8007284:	6820      	ldr	r0, [r4, #0]
 8007286:	4632      	mov	r2, r6
 8007288:	4641      	mov	r1, r8
 800728a:	f000 fd67 	bl	8007d5c <memmove>
 800728e:	68a3      	ldr	r3, [r4, #8]
 8007290:	1b9b      	subs	r3, r3, r6
 8007292:	60a3      	str	r3, [r4, #8]
 8007294:	6823      	ldr	r3, [r4, #0]
 8007296:	4433      	add	r3, r6
 8007298:	6023      	str	r3, [r4, #0]
 800729a:	2000      	movs	r0, #0
 800729c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072a0:	462a      	mov	r2, r5
 80072a2:	f000 fc36 	bl	8007b12 <_realloc_r>
 80072a6:	4606      	mov	r6, r0
 80072a8:	2800      	cmp	r0, #0
 80072aa:	d1e0      	bne.n	800726e <__ssputs_r+0x5c>
 80072ac:	6921      	ldr	r1, [r4, #16]
 80072ae:	4650      	mov	r0, sl
 80072b0:	f000 fdf4 	bl	8007e9c <_free_r>
 80072b4:	230c      	movs	r3, #12
 80072b6:	f8ca 3000 	str.w	r3, [sl]
 80072ba:	89a3      	ldrh	r3, [r4, #12]
 80072bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072c0:	81a3      	strh	r3, [r4, #12]
 80072c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80072c6:	e7e9      	b.n	800729c <__ssputs_r+0x8a>

080072c8 <_svfiprintf_r>:
 80072c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072cc:	4698      	mov	r8, r3
 80072ce:	898b      	ldrh	r3, [r1, #12]
 80072d0:	061b      	lsls	r3, r3, #24
 80072d2:	b09d      	sub	sp, #116	@ 0x74
 80072d4:	4607      	mov	r7, r0
 80072d6:	460d      	mov	r5, r1
 80072d8:	4614      	mov	r4, r2
 80072da:	d510      	bpl.n	80072fe <_svfiprintf_r+0x36>
 80072dc:	690b      	ldr	r3, [r1, #16]
 80072de:	b973      	cbnz	r3, 80072fe <_svfiprintf_r+0x36>
 80072e0:	2140      	movs	r1, #64	@ 0x40
 80072e2:	f000 f90f 	bl	8007504 <_malloc_r>
 80072e6:	6028      	str	r0, [r5, #0]
 80072e8:	6128      	str	r0, [r5, #16]
 80072ea:	b930      	cbnz	r0, 80072fa <_svfiprintf_r+0x32>
 80072ec:	230c      	movs	r3, #12
 80072ee:	603b      	str	r3, [r7, #0]
 80072f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80072f4:	b01d      	add	sp, #116	@ 0x74
 80072f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072fa:	2340      	movs	r3, #64	@ 0x40
 80072fc:	616b      	str	r3, [r5, #20]
 80072fe:	2300      	movs	r3, #0
 8007300:	9309      	str	r3, [sp, #36]	@ 0x24
 8007302:	2320      	movs	r3, #32
 8007304:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007308:	f8cd 800c 	str.w	r8, [sp, #12]
 800730c:	2330      	movs	r3, #48	@ 0x30
 800730e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80074ac <_svfiprintf_r+0x1e4>
 8007312:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007316:	f04f 0901 	mov.w	r9, #1
 800731a:	4623      	mov	r3, r4
 800731c:	469a      	mov	sl, r3
 800731e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007322:	b10a      	cbz	r2, 8007328 <_svfiprintf_r+0x60>
 8007324:	2a25      	cmp	r2, #37	@ 0x25
 8007326:	d1f9      	bne.n	800731c <_svfiprintf_r+0x54>
 8007328:	ebba 0b04 	subs.w	fp, sl, r4
 800732c:	d00b      	beq.n	8007346 <_svfiprintf_r+0x7e>
 800732e:	465b      	mov	r3, fp
 8007330:	4622      	mov	r2, r4
 8007332:	4629      	mov	r1, r5
 8007334:	4638      	mov	r0, r7
 8007336:	f7ff ff6c 	bl	8007212 <__ssputs_r>
 800733a:	3001      	adds	r0, #1
 800733c:	f000 80a7 	beq.w	800748e <_svfiprintf_r+0x1c6>
 8007340:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007342:	445a      	add	r2, fp
 8007344:	9209      	str	r2, [sp, #36]	@ 0x24
 8007346:	f89a 3000 	ldrb.w	r3, [sl]
 800734a:	2b00      	cmp	r3, #0
 800734c:	f000 809f 	beq.w	800748e <_svfiprintf_r+0x1c6>
 8007350:	2300      	movs	r3, #0
 8007352:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007356:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800735a:	f10a 0a01 	add.w	sl, sl, #1
 800735e:	9304      	str	r3, [sp, #16]
 8007360:	9307      	str	r3, [sp, #28]
 8007362:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007366:	931a      	str	r3, [sp, #104]	@ 0x68
 8007368:	4654      	mov	r4, sl
 800736a:	2205      	movs	r2, #5
 800736c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007370:	484e      	ldr	r0, [pc, #312]	@ (80074ac <_svfiprintf_r+0x1e4>)
 8007372:	f7f8 ff45 	bl	8000200 <memchr>
 8007376:	9a04      	ldr	r2, [sp, #16]
 8007378:	b9d8      	cbnz	r0, 80073b2 <_svfiprintf_r+0xea>
 800737a:	06d0      	lsls	r0, r2, #27
 800737c:	bf44      	itt	mi
 800737e:	2320      	movmi	r3, #32
 8007380:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007384:	0711      	lsls	r1, r2, #28
 8007386:	bf44      	itt	mi
 8007388:	232b      	movmi	r3, #43	@ 0x2b
 800738a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800738e:	f89a 3000 	ldrb.w	r3, [sl]
 8007392:	2b2a      	cmp	r3, #42	@ 0x2a
 8007394:	d015      	beq.n	80073c2 <_svfiprintf_r+0xfa>
 8007396:	9a07      	ldr	r2, [sp, #28]
 8007398:	4654      	mov	r4, sl
 800739a:	2000      	movs	r0, #0
 800739c:	f04f 0c0a 	mov.w	ip, #10
 80073a0:	4621      	mov	r1, r4
 80073a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073a6:	3b30      	subs	r3, #48	@ 0x30
 80073a8:	2b09      	cmp	r3, #9
 80073aa:	d94b      	bls.n	8007444 <_svfiprintf_r+0x17c>
 80073ac:	b1b0      	cbz	r0, 80073dc <_svfiprintf_r+0x114>
 80073ae:	9207      	str	r2, [sp, #28]
 80073b0:	e014      	b.n	80073dc <_svfiprintf_r+0x114>
 80073b2:	eba0 0308 	sub.w	r3, r0, r8
 80073b6:	fa09 f303 	lsl.w	r3, r9, r3
 80073ba:	4313      	orrs	r3, r2
 80073bc:	9304      	str	r3, [sp, #16]
 80073be:	46a2      	mov	sl, r4
 80073c0:	e7d2      	b.n	8007368 <_svfiprintf_r+0xa0>
 80073c2:	9b03      	ldr	r3, [sp, #12]
 80073c4:	1d19      	adds	r1, r3, #4
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	9103      	str	r1, [sp, #12]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	bfbb      	ittet	lt
 80073ce:	425b      	neglt	r3, r3
 80073d0:	f042 0202 	orrlt.w	r2, r2, #2
 80073d4:	9307      	strge	r3, [sp, #28]
 80073d6:	9307      	strlt	r3, [sp, #28]
 80073d8:	bfb8      	it	lt
 80073da:	9204      	strlt	r2, [sp, #16]
 80073dc:	7823      	ldrb	r3, [r4, #0]
 80073de:	2b2e      	cmp	r3, #46	@ 0x2e
 80073e0:	d10a      	bne.n	80073f8 <_svfiprintf_r+0x130>
 80073e2:	7863      	ldrb	r3, [r4, #1]
 80073e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80073e6:	d132      	bne.n	800744e <_svfiprintf_r+0x186>
 80073e8:	9b03      	ldr	r3, [sp, #12]
 80073ea:	1d1a      	adds	r2, r3, #4
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	9203      	str	r2, [sp, #12]
 80073f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80073f4:	3402      	adds	r4, #2
 80073f6:	9305      	str	r3, [sp, #20]
 80073f8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80074bc <_svfiprintf_r+0x1f4>
 80073fc:	7821      	ldrb	r1, [r4, #0]
 80073fe:	2203      	movs	r2, #3
 8007400:	4650      	mov	r0, sl
 8007402:	f7f8 fefd 	bl	8000200 <memchr>
 8007406:	b138      	cbz	r0, 8007418 <_svfiprintf_r+0x150>
 8007408:	9b04      	ldr	r3, [sp, #16]
 800740a:	eba0 000a 	sub.w	r0, r0, sl
 800740e:	2240      	movs	r2, #64	@ 0x40
 8007410:	4082      	lsls	r2, r0
 8007412:	4313      	orrs	r3, r2
 8007414:	3401      	adds	r4, #1
 8007416:	9304      	str	r3, [sp, #16]
 8007418:	f814 1b01 	ldrb.w	r1, [r4], #1
 800741c:	4824      	ldr	r0, [pc, #144]	@ (80074b0 <_svfiprintf_r+0x1e8>)
 800741e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007422:	2206      	movs	r2, #6
 8007424:	f7f8 feec 	bl	8000200 <memchr>
 8007428:	2800      	cmp	r0, #0
 800742a:	d036      	beq.n	800749a <_svfiprintf_r+0x1d2>
 800742c:	4b21      	ldr	r3, [pc, #132]	@ (80074b4 <_svfiprintf_r+0x1ec>)
 800742e:	bb1b      	cbnz	r3, 8007478 <_svfiprintf_r+0x1b0>
 8007430:	9b03      	ldr	r3, [sp, #12]
 8007432:	3307      	adds	r3, #7
 8007434:	f023 0307 	bic.w	r3, r3, #7
 8007438:	3308      	adds	r3, #8
 800743a:	9303      	str	r3, [sp, #12]
 800743c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800743e:	4433      	add	r3, r6
 8007440:	9309      	str	r3, [sp, #36]	@ 0x24
 8007442:	e76a      	b.n	800731a <_svfiprintf_r+0x52>
 8007444:	fb0c 3202 	mla	r2, ip, r2, r3
 8007448:	460c      	mov	r4, r1
 800744a:	2001      	movs	r0, #1
 800744c:	e7a8      	b.n	80073a0 <_svfiprintf_r+0xd8>
 800744e:	2300      	movs	r3, #0
 8007450:	3401      	adds	r4, #1
 8007452:	9305      	str	r3, [sp, #20]
 8007454:	4619      	mov	r1, r3
 8007456:	f04f 0c0a 	mov.w	ip, #10
 800745a:	4620      	mov	r0, r4
 800745c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007460:	3a30      	subs	r2, #48	@ 0x30
 8007462:	2a09      	cmp	r2, #9
 8007464:	d903      	bls.n	800746e <_svfiprintf_r+0x1a6>
 8007466:	2b00      	cmp	r3, #0
 8007468:	d0c6      	beq.n	80073f8 <_svfiprintf_r+0x130>
 800746a:	9105      	str	r1, [sp, #20]
 800746c:	e7c4      	b.n	80073f8 <_svfiprintf_r+0x130>
 800746e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007472:	4604      	mov	r4, r0
 8007474:	2301      	movs	r3, #1
 8007476:	e7f0      	b.n	800745a <_svfiprintf_r+0x192>
 8007478:	ab03      	add	r3, sp, #12
 800747a:	9300      	str	r3, [sp, #0]
 800747c:	462a      	mov	r2, r5
 800747e:	4b0e      	ldr	r3, [pc, #56]	@ (80074b8 <_svfiprintf_r+0x1f0>)
 8007480:	a904      	add	r1, sp, #16
 8007482:	4638      	mov	r0, r7
 8007484:	f3af 8000 	nop.w
 8007488:	1c42      	adds	r2, r0, #1
 800748a:	4606      	mov	r6, r0
 800748c:	d1d6      	bne.n	800743c <_svfiprintf_r+0x174>
 800748e:	89ab      	ldrh	r3, [r5, #12]
 8007490:	065b      	lsls	r3, r3, #25
 8007492:	f53f af2d 	bmi.w	80072f0 <_svfiprintf_r+0x28>
 8007496:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007498:	e72c      	b.n	80072f4 <_svfiprintf_r+0x2c>
 800749a:	ab03      	add	r3, sp, #12
 800749c:	9300      	str	r3, [sp, #0]
 800749e:	462a      	mov	r2, r5
 80074a0:	4b05      	ldr	r3, [pc, #20]	@ (80074b8 <_svfiprintf_r+0x1f0>)
 80074a2:	a904      	add	r1, sp, #16
 80074a4:	4638      	mov	r0, r7
 80074a6:	f000 f91b 	bl	80076e0 <_printf_i>
 80074aa:	e7ed      	b.n	8007488 <_svfiprintf_r+0x1c0>
 80074ac:	08009b14 	.word	0x08009b14
 80074b0:	08009b1e 	.word	0x08009b1e
 80074b4:	00000000 	.word	0x00000000
 80074b8:	08007213 	.word	0x08007213
 80074bc:	08009b1a 	.word	0x08009b1a

080074c0 <sbrk_aligned>:
 80074c0:	b570      	push	{r4, r5, r6, lr}
 80074c2:	4e0f      	ldr	r6, [pc, #60]	@ (8007500 <sbrk_aligned+0x40>)
 80074c4:	460c      	mov	r4, r1
 80074c6:	6831      	ldr	r1, [r6, #0]
 80074c8:	4605      	mov	r5, r0
 80074ca:	b911      	cbnz	r1, 80074d2 <sbrk_aligned+0x12>
 80074cc:	f000 fc94 	bl	8007df8 <_sbrk_r>
 80074d0:	6030      	str	r0, [r6, #0]
 80074d2:	4621      	mov	r1, r4
 80074d4:	4628      	mov	r0, r5
 80074d6:	f000 fc8f 	bl	8007df8 <_sbrk_r>
 80074da:	1c43      	adds	r3, r0, #1
 80074dc:	d103      	bne.n	80074e6 <sbrk_aligned+0x26>
 80074de:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80074e2:	4620      	mov	r0, r4
 80074e4:	bd70      	pop	{r4, r5, r6, pc}
 80074e6:	1cc4      	adds	r4, r0, #3
 80074e8:	f024 0403 	bic.w	r4, r4, #3
 80074ec:	42a0      	cmp	r0, r4
 80074ee:	d0f8      	beq.n	80074e2 <sbrk_aligned+0x22>
 80074f0:	1a21      	subs	r1, r4, r0
 80074f2:	4628      	mov	r0, r5
 80074f4:	f000 fc80 	bl	8007df8 <_sbrk_r>
 80074f8:	3001      	adds	r0, #1
 80074fa:	d1f2      	bne.n	80074e2 <sbrk_aligned+0x22>
 80074fc:	e7ef      	b.n	80074de <sbrk_aligned+0x1e>
 80074fe:	bf00      	nop
 8007500:	20025d84 	.word	0x20025d84

08007504 <_malloc_r>:
 8007504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007508:	1ccd      	adds	r5, r1, #3
 800750a:	f025 0503 	bic.w	r5, r5, #3
 800750e:	3508      	adds	r5, #8
 8007510:	2d0c      	cmp	r5, #12
 8007512:	bf38      	it	cc
 8007514:	250c      	movcc	r5, #12
 8007516:	2d00      	cmp	r5, #0
 8007518:	4606      	mov	r6, r0
 800751a:	db01      	blt.n	8007520 <_malloc_r+0x1c>
 800751c:	42a9      	cmp	r1, r5
 800751e:	d904      	bls.n	800752a <_malloc_r+0x26>
 8007520:	230c      	movs	r3, #12
 8007522:	6033      	str	r3, [r6, #0]
 8007524:	2000      	movs	r0, #0
 8007526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800752a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007600 <_malloc_r+0xfc>
 800752e:	f000 faa1 	bl	8007a74 <__malloc_lock>
 8007532:	f8d8 3000 	ldr.w	r3, [r8]
 8007536:	461c      	mov	r4, r3
 8007538:	bb44      	cbnz	r4, 800758c <_malloc_r+0x88>
 800753a:	4629      	mov	r1, r5
 800753c:	4630      	mov	r0, r6
 800753e:	f7ff ffbf 	bl	80074c0 <sbrk_aligned>
 8007542:	1c43      	adds	r3, r0, #1
 8007544:	4604      	mov	r4, r0
 8007546:	d158      	bne.n	80075fa <_malloc_r+0xf6>
 8007548:	f8d8 4000 	ldr.w	r4, [r8]
 800754c:	4627      	mov	r7, r4
 800754e:	2f00      	cmp	r7, #0
 8007550:	d143      	bne.n	80075da <_malloc_r+0xd6>
 8007552:	2c00      	cmp	r4, #0
 8007554:	d04b      	beq.n	80075ee <_malloc_r+0xea>
 8007556:	6823      	ldr	r3, [r4, #0]
 8007558:	4639      	mov	r1, r7
 800755a:	4630      	mov	r0, r6
 800755c:	eb04 0903 	add.w	r9, r4, r3
 8007560:	f000 fc4a 	bl	8007df8 <_sbrk_r>
 8007564:	4581      	cmp	r9, r0
 8007566:	d142      	bne.n	80075ee <_malloc_r+0xea>
 8007568:	6821      	ldr	r1, [r4, #0]
 800756a:	1a6d      	subs	r5, r5, r1
 800756c:	4629      	mov	r1, r5
 800756e:	4630      	mov	r0, r6
 8007570:	f7ff ffa6 	bl	80074c0 <sbrk_aligned>
 8007574:	3001      	adds	r0, #1
 8007576:	d03a      	beq.n	80075ee <_malloc_r+0xea>
 8007578:	6823      	ldr	r3, [r4, #0]
 800757a:	442b      	add	r3, r5
 800757c:	6023      	str	r3, [r4, #0]
 800757e:	f8d8 3000 	ldr.w	r3, [r8]
 8007582:	685a      	ldr	r2, [r3, #4]
 8007584:	bb62      	cbnz	r2, 80075e0 <_malloc_r+0xdc>
 8007586:	f8c8 7000 	str.w	r7, [r8]
 800758a:	e00f      	b.n	80075ac <_malloc_r+0xa8>
 800758c:	6822      	ldr	r2, [r4, #0]
 800758e:	1b52      	subs	r2, r2, r5
 8007590:	d420      	bmi.n	80075d4 <_malloc_r+0xd0>
 8007592:	2a0b      	cmp	r2, #11
 8007594:	d917      	bls.n	80075c6 <_malloc_r+0xc2>
 8007596:	1961      	adds	r1, r4, r5
 8007598:	42a3      	cmp	r3, r4
 800759a:	6025      	str	r5, [r4, #0]
 800759c:	bf18      	it	ne
 800759e:	6059      	strne	r1, [r3, #4]
 80075a0:	6863      	ldr	r3, [r4, #4]
 80075a2:	bf08      	it	eq
 80075a4:	f8c8 1000 	streq.w	r1, [r8]
 80075a8:	5162      	str	r2, [r4, r5]
 80075aa:	604b      	str	r3, [r1, #4]
 80075ac:	4630      	mov	r0, r6
 80075ae:	f000 fa67 	bl	8007a80 <__malloc_unlock>
 80075b2:	f104 000b 	add.w	r0, r4, #11
 80075b6:	1d23      	adds	r3, r4, #4
 80075b8:	f020 0007 	bic.w	r0, r0, #7
 80075bc:	1ac2      	subs	r2, r0, r3
 80075be:	bf1c      	itt	ne
 80075c0:	1a1b      	subne	r3, r3, r0
 80075c2:	50a3      	strne	r3, [r4, r2]
 80075c4:	e7af      	b.n	8007526 <_malloc_r+0x22>
 80075c6:	6862      	ldr	r2, [r4, #4]
 80075c8:	42a3      	cmp	r3, r4
 80075ca:	bf0c      	ite	eq
 80075cc:	f8c8 2000 	streq.w	r2, [r8]
 80075d0:	605a      	strne	r2, [r3, #4]
 80075d2:	e7eb      	b.n	80075ac <_malloc_r+0xa8>
 80075d4:	4623      	mov	r3, r4
 80075d6:	6864      	ldr	r4, [r4, #4]
 80075d8:	e7ae      	b.n	8007538 <_malloc_r+0x34>
 80075da:	463c      	mov	r4, r7
 80075dc:	687f      	ldr	r7, [r7, #4]
 80075de:	e7b6      	b.n	800754e <_malloc_r+0x4a>
 80075e0:	461a      	mov	r2, r3
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	42a3      	cmp	r3, r4
 80075e6:	d1fb      	bne.n	80075e0 <_malloc_r+0xdc>
 80075e8:	2300      	movs	r3, #0
 80075ea:	6053      	str	r3, [r2, #4]
 80075ec:	e7de      	b.n	80075ac <_malloc_r+0xa8>
 80075ee:	230c      	movs	r3, #12
 80075f0:	6033      	str	r3, [r6, #0]
 80075f2:	4630      	mov	r0, r6
 80075f4:	f000 fa44 	bl	8007a80 <__malloc_unlock>
 80075f8:	e794      	b.n	8007524 <_malloc_r+0x20>
 80075fa:	6005      	str	r5, [r0, #0]
 80075fc:	e7d6      	b.n	80075ac <_malloc_r+0xa8>
 80075fe:	bf00      	nop
 8007600:	20025d88 	.word	0x20025d88

08007604 <_printf_common>:
 8007604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007608:	4616      	mov	r6, r2
 800760a:	4698      	mov	r8, r3
 800760c:	688a      	ldr	r2, [r1, #8]
 800760e:	690b      	ldr	r3, [r1, #16]
 8007610:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007614:	4293      	cmp	r3, r2
 8007616:	bfb8      	it	lt
 8007618:	4613      	movlt	r3, r2
 800761a:	6033      	str	r3, [r6, #0]
 800761c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007620:	4607      	mov	r7, r0
 8007622:	460c      	mov	r4, r1
 8007624:	b10a      	cbz	r2, 800762a <_printf_common+0x26>
 8007626:	3301      	adds	r3, #1
 8007628:	6033      	str	r3, [r6, #0]
 800762a:	6823      	ldr	r3, [r4, #0]
 800762c:	0699      	lsls	r1, r3, #26
 800762e:	bf42      	ittt	mi
 8007630:	6833      	ldrmi	r3, [r6, #0]
 8007632:	3302      	addmi	r3, #2
 8007634:	6033      	strmi	r3, [r6, #0]
 8007636:	6825      	ldr	r5, [r4, #0]
 8007638:	f015 0506 	ands.w	r5, r5, #6
 800763c:	d106      	bne.n	800764c <_printf_common+0x48>
 800763e:	f104 0a19 	add.w	sl, r4, #25
 8007642:	68e3      	ldr	r3, [r4, #12]
 8007644:	6832      	ldr	r2, [r6, #0]
 8007646:	1a9b      	subs	r3, r3, r2
 8007648:	42ab      	cmp	r3, r5
 800764a:	dc26      	bgt.n	800769a <_printf_common+0x96>
 800764c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007650:	6822      	ldr	r2, [r4, #0]
 8007652:	3b00      	subs	r3, #0
 8007654:	bf18      	it	ne
 8007656:	2301      	movne	r3, #1
 8007658:	0692      	lsls	r2, r2, #26
 800765a:	d42b      	bmi.n	80076b4 <_printf_common+0xb0>
 800765c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007660:	4641      	mov	r1, r8
 8007662:	4638      	mov	r0, r7
 8007664:	47c8      	blx	r9
 8007666:	3001      	adds	r0, #1
 8007668:	d01e      	beq.n	80076a8 <_printf_common+0xa4>
 800766a:	6823      	ldr	r3, [r4, #0]
 800766c:	6922      	ldr	r2, [r4, #16]
 800766e:	f003 0306 	and.w	r3, r3, #6
 8007672:	2b04      	cmp	r3, #4
 8007674:	bf02      	ittt	eq
 8007676:	68e5      	ldreq	r5, [r4, #12]
 8007678:	6833      	ldreq	r3, [r6, #0]
 800767a:	1aed      	subeq	r5, r5, r3
 800767c:	68a3      	ldr	r3, [r4, #8]
 800767e:	bf0c      	ite	eq
 8007680:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007684:	2500      	movne	r5, #0
 8007686:	4293      	cmp	r3, r2
 8007688:	bfc4      	itt	gt
 800768a:	1a9b      	subgt	r3, r3, r2
 800768c:	18ed      	addgt	r5, r5, r3
 800768e:	2600      	movs	r6, #0
 8007690:	341a      	adds	r4, #26
 8007692:	42b5      	cmp	r5, r6
 8007694:	d11a      	bne.n	80076cc <_printf_common+0xc8>
 8007696:	2000      	movs	r0, #0
 8007698:	e008      	b.n	80076ac <_printf_common+0xa8>
 800769a:	2301      	movs	r3, #1
 800769c:	4652      	mov	r2, sl
 800769e:	4641      	mov	r1, r8
 80076a0:	4638      	mov	r0, r7
 80076a2:	47c8      	blx	r9
 80076a4:	3001      	adds	r0, #1
 80076a6:	d103      	bne.n	80076b0 <_printf_common+0xac>
 80076a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80076ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076b0:	3501      	adds	r5, #1
 80076b2:	e7c6      	b.n	8007642 <_printf_common+0x3e>
 80076b4:	18e1      	adds	r1, r4, r3
 80076b6:	1c5a      	adds	r2, r3, #1
 80076b8:	2030      	movs	r0, #48	@ 0x30
 80076ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80076be:	4422      	add	r2, r4
 80076c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80076c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80076c8:	3302      	adds	r3, #2
 80076ca:	e7c7      	b.n	800765c <_printf_common+0x58>
 80076cc:	2301      	movs	r3, #1
 80076ce:	4622      	mov	r2, r4
 80076d0:	4641      	mov	r1, r8
 80076d2:	4638      	mov	r0, r7
 80076d4:	47c8      	blx	r9
 80076d6:	3001      	adds	r0, #1
 80076d8:	d0e6      	beq.n	80076a8 <_printf_common+0xa4>
 80076da:	3601      	adds	r6, #1
 80076dc:	e7d9      	b.n	8007692 <_printf_common+0x8e>
	...

080076e0 <_printf_i>:
 80076e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076e4:	7e0f      	ldrb	r7, [r1, #24]
 80076e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80076e8:	2f78      	cmp	r7, #120	@ 0x78
 80076ea:	4691      	mov	r9, r2
 80076ec:	4680      	mov	r8, r0
 80076ee:	460c      	mov	r4, r1
 80076f0:	469a      	mov	sl, r3
 80076f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80076f6:	d807      	bhi.n	8007708 <_printf_i+0x28>
 80076f8:	2f62      	cmp	r7, #98	@ 0x62
 80076fa:	d80a      	bhi.n	8007712 <_printf_i+0x32>
 80076fc:	2f00      	cmp	r7, #0
 80076fe:	f000 80d1 	beq.w	80078a4 <_printf_i+0x1c4>
 8007702:	2f58      	cmp	r7, #88	@ 0x58
 8007704:	f000 80b8 	beq.w	8007878 <_printf_i+0x198>
 8007708:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800770c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007710:	e03a      	b.n	8007788 <_printf_i+0xa8>
 8007712:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007716:	2b15      	cmp	r3, #21
 8007718:	d8f6      	bhi.n	8007708 <_printf_i+0x28>
 800771a:	a101      	add	r1, pc, #4	@ (adr r1, 8007720 <_printf_i+0x40>)
 800771c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007720:	08007779 	.word	0x08007779
 8007724:	0800778d 	.word	0x0800778d
 8007728:	08007709 	.word	0x08007709
 800772c:	08007709 	.word	0x08007709
 8007730:	08007709 	.word	0x08007709
 8007734:	08007709 	.word	0x08007709
 8007738:	0800778d 	.word	0x0800778d
 800773c:	08007709 	.word	0x08007709
 8007740:	08007709 	.word	0x08007709
 8007744:	08007709 	.word	0x08007709
 8007748:	08007709 	.word	0x08007709
 800774c:	0800788b 	.word	0x0800788b
 8007750:	080077b7 	.word	0x080077b7
 8007754:	08007845 	.word	0x08007845
 8007758:	08007709 	.word	0x08007709
 800775c:	08007709 	.word	0x08007709
 8007760:	080078ad 	.word	0x080078ad
 8007764:	08007709 	.word	0x08007709
 8007768:	080077b7 	.word	0x080077b7
 800776c:	08007709 	.word	0x08007709
 8007770:	08007709 	.word	0x08007709
 8007774:	0800784d 	.word	0x0800784d
 8007778:	6833      	ldr	r3, [r6, #0]
 800777a:	1d1a      	adds	r2, r3, #4
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	6032      	str	r2, [r6, #0]
 8007780:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007784:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007788:	2301      	movs	r3, #1
 800778a:	e09c      	b.n	80078c6 <_printf_i+0x1e6>
 800778c:	6833      	ldr	r3, [r6, #0]
 800778e:	6820      	ldr	r0, [r4, #0]
 8007790:	1d19      	adds	r1, r3, #4
 8007792:	6031      	str	r1, [r6, #0]
 8007794:	0606      	lsls	r6, r0, #24
 8007796:	d501      	bpl.n	800779c <_printf_i+0xbc>
 8007798:	681d      	ldr	r5, [r3, #0]
 800779a:	e003      	b.n	80077a4 <_printf_i+0xc4>
 800779c:	0645      	lsls	r5, r0, #25
 800779e:	d5fb      	bpl.n	8007798 <_printf_i+0xb8>
 80077a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80077a4:	2d00      	cmp	r5, #0
 80077a6:	da03      	bge.n	80077b0 <_printf_i+0xd0>
 80077a8:	232d      	movs	r3, #45	@ 0x2d
 80077aa:	426d      	negs	r5, r5
 80077ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077b0:	4858      	ldr	r0, [pc, #352]	@ (8007914 <_printf_i+0x234>)
 80077b2:	230a      	movs	r3, #10
 80077b4:	e011      	b.n	80077da <_printf_i+0xfa>
 80077b6:	6821      	ldr	r1, [r4, #0]
 80077b8:	6833      	ldr	r3, [r6, #0]
 80077ba:	0608      	lsls	r0, r1, #24
 80077bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80077c0:	d402      	bmi.n	80077c8 <_printf_i+0xe8>
 80077c2:	0649      	lsls	r1, r1, #25
 80077c4:	bf48      	it	mi
 80077c6:	b2ad      	uxthmi	r5, r5
 80077c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80077ca:	4852      	ldr	r0, [pc, #328]	@ (8007914 <_printf_i+0x234>)
 80077cc:	6033      	str	r3, [r6, #0]
 80077ce:	bf14      	ite	ne
 80077d0:	230a      	movne	r3, #10
 80077d2:	2308      	moveq	r3, #8
 80077d4:	2100      	movs	r1, #0
 80077d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80077da:	6866      	ldr	r6, [r4, #4]
 80077dc:	60a6      	str	r6, [r4, #8]
 80077de:	2e00      	cmp	r6, #0
 80077e0:	db05      	blt.n	80077ee <_printf_i+0x10e>
 80077e2:	6821      	ldr	r1, [r4, #0]
 80077e4:	432e      	orrs	r6, r5
 80077e6:	f021 0104 	bic.w	r1, r1, #4
 80077ea:	6021      	str	r1, [r4, #0]
 80077ec:	d04b      	beq.n	8007886 <_printf_i+0x1a6>
 80077ee:	4616      	mov	r6, r2
 80077f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80077f4:	fb03 5711 	mls	r7, r3, r1, r5
 80077f8:	5dc7      	ldrb	r7, [r0, r7]
 80077fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80077fe:	462f      	mov	r7, r5
 8007800:	42bb      	cmp	r3, r7
 8007802:	460d      	mov	r5, r1
 8007804:	d9f4      	bls.n	80077f0 <_printf_i+0x110>
 8007806:	2b08      	cmp	r3, #8
 8007808:	d10b      	bne.n	8007822 <_printf_i+0x142>
 800780a:	6823      	ldr	r3, [r4, #0]
 800780c:	07df      	lsls	r7, r3, #31
 800780e:	d508      	bpl.n	8007822 <_printf_i+0x142>
 8007810:	6923      	ldr	r3, [r4, #16]
 8007812:	6861      	ldr	r1, [r4, #4]
 8007814:	4299      	cmp	r1, r3
 8007816:	bfde      	ittt	le
 8007818:	2330      	movle	r3, #48	@ 0x30
 800781a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800781e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007822:	1b92      	subs	r2, r2, r6
 8007824:	6122      	str	r2, [r4, #16]
 8007826:	f8cd a000 	str.w	sl, [sp]
 800782a:	464b      	mov	r3, r9
 800782c:	aa03      	add	r2, sp, #12
 800782e:	4621      	mov	r1, r4
 8007830:	4640      	mov	r0, r8
 8007832:	f7ff fee7 	bl	8007604 <_printf_common>
 8007836:	3001      	adds	r0, #1
 8007838:	d14a      	bne.n	80078d0 <_printf_i+0x1f0>
 800783a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800783e:	b004      	add	sp, #16
 8007840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007844:	6823      	ldr	r3, [r4, #0]
 8007846:	f043 0320 	orr.w	r3, r3, #32
 800784a:	6023      	str	r3, [r4, #0]
 800784c:	4832      	ldr	r0, [pc, #200]	@ (8007918 <_printf_i+0x238>)
 800784e:	2778      	movs	r7, #120	@ 0x78
 8007850:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007854:	6823      	ldr	r3, [r4, #0]
 8007856:	6831      	ldr	r1, [r6, #0]
 8007858:	061f      	lsls	r7, r3, #24
 800785a:	f851 5b04 	ldr.w	r5, [r1], #4
 800785e:	d402      	bmi.n	8007866 <_printf_i+0x186>
 8007860:	065f      	lsls	r7, r3, #25
 8007862:	bf48      	it	mi
 8007864:	b2ad      	uxthmi	r5, r5
 8007866:	6031      	str	r1, [r6, #0]
 8007868:	07d9      	lsls	r1, r3, #31
 800786a:	bf44      	itt	mi
 800786c:	f043 0320 	orrmi.w	r3, r3, #32
 8007870:	6023      	strmi	r3, [r4, #0]
 8007872:	b11d      	cbz	r5, 800787c <_printf_i+0x19c>
 8007874:	2310      	movs	r3, #16
 8007876:	e7ad      	b.n	80077d4 <_printf_i+0xf4>
 8007878:	4826      	ldr	r0, [pc, #152]	@ (8007914 <_printf_i+0x234>)
 800787a:	e7e9      	b.n	8007850 <_printf_i+0x170>
 800787c:	6823      	ldr	r3, [r4, #0]
 800787e:	f023 0320 	bic.w	r3, r3, #32
 8007882:	6023      	str	r3, [r4, #0]
 8007884:	e7f6      	b.n	8007874 <_printf_i+0x194>
 8007886:	4616      	mov	r6, r2
 8007888:	e7bd      	b.n	8007806 <_printf_i+0x126>
 800788a:	6833      	ldr	r3, [r6, #0]
 800788c:	6825      	ldr	r5, [r4, #0]
 800788e:	6961      	ldr	r1, [r4, #20]
 8007890:	1d18      	adds	r0, r3, #4
 8007892:	6030      	str	r0, [r6, #0]
 8007894:	062e      	lsls	r6, r5, #24
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	d501      	bpl.n	800789e <_printf_i+0x1be>
 800789a:	6019      	str	r1, [r3, #0]
 800789c:	e002      	b.n	80078a4 <_printf_i+0x1c4>
 800789e:	0668      	lsls	r0, r5, #25
 80078a0:	d5fb      	bpl.n	800789a <_printf_i+0x1ba>
 80078a2:	8019      	strh	r1, [r3, #0]
 80078a4:	2300      	movs	r3, #0
 80078a6:	6123      	str	r3, [r4, #16]
 80078a8:	4616      	mov	r6, r2
 80078aa:	e7bc      	b.n	8007826 <_printf_i+0x146>
 80078ac:	6833      	ldr	r3, [r6, #0]
 80078ae:	1d1a      	adds	r2, r3, #4
 80078b0:	6032      	str	r2, [r6, #0]
 80078b2:	681e      	ldr	r6, [r3, #0]
 80078b4:	6862      	ldr	r2, [r4, #4]
 80078b6:	2100      	movs	r1, #0
 80078b8:	4630      	mov	r0, r6
 80078ba:	f7f8 fca1 	bl	8000200 <memchr>
 80078be:	b108      	cbz	r0, 80078c4 <_printf_i+0x1e4>
 80078c0:	1b80      	subs	r0, r0, r6
 80078c2:	6060      	str	r0, [r4, #4]
 80078c4:	6863      	ldr	r3, [r4, #4]
 80078c6:	6123      	str	r3, [r4, #16]
 80078c8:	2300      	movs	r3, #0
 80078ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078ce:	e7aa      	b.n	8007826 <_printf_i+0x146>
 80078d0:	6923      	ldr	r3, [r4, #16]
 80078d2:	4632      	mov	r2, r6
 80078d4:	4649      	mov	r1, r9
 80078d6:	4640      	mov	r0, r8
 80078d8:	47d0      	blx	sl
 80078da:	3001      	adds	r0, #1
 80078dc:	d0ad      	beq.n	800783a <_printf_i+0x15a>
 80078de:	6823      	ldr	r3, [r4, #0]
 80078e0:	079b      	lsls	r3, r3, #30
 80078e2:	d413      	bmi.n	800790c <_printf_i+0x22c>
 80078e4:	68e0      	ldr	r0, [r4, #12]
 80078e6:	9b03      	ldr	r3, [sp, #12]
 80078e8:	4298      	cmp	r0, r3
 80078ea:	bfb8      	it	lt
 80078ec:	4618      	movlt	r0, r3
 80078ee:	e7a6      	b.n	800783e <_printf_i+0x15e>
 80078f0:	2301      	movs	r3, #1
 80078f2:	4632      	mov	r2, r6
 80078f4:	4649      	mov	r1, r9
 80078f6:	4640      	mov	r0, r8
 80078f8:	47d0      	blx	sl
 80078fa:	3001      	adds	r0, #1
 80078fc:	d09d      	beq.n	800783a <_printf_i+0x15a>
 80078fe:	3501      	adds	r5, #1
 8007900:	68e3      	ldr	r3, [r4, #12]
 8007902:	9903      	ldr	r1, [sp, #12]
 8007904:	1a5b      	subs	r3, r3, r1
 8007906:	42ab      	cmp	r3, r5
 8007908:	dcf2      	bgt.n	80078f0 <_printf_i+0x210>
 800790a:	e7eb      	b.n	80078e4 <_printf_i+0x204>
 800790c:	2500      	movs	r5, #0
 800790e:	f104 0619 	add.w	r6, r4, #25
 8007912:	e7f5      	b.n	8007900 <_printf_i+0x220>
 8007914:	08009b25 	.word	0x08009b25
 8007918:	08009b36 	.word	0x08009b36

0800791c <__sflush_r>:
 800791c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007924:	0716      	lsls	r6, r2, #28
 8007926:	4605      	mov	r5, r0
 8007928:	460c      	mov	r4, r1
 800792a:	d454      	bmi.n	80079d6 <__sflush_r+0xba>
 800792c:	684b      	ldr	r3, [r1, #4]
 800792e:	2b00      	cmp	r3, #0
 8007930:	dc02      	bgt.n	8007938 <__sflush_r+0x1c>
 8007932:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007934:	2b00      	cmp	r3, #0
 8007936:	dd48      	ble.n	80079ca <__sflush_r+0xae>
 8007938:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800793a:	2e00      	cmp	r6, #0
 800793c:	d045      	beq.n	80079ca <__sflush_r+0xae>
 800793e:	2300      	movs	r3, #0
 8007940:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007944:	682f      	ldr	r7, [r5, #0]
 8007946:	6a21      	ldr	r1, [r4, #32]
 8007948:	602b      	str	r3, [r5, #0]
 800794a:	d030      	beq.n	80079ae <__sflush_r+0x92>
 800794c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800794e:	89a3      	ldrh	r3, [r4, #12]
 8007950:	0759      	lsls	r1, r3, #29
 8007952:	d505      	bpl.n	8007960 <__sflush_r+0x44>
 8007954:	6863      	ldr	r3, [r4, #4]
 8007956:	1ad2      	subs	r2, r2, r3
 8007958:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800795a:	b10b      	cbz	r3, 8007960 <__sflush_r+0x44>
 800795c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800795e:	1ad2      	subs	r2, r2, r3
 8007960:	2300      	movs	r3, #0
 8007962:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007964:	6a21      	ldr	r1, [r4, #32]
 8007966:	4628      	mov	r0, r5
 8007968:	47b0      	blx	r6
 800796a:	1c43      	adds	r3, r0, #1
 800796c:	89a3      	ldrh	r3, [r4, #12]
 800796e:	d106      	bne.n	800797e <__sflush_r+0x62>
 8007970:	6829      	ldr	r1, [r5, #0]
 8007972:	291d      	cmp	r1, #29
 8007974:	d82b      	bhi.n	80079ce <__sflush_r+0xb2>
 8007976:	4a2a      	ldr	r2, [pc, #168]	@ (8007a20 <__sflush_r+0x104>)
 8007978:	40ca      	lsrs	r2, r1
 800797a:	07d6      	lsls	r6, r2, #31
 800797c:	d527      	bpl.n	80079ce <__sflush_r+0xb2>
 800797e:	2200      	movs	r2, #0
 8007980:	6062      	str	r2, [r4, #4]
 8007982:	04d9      	lsls	r1, r3, #19
 8007984:	6922      	ldr	r2, [r4, #16]
 8007986:	6022      	str	r2, [r4, #0]
 8007988:	d504      	bpl.n	8007994 <__sflush_r+0x78>
 800798a:	1c42      	adds	r2, r0, #1
 800798c:	d101      	bne.n	8007992 <__sflush_r+0x76>
 800798e:	682b      	ldr	r3, [r5, #0]
 8007990:	b903      	cbnz	r3, 8007994 <__sflush_r+0x78>
 8007992:	6560      	str	r0, [r4, #84]	@ 0x54
 8007994:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007996:	602f      	str	r7, [r5, #0]
 8007998:	b1b9      	cbz	r1, 80079ca <__sflush_r+0xae>
 800799a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800799e:	4299      	cmp	r1, r3
 80079a0:	d002      	beq.n	80079a8 <__sflush_r+0x8c>
 80079a2:	4628      	mov	r0, r5
 80079a4:	f000 fa7a 	bl	8007e9c <_free_r>
 80079a8:	2300      	movs	r3, #0
 80079aa:	6363      	str	r3, [r4, #52]	@ 0x34
 80079ac:	e00d      	b.n	80079ca <__sflush_r+0xae>
 80079ae:	2301      	movs	r3, #1
 80079b0:	4628      	mov	r0, r5
 80079b2:	47b0      	blx	r6
 80079b4:	4602      	mov	r2, r0
 80079b6:	1c50      	adds	r0, r2, #1
 80079b8:	d1c9      	bne.n	800794e <__sflush_r+0x32>
 80079ba:	682b      	ldr	r3, [r5, #0]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d0c6      	beq.n	800794e <__sflush_r+0x32>
 80079c0:	2b1d      	cmp	r3, #29
 80079c2:	d001      	beq.n	80079c8 <__sflush_r+0xac>
 80079c4:	2b16      	cmp	r3, #22
 80079c6:	d11e      	bne.n	8007a06 <__sflush_r+0xea>
 80079c8:	602f      	str	r7, [r5, #0]
 80079ca:	2000      	movs	r0, #0
 80079cc:	e022      	b.n	8007a14 <__sflush_r+0xf8>
 80079ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079d2:	b21b      	sxth	r3, r3
 80079d4:	e01b      	b.n	8007a0e <__sflush_r+0xf2>
 80079d6:	690f      	ldr	r7, [r1, #16]
 80079d8:	2f00      	cmp	r7, #0
 80079da:	d0f6      	beq.n	80079ca <__sflush_r+0xae>
 80079dc:	0793      	lsls	r3, r2, #30
 80079de:	680e      	ldr	r6, [r1, #0]
 80079e0:	bf08      	it	eq
 80079e2:	694b      	ldreq	r3, [r1, #20]
 80079e4:	600f      	str	r7, [r1, #0]
 80079e6:	bf18      	it	ne
 80079e8:	2300      	movne	r3, #0
 80079ea:	eba6 0807 	sub.w	r8, r6, r7
 80079ee:	608b      	str	r3, [r1, #8]
 80079f0:	f1b8 0f00 	cmp.w	r8, #0
 80079f4:	dde9      	ble.n	80079ca <__sflush_r+0xae>
 80079f6:	6a21      	ldr	r1, [r4, #32]
 80079f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80079fa:	4643      	mov	r3, r8
 80079fc:	463a      	mov	r2, r7
 80079fe:	4628      	mov	r0, r5
 8007a00:	47b0      	blx	r6
 8007a02:	2800      	cmp	r0, #0
 8007a04:	dc08      	bgt.n	8007a18 <__sflush_r+0xfc>
 8007a06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a0e:	81a3      	strh	r3, [r4, #12]
 8007a10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a18:	4407      	add	r7, r0
 8007a1a:	eba8 0800 	sub.w	r8, r8, r0
 8007a1e:	e7e7      	b.n	80079f0 <__sflush_r+0xd4>
 8007a20:	20400001 	.word	0x20400001

08007a24 <_fflush_r>:
 8007a24:	b538      	push	{r3, r4, r5, lr}
 8007a26:	690b      	ldr	r3, [r1, #16]
 8007a28:	4605      	mov	r5, r0
 8007a2a:	460c      	mov	r4, r1
 8007a2c:	b913      	cbnz	r3, 8007a34 <_fflush_r+0x10>
 8007a2e:	2500      	movs	r5, #0
 8007a30:	4628      	mov	r0, r5
 8007a32:	bd38      	pop	{r3, r4, r5, pc}
 8007a34:	b118      	cbz	r0, 8007a3e <_fflush_r+0x1a>
 8007a36:	6a03      	ldr	r3, [r0, #32]
 8007a38:	b90b      	cbnz	r3, 8007a3e <_fflush_r+0x1a>
 8007a3a:	f7ff fb21 	bl	8007080 <__sinit>
 8007a3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d0f3      	beq.n	8007a2e <_fflush_r+0xa>
 8007a46:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007a48:	07d0      	lsls	r0, r2, #31
 8007a4a:	d404      	bmi.n	8007a56 <_fflush_r+0x32>
 8007a4c:	0599      	lsls	r1, r3, #22
 8007a4e:	d402      	bmi.n	8007a56 <_fflush_r+0x32>
 8007a50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a52:	f7ff fbdc 	bl	800720e <__retarget_lock_acquire_recursive>
 8007a56:	4628      	mov	r0, r5
 8007a58:	4621      	mov	r1, r4
 8007a5a:	f7ff ff5f 	bl	800791c <__sflush_r>
 8007a5e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a60:	07da      	lsls	r2, r3, #31
 8007a62:	4605      	mov	r5, r0
 8007a64:	d4e4      	bmi.n	8007a30 <_fflush_r+0xc>
 8007a66:	89a3      	ldrh	r3, [r4, #12]
 8007a68:	059b      	lsls	r3, r3, #22
 8007a6a:	d4e1      	bmi.n	8007a30 <_fflush_r+0xc>
 8007a6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a6e:	f7ff fbcf 	bl	8007210 <__retarget_lock_release_recursive>
 8007a72:	e7dd      	b.n	8007a30 <_fflush_r+0xc>

08007a74 <__malloc_lock>:
 8007a74:	4801      	ldr	r0, [pc, #4]	@ (8007a7c <__malloc_lock+0x8>)
 8007a76:	f7ff bbca 	b.w	800720e <__retarget_lock_acquire_recursive>
 8007a7a:	bf00      	nop
 8007a7c:	20025d80 	.word	0x20025d80

08007a80 <__malloc_unlock>:
 8007a80:	4801      	ldr	r0, [pc, #4]	@ (8007a88 <__malloc_unlock+0x8>)
 8007a82:	f7ff bbc5 	b.w	8007210 <__retarget_lock_release_recursive>
 8007a86:	bf00      	nop
 8007a88:	20025d80 	.word	0x20025d80

08007a8c <__sread>:
 8007a8c:	b510      	push	{r4, lr}
 8007a8e:	460c      	mov	r4, r1
 8007a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a94:	f000 f99e 	bl	8007dd4 <_read_r>
 8007a98:	2800      	cmp	r0, #0
 8007a9a:	bfab      	itete	ge
 8007a9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007a9e:	89a3      	ldrhlt	r3, [r4, #12]
 8007aa0:	181b      	addge	r3, r3, r0
 8007aa2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007aa6:	bfac      	ite	ge
 8007aa8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007aaa:	81a3      	strhlt	r3, [r4, #12]
 8007aac:	bd10      	pop	{r4, pc}

08007aae <__swrite>:
 8007aae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ab2:	461f      	mov	r7, r3
 8007ab4:	898b      	ldrh	r3, [r1, #12]
 8007ab6:	05db      	lsls	r3, r3, #23
 8007ab8:	4605      	mov	r5, r0
 8007aba:	460c      	mov	r4, r1
 8007abc:	4616      	mov	r6, r2
 8007abe:	d505      	bpl.n	8007acc <__swrite+0x1e>
 8007ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ac4:	2302      	movs	r3, #2
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f000 f972 	bl	8007db0 <_lseek_r>
 8007acc:	89a3      	ldrh	r3, [r4, #12]
 8007ace:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ad2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007ad6:	81a3      	strh	r3, [r4, #12]
 8007ad8:	4632      	mov	r2, r6
 8007ada:	463b      	mov	r3, r7
 8007adc:	4628      	mov	r0, r5
 8007ade:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ae2:	f000 b999 	b.w	8007e18 <_write_r>

08007ae6 <__sseek>:
 8007ae6:	b510      	push	{r4, lr}
 8007ae8:	460c      	mov	r4, r1
 8007aea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aee:	f000 f95f 	bl	8007db0 <_lseek_r>
 8007af2:	1c43      	adds	r3, r0, #1
 8007af4:	89a3      	ldrh	r3, [r4, #12]
 8007af6:	bf15      	itete	ne
 8007af8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007afa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007afe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007b02:	81a3      	strheq	r3, [r4, #12]
 8007b04:	bf18      	it	ne
 8007b06:	81a3      	strhne	r3, [r4, #12]
 8007b08:	bd10      	pop	{r4, pc}

08007b0a <__sclose>:
 8007b0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b0e:	f000 b995 	b.w	8007e3c <_close_r>

08007b12 <_realloc_r>:
 8007b12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b16:	4607      	mov	r7, r0
 8007b18:	4614      	mov	r4, r2
 8007b1a:	460d      	mov	r5, r1
 8007b1c:	b921      	cbnz	r1, 8007b28 <_realloc_r+0x16>
 8007b1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b22:	4611      	mov	r1, r2
 8007b24:	f7ff bcee 	b.w	8007504 <_malloc_r>
 8007b28:	b92a      	cbnz	r2, 8007b36 <_realloc_r+0x24>
 8007b2a:	f000 f9b7 	bl	8007e9c <_free_r>
 8007b2e:	4625      	mov	r5, r4
 8007b30:	4628      	mov	r0, r5
 8007b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b36:	f000 f9fb 	bl	8007f30 <_malloc_usable_size_r>
 8007b3a:	4284      	cmp	r4, r0
 8007b3c:	4606      	mov	r6, r0
 8007b3e:	d802      	bhi.n	8007b46 <_realloc_r+0x34>
 8007b40:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007b44:	d8f4      	bhi.n	8007b30 <_realloc_r+0x1e>
 8007b46:	4621      	mov	r1, r4
 8007b48:	4638      	mov	r0, r7
 8007b4a:	f7ff fcdb 	bl	8007504 <_malloc_r>
 8007b4e:	4680      	mov	r8, r0
 8007b50:	b908      	cbnz	r0, 8007b56 <_realloc_r+0x44>
 8007b52:	4645      	mov	r5, r8
 8007b54:	e7ec      	b.n	8007b30 <_realloc_r+0x1e>
 8007b56:	42b4      	cmp	r4, r6
 8007b58:	4622      	mov	r2, r4
 8007b5a:	4629      	mov	r1, r5
 8007b5c:	bf28      	it	cs
 8007b5e:	4632      	movcs	r2, r6
 8007b60:	f000 f98e 	bl	8007e80 <memcpy>
 8007b64:	4629      	mov	r1, r5
 8007b66:	4638      	mov	r0, r7
 8007b68:	f000 f998 	bl	8007e9c <_free_r>
 8007b6c:	e7f1      	b.n	8007b52 <_realloc_r+0x40>

08007b6e <__swbuf_r>:
 8007b6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b70:	460e      	mov	r6, r1
 8007b72:	4614      	mov	r4, r2
 8007b74:	4605      	mov	r5, r0
 8007b76:	b118      	cbz	r0, 8007b80 <__swbuf_r+0x12>
 8007b78:	6a03      	ldr	r3, [r0, #32]
 8007b7a:	b90b      	cbnz	r3, 8007b80 <__swbuf_r+0x12>
 8007b7c:	f7ff fa80 	bl	8007080 <__sinit>
 8007b80:	69a3      	ldr	r3, [r4, #24]
 8007b82:	60a3      	str	r3, [r4, #8]
 8007b84:	89a3      	ldrh	r3, [r4, #12]
 8007b86:	071a      	lsls	r2, r3, #28
 8007b88:	d501      	bpl.n	8007b8e <__swbuf_r+0x20>
 8007b8a:	6923      	ldr	r3, [r4, #16]
 8007b8c:	b943      	cbnz	r3, 8007ba0 <__swbuf_r+0x32>
 8007b8e:	4621      	mov	r1, r4
 8007b90:	4628      	mov	r0, r5
 8007b92:	f000 f82b 	bl	8007bec <__swsetup_r>
 8007b96:	b118      	cbz	r0, 8007ba0 <__swbuf_r+0x32>
 8007b98:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007b9c:	4638      	mov	r0, r7
 8007b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ba0:	6823      	ldr	r3, [r4, #0]
 8007ba2:	6922      	ldr	r2, [r4, #16]
 8007ba4:	1a98      	subs	r0, r3, r2
 8007ba6:	6963      	ldr	r3, [r4, #20]
 8007ba8:	b2f6      	uxtb	r6, r6
 8007baa:	4283      	cmp	r3, r0
 8007bac:	4637      	mov	r7, r6
 8007bae:	dc05      	bgt.n	8007bbc <__swbuf_r+0x4e>
 8007bb0:	4621      	mov	r1, r4
 8007bb2:	4628      	mov	r0, r5
 8007bb4:	f7ff ff36 	bl	8007a24 <_fflush_r>
 8007bb8:	2800      	cmp	r0, #0
 8007bba:	d1ed      	bne.n	8007b98 <__swbuf_r+0x2a>
 8007bbc:	68a3      	ldr	r3, [r4, #8]
 8007bbe:	3b01      	subs	r3, #1
 8007bc0:	60a3      	str	r3, [r4, #8]
 8007bc2:	6823      	ldr	r3, [r4, #0]
 8007bc4:	1c5a      	adds	r2, r3, #1
 8007bc6:	6022      	str	r2, [r4, #0]
 8007bc8:	701e      	strb	r6, [r3, #0]
 8007bca:	6962      	ldr	r2, [r4, #20]
 8007bcc:	1c43      	adds	r3, r0, #1
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d004      	beq.n	8007bdc <__swbuf_r+0x6e>
 8007bd2:	89a3      	ldrh	r3, [r4, #12]
 8007bd4:	07db      	lsls	r3, r3, #31
 8007bd6:	d5e1      	bpl.n	8007b9c <__swbuf_r+0x2e>
 8007bd8:	2e0a      	cmp	r6, #10
 8007bda:	d1df      	bne.n	8007b9c <__swbuf_r+0x2e>
 8007bdc:	4621      	mov	r1, r4
 8007bde:	4628      	mov	r0, r5
 8007be0:	f7ff ff20 	bl	8007a24 <_fflush_r>
 8007be4:	2800      	cmp	r0, #0
 8007be6:	d0d9      	beq.n	8007b9c <__swbuf_r+0x2e>
 8007be8:	e7d6      	b.n	8007b98 <__swbuf_r+0x2a>
	...

08007bec <__swsetup_r>:
 8007bec:	b538      	push	{r3, r4, r5, lr}
 8007bee:	4b29      	ldr	r3, [pc, #164]	@ (8007c94 <__swsetup_r+0xa8>)
 8007bf0:	4605      	mov	r5, r0
 8007bf2:	6818      	ldr	r0, [r3, #0]
 8007bf4:	460c      	mov	r4, r1
 8007bf6:	b118      	cbz	r0, 8007c00 <__swsetup_r+0x14>
 8007bf8:	6a03      	ldr	r3, [r0, #32]
 8007bfa:	b90b      	cbnz	r3, 8007c00 <__swsetup_r+0x14>
 8007bfc:	f7ff fa40 	bl	8007080 <__sinit>
 8007c00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c04:	0719      	lsls	r1, r3, #28
 8007c06:	d422      	bmi.n	8007c4e <__swsetup_r+0x62>
 8007c08:	06da      	lsls	r2, r3, #27
 8007c0a:	d407      	bmi.n	8007c1c <__swsetup_r+0x30>
 8007c0c:	2209      	movs	r2, #9
 8007c0e:	602a      	str	r2, [r5, #0]
 8007c10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c14:	81a3      	strh	r3, [r4, #12]
 8007c16:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007c1a:	e033      	b.n	8007c84 <__swsetup_r+0x98>
 8007c1c:	0758      	lsls	r0, r3, #29
 8007c1e:	d512      	bpl.n	8007c46 <__swsetup_r+0x5a>
 8007c20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c22:	b141      	cbz	r1, 8007c36 <__swsetup_r+0x4a>
 8007c24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c28:	4299      	cmp	r1, r3
 8007c2a:	d002      	beq.n	8007c32 <__swsetup_r+0x46>
 8007c2c:	4628      	mov	r0, r5
 8007c2e:	f000 f935 	bl	8007e9c <_free_r>
 8007c32:	2300      	movs	r3, #0
 8007c34:	6363      	str	r3, [r4, #52]	@ 0x34
 8007c36:	89a3      	ldrh	r3, [r4, #12]
 8007c38:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007c3c:	81a3      	strh	r3, [r4, #12]
 8007c3e:	2300      	movs	r3, #0
 8007c40:	6063      	str	r3, [r4, #4]
 8007c42:	6923      	ldr	r3, [r4, #16]
 8007c44:	6023      	str	r3, [r4, #0]
 8007c46:	89a3      	ldrh	r3, [r4, #12]
 8007c48:	f043 0308 	orr.w	r3, r3, #8
 8007c4c:	81a3      	strh	r3, [r4, #12]
 8007c4e:	6923      	ldr	r3, [r4, #16]
 8007c50:	b94b      	cbnz	r3, 8007c66 <__swsetup_r+0x7a>
 8007c52:	89a3      	ldrh	r3, [r4, #12]
 8007c54:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007c58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c5c:	d003      	beq.n	8007c66 <__swsetup_r+0x7a>
 8007c5e:	4621      	mov	r1, r4
 8007c60:	4628      	mov	r0, r5
 8007c62:	f000 f83f 	bl	8007ce4 <__smakebuf_r>
 8007c66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c6a:	f013 0201 	ands.w	r2, r3, #1
 8007c6e:	d00a      	beq.n	8007c86 <__swsetup_r+0x9a>
 8007c70:	2200      	movs	r2, #0
 8007c72:	60a2      	str	r2, [r4, #8]
 8007c74:	6962      	ldr	r2, [r4, #20]
 8007c76:	4252      	negs	r2, r2
 8007c78:	61a2      	str	r2, [r4, #24]
 8007c7a:	6922      	ldr	r2, [r4, #16]
 8007c7c:	b942      	cbnz	r2, 8007c90 <__swsetup_r+0xa4>
 8007c7e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007c82:	d1c5      	bne.n	8007c10 <__swsetup_r+0x24>
 8007c84:	bd38      	pop	{r3, r4, r5, pc}
 8007c86:	0799      	lsls	r1, r3, #30
 8007c88:	bf58      	it	pl
 8007c8a:	6962      	ldrpl	r2, [r4, #20]
 8007c8c:	60a2      	str	r2, [r4, #8]
 8007c8e:	e7f4      	b.n	8007c7a <__swsetup_r+0x8e>
 8007c90:	2000      	movs	r0, #0
 8007c92:	e7f7      	b.n	8007c84 <__swsetup_r+0x98>
 8007c94:	20000030 	.word	0x20000030

08007c98 <__swhatbuf_r>:
 8007c98:	b570      	push	{r4, r5, r6, lr}
 8007c9a:	460c      	mov	r4, r1
 8007c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ca0:	2900      	cmp	r1, #0
 8007ca2:	b096      	sub	sp, #88	@ 0x58
 8007ca4:	4615      	mov	r5, r2
 8007ca6:	461e      	mov	r6, r3
 8007ca8:	da0d      	bge.n	8007cc6 <__swhatbuf_r+0x2e>
 8007caa:	89a3      	ldrh	r3, [r4, #12]
 8007cac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007cb0:	f04f 0100 	mov.w	r1, #0
 8007cb4:	bf14      	ite	ne
 8007cb6:	2340      	movne	r3, #64	@ 0x40
 8007cb8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007cbc:	2000      	movs	r0, #0
 8007cbe:	6031      	str	r1, [r6, #0]
 8007cc0:	602b      	str	r3, [r5, #0]
 8007cc2:	b016      	add	sp, #88	@ 0x58
 8007cc4:	bd70      	pop	{r4, r5, r6, pc}
 8007cc6:	466a      	mov	r2, sp
 8007cc8:	f000 f8c8 	bl	8007e5c <_fstat_r>
 8007ccc:	2800      	cmp	r0, #0
 8007cce:	dbec      	blt.n	8007caa <__swhatbuf_r+0x12>
 8007cd0:	9901      	ldr	r1, [sp, #4]
 8007cd2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007cd6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007cda:	4259      	negs	r1, r3
 8007cdc:	4159      	adcs	r1, r3
 8007cde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007ce2:	e7eb      	b.n	8007cbc <__swhatbuf_r+0x24>

08007ce4 <__smakebuf_r>:
 8007ce4:	898b      	ldrh	r3, [r1, #12]
 8007ce6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ce8:	079d      	lsls	r5, r3, #30
 8007cea:	4606      	mov	r6, r0
 8007cec:	460c      	mov	r4, r1
 8007cee:	d507      	bpl.n	8007d00 <__smakebuf_r+0x1c>
 8007cf0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007cf4:	6023      	str	r3, [r4, #0]
 8007cf6:	6123      	str	r3, [r4, #16]
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	6163      	str	r3, [r4, #20]
 8007cfc:	b003      	add	sp, #12
 8007cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d00:	ab01      	add	r3, sp, #4
 8007d02:	466a      	mov	r2, sp
 8007d04:	f7ff ffc8 	bl	8007c98 <__swhatbuf_r>
 8007d08:	9f00      	ldr	r7, [sp, #0]
 8007d0a:	4605      	mov	r5, r0
 8007d0c:	4639      	mov	r1, r7
 8007d0e:	4630      	mov	r0, r6
 8007d10:	f7ff fbf8 	bl	8007504 <_malloc_r>
 8007d14:	b948      	cbnz	r0, 8007d2a <__smakebuf_r+0x46>
 8007d16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d1a:	059a      	lsls	r2, r3, #22
 8007d1c:	d4ee      	bmi.n	8007cfc <__smakebuf_r+0x18>
 8007d1e:	f023 0303 	bic.w	r3, r3, #3
 8007d22:	f043 0302 	orr.w	r3, r3, #2
 8007d26:	81a3      	strh	r3, [r4, #12]
 8007d28:	e7e2      	b.n	8007cf0 <__smakebuf_r+0xc>
 8007d2a:	89a3      	ldrh	r3, [r4, #12]
 8007d2c:	6020      	str	r0, [r4, #0]
 8007d2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d32:	81a3      	strh	r3, [r4, #12]
 8007d34:	9b01      	ldr	r3, [sp, #4]
 8007d36:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007d3a:	b15b      	cbz	r3, 8007d54 <__smakebuf_r+0x70>
 8007d3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d40:	4630      	mov	r0, r6
 8007d42:	f000 f825 	bl	8007d90 <_isatty_r>
 8007d46:	b128      	cbz	r0, 8007d54 <__smakebuf_r+0x70>
 8007d48:	89a3      	ldrh	r3, [r4, #12]
 8007d4a:	f023 0303 	bic.w	r3, r3, #3
 8007d4e:	f043 0301 	orr.w	r3, r3, #1
 8007d52:	81a3      	strh	r3, [r4, #12]
 8007d54:	89a3      	ldrh	r3, [r4, #12]
 8007d56:	431d      	orrs	r5, r3
 8007d58:	81a5      	strh	r5, [r4, #12]
 8007d5a:	e7cf      	b.n	8007cfc <__smakebuf_r+0x18>

08007d5c <memmove>:
 8007d5c:	4288      	cmp	r0, r1
 8007d5e:	b510      	push	{r4, lr}
 8007d60:	eb01 0402 	add.w	r4, r1, r2
 8007d64:	d902      	bls.n	8007d6c <memmove+0x10>
 8007d66:	4284      	cmp	r4, r0
 8007d68:	4623      	mov	r3, r4
 8007d6a:	d807      	bhi.n	8007d7c <memmove+0x20>
 8007d6c:	1e43      	subs	r3, r0, #1
 8007d6e:	42a1      	cmp	r1, r4
 8007d70:	d008      	beq.n	8007d84 <memmove+0x28>
 8007d72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d7a:	e7f8      	b.n	8007d6e <memmove+0x12>
 8007d7c:	4402      	add	r2, r0
 8007d7e:	4601      	mov	r1, r0
 8007d80:	428a      	cmp	r2, r1
 8007d82:	d100      	bne.n	8007d86 <memmove+0x2a>
 8007d84:	bd10      	pop	{r4, pc}
 8007d86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d8e:	e7f7      	b.n	8007d80 <memmove+0x24>

08007d90 <_isatty_r>:
 8007d90:	b538      	push	{r3, r4, r5, lr}
 8007d92:	4d06      	ldr	r5, [pc, #24]	@ (8007dac <_isatty_r+0x1c>)
 8007d94:	2300      	movs	r3, #0
 8007d96:	4604      	mov	r4, r0
 8007d98:	4608      	mov	r0, r1
 8007d9a:	602b      	str	r3, [r5, #0]
 8007d9c:	f7fb fc10 	bl	80035c0 <_isatty>
 8007da0:	1c43      	adds	r3, r0, #1
 8007da2:	d102      	bne.n	8007daa <_isatty_r+0x1a>
 8007da4:	682b      	ldr	r3, [r5, #0]
 8007da6:	b103      	cbz	r3, 8007daa <_isatty_r+0x1a>
 8007da8:	6023      	str	r3, [r4, #0]
 8007daa:	bd38      	pop	{r3, r4, r5, pc}
 8007dac:	20025d8c 	.word	0x20025d8c

08007db0 <_lseek_r>:
 8007db0:	b538      	push	{r3, r4, r5, lr}
 8007db2:	4d07      	ldr	r5, [pc, #28]	@ (8007dd0 <_lseek_r+0x20>)
 8007db4:	4604      	mov	r4, r0
 8007db6:	4608      	mov	r0, r1
 8007db8:	4611      	mov	r1, r2
 8007dba:	2200      	movs	r2, #0
 8007dbc:	602a      	str	r2, [r5, #0]
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	f7fb fc09 	bl	80035d6 <_lseek>
 8007dc4:	1c43      	adds	r3, r0, #1
 8007dc6:	d102      	bne.n	8007dce <_lseek_r+0x1e>
 8007dc8:	682b      	ldr	r3, [r5, #0]
 8007dca:	b103      	cbz	r3, 8007dce <_lseek_r+0x1e>
 8007dcc:	6023      	str	r3, [r4, #0]
 8007dce:	bd38      	pop	{r3, r4, r5, pc}
 8007dd0:	20025d8c 	.word	0x20025d8c

08007dd4 <_read_r>:
 8007dd4:	b538      	push	{r3, r4, r5, lr}
 8007dd6:	4d07      	ldr	r5, [pc, #28]	@ (8007df4 <_read_r+0x20>)
 8007dd8:	4604      	mov	r4, r0
 8007dda:	4608      	mov	r0, r1
 8007ddc:	4611      	mov	r1, r2
 8007dde:	2200      	movs	r2, #0
 8007de0:	602a      	str	r2, [r5, #0]
 8007de2:	461a      	mov	r2, r3
 8007de4:	f7fb fb97 	bl	8003516 <_read>
 8007de8:	1c43      	adds	r3, r0, #1
 8007dea:	d102      	bne.n	8007df2 <_read_r+0x1e>
 8007dec:	682b      	ldr	r3, [r5, #0]
 8007dee:	b103      	cbz	r3, 8007df2 <_read_r+0x1e>
 8007df0:	6023      	str	r3, [r4, #0]
 8007df2:	bd38      	pop	{r3, r4, r5, pc}
 8007df4:	20025d8c 	.word	0x20025d8c

08007df8 <_sbrk_r>:
 8007df8:	b538      	push	{r3, r4, r5, lr}
 8007dfa:	4d06      	ldr	r5, [pc, #24]	@ (8007e14 <_sbrk_r+0x1c>)
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	4604      	mov	r4, r0
 8007e00:	4608      	mov	r0, r1
 8007e02:	602b      	str	r3, [r5, #0]
 8007e04:	f7fb fbf4 	bl	80035f0 <_sbrk>
 8007e08:	1c43      	adds	r3, r0, #1
 8007e0a:	d102      	bne.n	8007e12 <_sbrk_r+0x1a>
 8007e0c:	682b      	ldr	r3, [r5, #0]
 8007e0e:	b103      	cbz	r3, 8007e12 <_sbrk_r+0x1a>
 8007e10:	6023      	str	r3, [r4, #0]
 8007e12:	bd38      	pop	{r3, r4, r5, pc}
 8007e14:	20025d8c 	.word	0x20025d8c

08007e18 <_write_r>:
 8007e18:	b538      	push	{r3, r4, r5, lr}
 8007e1a:	4d07      	ldr	r5, [pc, #28]	@ (8007e38 <_write_r+0x20>)
 8007e1c:	4604      	mov	r4, r0
 8007e1e:	4608      	mov	r0, r1
 8007e20:	4611      	mov	r1, r2
 8007e22:	2200      	movs	r2, #0
 8007e24:	602a      	str	r2, [r5, #0]
 8007e26:	461a      	mov	r2, r3
 8007e28:	f7fb fb92 	bl	8003550 <_write>
 8007e2c:	1c43      	adds	r3, r0, #1
 8007e2e:	d102      	bne.n	8007e36 <_write_r+0x1e>
 8007e30:	682b      	ldr	r3, [r5, #0]
 8007e32:	b103      	cbz	r3, 8007e36 <_write_r+0x1e>
 8007e34:	6023      	str	r3, [r4, #0]
 8007e36:	bd38      	pop	{r3, r4, r5, pc}
 8007e38:	20025d8c 	.word	0x20025d8c

08007e3c <_close_r>:
 8007e3c:	b538      	push	{r3, r4, r5, lr}
 8007e3e:	4d06      	ldr	r5, [pc, #24]	@ (8007e58 <_close_r+0x1c>)
 8007e40:	2300      	movs	r3, #0
 8007e42:	4604      	mov	r4, r0
 8007e44:	4608      	mov	r0, r1
 8007e46:	602b      	str	r3, [r5, #0]
 8007e48:	f7fb fb9e 	bl	8003588 <_close>
 8007e4c:	1c43      	adds	r3, r0, #1
 8007e4e:	d102      	bne.n	8007e56 <_close_r+0x1a>
 8007e50:	682b      	ldr	r3, [r5, #0]
 8007e52:	b103      	cbz	r3, 8007e56 <_close_r+0x1a>
 8007e54:	6023      	str	r3, [r4, #0]
 8007e56:	bd38      	pop	{r3, r4, r5, pc}
 8007e58:	20025d8c 	.word	0x20025d8c

08007e5c <_fstat_r>:
 8007e5c:	b538      	push	{r3, r4, r5, lr}
 8007e5e:	4d07      	ldr	r5, [pc, #28]	@ (8007e7c <_fstat_r+0x20>)
 8007e60:	2300      	movs	r3, #0
 8007e62:	4604      	mov	r4, r0
 8007e64:	4608      	mov	r0, r1
 8007e66:	4611      	mov	r1, r2
 8007e68:	602b      	str	r3, [r5, #0]
 8007e6a:	f7fb fb99 	bl	80035a0 <_fstat>
 8007e6e:	1c43      	adds	r3, r0, #1
 8007e70:	d102      	bne.n	8007e78 <_fstat_r+0x1c>
 8007e72:	682b      	ldr	r3, [r5, #0]
 8007e74:	b103      	cbz	r3, 8007e78 <_fstat_r+0x1c>
 8007e76:	6023      	str	r3, [r4, #0]
 8007e78:	bd38      	pop	{r3, r4, r5, pc}
 8007e7a:	bf00      	nop
 8007e7c:	20025d8c 	.word	0x20025d8c

08007e80 <memcpy>:
 8007e80:	440a      	add	r2, r1
 8007e82:	4291      	cmp	r1, r2
 8007e84:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007e88:	d100      	bne.n	8007e8c <memcpy+0xc>
 8007e8a:	4770      	bx	lr
 8007e8c:	b510      	push	{r4, lr}
 8007e8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e96:	4291      	cmp	r1, r2
 8007e98:	d1f9      	bne.n	8007e8e <memcpy+0xe>
 8007e9a:	bd10      	pop	{r4, pc}

08007e9c <_free_r>:
 8007e9c:	b538      	push	{r3, r4, r5, lr}
 8007e9e:	4605      	mov	r5, r0
 8007ea0:	2900      	cmp	r1, #0
 8007ea2:	d041      	beq.n	8007f28 <_free_r+0x8c>
 8007ea4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ea8:	1f0c      	subs	r4, r1, #4
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	bfb8      	it	lt
 8007eae:	18e4      	addlt	r4, r4, r3
 8007eb0:	f7ff fde0 	bl	8007a74 <__malloc_lock>
 8007eb4:	4a1d      	ldr	r2, [pc, #116]	@ (8007f2c <_free_r+0x90>)
 8007eb6:	6813      	ldr	r3, [r2, #0]
 8007eb8:	b933      	cbnz	r3, 8007ec8 <_free_r+0x2c>
 8007eba:	6063      	str	r3, [r4, #4]
 8007ebc:	6014      	str	r4, [r2, #0]
 8007ebe:	4628      	mov	r0, r5
 8007ec0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ec4:	f7ff bddc 	b.w	8007a80 <__malloc_unlock>
 8007ec8:	42a3      	cmp	r3, r4
 8007eca:	d908      	bls.n	8007ede <_free_r+0x42>
 8007ecc:	6820      	ldr	r0, [r4, #0]
 8007ece:	1821      	adds	r1, r4, r0
 8007ed0:	428b      	cmp	r3, r1
 8007ed2:	bf01      	itttt	eq
 8007ed4:	6819      	ldreq	r1, [r3, #0]
 8007ed6:	685b      	ldreq	r3, [r3, #4]
 8007ed8:	1809      	addeq	r1, r1, r0
 8007eda:	6021      	streq	r1, [r4, #0]
 8007edc:	e7ed      	b.n	8007eba <_free_r+0x1e>
 8007ede:	461a      	mov	r2, r3
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	b10b      	cbz	r3, 8007ee8 <_free_r+0x4c>
 8007ee4:	42a3      	cmp	r3, r4
 8007ee6:	d9fa      	bls.n	8007ede <_free_r+0x42>
 8007ee8:	6811      	ldr	r1, [r2, #0]
 8007eea:	1850      	adds	r0, r2, r1
 8007eec:	42a0      	cmp	r0, r4
 8007eee:	d10b      	bne.n	8007f08 <_free_r+0x6c>
 8007ef0:	6820      	ldr	r0, [r4, #0]
 8007ef2:	4401      	add	r1, r0
 8007ef4:	1850      	adds	r0, r2, r1
 8007ef6:	4283      	cmp	r3, r0
 8007ef8:	6011      	str	r1, [r2, #0]
 8007efa:	d1e0      	bne.n	8007ebe <_free_r+0x22>
 8007efc:	6818      	ldr	r0, [r3, #0]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	6053      	str	r3, [r2, #4]
 8007f02:	4408      	add	r0, r1
 8007f04:	6010      	str	r0, [r2, #0]
 8007f06:	e7da      	b.n	8007ebe <_free_r+0x22>
 8007f08:	d902      	bls.n	8007f10 <_free_r+0x74>
 8007f0a:	230c      	movs	r3, #12
 8007f0c:	602b      	str	r3, [r5, #0]
 8007f0e:	e7d6      	b.n	8007ebe <_free_r+0x22>
 8007f10:	6820      	ldr	r0, [r4, #0]
 8007f12:	1821      	adds	r1, r4, r0
 8007f14:	428b      	cmp	r3, r1
 8007f16:	bf04      	itt	eq
 8007f18:	6819      	ldreq	r1, [r3, #0]
 8007f1a:	685b      	ldreq	r3, [r3, #4]
 8007f1c:	6063      	str	r3, [r4, #4]
 8007f1e:	bf04      	itt	eq
 8007f20:	1809      	addeq	r1, r1, r0
 8007f22:	6021      	streq	r1, [r4, #0]
 8007f24:	6054      	str	r4, [r2, #4]
 8007f26:	e7ca      	b.n	8007ebe <_free_r+0x22>
 8007f28:	bd38      	pop	{r3, r4, r5, pc}
 8007f2a:	bf00      	nop
 8007f2c:	20025d88 	.word	0x20025d88

08007f30 <_malloc_usable_size_r>:
 8007f30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f34:	1f18      	subs	r0, r3, #4
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	bfbc      	itt	lt
 8007f3a:	580b      	ldrlt	r3, [r1, r0]
 8007f3c:	18c0      	addlt	r0, r0, r3
 8007f3e:	4770      	bx	lr

08007f40 <_init>:
 8007f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f42:	bf00      	nop
 8007f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f46:	bc08      	pop	{r3}
 8007f48:	469e      	mov	lr, r3
 8007f4a:	4770      	bx	lr

08007f4c <_fini>:
 8007f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f4e:	bf00      	nop
 8007f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f52:	bc08      	pop	{r3}
 8007f54:	469e      	mov	lr, r3
 8007f56:	4770      	bx	lr

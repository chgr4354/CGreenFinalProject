
CGreenFinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008104  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d5c  080082b4  080082b4  000092b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a010  0800a010  0000c080  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a010  0800a010  0000b010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a018  0800a018  0000c080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a018  0800a018  0000b018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a01c  0800a01c  0000b01c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800a020  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c080  2**0
                  CONTENTS
 10 .bss          00025d10  20000080  20000080  0000c080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025d90  20025d90  0000c080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c080  2**0
                  CONTENTS, READONLY
 13 .debug_info   000140f9  00000000  00000000  0000c0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003317  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001478  00000000  00000000  000234c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fc3  00000000  00000000  00024938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027361  00000000  00000000  000258fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001841b  00000000  00000000  0004cc5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e35d0  00000000  00000000  00065077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00148647  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005edc  00000000  00000000  0014868c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008f  00000000  00000000  0014e568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800829c 	.word	0x0800829c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	0800829c 	.word	0x0800829c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <ApplicationInit>:

// External Handles
extern RNG_HandleTypeDef hrng; // Need RNG handle for AI

void ApplicationInit(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80005d0:	f002 fff4 	bl	80035bc <initialise_monitor_handles>
    LTCD__Init();
 80005d4:	f001 f8ec 	bl	80017b0 <LTCD__Init>
    LTCD_Layer_Init(0);
 80005d8:	2000      	movs	r0, #0
 80005da:	f001 f8a9 	bl	8001730 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 80005de:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80005e2:	2000      	movs	r0, #0
 80005e4:	f001 f9fc 	bl	80019e0 <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80005e8:	f001 fad2 	bl	8001b90 <InitializeLCDTouch>

	// This is the orientation for the board to be directly up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005ec:	4b05      	ldr	r3, [pc, #20]	@ (8000604 <ApplicationInit+0x38>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	719a      	strb	r2, [r3, #6]

	Button_Init();
 80005f2:	f000 ff97 	bl	8001524 <Button_Init>

    currentAppState = APP_STATE_MENU;
 80005f6:	4b04      	ldr	r3, [pc, #16]	@ (8000608 <ApplicationInit+0x3c>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	701a      	strb	r2, [r3, #0]
    drawMenuScreen();
 80005fc:	f000 f894 	bl	8000728 <drawMenuScreen>
    //printf("Initial Menu Drawn. Entering Scheduler Loop.\n");
    //printf("----------------------\n");

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}
 8000604:	200000a0 	.word	0x200000a0
 8000608:	2000009c 	.word	0x2000009c

0800060c <LCD_Draw_Rect>:

// Simple rectangle drawing
void LCD_Draw_Rect(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color) {
 800060c:	b590      	push	{r4, r7, lr}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	4604      	mov	r4, r0
 8000614:	4608      	mov	r0, r1
 8000616:	4611      	mov	r1, r2
 8000618:	461a      	mov	r2, r3
 800061a:	4623      	mov	r3, r4
 800061c:	80fb      	strh	r3, [r7, #6]
 800061e:	4603      	mov	r3, r0
 8000620:	80bb      	strh	r3, [r7, #4]
 8000622:	460b      	mov	r3, r1
 8000624:	807b      	strh	r3, [r7, #2]
 8000626:	4613      	mov	r3, r2
 8000628:	803b      	strh	r3, [r7, #0]
    // Draw horizontal lines
    for (uint16_t i = 0; i < width; i++) {
 800062a:	2300      	movs	r3, #0
 800062c:	81fb      	strh	r3, [r7, #14]
 800062e:	e019      	b.n	8000664 <LCD_Draw_Rect+0x58>
        LCD_Draw_Pixel(x + i, y, color);
 8000630:	88fa      	ldrh	r2, [r7, #6]
 8000632:	89fb      	ldrh	r3, [r7, #14]
 8000634:	4413      	add	r3, r2
 8000636:	b29b      	uxth	r3, r3
 8000638:	8c3a      	ldrh	r2, [r7, #32]
 800063a:	88b9      	ldrh	r1, [r7, #4]
 800063c:	4618      	mov	r0, r3
 800063e:	f001 f915 	bl	800186c <LCD_Draw_Pixel>
        LCD_Draw_Pixel(x + i, y + height - 1, color);
 8000642:	88fa      	ldrh	r2, [r7, #6]
 8000644:	89fb      	ldrh	r3, [r7, #14]
 8000646:	4413      	add	r3, r2
 8000648:	b298      	uxth	r0, r3
 800064a:	88ba      	ldrh	r2, [r7, #4]
 800064c:	883b      	ldrh	r3, [r7, #0]
 800064e:	4413      	add	r3, r2
 8000650:	b29b      	uxth	r3, r3
 8000652:	3b01      	subs	r3, #1
 8000654:	b29b      	uxth	r3, r3
 8000656:	8c3a      	ldrh	r2, [r7, #32]
 8000658:	4619      	mov	r1, r3
 800065a:	f001 f907 	bl	800186c <LCD_Draw_Pixel>
    for (uint16_t i = 0; i < width; i++) {
 800065e:	89fb      	ldrh	r3, [r7, #14]
 8000660:	3301      	adds	r3, #1
 8000662:	81fb      	strh	r3, [r7, #14]
 8000664:	89fa      	ldrh	r2, [r7, #14]
 8000666:	887b      	ldrh	r3, [r7, #2]
 8000668:	429a      	cmp	r2, r3
 800066a:	d3e1      	bcc.n	8000630 <LCD_Draw_Rect+0x24>
    }
    // Draw vertical lines
    for (uint16_t i = 1; i < height - 1; i++) { // Avoid drawing corners twice
 800066c:	2301      	movs	r3, #1
 800066e:	81bb      	strh	r3, [r7, #12]
 8000670:	e019      	b.n	80006a6 <LCD_Draw_Rect+0x9a>
        LCD_Draw_Pixel(x, y + i, color);
 8000672:	88ba      	ldrh	r2, [r7, #4]
 8000674:	89bb      	ldrh	r3, [r7, #12]
 8000676:	4413      	add	r3, r2
 8000678:	b299      	uxth	r1, r3
 800067a:	8c3a      	ldrh	r2, [r7, #32]
 800067c:	88fb      	ldrh	r3, [r7, #6]
 800067e:	4618      	mov	r0, r3
 8000680:	f001 f8f4 	bl	800186c <LCD_Draw_Pixel>
        LCD_Draw_Pixel(x + width - 1, y + i, color);
 8000684:	88fa      	ldrh	r2, [r7, #6]
 8000686:	887b      	ldrh	r3, [r7, #2]
 8000688:	4413      	add	r3, r2
 800068a:	b29b      	uxth	r3, r3
 800068c:	3b01      	subs	r3, #1
 800068e:	b298      	uxth	r0, r3
 8000690:	88ba      	ldrh	r2, [r7, #4]
 8000692:	89bb      	ldrh	r3, [r7, #12]
 8000694:	4413      	add	r3, r2
 8000696:	b29b      	uxth	r3, r3
 8000698:	8c3a      	ldrh	r2, [r7, #32]
 800069a:	4619      	mov	r1, r3
 800069c:	f001 f8e6 	bl	800186c <LCD_Draw_Pixel>
    for (uint16_t i = 1; i < height - 1; i++) { // Avoid drawing corners twice
 80006a0:	89bb      	ldrh	r3, [r7, #12]
 80006a2:	3301      	adds	r3, #1
 80006a4:	81bb      	strh	r3, [r7, #12]
 80006a6:	89ba      	ldrh	r2, [r7, #12]
 80006a8:	883b      	ldrh	r3, [r7, #0]
 80006aa:	3b01      	subs	r3, #1
 80006ac:	429a      	cmp	r2, r3
 80006ae:	dbe0      	blt.n	8000672 <LCD_Draw_Rect+0x66>
    }
}
 80006b0:	bf00      	nop
 80006b2:	bf00      	nop
 80006b4:	3714      	adds	r7, #20
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd90      	pop	{r4, r7, pc}

080006ba <LCD_DisplayString>:

// Simple string display
void LCD_DisplayString(uint16_t Xpos, uint16_t Ypos, uint8_t *ptr, FONT_t* font, uint16_t textColor, uint16_t bgColor, bool opaque) {
 80006ba:	b580      	push	{r7, lr}
 80006bc:	b084      	sub	sp, #16
 80006be:	af00      	add	r7, sp, #0
 80006c0:	60ba      	str	r2, [r7, #8]
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	4603      	mov	r3, r0
 80006c6:	81fb      	strh	r3, [r7, #14]
 80006c8:	460b      	mov	r3, r1
 80006ca:	81bb      	strh	r3, [r7, #12]
    LCD_SetFont(font);
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	f001 f9b9 	bl	8001a44 <LCD_SetFont>
    LCD_SetTextColor(textColor);
 80006d2:	8b3b      	ldrh	r3, [r7, #24]
 80006d4:	4618      	mov	r0, r3
 80006d6:	f001 f9a5 	bl	8001a24 <LCD_SetTextColor>

    while (*ptr != '\0') {
 80006da:	e01c      	b.n	8000716 <LCD_DisplayString+0x5c>
        // Add bounds checking
        if (Xpos >= LCD_PIXEL_WIDTH - font->Width || Ypos >= LCD_PIXEL_HEIGHT - font->Height) {
 80006dc:	89fa      	ldrh	r2, [r7, #14]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	889b      	ldrh	r3, [r3, #4]
 80006e2:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80006e6:	429a      	cmp	r2, r3
 80006e8:	da19      	bge.n	800071e <LCD_DisplayString+0x64>
 80006ea:	89ba      	ldrh	r2, [r7, #12]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	88db      	ldrh	r3, [r3, #6]
 80006f0:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 80006f4:	429a      	cmp	r2, r3
 80006f6:	da12      	bge.n	800071e <LCD_DisplayString+0x64>
            break;
        }
        LCD_DisplayChar(Xpos, Ypos, *ptr);
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	781a      	ldrb	r2, [r3, #0]
 80006fc:	89b9      	ldrh	r1, [r7, #12]
 80006fe:	89fb      	ldrh	r3, [r7, #14]
 8000700:	4618      	mov	r0, r3
 8000702:	f001 fa1d 	bl	8001b40 <LCD_DisplayChar>
        Xpos += font->Width;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	889a      	ldrh	r2, [r3, #4]
 800070a:	89fb      	ldrh	r3, [r7, #14]
 800070c:	4413      	add	r3, r2
 800070e:	81fb      	strh	r3, [r7, #14]
        ptr++;
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	3301      	adds	r3, #1
 8000714:	60bb      	str	r3, [r7, #8]
    while (*ptr != '\0') {
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d1de      	bne.n	80006dc <LCD_DisplayString+0x22>
    }
}
 800071e:	bf00      	nop
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
	...

08000728 <drawMenuScreen>:

void drawMenuScreen() {
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af04      	add	r7, sp, #16

		LCD_Clear(0, LCD_COLOR_BLUE); // Background
 800072e:	211f      	movs	r1, #31
 8000730:	2000      	movs	r0, #0
 8000732:	f001 f955 	bl	80019e0 <LCD_Clear>

		// --- Draw Button 1 (1 Player) ---
		LCD_Draw_Rect(BUTTON1_X, BUTTON1_Y, BUTTON_WIDTH, BUTTON_HEIGHT, LCD_COLOR_YELLOW); // Outline
 8000736:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800073a:	9300      	str	r3, [sp, #0]
 800073c:	2332      	movs	r3, #50	@ 0x32
 800073e:	2264      	movs	r2, #100	@ 0x64
 8000740:	2187      	movs	r1, #135	@ 0x87
 8000742:	200a      	movs	r0, #10
 8000744:	f7ff ff62 	bl	800060c <LCD_Draw_Rect>
		LCD_DisplayString(BUTTON1_X + 5, BUTTON1_Y + (BUTTON_HEIGHT - Font16x24.Height)/2, (uint8_t*)"1P", &Font16x24, LCD_COLOR_WHITE, LCD_COLOR_BLUE, false);
 8000748:	4b29      	ldr	r3, [pc, #164]	@ (80007f0 <drawMenuScreen+0xc8>)
 800074a:	88db      	ldrh	r3, [r3, #6]
 800074c:	f1c3 0332 	rsb	r3, r3, #50	@ 0x32
 8000750:	0fda      	lsrs	r2, r3, #31
 8000752:	4413      	add	r3, r2
 8000754:	105b      	asrs	r3, r3, #1
 8000756:	b29b      	uxth	r3, r3
 8000758:	3387      	adds	r3, #135	@ 0x87
 800075a:	b299      	uxth	r1, r3
 800075c:	2300      	movs	r3, #0
 800075e:	9302      	str	r3, [sp, #8]
 8000760:	231f      	movs	r3, #31
 8000762:	9301      	str	r3, [sp, #4]
 8000764:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000768:	9300      	str	r3, [sp, #0]
 800076a:	4b21      	ldr	r3, [pc, #132]	@ (80007f0 <drawMenuScreen+0xc8>)
 800076c:	4a21      	ldr	r2, [pc, #132]	@ (80007f4 <drawMenuScreen+0xcc>)
 800076e:	200f      	movs	r0, #15
 8000770:	f7ff ffa3 	bl	80006ba <LCD_DisplayString>

		// --- Draw Button 2 (2 Player) ---
		LCD_Draw_Rect(BUTTON2_X, BUTTON2_Y, BUTTON_WIDTH, BUTTON_HEIGHT, LCD_COLOR_YELLOW); // Outline
 8000774:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000778:	9300      	str	r3, [sp, #0]
 800077a:	2332      	movs	r3, #50	@ 0x32
 800077c:	2264      	movs	r2, #100	@ 0x64
 800077e:	2187      	movs	r1, #135	@ 0x87
 8000780:	2082      	movs	r0, #130	@ 0x82
 8000782:	f7ff ff43 	bl	800060c <LCD_Draw_Rect>
		LCD_DisplayString(BUTTON2_X + 5, BUTTON2_Y + (BUTTON_HEIGHT - Font16x24.Height)/2, (uint8_t*)"2P", &Font16x24, LCD_COLOR_WHITE, LCD_COLOR_BLUE, false);
 8000786:	4b1a      	ldr	r3, [pc, #104]	@ (80007f0 <drawMenuScreen+0xc8>)
 8000788:	88db      	ldrh	r3, [r3, #6]
 800078a:	f1c3 0332 	rsb	r3, r3, #50	@ 0x32
 800078e:	0fda      	lsrs	r2, r3, #31
 8000790:	4413      	add	r3, r2
 8000792:	105b      	asrs	r3, r3, #1
 8000794:	b29b      	uxth	r3, r3
 8000796:	3387      	adds	r3, #135	@ 0x87
 8000798:	b299      	uxth	r1, r3
 800079a:	2300      	movs	r3, #0
 800079c:	9302      	str	r3, [sp, #8]
 800079e:	231f      	movs	r3, #31
 80007a0:	9301      	str	r3, [sp, #4]
 80007a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007a6:	9300      	str	r3, [sp, #0]
 80007a8:	4b11      	ldr	r3, [pc, #68]	@ (80007f0 <drawMenuScreen+0xc8>)
 80007aa:	4a13      	ldr	r2, [pc, #76]	@ (80007f8 <drawMenuScreen+0xd0>)
 80007ac:	2087      	movs	r0, #135	@ 0x87
 80007ae:	f7ff ff84 	bl	80006ba <LCD_DisplayString>

		// --- Title ---
		LCD_DisplayString((LCD_PIXEL_WIDTH - 12*Font16x24.Width)/2, 30, (uint8_t*)"Connect Four", &Font16x24, LCD_COLOR_YELLOW, LCD_COLOR_BLUE, false); // Centered title
 80007b2:	4b0f      	ldr	r3, [pc, #60]	@ (80007f0 <drawMenuScreen+0xc8>)
 80007b4:	889b      	ldrh	r3, [r3, #4]
 80007b6:	461a      	mov	r2, r3
 80007b8:	4613      	mov	r3, r2
 80007ba:	0092      	lsls	r2, r2, #2
 80007bc:	1a9b      	subs	r3, r3, r2
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	33f0      	adds	r3, #240	@ 0xf0
 80007c2:	0fda      	lsrs	r2, r3, #31
 80007c4:	4413      	add	r3, r2
 80007c6:	105b      	asrs	r3, r3, #1
 80007c8:	b298      	uxth	r0, r3
 80007ca:	2300      	movs	r3, #0
 80007cc:	9302      	str	r3, [sp, #8]
 80007ce:	231f      	movs	r3, #31
 80007d0:	9301      	str	r3, [sp, #4]
 80007d2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80007d6:	9300      	str	r3, [sp, #0]
 80007d8:	4b05      	ldr	r3, [pc, #20]	@ (80007f0 <drawMenuScreen+0xc8>)
 80007da:	4a08      	ldr	r2, [pc, #32]	@ (80007fc <drawMenuScreen+0xd4>)
 80007dc:	211e      	movs	r1, #30
 80007de:	f7ff ff6c 	bl	80006ba <LCD_DisplayString>

		addSchedulerEvent(TOUCH_POLLING_EVENT);
 80007e2:	2001      	movs	r0, #1
 80007e4:	f001 f9f8 	bl	8001bd8 <addSchedulerEvent>
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000004 	.word	0x20000004
 80007f4:	080082b4 	.word	0x080082b4
 80007f8:	080082b8 	.word	0x080082b8
 80007fc:	080082bc 	.word	0x080082bc

08000800 <getSlotColor>:


uint16_t getSlotColor(SlotState_t state) {
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
    switch(state) {
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	2b01      	cmp	r3, #1
 800080e:	d002      	beq.n	8000816 <getSlotColor+0x16>
 8000810:	2b02      	cmp	r3, #2
 8000812:	d003      	beq.n	800081c <getSlotColor+0x1c>
 8000814:	e005      	b.n	8000822 <getSlotColor+0x22>
        case SLOT_PLAYER1:
            return PLAYER1_COLOR;
 8000816:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800081a:	e004      	b.n	8000826 <getSlotColor+0x26>
        case SLOT_PLAYER2:
            return PLAYER2_COLOR;
 800081c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000820:	e001      	b.n	8000826 <getSlotColor+0x26>
        case SLOT_EMPTY:
        default:
            return EMPTY_SLOT_COLOR;
 8000822:	f64f 73ff 	movw	r3, #65535	@ 0xffff
    }
}
 8000826:	4618      	mov	r0, r3
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
	...

08000834 <initializeGameBoard>:

void initializeGameBoard() {
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
    //printf("Initializing Game Board...\n");
    for (int r = 0; r < BOARD_ROWS; r++) {
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	e015      	b.n	800086c <initializeGameBoard+0x38>
        for (int c = 0; c < BOARD_COLS; c++) {
 8000840:	2300      	movs	r3, #0
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	e00c      	b.n	8000860 <initializeGameBoard+0x2c>
            gameBoard[r][c] = SLOT_EMPTY;
 8000846:	490e      	ldr	r1, [pc, #56]	@ (8000880 <initializeGameBoard+0x4c>)
 8000848:	687a      	ldr	r2, [r7, #4]
 800084a:	4613      	mov	r3, r2
 800084c:	00db      	lsls	r3, r3, #3
 800084e:	1a9b      	subs	r3, r3, r2
 8000850:	18ca      	adds	r2, r1, r3
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	4413      	add	r3, r2
 8000856:	2200      	movs	r2, #0
 8000858:	701a      	strb	r2, [r3, #0]
        for (int c = 0; c < BOARD_COLS; c++) {
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	3301      	adds	r3, #1
 800085e:	603b      	str	r3, [r7, #0]
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	2b06      	cmp	r3, #6
 8000864:	ddef      	ble.n	8000846 <initializeGameBoard+0x12>
    for (int r = 0; r < BOARD_ROWS; r++) {
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	3301      	adds	r3, #1
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2b05      	cmp	r3, #5
 8000870:	dde6      	ble.n	8000840 <initializeGameBoard+0xc>
        }
    }
}
 8000872:	bf00      	nop
 8000874:	bf00      	nop
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	200000a8 	.word	0x200000a8

08000884 <drawGameBoard>:

void drawGameBoard() {
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af02      	add	r7, sp, #8
    //printf("Drawing Game Board...\n");
    // 1. Clear the screen
    LCD_Clear(0, BACKGROUND_COLOR);
 800088a:	2100      	movs	r1, #0
 800088c:	2000      	movs	r0, #0
 800088e:	f001 f8a7 	bl	80019e0 <LCD_Clear>

    // 2. Draw the main board structure (the blue rectangle)
    LCD_Fill_Rect(BOARD_X_OFFSET, BOARD_Y_OFFSET, BOARD_DRAW_WIDTH, BOARD_DRAW_HEIGHT, BOARD_COLOR);
 8000892:	231f      	movs	r3, #31
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	23c4      	movs	r3, #196	@ 0xc4
 8000898:	22e4      	movs	r2, #228	@ 0xe4
 800089a:	2132      	movs	r1, #50	@ 0x32
 800089c:	2006      	movs	r0, #6
 800089e:	f001 f856 	bl	800194e <LCD_Fill_Rect>

    // 3. Draw the slots based on the gameBoard state
    for (int r = 0; r < BOARD_ROWS; r++) {
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	e02b      	b.n	8000900 <drawGameBoard+0x7c>
        for (int c = 0; c < BOARD_COLS; c++) {
 80008a8:	2300      	movs	r3, #0
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	e022      	b.n	80008f4 <drawGameBoard+0x70>
            // Calculate the center coordinates of the circle for slot (r, c)
            uint16_t centerX = BOARD_X_OFFSET + BOARD_SPACING + CIRCLE_RADIUS + c * (CIRCLE_DIAMETER + BOARD_SPACING);
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	015b      	lsls	r3, r3, #5
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	3318      	adds	r3, #24
 80008b8:	80fb      	strh	r3, [r7, #6]
            uint16_t centerY = BOARD_Y_OFFSET + BOARD_SPACING + CIRCLE_RADIUS + r * (CIRCLE_DIAMETER + BOARD_SPACING);
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	b29b      	uxth	r3, r3
 80008be:	015b      	lsls	r3, r3, #5
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	3344      	adds	r3, #68	@ 0x44
 80008c4:	80bb      	strh	r3, [r7, #4]

            // Get the color for the current slot state
            uint16_t slotColor = getSlotColor(gameBoard[r][c]);
 80008c6:	4912      	ldr	r1, [pc, #72]	@ (8000910 <drawGameBoard+0x8c>)
 80008c8:	68fa      	ldr	r2, [r7, #12]
 80008ca:	4613      	mov	r3, r2
 80008cc:	00db      	lsls	r3, r3, #3
 80008ce:	1a9b      	subs	r3, r3, r2
 80008d0:	18ca      	adds	r2, r1, r3
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	4413      	add	r3, r2
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff ff91 	bl	8000800 <getSlotColor>
 80008de:	4603      	mov	r3, r0
 80008e0:	807b      	strh	r3, [r7, #2]

            // Draw the filled circle representing the slot/coin
            LCD_Draw_Circle_Fill(centerX, centerY, CIRCLE_RADIUS, slotColor);
 80008e2:	887b      	ldrh	r3, [r7, #2]
 80008e4:	88b9      	ldrh	r1, [r7, #4]
 80008e6:	88f8      	ldrh	r0, [r7, #6]
 80008e8:	220e      	movs	r2, #14
 80008ea:	f000 ffdd 	bl	80018a8 <LCD_Draw_Circle_Fill>
        for (int c = 0; c < BOARD_COLS; c++) {
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	3301      	adds	r3, #1
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	2b06      	cmp	r3, #6
 80008f8:	ddd9      	ble.n	80008ae <drawGameBoard+0x2a>
    for (int r = 0; r < BOARD_ROWS; r++) {
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	3301      	adds	r3, #1
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	2b05      	cmp	r3, #5
 8000904:	ddd0      	ble.n	80008a8 <drawGameBoard+0x24>
        }
    }
    //printf("Game Board Drawn.\n");
}
 8000906:	bf00      	nop
 8000908:	bf00      	nop
 800090a:	3710      	adds	r7, #16
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	200000a8 	.word	0x200000a8

08000914 <drawGameOverScreen>:

void drawGameOverScreen() {
 8000914:	b580      	push	{r7, lr}
 8000916:	b092      	sub	sp, #72	@ 0x48
 8000918:	af04      	add	r7, sp, #16
    LCD_Clear(0, BACKGROUND_COLOR); // Background
 800091a:	2100      	movs	r1, #0
 800091c:	2000      	movs	r0, #0
 800091e:	f001 f85f 	bl	80019e0 <LCD_Clear>
    char message[40];
    uint16_t text_color;
    uint16_t text_x, text_y; // Variables for calculated positions

    // --- Display Winner/Tie Message ---
    LCD_SetFont(&Font16x24);
 8000922:	4871      	ldr	r0, [pc, #452]	@ (8000ae8 <drawGameOverScreen+0x1d4>)
 8000924:	f001 f88e 	bl	8001a44 <LCD_SetFont>
    if (roundWinner == SLOT_PLAYER1) {
 8000928:	4b70      	ldr	r3, [pc, #448]	@ (8000aec <drawGameOverScreen+0x1d8>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b01      	cmp	r3, #1
 800092e:	d108      	bne.n	8000942 <drawGameOverScreen+0x2e>
        text_color = PLAYER1_COLOR; // Red
 8000930:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000934:	86fb      	strh	r3, [r7, #54]	@ 0x36
        sprintf(message, "Player 1 Wins!");
 8000936:	463b      	mov	r3, r7
 8000938:	496d      	ldr	r1, [pc, #436]	@ (8000af0 <drawGameOverScreen+0x1dc>)
 800093a:	4618      	mov	r0, r3
 800093c:	f006 fb4c 	bl	8006fd8 <siprintf>
 8000940:	e01b      	b.n	800097a <drawGameOverScreen+0x66>
    } else if (roundWinner == SLOT_PLAYER2) {
 8000942:	4b6a      	ldr	r3, [pc, #424]	@ (8000aec <drawGameOverScreen+0x1d8>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	2b02      	cmp	r3, #2
 8000948:	d10f      	bne.n	800096a <drawGameOverScreen+0x56>
        text_color = PLAYER2_COLOR; // Yellow
 800094a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800094e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        sprintf(message, "%s Wins!", isOnePlayerMode ? "AI" : "Player 2");
 8000950:	4b68      	ldr	r3, [pc, #416]	@ (8000af4 <drawGameOverScreen+0x1e0>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <drawGameOverScreen+0x48>
 8000958:	4a67      	ldr	r2, [pc, #412]	@ (8000af8 <drawGameOverScreen+0x1e4>)
 800095a:	e000      	b.n	800095e <drawGameOverScreen+0x4a>
 800095c:	4a67      	ldr	r2, [pc, #412]	@ (8000afc <drawGameOverScreen+0x1e8>)
 800095e:	463b      	mov	r3, r7
 8000960:	4967      	ldr	r1, [pc, #412]	@ (8000b00 <drawGameOverScreen+0x1ec>)
 8000962:	4618      	mov	r0, r3
 8000964:	f006 fb38 	bl	8006fd8 <siprintf>
 8000968:	e007      	b.n	800097a <drawGameOverScreen+0x66>
    } else {
        text_color = LCD_COLOR_WHITE; // White for Tie
 800096a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800096e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        sprintf(message, "It's a Tie!");
 8000970:	463b      	mov	r3, r7
 8000972:	4964      	ldr	r1, [pc, #400]	@ (8000b04 <drawGameOverScreen+0x1f0>)
 8000974:	4618      	mov	r0, r3
 8000976:	f006 fb2f 	bl	8006fd8 <siprintf>
    }
    LCD_DisplayString((LCD_PIXEL_WIDTH - strlen(message) * Font16x24.Width) / 2, 60, (uint8_t*)message, &Font16x24, text_color, BACKGROUND_COLOR, false);
 800097a:	463b      	mov	r3, r7
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff fc37 	bl	80001f0 <strlen>
 8000982:	4603      	mov	r3, r0
 8000984:	4a58      	ldr	r2, [pc, #352]	@ (8000ae8 <drawGameOverScreen+0x1d4>)
 8000986:	8892      	ldrh	r2, [r2, #4]
 8000988:	fb02 f303 	mul.w	r3, r2, r3
 800098c:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000990:	085b      	lsrs	r3, r3, #1
 8000992:	b298      	uxth	r0, r3
 8000994:	463a      	mov	r2, r7
 8000996:	2300      	movs	r3, #0
 8000998:	9302      	str	r3, [sp, #8]
 800099a:	2300      	movs	r3, #0
 800099c:	9301      	str	r3, [sp, #4]
 800099e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80009a0:	9300      	str	r3, [sp, #0]
 80009a2:	4b51      	ldr	r3, [pc, #324]	@ (8000ae8 <drawGameOverScreen+0x1d4>)
 80009a4:	213c      	movs	r1, #60	@ 0x3c
 80009a6:	f7ff fe88 	bl	80006ba <LCD_DisplayString>



    // --- Display Scores ---
    LCD_SetFont(&Font12x12);
 80009aa:	4857      	ldr	r0, [pc, #348]	@ (8000b08 <drawGameOverScreen+0x1f4>)
 80009ac:	f001 f84a 	bl	8001a44 <LCD_SetFont>
    text_color = LCD_COLOR_WHITE;
 80009b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80009b4:	86fb      	strh	r3, [r7, #54]	@ 0x36

    sprintf(message, "P1:(%lu) - P2:(%lu)", player1Score, player2Score);
 80009b6:	4b55      	ldr	r3, [pc, #340]	@ (8000b0c <drawGameOverScreen+0x1f8>)
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	4b55      	ldr	r3, [pc, #340]	@ (8000b10 <drawGameOverScreen+0x1fc>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4638      	mov	r0, r7
 80009c0:	4954      	ldr	r1, [pc, #336]	@ (8000b14 <drawGameOverScreen+0x200>)
 80009c2:	f006 fb09 	bl	8006fd8 <siprintf>
    text_x = (LCD_PIXEL_WIDTH - strlen(message) * Font12x12.Width) / 2; // Center horizontally
 80009c6:	463b      	mov	r3, r7
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff fc11 	bl	80001f0 <strlen>
 80009ce:	4603      	mov	r3, r0
 80009d0:	4a4d      	ldr	r2, [pc, #308]	@ (8000b08 <drawGameOverScreen+0x1f4>)
 80009d2:	8892      	ldrh	r2, [r2, #4]
 80009d4:	fb02 f303 	mul.w	r3, r2, r3
 80009d8:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80009dc:	085b      	lsrs	r3, r3, #1
 80009de:	86bb      	strh	r3, [r7, #52]	@ 0x34
    text_y = STATS_Y_SCORE; // Vertical position
 80009e0:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80009e4:	867b      	strh	r3, [r7, #50]	@ 0x32

    //printf("Drawing Score at X=%d, Y=%d: %s\n", text_x, text_y, message); // Add debug print
    LCD_DisplayString(text_x, text_y, (uint8_t*)message, &Font12x12, text_color, BACKGROUND_COLOR, false);
 80009e6:	463a      	mov	r2, r7
 80009e8:	8e79      	ldrh	r1, [r7, #50]	@ 0x32
 80009ea:	8eb8      	ldrh	r0, [r7, #52]	@ 0x34
 80009ec:	2300      	movs	r3, #0
 80009ee:	9302      	str	r3, [sp, #8]
 80009f0:	2300      	movs	r3, #0
 80009f2:	9301      	str	r3, [sp, #4]
 80009f4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80009f6:	9300      	str	r3, [sp, #0]
 80009f8:	4b43      	ldr	r3, [pc, #268]	@ (8000b08 <drawGameOverScreen+0x1f4>)
 80009fa:	f7ff fe5e 	bl	80006ba <LCD_DisplayString>


    // --- Display Round Time ---
    uint32_t duration_ms = roundEndTime - roundStartTime;
 80009fe:	4b46      	ldr	r3, [pc, #280]	@ (8000b18 <drawGameOverScreen+0x204>)
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	4b46      	ldr	r3, [pc, #280]	@ (8000b1c <drawGameOverScreen+0x208>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	1ad3      	subs	r3, r2, r3
 8000a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t duration_s = duration_ms / 1000;
 8000a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a0c:	4a44      	ldr	r2, [pc, #272]	@ (8000b20 <drawGameOverScreen+0x20c>)
 8000a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a12:	099b      	lsrs	r3, r3, #6
 8000a14:	62bb      	str	r3, [r7, #40]	@ 0x28
    sprintf(message, "Time: %lu seconds", duration_s);
 8000a16:	463b      	mov	r3, r7
 8000a18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000a1a:	4942      	ldr	r1, [pc, #264]	@ (8000b24 <drawGameOverScreen+0x210>)
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f006 fadb 	bl	8006fd8 <siprintf>
    text_x = (LCD_PIXEL_WIDTH - strlen(message) * Font12x12.Width) / 2; // Center horizontally
 8000a22:	463b      	mov	r3, r7
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fbe3 	bl	80001f0 <strlen>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	4a36      	ldr	r2, [pc, #216]	@ (8000b08 <drawGameOverScreen+0x1f4>)
 8000a2e:	8892      	ldrh	r2, [r2, #4]
 8000a30:	fb02 f303 	mul.w	r3, r2, r3
 8000a34:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000a38:	085b      	lsrs	r3, r3, #1
 8000a3a:	86bb      	strh	r3, [r7, #52]	@ 0x34
    text_y = STATS_Y_TIME; // Vertical position
 8000a3c:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8000a40:	867b      	strh	r3, [r7, #50]	@ 0x32

    //printf("Drawing Time at X=%d, Y=%d: %s\n", text_x, text_y, message); // Add debug print
    LCD_DisplayString(text_x, text_y, (uint8_t*)message, &Font12x12, text_color, BACKGROUND_COLOR, false);
 8000a42:	463a      	mov	r2, r7
 8000a44:	8e79      	ldrh	r1, [r7, #50]	@ 0x32
 8000a46:	8eb8      	ldrh	r0, [r7, #52]	@ 0x34
 8000a48:	2300      	movs	r3, #0
 8000a4a:	9302      	str	r3, [sp, #8]
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	9301      	str	r3, [sp, #4]
 8000a50:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000a52:	9300      	str	r3, [sp, #0]
 8000a54:	4b2c      	ldr	r3, [pc, #176]	@ (8000b08 <drawGameOverScreen+0x1f4>)
 8000a56:	f7ff fe30 	bl	80006ba <LCD_DisplayString>


    // --- Draw Restart Button ---
    LCD_Fill_Rect(RESTART_BUTTON_X, RESTART_BUTTON_Y, RESTART_BUTTON_WIDTH, RESTART_BUTTON_HEIGHT, LCD_COLOR_GREY);
 8000a5a:	f24f 73de 	movw	r3, #63454	@ 0xf7de
 8000a5e:	9300      	str	r3, [sp, #0]
 8000a60:	2328      	movs	r3, #40	@ 0x28
 8000a62:	2278      	movs	r2, #120	@ 0x78
 8000a64:	218c      	movs	r1, #140	@ 0x8c
 8000a66:	203c      	movs	r0, #60	@ 0x3c
 8000a68:	f000 ff71 	bl	800194e <LCD_Fill_Rect>
    LCD_Draw_Rect(RESTART_BUTTON_X, RESTART_BUTTON_Y, RESTART_BUTTON_WIDTH, RESTART_BUTTON_HEIGHT, LCD_COLOR_WHITE); // Outline
 8000a6c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a70:	9300      	str	r3, [sp, #0]
 8000a72:	2328      	movs	r3, #40	@ 0x28
 8000a74:	2278      	movs	r2, #120	@ 0x78
 8000a76:	218c      	movs	r1, #140	@ 0x8c
 8000a78:	203c      	movs	r0, #60	@ 0x3c
 8000a7a:	f7ff fdc7 	bl	800060c <LCD_Draw_Rect>
    LCD_SetFont(&Font16x24);
 8000a7e:	481a      	ldr	r0, [pc, #104]	@ (8000ae8 <drawGameOverScreen+0x1d4>)
 8000a80:	f000 ffe0 	bl	8001a44 <LCD_SetFont>
    text_color = LCD_COLOR_WHITE; // White text for button
 8000a84:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a88:	86fb      	strh	r3, [r7, #54]	@ 0x36
    sprintf(message, "Restart");
 8000a8a:	463b      	mov	r3, r7
 8000a8c:	4926      	ldr	r1, [pc, #152]	@ (8000b28 <drawGameOverScreen+0x214>)
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f006 faa2 	bl	8006fd8 <siprintf>
    text_x = RESTART_BUTTON_X + (RESTART_BUTTON_WIDTH - strlen(message) * Font16x24.Width) / 2;
 8000a94:	463b      	mov	r3, r7
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff fbaa 	bl	80001f0 <strlen>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	4a12      	ldr	r2, [pc, #72]	@ (8000ae8 <drawGameOverScreen+0x1d4>)
 8000aa0:	8892      	ldrh	r2, [r2, #4]
 8000aa2:	fb02 f303 	mul.w	r3, r2, r3
 8000aa6:	f1c3 0378 	rsb	r3, r3, #120	@ 0x78
 8000aaa:	085b      	lsrs	r3, r3, #1
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	333c      	adds	r3, #60	@ 0x3c
 8000ab0:	86bb      	strh	r3, [r7, #52]	@ 0x34
    text_y = RESTART_BUTTON_Y + (RESTART_BUTTON_HEIGHT - Font16x24.Height) / 2;
 8000ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae8 <drawGameOverScreen+0x1d4>)
 8000ab4:	88db      	ldrh	r3, [r3, #6]
 8000ab6:	f1c3 0328 	rsb	r3, r3, #40	@ 0x28
 8000aba:	0fda      	lsrs	r2, r3, #31
 8000abc:	4413      	add	r3, r2
 8000abe:	105b      	asrs	r3, r3, #1
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	338c      	adds	r3, #140	@ 0x8c
 8000ac4:	867b      	strh	r3, [r7, #50]	@ 0x32
    LCD_DisplayString(text_x, text_y, (uint8_t*)message, &Font16x24, text_color, LCD_COLOR_GREY, true); // Use opaque=true here since we filled bg
 8000ac6:	463a      	mov	r2, r7
 8000ac8:	8e79      	ldrh	r1, [r7, #50]	@ 0x32
 8000aca:	8eb8      	ldrh	r0, [r7, #52]	@ 0x34
 8000acc:	2301      	movs	r3, #1
 8000ace:	9302      	str	r3, [sp, #8]
 8000ad0:	f24f 73de 	movw	r3, #63454	@ 0xf7de
 8000ad4:	9301      	str	r3, [sp, #4]
 8000ad6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000ad8:	9300      	str	r3, [sp, #0]
 8000ada:	4b03      	ldr	r3, [pc, #12]	@ (8000ae8 <drawGameOverScreen+0x1d4>)
 8000adc:	f7ff fded 	bl	80006ba <LCD_DisplayString>
}
 8000ae0:	bf00      	nop
 8000ae2:	3738      	adds	r7, #56	@ 0x38
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20000004 	.word	0x20000004
 8000aec:	200000e8 	.word	0x200000e8
 8000af0:	080082cc 	.word	0x080082cc
 8000af4:	200000e9 	.word	0x200000e9
 8000af8:	080082dc 	.word	0x080082dc
 8000afc:	080082e0 	.word	0x080082e0
 8000b00:	080082ec 	.word	0x080082ec
 8000b04:	080082f8 	.word	0x080082f8
 8000b08:	2000000c 	.word	0x2000000c
 8000b0c:	200000d8 	.word	0x200000d8
 8000b10:	200000dc 	.word	0x200000dc
 8000b14:	08008304 	.word	0x08008304
 8000b18:	200000e4 	.word	0x200000e4
 8000b1c:	200000e0 	.word	0x200000e0
 8000b20:	10624dd3 	.word	0x10624dd3
 8000b24:	08008318 	.word	0x08008318
 8000b28:	0800832c 	.word	0x0800832c

08000b2c <drawPreviewCoin>:

void drawPreviewCoin() {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
    // 1. Calculate Y position (fixed, above the board)
    uint16_t previewCoinY = BOARD_Y_PREVIEW_OFFSET - BOARD_SPACING - CIRCLE_RADIUS;
 8000b32:	2320      	movs	r3, #32
 8000b34:	80fb      	strh	r3, [r7, #6]

    // 2. Calculate X position based on currentColumn
    uint16_t previewCoinX = BOARD_X_OFFSET + BOARD_SPACING + CIRCLE_RADIUS + currentColumn * (CIRCLE_DIAMETER + BOARD_SPACING);
 8000b36:	4b16      	ldr	r3, [pc, #88]	@ (8000b90 <drawPreviewCoin+0x64>)
 8000b38:	f993 3000 	ldrsb.w	r3, [r3]
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	015b      	lsls	r3, r3, #5
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	3318      	adds	r3, #24
 8000b44:	80bb      	strh	r3, [r7, #4]

    // 3. Erase previous coin position (draw background color circle)
    //    Only erase if the position actually changed
    if (previousPreviewCoinX != 0 && previousPreviewCoinX != previewCoinX) {
 8000b46:	4b13      	ldr	r3, [pc, #76]	@ (8000b94 <drawPreviewCoin+0x68>)
 8000b48:	881b      	ldrh	r3, [r3, #0]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d00b      	beq.n	8000b66 <drawPreviewCoin+0x3a>
 8000b4e:	4b11      	ldr	r3, [pc, #68]	@ (8000b94 <drawPreviewCoin+0x68>)
 8000b50:	881b      	ldrh	r3, [r3, #0]
 8000b52:	88ba      	ldrh	r2, [r7, #4]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d006      	beq.n	8000b66 <drawPreviewCoin+0x3a>
         LCD_Draw_Circle_Fill(previousPreviewCoinX, previewCoinY, CIRCLE_RADIUS + 1, BACKGROUND_COLOR); // +1 to cover edges
 8000b58:	4b0e      	ldr	r3, [pc, #56]	@ (8000b94 <drawPreviewCoin+0x68>)
 8000b5a:	8818      	ldrh	r0, [r3, #0]
 8000b5c:	88f9      	ldrh	r1, [r7, #6]
 8000b5e:	2300      	movs	r3, #0
 8000b60:	220f      	movs	r2, #15
 8000b62:	f000 fea1 	bl	80018a8 <LCD_Draw_Circle_Fill>
    }

    // 4. Draw the new coin with the current player's color
    uint16_t playerColor = getSlotColor(currentPlayer);
 8000b66:	4b0c      	ldr	r3, [pc, #48]	@ (8000b98 <drawPreviewCoin+0x6c>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff fe48 	bl	8000800 <getSlotColor>
 8000b70:	4603      	mov	r3, r0
 8000b72:	807b      	strh	r3, [r7, #2]
    LCD_Draw_Circle_Fill(previewCoinX, previewCoinY, CIRCLE_RADIUS, playerColor);
 8000b74:	887b      	ldrh	r3, [r7, #2]
 8000b76:	88f9      	ldrh	r1, [r7, #6]
 8000b78:	88b8      	ldrh	r0, [r7, #4]
 8000b7a:	220e      	movs	r2, #14
 8000b7c:	f000 fe94 	bl	80018a8 <LCD_Draw_Circle_Fill>

    // 5. Store current position for next erase
    previousPreviewCoinX = previewCoinX;
 8000b80:	4a04      	ldr	r2, [pc, #16]	@ (8000b94 <drawPreviewCoin+0x68>)
 8000b82:	88bb      	ldrh	r3, [r7, #4]
 8000b84:	8013      	strh	r3, [r2, #0]
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000000 	.word	0x20000000
 8000b94:	200000d4 	.word	0x200000d4
 8000b98:	200000d2 	.word	0x200000d2

08000b9c <findLowestEmptyRow>:

int findLowestEmptyRow(int col) {
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
    if (col < 0 || col >= BOARD_COLS) {
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	db02      	blt.n	8000bb0 <findLowestEmptyRow+0x14>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2b06      	cmp	r3, #6
 8000bae:	dd02      	ble.n	8000bb6 <findLowestEmptyRow+0x1a>
        return -1; // Invalid column
 8000bb0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bb4:	e017      	b.n	8000be6 <findLowestEmptyRow+0x4a>
    }
    // Start from the bottom row and go up
    for (int r = BOARD_ROWS - 1; r >= 0; r--) {
 8000bb6:	2305      	movs	r3, #5
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	e00f      	b.n	8000bdc <findLowestEmptyRow+0x40>
        if (gameBoard[r][col] == SLOT_EMPTY) {
 8000bbc:	490d      	ldr	r1, [pc, #52]	@ (8000bf4 <findLowestEmptyRow+0x58>)
 8000bbe:	68fa      	ldr	r2, [r7, #12]
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	00db      	lsls	r3, r3, #3
 8000bc4:	1a9b      	subs	r3, r3, r2
 8000bc6:	18ca      	adds	r2, r1, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4413      	add	r3, r2
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d101      	bne.n	8000bd6 <findLowestEmptyRow+0x3a>
            return r; // Found an empty slot
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	e007      	b.n	8000be6 <findLowestEmptyRow+0x4a>
    for (int r = BOARD_ROWS - 1; r >= 0; r--) {
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	3b01      	subs	r3, #1
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	daec      	bge.n	8000bbc <findLowestEmptyRow+0x20>
        }
    }
    return -1; // Column is full
 8000be2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3714      	adds	r7, #20
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	200000a8 	.word	0x200000a8

08000bf8 <dropCoin>:

void dropCoin() {
 8000bf8:	b590      	push	{r4, r7, lr}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
    printf("Attempting to drop coin in column %d for player %d\n", currentColumn, currentPlayer);
 8000bfe:	4b68      	ldr	r3, [pc, #416]	@ (8000da0 <dropCoin+0x1a8>)
 8000c00:	f993 3000 	ldrsb.w	r3, [r3]
 8000c04:	4619      	mov	r1, r3
 8000c06:	4b67      	ldr	r3, [pc, #412]	@ (8000da4 <dropCoin+0x1ac>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	4866      	ldr	r0, [pc, #408]	@ (8000da8 <dropCoin+0x1b0>)
 8000c0e:	f006 fac7 	bl	80071a0 <iprintf>

    int row = findLowestEmptyRow(currentColumn);
 8000c12:	4b63      	ldr	r3, [pc, #396]	@ (8000da0 <dropCoin+0x1a8>)
 8000c14:	f993 3000 	ldrsb.w	r3, [r3]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff ffbf 	bl	8000b9c <findLowestEmptyRow>
 8000c1e:	6078      	str	r0, [r7, #4]

    if (row != -1) { // Column has space
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000c26:	f000 80b0 	beq.w	8000d8a <dropCoin+0x192>
        printf("Placing coin at (%d, %d)\n", row, currentColumn);
 8000c2a:	4b5d      	ldr	r3, [pc, #372]	@ (8000da0 <dropCoin+0x1a8>)
 8000c2c:	f993 3000 	ldrsb.w	r3, [r3]
 8000c30:	461a      	mov	r2, r3
 8000c32:	6879      	ldr	r1, [r7, #4]
 8000c34:	485d      	ldr	r0, [pc, #372]	@ (8000dac <dropCoin+0x1b4>)
 8000c36:	f006 fab3 	bl	80071a0 <iprintf>
        gameBoard[row][currentColumn] = currentPlayer;
 8000c3a:	4b59      	ldr	r3, [pc, #356]	@ (8000da0 <dropCoin+0x1a8>)
 8000c3c:	f993 3000 	ldrsb.w	r3, [r3]
 8000c40:	461c      	mov	r4, r3
 8000c42:	4b58      	ldr	r3, [pc, #352]	@ (8000da4 <dropCoin+0x1ac>)
 8000c44:	7818      	ldrb	r0, [r3, #0]
 8000c46:	495a      	ldr	r1, [pc, #360]	@ (8000db0 <dropCoin+0x1b8>)
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	1a9b      	subs	r3, r3, r2
 8000c50:	440b      	add	r3, r1
 8000c52:	4423      	add	r3, r4
 8000c54:	4602      	mov	r2, r0
 8000c56:	701a      	strb	r2, [r3, #0]
        drawGameBoard(); // Redraw board with the new piece
 8000c58:	f7ff fe14 	bl	8000884 <drawGameBoard>

        // --- Check for Win ---
        if (checkWin(currentPlayer)) {
 8000c5c:	4b51      	ldr	r3, [pc, #324]	@ (8000da4 <dropCoin+0x1ac>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	4618      	mov	r0, r3
 8000c62:	f000 fb11 	bl	8001288 <checkWin>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d028      	beq.n	8000cbe <dropCoin+0xc6>
            printf("Player %d Wins!\n", (currentPlayer == SLOT_PLAYER1) ? 1 : 2);
 8000c6c:	4b4d      	ldr	r3, [pc, #308]	@ (8000da4 <dropCoin+0x1ac>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d101      	bne.n	8000c78 <dropCoin+0x80>
 8000c74:	2301      	movs	r3, #1
 8000c76:	e000      	b.n	8000c7a <dropCoin+0x82>
 8000c78:	2302      	movs	r3, #2
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	484d      	ldr	r0, [pc, #308]	@ (8000db4 <dropCoin+0x1bc>)
 8000c7e:	f006 fa8f 	bl	80071a0 <iprintf>
            roundWinner = currentPlayer;
 8000c82:	4b48      	ldr	r3, [pc, #288]	@ (8000da4 <dropCoin+0x1ac>)
 8000c84:	781a      	ldrb	r2, [r3, #0]
 8000c86:	4b4c      	ldr	r3, [pc, #304]	@ (8000db8 <dropCoin+0x1c0>)
 8000c88:	701a      	strb	r2, [r3, #0]
            roundEndTime = HAL_GetTick(); // Record end time
 8000c8a:	f002 fde3 	bl	8003854 <HAL_GetTick>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	4a4a      	ldr	r2, [pc, #296]	@ (8000dbc <dropCoin+0x1c4>)
 8000c92:	6013      	str	r3, [r2, #0]
            if (currentPlayer == SLOT_PLAYER1) player1Score++;
 8000c94:	4b43      	ldr	r3, [pc, #268]	@ (8000da4 <dropCoin+0x1ac>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d105      	bne.n	8000ca8 <dropCoin+0xb0>
 8000c9c:	4b48      	ldr	r3, [pc, #288]	@ (8000dc0 <dropCoin+0x1c8>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	4a47      	ldr	r2, [pc, #284]	@ (8000dc0 <dropCoin+0x1c8>)
 8000ca4:	6013      	str	r3, [r2, #0]
 8000ca6:	e004      	b.n	8000cb2 <dropCoin+0xba>
            else player2Score++;
 8000ca8:	4b46      	ldr	r3, [pc, #280]	@ (8000dc4 <dropCoin+0x1cc>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	3301      	adds	r3, #1
 8000cae:	4a45      	ldr	r2, [pc, #276]	@ (8000dc4 <dropCoin+0x1cc>)
 8000cb0:	6013      	str	r3, [r2, #0]
            currentAppState = APP_STATE_GAME_OVER;
 8000cb2:	4b45      	ldr	r3, [pc, #276]	@ (8000dc8 <dropCoin+0x1d0>)
 8000cb4:	2206      	movs	r2, #6
 8000cb6:	701a      	strb	r2, [r3, #0]
            drawGameOverScreen(); // Draw the game over screen immediately
 8000cb8:	f7ff fe2c 	bl	8000914 <drawGameOverScreen>
            return; // End the turn sequence
 8000cbc:	e06c      	b.n	8000d98 <dropCoin+0x1a0>
        }

        // --- Check for Tie ---
        if (checkTie()) {
 8000cbe:	f000 fc13 	bl	80014e8 <checkTie>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d010      	beq.n	8000cea <dropCoin+0xf2>
            printf("Game is a Tie!\n");
 8000cc8:	4840      	ldr	r0, [pc, #256]	@ (8000dcc <dropCoin+0x1d4>)
 8000cca:	f006 fad1 	bl	8007270 <puts>
            roundWinner = SLOT_EMPTY; // Indicate a tie
 8000cce:	4b3a      	ldr	r3, [pc, #232]	@ (8000db8 <dropCoin+0x1c0>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	701a      	strb	r2, [r3, #0]
            roundEndTime = HAL_GetTick(); // Record end time
 8000cd4:	f002 fdbe 	bl	8003854 <HAL_GetTick>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	4a38      	ldr	r2, [pc, #224]	@ (8000dbc <dropCoin+0x1c4>)
 8000cdc:	6013      	str	r3, [r2, #0]
            // No score update for a tie
            currentAppState = APP_STATE_GAME_OVER;
 8000cde:	4b3a      	ldr	r3, [pc, #232]	@ (8000dc8 <dropCoin+0x1d0>)
 8000ce0:	2206      	movs	r2, #6
 8000ce2:	701a      	strb	r2, [r3, #0]
            drawGameOverScreen();
 8000ce4:	f7ff fe16 	bl	8000914 <drawGameOverScreen>
            return; // End the turn sequence
 8000ce8:	e056      	b.n	8000d98 <dropCoin+0x1a0>
        }

        // --- No Win, No Tie -> Switch Player ---
        //SlotState_t previousPlayer = currentPlayer;
        if (isOnePlayerMode) {
 8000cea:	4b39      	ldr	r3, [pc, #228]	@ (8000dd0 <dropCoin+0x1d8>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d01a      	beq.n	8000d28 <dropCoin+0x130>
            // Human just played (must be P1), switch to AI
            if (currentPlayer == SLOT_PLAYER1) {
 8000cf2:	4b2c      	ldr	r3, [pc, #176]	@ (8000da4 <dropCoin+0x1ac>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d10c      	bne.n	8000d14 <dropCoin+0x11c>
                 currentPlayer = SLOT_PLAYER2; // AI is Player 2
 8000cfa:	4b2a      	ldr	r3, [pc, #168]	@ (8000da4 <dropCoin+0x1ac>)
 8000cfc:	2202      	movs	r2, #2
 8000cfe:	701a      	strb	r2, [r3, #0]
                 currentAppState = APP_STATE_GAME_AI_TURN;
 8000d00:	4b31      	ldr	r3, [pc, #196]	@ (8000dc8 <dropCoin+0x1d0>)
 8000d02:	2204      	movs	r2, #4
 8000d04:	701a      	strb	r2, [r3, #0]
                 printf("Switched to AI turn.\n");
 8000d06:	4833      	ldr	r0, [pc, #204]	@ (8000dd4 <dropCoin+0x1dc>)
 8000d08:	f006 fab2 	bl	8007270 <puts>
                 addSchedulerEvent(GAME_UPDATE_EVENT); // Trigger AI move
 8000d0c:	2004      	movs	r0, #4
 8000d0e:	f000 ff63 	bl	8001bd8 <addSchedulerEvent>
 8000d12:	e020      	b.n	8000d56 <dropCoin+0x15e>
            } else { // AI just played (P2), switch to Human (P1)
                 currentPlayer = SLOT_PLAYER1;
 8000d14:	4b23      	ldr	r3, [pc, #140]	@ (8000da4 <dropCoin+0x1ac>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	701a      	strb	r2, [r3, #0]
                 currentAppState = APP_STATE_GAME_P1_TURN;
 8000d1a:	4b2b      	ldr	r3, [pc, #172]	@ (8000dc8 <dropCoin+0x1d0>)
 8000d1c:	2202      	movs	r2, #2
 8000d1e:	701a      	strb	r2, [r3, #0]
                 printf("Switched to Player 1 turn.\n");
 8000d20:	482d      	ldr	r0, [pc, #180]	@ (8000dd8 <dropCoin+0x1e0>)
 8000d22:	f006 faa5 	bl	8007270 <puts>
 8000d26:	e016      	b.n	8000d56 <dropCoin+0x15e>
            }
        } else { // Two Player Mode
             if (currentPlayer == SLOT_PLAYER1) {
 8000d28:	4b1e      	ldr	r3, [pc, #120]	@ (8000da4 <dropCoin+0x1ac>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d109      	bne.n	8000d44 <dropCoin+0x14c>
                 currentPlayer = SLOT_PLAYER2;
 8000d30:	4b1c      	ldr	r3, [pc, #112]	@ (8000da4 <dropCoin+0x1ac>)
 8000d32:	2202      	movs	r2, #2
 8000d34:	701a      	strb	r2, [r3, #0]
                 currentAppState = APP_STATE_GAME_P2_TURN;
 8000d36:	4b24      	ldr	r3, [pc, #144]	@ (8000dc8 <dropCoin+0x1d0>)
 8000d38:	2203      	movs	r2, #3
 8000d3a:	701a      	strb	r2, [r3, #0]
                 printf("Switched to Player 2 turn.\n");
 8000d3c:	4827      	ldr	r0, [pc, #156]	@ (8000ddc <dropCoin+0x1e4>)
 8000d3e:	f006 fa97 	bl	8007270 <puts>
 8000d42:	e008      	b.n	8000d56 <dropCoin+0x15e>
             } else {
                 currentPlayer = SLOT_PLAYER1;
 8000d44:	4b17      	ldr	r3, [pc, #92]	@ (8000da4 <dropCoin+0x1ac>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	701a      	strb	r2, [r3, #0]
                 currentAppState = APP_STATE_GAME_P1_TURN;
 8000d4a:	4b1f      	ldr	r3, [pc, #124]	@ (8000dc8 <dropCoin+0x1d0>)
 8000d4c:	2202      	movs	r2, #2
 8000d4e:	701a      	strb	r2, [r3, #0]
                 printf("Switched to Player 1 turn.\n");
 8000d50:	4821      	ldr	r0, [pc, #132]	@ (8000dd8 <dropCoin+0x1e0>)
 8000d52:	f006 fa8d 	bl	8007270 <puts>
             }
        }

        // Erase the dropped preview coin and draw the new player's preview coin
        uint16_t previewCoinY = BOARD_Y_OFFSET - BOARD_SPACING - CIRCLE_RADIUS;
 8000d56:	2320      	movs	r3, #32
 8000d58:	807b      	strh	r3, [r7, #2]
        // Use previous player's color to erase the spot where the coin *was*
        uint16_t eraseX = BOARD_X_OFFSET + BOARD_SPACING + CIRCLE_RADIUS + currentColumn * (CIRCLE_DIAMETER + BOARD_SPACING);
 8000d5a:	4b11      	ldr	r3, [pc, #68]	@ (8000da0 <dropCoin+0x1a8>)
 8000d5c:	f993 3000 	ldrsb.w	r3, [r3]
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	015b      	lsls	r3, r3, #5
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	3318      	adds	r3, #24
 8000d68:	803b      	strh	r3, [r7, #0]
        LCD_Draw_Circle_Fill(eraseX, previewCoinY, CIRCLE_RADIUS + 1, BACKGROUND_COLOR);
 8000d6a:	8879      	ldrh	r1, [r7, #2]
 8000d6c:	8838      	ldrh	r0, [r7, #0]
 8000d6e:	2300      	movs	r3, #0
 8000d70:	220f      	movs	r2, #15
 8000d72:	f000 fd99 	bl	80018a8 <LCD_Draw_Circle_Fill>
        previousPreviewCoinX = 0; // Reset previous X
 8000d76:	4b1a      	ldr	r3, [pc, #104]	@ (8000de0 <dropCoin+0x1e8>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	801a      	strh	r2, [r3, #0]
        if (currentAppState != APP_STATE_GAME_AI_TURN) { // Don't draw preview if AI is thinking immediately
 8000d7c:	4b12      	ldr	r3, [pc, #72]	@ (8000dc8 <dropCoin+0x1d0>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b04      	cmp	r3, #4
 8000d82:	d009      	beq.n	8000d98 <dropCoin+0x1a0>
             drawPreviewCoin();
 8000d84:	f7ff fed2 	bl	8000b2c <drawPreviewCoin>
 8000d88:	e006      	b.n	8000d98 <dropCoin+0x1a0>
        }

    } else {
        printf("Column %d is full!\n", currentColumn);
 8000d8a:	4b05      	ldr	r3, [pc, #20]	@ (8000da0 <dropCoin+0x1a8>)
 8000d8c:	f993 3000 	ldrsb.w	r3, [r3]
 8000d90:	4619      	mov	r1, r3
 8000d92:	4814      	ldr	r0, [pc, #80]	@ (8000de4 <dropCoin+0x1ec>)
 8000d94:	f006 fa04 	bl	80071a0 <iprintf>
        // Optional feedback
    }
}
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd90      	pop	{r4, r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000000 	.word	0x20000000
 8000da4:	200000d2 	.word	0x200000d2
 8000da8:	08008334 	.word	0x08008334
 8000dac:	08008368 	.word	0x08008368
 8000db0:	200000a8 	.word	0x200000a8
 8000db4:	08008384 	.word	0x08008384
 8000db8:	200000e8 	.word	0x200000e8
 8000dbc:	200000e4 	.word	0x200000e4
 8000dc0:	200000d8 	.word	0x200000d8
 8000dc4:	200000dc 	.word	0x200000dc
 8000dc8:	2000009c 	.word	0x2000009c
 8000dcc:	08008398 	.word	0x08008398
 8000dd0:	200000e9 	.word	0x200000e9
 8000dd4:	080083a8 	.word	0x080083a8
 8000dd8:	080083c0 	.word	0x080083c0
 8000ddc:	080083dc 	.word	0x080083dc
 8000de0:	200000d4 	.word	0x200000d4
 8000de4:	080083f8 	.word	0x080083f8

08000de8 <handleTouchInput>:


void handleTouchInput() {
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af02      	add	r7, sp, #8
	STMPE811_TouchData touchData;
	touchData.orientation = STMPE811_Orientation_Portrait_2;
 8000dee:	2301      	movs	r3, #1
 8000df0:	71bb      	strb	r3, [r7, #6]
    STMPE811_State_t touchState = returnTouchStateAndLocation(&touchData);
 8000df2:	463b      	mov	r3, r7
 8000df4:	4618      	mov	r0, r3
 8000df6:	f000 fed6 	bl	8001ba6 <returnTouchStateAndLocation>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	73fb      	strb	r3, [r7, #15]
    if (touchState != STMPE811_State_Pressed) return;
 8000dfe:	7bfb      	ldrb	r3, [r7, #15]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	f040 8094 	bne.w	8000f2e <handleTouchInput+0x146>
    uint32_t currentTime = HAL_GetTick();
 8000e06:	f002 fd25 	bl	8003854 <HAL_GetTick>
 8000e0a:	60b8      	str	r0, [r7, #8]
    if (currentTime - lastTouchMoveTime < TOUCH_MOVE_DEBOUNCE) return;
 8000e0c:	4b4f      	ldr	r3, [pc, #316]	@ (8000f4c <handleTouchInput+0x164>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	68ba      	ldr	r2, [r7, #8]
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	2bc7      	cmp	r3, #199	@ 0xc7
 8000e16:	f240 808c 	bls.w	8000f32 <handleTouchInput+0x14a>
    lastTouchMoveTime = currentTime;
 8000e1a:	4a4c      	ldr	r2, [pc, #304]	@ (8000f4c <handleTouchInput+0x164>)
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	6013      	str	r3, [r2, #0]

    // Invert Y coordinate ONLY for button checks - this fixes wrong y values
    //uint16_t inverted_touch_y = LCD_PIXEL_HEIGHT - 1 - touchData.y;

	// --- State Machine for Touch ---
    switch(currentAppState) {
 8000e20:	4b4b      	ldr	r3, [pc, #300]	@ (8000f50 <handleTouchInput+0x168>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b06      	cmp	r3, #6
 8000e26:	d06c      	beq.n	8000f02 <handleTouchInput+0x11a>
 8000e28:	2b06      	cmp	r3, #6
 8000e2a:	f300 8084 	bgt.w	8000f36 <handleTouchInput+0x14e>
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d005      	beq.n	8000e3e <handleTouchInput+0x56>
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	dd7f      	ble.n	8000f36 <handleTouchInput+0x14e>
 8000e36:	3b02      	subs	r3, #2
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d87c      	bhi.n	8000f36 <handleTouchInput+0x14e>
 8000e3c:	e04f      	b.n	8000ede <handleTouchInput+0xf6>
    	case APP_STATE_MENU:
			// --- Start Timer on Game Start ---
			// Check Button 1 (Left Button - Should be 1 Player)
			if (isTouchInside(touchData.x, touchData.y, BUTTON1_X, BUTTON1_Y, BUTTON_WIDTH, BUTTON_HEIGHT)) {
 8000e3e:	8838      	ldrh	r0, [r7, #0]
 8000e40:	8879      	ldrh	r1, [r7, #2]
 8000e42:	2332      	movs	r3, #50	@ 0x32
 8000e44:	9301      	str	r3, [sp, #4]
 8000e46:	2364      	movs	r3, #100	@ 0x64
 8000e48:	9300      	str	r3, [sp, #0]
 8000e4a:	2387      	movs	r3, #135	@ 0x87
 8000e4c:	220a      	movs	r2, #10
 8000e4e:	f000 f88f 	bl	8000f70 <isTouchInside>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d01a      	beq.n	8000e8e <handleTouchInput+0xa6>
				printf("Button 1 (1 Player) Selected!\n");
 8000e58:	483e      	ldr	r0, [pc, #248]	@ (8000f54 <handleTouchInput+0x16c>)
 8000e5a:	f006 fa09 	bl	8007270 <puts>
				isOnePlayerMode = true;
 8000e5e:	4b3e      	ldr	r3, [pc, #248]	@ (8000f58 <handleTouchInput+0x170>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	701a      	strb	r2, [r3, #0]
				initializeGameBoard();
 8000e64:	f7ff fce6 	bl	8000834 <initializeGameBoard>
				currentPlayer = SLOT_PLAYER1;
 8000e68:	4b3c      	ldr	r3, [pc, #240]	@ (8000f5c <handleTouchInput+0x174>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	701a      	strb	r2, [r3, #0]
				currentColumn = BOARD_COLS / 2;
 8000e6e:	4b3c      	ldr	r3, [pc, #240]	@ (8000f60 <handleTouchInput+0x178>)
 8000e70:	2203      	movs	r2, #3
 8000e72:	701a      	strb	r2, [r3, #0]
				roundStartTime = HAL_GetTick();
 8000e74:	f002 fcee 	bl	8003854 <HAL_GetTick>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	4a3a      	ldr	r2, [pc, #232]	@ (8000f64 <handleTouchInput+0x17c>)
 8000e7c:	6013      	str	r3, [r2, #0]
				currentAppState = APP_STATE_GAME_P1_TURN; // Start P1 turn
 8000e7e:	4b34      	ldr	r3, [pc, #208]	@ (8000f50 <handleTouchInput+0x168>)
 8000e80:	2202      	movs	r2, #2
 8000e82:	701a      	strb	r2, [r3, #0]
				drawGameBoard();
 8000e84:	f7ff fcfe 	bl	8000884 <drawGameBoard>
				drawPreviewCoin();
 8000e88:	f7ff fe50 	bl	8000b2c <drawPreviewCoin>
				roundStartTime = HAL_GetTick();
				currentAppState = APP_STATE_GAME_P1_TURN; // Start P1 turn
				drawGameBoard();
				drawPreviewCoin();
			}
			break; // End of APP_STATE_MENU case
 8000e8c:	e055      	b.n	8000f3a <handleTouchInput+0x152>
			else if (isTouchInside(touchData.x, touchData.y, BUTTON2_X, BUTTON2_Y, BUTTON_WIDTH, BUTTON_HEIGHT)) {
 8000e8e:	8838      	ldrh	r0, [r7, #0]
 8000e90:	8879      	ldrh	r1, [r7, #2]
 8000e92:	2332      	movs	r3, #50	@ 0x32
 8000e94:	9301      	str	r3, [sp, #4]
 8000e96:	2364      	movs	r3, #100	@ 0x64
 8000e98:	9300      	str	r3, [sp, #0]
 8000e9a:	2387      	movs	r3, #135	@ 0x87
 8000e9c:	2282      	movs	r2, #130	@ 0x82
 8000e9e:	f000 f867 	bl	8000f70 <isTouchInside>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d048      	beq.n	8000f3a <handleTouchInput+0x152>
				printf("Button 2 (2 Player) Selected!\n");
 8000ea8:	482f      	ldr	r0, [pc, #188]	@ (8000f68 <handleTouchInput+0x180>)
 8000eaa:	f006 f9e1 	bl	8007270 <puts>
				isOnePlayerMode = false;
 8000eae:	4b2a      	ldr	r3, [pc, #168]	@ (8000f58 <handleTouchInput+0x170>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	701a      	strb	r2, [r3, #0]
				initializeGameBoard();
 8000eb4:	f7ff fcbe 	bl	8000834 <initializeGameBoard>
				currentPlayer = SLOT_PLAYER1;
 8000eb8:	4b28      	ldr	r3, [pc, #160]	@ (8000f5c <handleTouchInput+0x174>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	701a      	strb	r2, [r3, #0]
				currentColumn = BOARD_COLS / 2;
 8000ebe:	4b28      	ldr	r3, [pc, #160]	@ (8000f60 <handleTouchInput+0x178>)
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	701a      	strb	r2, [r3, #0]
				roundStartTime = HAL_GetTick();
 8000ec4:	f002 fcc6 	bl	8003854 <HAL_GetTick>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	4a26      	ldr	r2, [pc, #152]	@ (8000f64 <handleTouchInput+0x17c>)
 8000ecc:	6013      	str	r3, [r2, #0]
				currentAppState = APP_STATE_GAME_P1_TURN; // Start P1 turn
 8000ece:	4b20      	ldr	r3, [pc, #128]	@ (8000f50 <handleTouchInput+0x168>)
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	701a      	strb	r2, [r3, #0]
				drawGameBoard();
 8000ed4:	f7ff fcd6 	bl	8000884 <drawGameBoard>
				drawPreviewCoin();
 8000ed8:	f7ff fe28 	bl	8000b2c <drawPreviewCoin>
			break; // End of APP_STATE_MENU case
 8000edc:	e02d      	b.n	8000f3a <handleTouchInput+0x152>

        case APP_STATE_GAME_P1_TURN:
        case APP_STATE_GAME_P2_TURN:
             // Only handle touch for moving the preview coin in 2P mode
             // or if it's P1's turn in 1P mode
             if (!isOnePlayerMode || currentPlayer == SLOT_PLAYER1) {
 8000ede:	4b1e      	ldr	r3, [pc, #120]	@ (8000f58 <handleTouchInput+0x170>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	f083 0301 	eor.w	r3, r3, #1
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d103      	bne.n	8000ef4 <handleTouchInput+0x10c>
 8000eec:	4b1b      	ldr	r3, [pc, #108]	@ (8000f5c <handleTouchInput+0x174>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d124      	bne.n	8000f3e <handleTouchInput+0x156>
                  handleGameTouchInput(touchData.x, touchData.y);
 8000ef4:	883b      	ldrh	r3, [r7, #0]
 8000ef6:	887a      	ldrh	r2, [r7, #2]
 8000ef8:	4611      	mov	r1, r2
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 f866 	bl	8000fcc <handleGameTouchInput>
             }
             break;
 8000f00:	e01d      	b.n	8000f3e <handleTouchInput+0x156>

        case APP_STATE_GAME_OVER:
             // --- Handle Restart Button ---
             if (isTouchInside(touchData.x, touchData.y, RESTART_BUTTON_X, RESTART_BUTTON_Y, RESTART_BUTTON_WIDTH, RESTART_BUTTON_HEIGHT)) {
 8000f02:	8838      	ldrh	r0, [r7, #0]
 8000f04:	8879      	ldrh	r1, [r7, #2]
 8000f06:	2328      	movs	r3, #40	@ 0x28
 8000f08:	9301      	str	r3, [sp, #4]
 8000f0a:	2378      	movs	r3, #120	@ 0x78
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	238c      	movs	r3, #140	@ 0x8c
 8000f10:	223c      	movs	r2, #60	@ 0x3c
 8000f12:	f000 f82d 	bl	8000f70 <isTouchInside>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d012      	beq.n	8000f42 <handleTouchInput+0x15a>
                  printf("Restart Button Pressed.\n");
 8000f1c:	4813      	ldr	r0, [pc, #76]	@ (8000f6c <handleTouchInput+0x184>)
 8000f1e:	f006 f9a7 	bl	8007270 <puts>
                  currentAppState = APP_STATE_MENU;
 8000f22:	4b0b      	ldr	r3, [pc, #44]	@ (8000f50 <handleTouchInput+0x168>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	701a      	strb	r2, [r3, #0]
                  // No need to reset scores here, they persist
                  drawMenuScreen(); // Go back to main menu
 8000f28:	f7ff fbfe 	bl	8000728 <drawMenuScreen>
             }
             break;
 8000f2c:	e009      	b.n	8000f42 <handleTouchInput+0x15a>
    if (touchState != STMPE811_State_Pressed) return;
 8000f2e:	bf00      	nop
 8000f30:	e008      	b.n	8000f44 <handleTouchInput+0x15c>
    if (currentTime - lastTouchMoveTime < TOUCH_MOVE_DEBOUNCE) return;
 8000f32:	bf00      	nop
 8000f34:	e006      	b.n	8000f44 <handleTouchInput+0x15c>

        default:
            break;
 8000f36:	bf00      	nop
 8000f38:	e004      	b.n	8000f44 <handleTouchInput+0x15c>
			break; // End of APP_STATE_MENU case
 8000f3a:	bf00      	nop
 8000f3c:	e002      	b.n	8000f44 <handleTouchInput+0x15c>
             break;
 8000f3e:	bf00      	nop
 8000f40:	e000      	b.n	8000f44 <handleTouchInput+0x15c>
             break;
 8000f42:	bf00      	nop
    }
	    //addSchedulerEvent(TOUCH_POLLING_EVENT);
	     // Clear FIFO after processing a press that was acted upon
	     //I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
	     //I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
}
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	200000ec 	.word	0x200000ec
 8000f50:	2000009c 	.word	0x2000009c
 8000f54:	0800840c 	.word	0x0800840c
 8000f58:	200000e9 	.word	0x200000e9
 8000f5c:	200000d2 	.word	0x200000d2
 8000f60:	20000000 	.word	0x20000000
 8000f64:	200000e0 	.word	0x200000e0
 8000f68:	0800842c 	.word	0x0800842c
 8000f6c:	0800844c 	.word	0x0800844c

08000f70 <isTouchInside>:



// Check if touch coordinates are within a button's bounds
bool isTouchInside(uint16_t touchX, uint16_t touchY, uint16_t btnX, uint16_t btnY, uint16_t btnW, uint16_t btnH) {
 8000f70:	b490      	push	{r4, r7}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4604      	mov	r4, r0
 8000f78:	4608      	mov	r0, r1
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4623      	mov	r3, r4
 8000f80:	80fb      	strh	r3, [r7, #6]
 8000f82:	4603      	mov	r3, r0
 8000f84:	80bb      	strh	r3, [r7, #4]
 8000f86:	460b      	mov	r3, r1
 8000f88:	807b      	strh	r3, [r7, #2]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	803b      	strh	r3, [r7, #0]
    return (touchX >= btnX && touchX < (btnX + btnW) &&
            touchY >= btnY && touchY < (btnY + btnH));
 8000f8e:	88fa      	ldrh	r2, [r7, #6]
 8000f90:	887b      	ldrh	r3, [r7, #2]
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d311      	bcc.n	8000fba <isTouchInside+0x4a>
    return (touchX >= btnX && touchX < (btnX + btnW) &&
 8000f96:	88fa      	ldrh	r2, [r7, #6]
 8000f98:	8879      	ldrh	r1, [r7, #2]
 8000f9a:	8a3b      	ldrh	r3, [r7, #16]
 8000f9c:	440b      	add	r3, r1
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	da0b      	bge.n	8000fba <isTouchInside+0x4a>
 8000fa2:	88ba      	ldrh	r2, [r7, #4]
 8000fa4:	883b      	ldrh	r3, [r7, #0]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d307      	bcc.n	8000fba <isTouchInside+0x4a>
            touchY >= btnY && touchY < (btnY + btnH));
 8000faa:	88ba      	ldrh	r2, [r7, #4]
 8000fac:	8839      	ldrh	r1, [r7, #0]
 8000fae:	8abb      	ldrh	r3, [r7, #20]
 8000fb0:	440b      	add	r3, r1
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	da01      	bge.n	8000fba <isTouchInside+0x4a>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e000      	b.n	8000fbc <isTouchInside+0x4c>
 8000fba:	2300      	movs	r3, #0
 8000fbc:	f003 0301 	and.w	r3, r3, #1
 8000fc0:	b2db      	uxtb	r3, r3
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc90      	pop	{r4, r7}
 8000fca:	4770      	bx	lr

08000fcc <handleGameTouchInput>:

void handleGameTouchInput(uint16_t touchX, uint16_t touchY) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	460a      	mov	r2, r1
 8000fd6:	80fb      	strh	r3, [r7, #6]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	80bb      	strh	r3, [r7, #4]
     // Check if touch is on the left half of the screen
     if (touchX < LCD_PIXEL_WIDTH / 2) {
 8000fdc:	88fb      	ldrh	r3, [r7, #6]
 8000fde:	2b77      	cmp	r3, #119	@ 0x77
 8000fe0:	d810      	bhi.n	8001004 <handleGameTouchInput+0x38>
          // Move Left
          if (currentColumn > 0) {
 8000fe2:	4b12      	ldr	r3, [pc, #72]	@ (800102c <handleGameTouchInput+0x60>)
 8000fe4:	f993 3000 	ldrsb.w	r3, [r3]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	dd1b      	ble.n	8001024 <handleGameTouchInput+0x58>
                currentColumn--;
 8000fec:	4b0f      	ldr	r3, [pc, #60]	@ (800102c <handleGameTouchInput+0x60>)
 8000fee:	f993 3000 	ldrsb.w	r3, [r3]
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	b25a      	sxtb	r2, r3
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800102c <handleGameTouchInput+0x60>)
 8000ffc:	701a      	strb	r2, [r3, #0]
                //printf("Preview Coin Moved Left to Column %d\n", currentColumn);
                drawPreviewCoin(); // Redraw preview coin in new position
 8000ffe:	f7ff fd95 	bl	8000b2c <drawPreviewCoin>
                currentColumn++;
                //printf("Preview Coin Moved Right to Column %d\n", currentColumn);
                drawPreviewCoin(); // Redraw preview coin in new position
          }
     }
}
 8001002:	e00f      	b.n	8001024 <handleGameTouchInput+0x58>
          if (currentColumn < BOARD_COLS - 1) {
 8001004:	4b09      	ldr	r3, [pc, #36]	@ (800102c <handleGameTouchInput+0x60>)
 8001006:	f993 3000 	ldrsb.w	r3, [r3]
 800100a:	2b05      	cmp	r3, #5
 800100c:	dc0a      	bgt.n	8001024 <handleGameTouchInput+0x58>
                currentColumn++;
 800100e:	4b07      	ldr	r3, [pc, #28]	@ (800102c <handleGameTouchInput+0x60>)
 8001010:	f993 3000 	ldrsb.w	r3, [r3]
 8001014:	b2db      	uxtb	r3, r3
 8001016:	3301      	adds	r3, #1
 8001018:	b2db      	uxtb	r3, r3
 800101a:	b25a      	sxtb	r2, r3
 800101c:	4b03      	ldr	r3, [pc, #12]	@ (800102c <handleGameTouchInput+0x60>)
 800101e:	701a      	strb	r2, [r3, #0]
                drawPreviewCoin(); // Redraw preview coin in new position
 8001020:	f7ff fd84 	bl	8000b2c <drawPreviewCoin>
}
 8001024:	bf00      	nop
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000000 	.word	0x20000000

08001030 <pollHardwareButton>:

void pollHardwareButton() {
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
    // Check if it's a player's turn state
    if (currentAppState != APP_STATE_GAME_P1_TURN && currentAppState != APP_STATE_GAME_P2_TURN) {
 8001036:	4b12      	ldr	r3, [pc, #72]	@ (8001080 <pollHardwareButton+0x50>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b02      	cmp	r3, #2
 800103c:	d003      	beq.n	8001046 <pollHardwareButton+0x16>
 800103e:	4b10      	ldr	r3, [pc, #64]	@ (8001080 <pollHardwareButton+0x50>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b03      	cmp	r3, #3
 8001044:	d117      	bne.n	8001076 <pollHardwareButton+0x46>
        return; // Only handle button presses during game turns
    }

    uint32_t currentTime = HAL_GetTick();
 8001046:	f002 fc05 	bl	8003854 <HAL_GetTick>
 800104a:	6078      	str	r0, [r7, #4]

    // Read the button state

    if (Button_IsPressed()) {
 800104c:	f000 fa92 	bl	8001574 <Button_IsPressed>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d010      	beq.n	8001078 <pollHardwareButton+0x48>

        // Debounce check
        if (currentTime - lastButtonPressTime > BUTTON_PRESS_DEBOUNCE) {
 8001056:	4b0b      	ldr	r3, [pc, #44]	@ (8001084 <pollHardwareButton+0x54>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001062:	d909      	bls.n	8001078 <pollHardwareButton+0x48>
            lastButtonPressTime = currentTime; // Update time of valid press
 8001064:	4a07      	ldr	r2, [pc, #28]	@ (8001084 <pollHardwareButton+0x54>)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6013      	str	r3, [r2, #0]
            printf("HW Button Pressed during game turn.\n");
 800106a:	4807      	ldr	r0, [pc, #28]	@ (8001088 <pollHardwareButton+0x58>)
 800106c:	f006 f900 	bl	8007270 <puts>
            dropCoin(); // Trigger the coin drop logic
 8001070:	f7ff fdc2 	bl	8000bf8 <dropCoin>
 8001074:	e000      	b.n	8001078 <pollHardwareButton+0x48>
        return; // Only handle button presses during game turns
 8001076:	bf00      	nop
    } else {
         // Button is not pressed
         // Can optionally reset debounce timer here if needed,
         // lastButtonPressTime = 0; // Allow immediate press after release
    }
}
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	2000009c 	.word	0x2000009c
 8001084:	200000f0 	.word	0x200000f0
 8001088:	08008464 	.word	0x08008464

0800108c <handleAITurn>:

void handleAITurn() {
 800108c:	b580      	push	{r7, lr}
 800108e:	b08a      	sub	sp, #40	@ 0x28
 8001090:	af00      	add	r7, sp, #0
    if (currentAppState != APP_STATE_GAME_AI_TURN) {
 8001092:	4b57      	ldr	r3, [pc, #348]	@ (80011f0 <handleAITurn+0x164>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b04      	cmp	r3, #4
 8001098:	f040 80a6 	bne.w	80011e8 <handleAITurn+0x15c>
        return;
    }

    //printf("AI Thinking...\n");
    HAL_Delay(500);
 800109c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010a0:	f002 fbe4 	bl	800386c <HAL_Delay>

    int chosen_col = -1; // Initialize to invalid column
 80010a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010a8:	627b      	str	r3, [r7, #36]	@ 0x24

    // --- 1. Check if AI (Player 2) can win ---
    for (int c = 0; c < BOARD_COLS; c++) {
 80010aa:	2300      	movs	r3, #0
 80010ac:	623b      	str	r3, [r7, #32]
 80010ae:	e00c      	b.n	80010ca <handleAITurn+0x3e>
        if (canPlayerWinByMovingHere(SLOT_PLAYER2, c)) {
 80010b0:	6a39      	ldr	r1, [r7, #32]
 80010b2:	2002      	movs	r0, #2
 80010b4:	f000 f8ae 	bl	8001214 <canPlayerWinByMovingHere>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d002      	beq.n	80010c4 <handleAITurn+0x38>
            chosen_col = c;
 80010be:	6a3b      	ldr	r3, [r7, #32]
 80010c0:	627b      	str	r3, [r7, #36]	@ 0x24
            //printf("AI found winning move in column %d\n", chosen_col);
            break; // Found winning move, no need to check further
 80010c2:	e005      	b.n	80010d0 <handleAITurn+0x44>
    for (int c = 0; c < BOARD_COLS; c++) {
 80010c4:	6a3b      	ldr	r3, [r7, #32]
 80010c6:	3301      	adds	r3, #1
 80010c8:	623b      	str	r3, [r7, #32]
 80010ca:	6a3b      	ldr	r3, [r7, #32]
 80010cc:	2b06      	cmp	r3, #6
 80010ce:	ddef      	ble.n	80010b0 <handleAITurn+0x24>
        }
    }

    // --- 2. If no AI win, check if Human (Player 1) can win (Block) ---
    if (chosen_col == -1) { // Only check defense if AI can't win
 80010d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80010d6:	d112      	bne.n	80010fe <handleAITurn+0x72>
        for (int c = 0; c < BOARD_COLS; c++) {
 80010d8:	2300      	movs	r3, #0
 80010da:	61fb      	str	r3, [r7, #28]
 80010dc:	e00c      	b.n	80010f8 <handleAITurn+0x6c>
            if (canPlayerWinByMovingHere(SLOT_PLAYER1, c)) {
 80010de:	69f9      	ldr	r1, [r7, #28]
 80010e0:	2001      	movs	r0, #1
 80010e2:	f000 f897 	bl	8001214 <canPlayerWinByMovingHere>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d002      	beq.n	80010f2 <handleAITurn+0x66>
                chosen_col = c;
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	627b      	str	r3, [r7, #36]	@ 0x24
                //printf("AI found defensive block in column %d\n", chosen_col);
                break; // Found blocking move, prioritize this
 80010f0:	e005      	b.n	80010fe <handleAITurn+0x72>
        for (int c = 0; c < BOARD_COLS; c++) {
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3301      	adds	r3, #1
 80010f6:	61fb      	str	r3, [r7, #28]
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	2b06      	cmp	r3, #6
 80010fc:	ddef      	ble.n	80010de <handleAITurn+0x52>
            }
        }
    }

    // --- 3. If no win and no block, choose a random valid column ---
    if (chosen_col == -1) {
 80010fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001100:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001104:	d161      	bne.n	80011ca <handleAITurn+0x13e>
        printf("AI making random move...\n");
 8001106:	483b      	ldr	r0, [pc, #236]	@ (80011f4 <handleAITurn+0x168>)
 8001108:	f006 f8b2 	bl	8007270 <puts>
        uint32_t random_val;
        int random_col_attempt;
        int available_row;
        int attempts = 0;
 800110c:	2300      	movs	r3, #0
 800110e:	613b      	str	r3, [r7, #16]
        const int max_attempts = 50; // Safety limit
 8001110:	2332      	movs	r3, #50	@ 0x32
 8001112:	60bb      	str	r3, [r7, #8]

        do {
            // Generate random number
            if (HAL_RNG_GenerateRandomNumber(&hrng, &random_val) != HAL_OK) {
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	4619      	mov	r1, r3
 8001118:	4837      	ldr	r0, [pc, #220]	@ (80011f8 <handleAITurn+0x16c>)
 800111a:	f005 f94f 	bl	80063bc <HAL_RNG_GenerateRandomNumber>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d006      	beq.n	8001132 <handleAITurn+0xa6>
                 printf("RNG Error! AI defaulting to first available column.\n");
 8001124:	4835      	ldr	r0, [pc, #212]	@ (80011fc <handleAITurn+0x170>)
 8001126:	f006 f8a3 	bl	8007270 <puts>
                 random_col_attempt = -1; // Signal error fallback
 800112a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800112e:	61bb      	str	r3, [r7, #24]
                 break;
 8001130:	e01c      	b.n	800116c <handleAITurn+0xe0>
            }
            random_col_attempt = random_val % BOARD_COLS; // Get column 0-6
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	4b32      	ldr	r3, [pc, #200]	@ (8001200 <handleAITurn+0x174>)
 8001136:	fba3 2301 	umull	r2, r3, r3, r1
 800113a:	1aca      	subs	r2, r1, r3
 800113c:	0852      	lsrs	r2, r2, #1
 800113e:	4413      	add	r3, r2
 8001140:	089a      	lsrs	r2, r3, #2
 8001142:	4613      	mov	r3, r2
 8001144:	00db      	lsls	r3, r3, #3
 8001146:	1a9b      	subs	r3, r3, r2
 8001148:	1aca      	subs	r2, r1, r3
 800114a:	61ba      	str	r2, [r7, #24]

            // Check if this column is valid
            available_row = findLowestEmptyRow(random_col_attempt);
 800114c:	69b8      	ldr	r0, [r7, #24]
 800114e:	f7ff fd25 	bl	8000b9c <findLowestEmptyRow>
 8001152:	6178      	str	r0, [r7, #20]

            attempts++;
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	3301      	adds	r3, #1
 8001158:	613b      	str	r3, [r7, #16]
            // Break if valid or if max attempts reached
            if (available_row != -1 || attempts > max_attempts) {
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001160:	d104      	bne.n	800116c <handleAITurn+0xe0>
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	429a      	cmp	r2, r3
 8001168:	dc00      	bgt.n	800116c <handleAITurn+0xe0>
            if (HAL_RNG_GenerateRandomNumber(&hrng, &random_val) != HAL_OK) {
 800116a:	e7d3      	b.n	8001114 <handleAITurn+0x88>
            }

        } while (true); // Loop until valid or max attempts

        // If random attempt failed after many tries or RNG error, scan linearly
        if (available_row == -1) {
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001172:	d116      	bne.n	80011a2 <handleAITurn+0x116>
             //printf("AI random move failed/timed out, trying linear scan.\n");
             for (int c = 0; c < BOARD_COLS; c++) {
 8001174:	2300      	movs	r3, #0
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	e010      	b.n	800119c <handleAITurn+0x110>
                  if (findLowestEmptyRow(c) != -1) {
 800117a:	68f8      	ldr	r0, [r7, #12]
 800117c:	f7ff fd0e 	bl	8000b9c <findLowestEmptyRow>
 8001180:	4603      	mov	r3, r0
 8001182:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001186:	d006      	beq.n	8001196 <handleAITurn+0x10a>
                      random_col_attempt = c; // Found first available column
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	61bb      	str	r3, [r7, #24]
                      available_row = findLowestEmptyRow(c); // Re-check just in case
 800118c:	68f8      	ldr	r0, [r7, #12]
 800118e:	f7ff fd05 	bl	8000b9c <findLowestEmptyRow>
 8001192:	6178      	str	r0, [r7, #20]
                      break;
 8001194:	e005      	b.n	80011a2 <handleAITurn+0x116>
             for (int c = 0; c < BOARD_COLS; c++) {
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	3301      	adds	r3, #1
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2b06      	cmp	r3, #6
 80011a0:	ddeb      	ble.n	800117a <handleAITurn+0xee>
                  }
             }
        }

        // If still no valid column, game should be a tie (this is a safeguard)
        if(available_row == -1) {
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80011a8:	d10d      	bne.n	80011c6 <handleAITurn+0x13a>
             //printf("AI Error: No valid random moves found on board.\n");
             currentAppState = APP_STATE_GAME_OVER;
 80011aa:	4b11      	ldr	r3, [pc, #68]	@ (80011f0 <handleAITurn+0x164>)
 80011ac:	2206      	movs	r2, #6
 80011ae:	701a      	strb	r2, [r3, #0]
             roundWinner = SLOT_EMPTY; // Force tie
 80011b0:	4b14      	ldr	r3, [pc, #80]	@ (8001204 <handleAITurn+0x178>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	701a      	strb	r2, [r3, #0]
             roundEndTime = HAL_GetTick();
 80011b6:	f002 fb4d 	bl	8003854 <HAL_GetTick>
 80011ba:	4603      	mov	r3, r0
 80011bc:	4a12      	ldr	r2, [pc, #72]	@ (8001208 <handleAITurn+0x17c>)
 80011be:	6013      	str	r3, [r2, #0]
             drawGameOverScreen();
 80011c0:	f7ff fba8 	bl	8000914 <drawGameOverScreen>
 80011c4:	e011      	b.n	80011ea <handleAITurn+0x15e>
             return;
        }

        chosen_col = random_col_attempt; // Use the valid random (or fallback) column
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	627b      	str	r3, [r7, #36]	@ 0x24
        //printf("AI random choice is column %d\n", chosen_col);
    }


    // --- Execute the chosen move ---
    if (chosen_col != -1) {
 80011ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80011d0:	d006      	beq.n	80011e0 <handleAITurn+0x154>
        currentColumn = chosen_col; // Set the column for dropCoin
 80011d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d4:	b25a      	sxtb	r2, r3
 80011d6:	4b0d      	ldr	r3, [pc, #52]	@ (800120c <handleAITurn+0x180>)
 80011d8:	701a      	strb	r2, [r3, #0]
        dropCoin(); // Execute the drop
 80011da:	f7ff fd0d 	bl	8000bf8 <dropCoin>
 80011de:	e004      	b.n	80011ea <handleAITurn+0x15e>
    } else {
        printf("AI Error: No column chosen!\n");
 80011e0:	480b      	ldr	r0, [pc, #44]	@ (8001210 <handleAITurn+0x184>)
 80011e2:	f006 f845 	bl	8007270 <puts>
 80011e6:	e000      	b.n	80011ea <handleAITurn+0x15e>
        return;
 80011e8:	bf00      	nop
    }
}
 80011ea:	3728      	adds	r7, #40	@ 0x28
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	2000009c 	.word	0x2000009c
 80011f4:	08008488 	.word	0x08008488
 80011f8:	20025b2c 	.word	0x20025b2c
 80011fc:	080084a4 	.word	0x080084a4
 8001200:	24924925 	.word	0x24924925
 8001204:	200000e8 	.word	0x200000e8
 8001208:	200000e4 	.word	0x200000e4
 800120c:	20000000 	.word	0x20000000
 8001210:	080084d8 	.word	0x080084d8

08001214 <canPlayerWinByMovingHere>:

bool canPlayerWinByMovingHere(SlotState_t player, int col) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	6039      	str	r1, [r7, #0]
 800121e:	71fb      	strb	r3, [r7, #7]
    if (col < 0 || col >= BOARD_COLS) {
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	2b00      	cmp	r3, #0
 8001224:	db02      	blt.n	800122c <canPlayerWinByMovingHere+0x18>
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	2b06      	cmp	r3, #6
 800122a:	dd01      	ble.n	8001230 <canPlayerWinByMovingHere+0x1c>
        return false; // Invalid column
 800122c:	2300      	movs	r3, #0
 800122e:	e024      	b.n	800127a <canPlayerWinByMovingHere+0x66>
    }

    int row = findLowestEmptyRow(col);
 8001230:	6838      	ldr	r0, [r7, #0]
 8001232:	f7ff fcb3 	bl	8000b9c <findLowestEmptyRow>
 8001236:	60f8      	str	r0, [r7, #12]
    if (row == -1) {
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800123e:	d101      	bne.n	8001244 <canPlayerWinByMovingHere+0x30>
        return false; // Column is full, cannot move here
 8001240:	2300      	movs	r3, #0
 8001242:	e01a      	b.n	800127a <canPlayerWinByMovingHere+0x66>
    }

    // Simulate the move
    gameBoard[row][col] = player;
 8001244:	490f      	ldr	r1, [pc, #60]	@ (8001284 <canPlayerWinByMovingHere+0x70>)
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	4613      	mov	r3, r2
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	1a9b      	subs	r3, r3, r2
 800124e:	18ca      	adds	r2, r1, r3
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	4413      	add	r3, r2
 8001254:	79fa      	ldrb	r2, [r7, #7]
 8001256:	701a      	strb	r2, [r3, #0]

    // Check for win after simulated move
    bool win = checkWin(player);
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	4618      	mov	r0, r3
 800125c:	f000 f814 	bl	8001288 <checkWin>
 8001260:	4603      	mov	r3, r0
 8001262:	72fb      	strb	r3, [r7, #11]

    // Undo the simulated move
    gameBoard[row][col] = SLOT_EMPTY;
 8001264:	4907      	ldr	r1, [pc, #28]	@ (8001284 <canPlayerWinByMovingHere+0x70>)
 8001266:	68fa      	ldr	r2, [r7, #12]
 8001268:	4613      	mov	r3, r2
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	1a9b      	subs	r3, r3, r2
 800126e:	18ca      	adds	r2, r1, r3
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	4413      	add	r3, r2
 8001274:	2200      	movs	r2, #0
 8001276:	701a      	strb	r2, [r3, #0]

    return win;
 8001278:	7afb      	ldrb	r3, [r7, #11]
}
 800127a:	4618      	mov	r0, r3
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	200000a8 	.word	0x200000a8

08001288 <checkWin>:

bool checkWin(SlotState_t player) {
 8001288:	b480      	push	{r7}
 800128a:	b08b      	sub	sp, #44	@ 0x2c
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
    // Check horizontal win
    for (int r = 0; r < BOARD_ROWS; r++) {
 8001292:	2300      	movs	r3, #0
 8001294:	627b      	str	r3, [r7, #36]	@ 0x24
 8001296:	e040      	b.n	800131a <checkWin+0x92>
        for (int c = 0; c <= BOARD_COLS - 4; c++) {
 8001298:	2300      	movs	r3, #0
 800129a:	623b      	str	r3, [r7, #32]
 800129c:	e037      	b.n	800130e <checkWin+0x86>
            if (gameBoard[r][c] == player &&
 800129e:	4991      	ldr	r1, [pc, #580]	@ (80014e4 <checkWin+0x25c>)
 80012a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012a2:	4613      	mov	r3, r2
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	1a9b      	subs	r3, r3, r2
 80012a8:	18ca      	adds	r2, r1, r3
 80012aa:	6a3b      	ldr	r3, [r7, #32]
 80012ac:	4413      	add	r3, r2
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	79fa      	ldrb	r2, [r7, #7]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d128      	bne.n	8001308 <checkWin+0x80>
                gameBoard[r][c+1] == player &&
 80012b6:	6a3b      	ldr	r3, [r7, #32]
 80012b8:	1c59      	adds	r1, r3, #1
 80012ba:	488a      	ldr	r0, [pc, #552]	@ (80014e4 <checkWin+0x25c>)
 80012bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012be:	4613      	mov	r3, r2
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	1a9b      	subs	r3, r3, r2
 80012c4:	4403      	add	r3, r0
 80012c6:	440b      	add	r3, r1
 80012c8:	781b      	ldrb	r3, [r3, #0]
            if (gameBoard[r][c] == player &&
 80012ca:	79fa      	ldrb	r2, [r7, #7]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d11b      	bne.n	8001308 <checkWin+0x80>
                gameBoard[r][c+2] == player &&
 80012d0:	6a3b      	ldr	r3, [r7, #32]
 80012d2:	1c99      	adds	r1, r3, #2
 80012d4:	4883      	ldr	r0, [pc, #524]	@ (80014e4 <checkWin+0x25c>)
 80012d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012d8:	4613      	mov	r3, r2
 80012da:	00db      	lsls	r3, r3, #3
 80012dc:	1a9b      	subs	r3, r3, r2
 80012de:	4403      	add	r3, r0
 80012e0:	440b      	add	r3, r1
 80012e2:	781b      	ldrb	r3, [r3, #0]
                gameBoard[r][c+1] == player &&
 80012e4:	79fa      	ldrb	r2, [r7, #7]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d10e      	bne.n	8001308 <checkWin+0x80>
                gameBoard[r][c+3] == player) {
 80012ea:	6a3b      	ldr	r3, [r7, #32]
 80012ec:	1cd9      	adds	r1, r3, #3
 80012ee:	487d      	ldr	r0, [pc, #500]	@ (80014e4 <checkWin+0x25c>)
 80012f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012f2:	4613      	mov	r3, r2
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	1a9b      	subs	r3, r3, r2
 80012f8:	4403      	add	r3, r0
 80012fa:	440b      	add	r3, r1
 80012fc:	781b      	ldrb	r3, [r3, #0]
                gameBoard[r][c+2] == player &&
 80012fe:	79fa      	ldrb	r2, [r7, #7]
 8001300:	429a      	cmp	r2, r3
 8001302:	d101      	bne.n	8001308 <checkWin+0x80>
                return true;
 8001304:	2301      	movs	r3, #1
 8001306:	e0e7      	b.n	80014d8 <checkWin+0x250>
        for (int c = 0; c <= BOARD_COLS - 4; c++) {
 8001308:	6a3b      	ldr	r3, [r7, #32]
 800130a:	3301      	adds	r3, #1
 800130c:	623b      	str	r3, [r7, #32]
 800130e:	6a3b      	ldr	r3, [r7, #32]
 8001310:	2b03      	cmp	r3, #3
 8001312:	ddc4      	ble.n	800129e <checkWin+0x16>
    for (int r = 0; r < BOARD_ROWS; r++) {
 8001314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001316:	3301      	adds	r3, #1
 8001318:	627b      	str	r3, [r7, #36]	@ 0x24
 800131a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800131c:	2b05      	cmp	r3, #5
 800131e:	ddbb      	ble.n	8001298 <checkWin+0x10>
            }
        }
    }

    // Check vertical win
    for (int r = 0; r <= BOARD_ROWS - 4; r++) {
 8001320:	2300      	movs	r3, #0
 8001322:	61fb      	str	r3, [r7, #28]
 8001324:	e040      	b.n	80013a8 <checkWin+0x120>
        for (int c = 0; c < BOARD_COLS; c++) {
 8001326:	2300      	movs	r3, #0
 8001328:	61bb      	str	r3, [r7, #24]
 800132a:	e037      	b.n	800139c <checkWin+0x114>
            if (gameBoard[r][c] == player &&
 800132c:	496d      	ldr	r1, [pc, #436]	@ (80014e4 <checkWin+0x25c>)
 800132e:	69fa      	ldr	r2, [r7, #28]
 8001330:	4613      	mov	r3, r2
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	1a9b      	subs	r3, r3, r2
 8001336:	18ca      	adds	r2, r1, r3
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	4413      	add	r3, r2
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	79fa      	ldrb	r2, [r7, #7]
 8001340:	429a      	cmp	r2, r3
 8001342:	d128      	bne.n	8001396 <checkWin+0x10e>
                gameBoard[r+1][c] == player &&
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	1c5a      	adds	r2, r3, #1
 8001348:	4966      	ldr	r1, [pc, #408]	@ (80014e4 <checkWin+0x25c>)
 800134a:	4613      	mov	r3, r2
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	1a9b      	subs	r3, r3, r2
 8001350:	18ca      	adds	r2, r1, r3
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	4413      	add	r3, r2
 8001356:	781b      	ldrb	r3, [r3, #0]
            if (gameBoard[r][c] == player &&
 8001358:	79fa      	ldrb	r2, [r7, #7]
 800135a:	429a      	cmp	r2, r3
 800135c:	d11b      	bne.n	8001396 <checkWin+0x10e>
                gameBoard[r+2][c] == player &&
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	1c9a      	adds	r2, r3, #2
 8001362:	4960      	ldr	r1, [pc, #384]	@ (80014e4 <checkWin+0x25c>)
 8001364:	4613      	mov	r3, r2
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	1a9b      	subs	r3, r3, r2
 800136a:	18ca      	adds	r2, r1, r3
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	4413      	add	r3, r2
 8001370:	781b      	ldrb	r3, [r3, #0]
                gameBoard[r+1][c] == player &&
 8001372:	79fa      	ldrb	r2, [r7, #7]
 8001374:	429a      	cmp	r2, r3
 8001376:	d10e      	bne.n	8001396 <checkWin+0x10e>
                gameBoard[r+3][c] == player) {
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	1cda      	adds	r2, r3, #3
 800137c:	4959      	ldr	r1, [pc, #356]	@ (80014e4 <checkWin+0x25c>)
 800137e:	4613      	mov	r3, r2
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	1a9b      	subs	r3, r3, r2
 8001384:	18ca      	adds	r2, r1, r3
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	4413      	add	r3, r2
 800138a:	781b      	ldrb	r3, [r3, #0]
                gameBoard[r+2][c] == player &&
 800138c:	79fa      	ldrb	r2, [r7, #7]
 800138e:	429a      	cmp	r2, r3
 8001390:	d101      	bne.n	8001396 <checkWin+0x10e>
                return true;
 8001392:	2301      	movs	r3, #1
 8001394:	e0a0      	b.n	80014d8 <checkWin+0x250>
        for (int c = 0; c < BOARD_COLS; c++) {
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	3301      	adds	r3, #1
 800139a:	61bb      	str	r3, [r7, #24]
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	2b06      	cmp	r3, #6
 80013a0:	ddc4      	ble.n	800132c <checkWin+0xa4>
    for (int r = 0; r <= BOARD_ROWS - 4; r++) {
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3301      	adds	r3, #1
 80013a6:	61fb      	str	r3, [r7, #28]
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	ddbb      	ble.n	8001326 <checkWin+0x9e>
            }
        }
    }

    // Check diagonal win (down-right)
    for (int r = 0; r <= BOARD_ROWS - 4; r++) {
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]
 80013b2:	e043      	b.n	800143c <checkWin+0x1b4>
        for (int c = 0; c <= BOARD_COLS - 4; c++) {
 80013b4:	2300      	movs	r3, #0
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	e03a      	b.n	8001430 <checkWin+0x1a8>
            if (gameBoard[r][c] == player &&
 80013ba:	494a      	ldr	r1, [pc, #296]	@ (80014e4 <checkWin+0x25c>)
 80013bc:	697a      	ldr	r2, [r7, #20]
 80013be:	4613      	mov	r3, r2
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	1a9b      	subs	r3, r3, r2
 80013c4:	18ca      	adds	r2, r1, r3
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	4413      	add	r3, r2
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	79fa      	ldrb	r2, [r7, #7]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d12b      	bne.n	800142a <checkWin+0x1a2>
                gameBoard[r+1][c+1] == player &&
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	1c5a      	adds	r2, r3, #1
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1c59      	adds	r1, r3, #1
 80013da:	4842      	ldr	r0, [pc, #264]	@ (80014e4 <checkWin+0x25c>)
 80013dc:	4613      	mov	r3, r2
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	1a9b      	subs	r3, r3, r2
 80013e2:	4403      	add	r3, r0
 80013e4:	440b      	add	r3, r1
 80013e6:	781b      	ldrb	r3, [r3, #0]
            if (gameBoard[r][c] == player &&
 80013e8:	79fa      	ldrb	r2, [r7, #7]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d11d      	bne.n	800142a <checkWin+0x1a2>
                gameBoard[r+2][c+2] == player &&
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	1c9a      	adds	r2, r3, #2
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	1c99      	adds	r1, r3, #2
 80013f6:	483b      	ldr	r0, [pc, #236]	@ (80014e4 <checkWin+0x25c>)
 80013f8:	4613      	mov	r3, r2
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	1a9b      	subs	r3, r3, r2
 80013fe:	4403      	add	r3, r0
 8001400:	440b      	add	r3, r1
 8001402:	781b      	ldrb	r3, [r3, #0]
                gameBoard[r+1][c+1] == player &&
 8001404:	79fa      	ldrb	r2, [r7, #7]
 8001406:	429a      	cmp	r2, r3
 8001408:	d10f      	bne.n	800142a <checkWin+0x1a2>
                gameBoard[r+3][c+3] == player) {
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	1cda      	adds	r2, r3, #3
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1cd9      	adds	r1, r3, #3
 8001412:	4834      	ldr	r0, [pc, #208]	@ (80014e4 <checkWin+0x25c>)
 8001414:	4613      	mov	r3, r2
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	1a9b      	subs	r3, r3, r2
 800141a:	4403      	add	r3, r0
 800141c:	440b      	add	r3, r1
 800141e:	781b      	ldrb	r3, [r3, #0]
                gameBoard[r+2][c+2] == player &&
 8001420:	79fa      	ldrb	r2, [r7, #7]
 8001422:	429a      	cmp	r2, r3
 8001424:	d101      	bne.n	800142a <checkWin+0x1a2>
                return true;
 8001426:	2301      	movs	r3, #1
 8001428:	e056      	b.n	80014d8 <checkWin+0x250>
        for (int c = 0; c <= BOARD_COLS - 4; c++) {
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	3301      	adds	r3, #1
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	2b03      	cmp	r3, #3
 8001434:	ddc1      	ble.n	80013ba <checkWin+0x132>
    for (int r = 0; r <= BOARD_ROWS - 4; r++) {
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	3301      	adds	r3, #1
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	2b02      	cmp	r3, #2
 8001440:	ddb8      	ble.n	80013b4 <checkWin+0x12c>
            }
        }
    }

    // Check diagonal win (up-right)
    for (int r = 3; r < BOARD_ROWS; r++) {
 8001442:	2303      	movs	r3, #3
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	e043      	b.n	80014d0 <checkWin+0x248>
        for (int c = 0; c <= BOARD_COLS - 4; c++) {
 8001448:	2300      	movs	r3, #0
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	e03a      	b.n	80014c4 <checkWin+0x23c>
            if (gameBoard[r][c] == player &&
 800144e:	4925      	ldr	r1, [pc, #148]	@ (80014e4 <checkWin+0x25c>)
 8001450:	68fa      	ldr	r2, [r7, #12]
 8001452:	4613      	mov	r3, r2
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	1a9b      	subs	r3, r3, r2
 8001458:	18ca      	adds	r2, r1, r3
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	4413      	add	r3, r2
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	79fa      	ldrb	r2, [r7, #7]
 8001462:	429a      	cmp	r2, r3
 8001464:	d12b      	bne.n	80014be <checkWin+0x236>
                gameBoard[r-1][c+1] == player &&
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	1e5a      	subs	r2, r3, #1
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	1c59      	adds	r1, r3, #1
 800146e:	481d      	ldr	r0, [pc, #116]	@ (80014e4 <checkWin+0x25c>)
 8001470:	4613      	mov	r3, r2
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	1a9b      	subs	r3, r3, r2
 8001476:	4403      	add	r3, r0
 8001478:	440b      	add	r3, r1
 800147a:	781b      	ldrb	r3, [r3, #0]
            if (gameBoard[r][c] == player &&
 800147c:	79fa      	ldrb	r2, [r7, #7]
 800147e:	429a      	cmp	r2, r3
 8001480:	d11d      	bne.n	80014be <checkWin+0x236>
                gameBoard[r-2][c+2] == player &&
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	1e9a      	subs	r2, r3, #2
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	1c99      	adds	r1, r3, #2
 800148a:	4816      	ldr	r0, [pc, #88]	@ (80014e4 <checkWin+0x25c>)
 800148c:	4613      	mov	r3, r2
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	1a9b      	subs	r3, r3, r2
 8001492:	4403      	add	r3, r0
 8001494:	440b      	add	r3, r1
 8001496:	781b      	ldrb	r3, [r3, #0]
                gameBoard[r-1][c+1] == player &&
 8001498:	79fa      	ldrb	r2, [r7, #7]
 800149a:	429a      	cmp	r2, r3
 800149c:	d10f      	bne.n	80014be <checkWin+0x236>
                gameBoard[r-3][c+3] == player) {
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	1eda      	subs	r2, r3, #3
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	1cd9      	adds	r1, r3, #3
 80014a6:	480f      	ldr	r0, [pc, #60]	@ (80014e4 <checkWin+0x25c>)
 80014a8:	4613      	mov	r3, r2
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	1a9b      	subs	r3, r3, r2
 80014ae:	4403      	add	r3, r0
 80014b0:	440b      	add	r3, r1
 80014b2:	781b      	ldrb	r3, [r3, #0]
                gameBoard[r-2][c+2] == player &&
 80014b4:	79fa      	ldrb	r2, [r7, #7]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d101      	bne.n	80014be <checkWin+0x236>
                return true;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e00c      	b.n	80014d8 <checkWin+0x250>
        for (int c = 0; c <= BOARD_COLS - 4; c++) {
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	3301      	adds	r3, #1
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	2b03      	cmp	r3, #3
 80014c8:	ddc1      	ble.n	800144e <checkWin+0x1c6>
    for (int r = 3; r < BOARD_ROWS; r++) {
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	3301      	adds	r3, #1
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2b05      	cmp	r3, #5
 80014d4:	ddb8      	ble.n	8001448 <checkWin+0x1c0>
            }
        }
    }

    return false; // No win condition found
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	372c      	adds	r7, #44	@ 0x2c
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	200000a8 	.word	0x200000a8

080014e8 <checkTie>:

bool checkTie(void) {
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
    // If any slot in the top row is empty, the board isn't full
    for (int c = 0; c < BOARD_COLS; c++) {
 80014ee:	2300      	movs	r3, #0
 80014f0:	607b      	str	r3, [r7, #4]
 80014f2:	e00a      	b.n	800150a <checkTie+0x22>
        if (gameBoard[0][c] == SLOT_EMPTY) {
 80014f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001520 <checkTie+0x38>)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4413      	add	r3, r2
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <checkTie+0x1c>
            return false;
 8001500:	2300      	movs	r3, #0
 8001502:	e006      	b.n	8001512 <checkTie+0x2a>
    for (int c = 0; c < BOARD_COLS; c++) {
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3301      	adds	r3, #1
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2b06      	cmp	r3, #6
 800150e:	ddf1      	ble.n	80014f4 <checkTie+0xc>
        }
    }
    // If we get here, the top row is full, so the board is full
    return true;
 8001510:	2301      	movs	r3, #1
}
 8001512:	4618      	mov	r0, r3
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	200000a8 	.word	0x200000a8

08001524 <Button_Init>:
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	2300      	movs	r3, #0
 800152c:	603b      	str	r3, [r7, #0]
 800152e:	4b0f      	ldr	r3, [pc, #60]	@ (800156c <Button_Init+0x48>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001532:	4a0e      	ldr	r2, [pc, #56]	@ (800156c <Button_Init+0x48>)
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	6313      	str	r3, [r2, #48]	@ 0x30
 800153a:	4b0c      	ldr	r3, [pc, #48]	@ (800156c <Button_Init+0x48>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	603b      	str	r3, [r7, #0]
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	2301      	movs	r3, #1
 8001548:	607b      	str	r3, [r7, #4]
 800154a:	2300      	movs	r3, #0
 800154c:	60bb      	str	r3, [r7, #8]
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	2300      	movs	r3, #0
 8001554:	613b      	str	r3, [r7, #16]
 8001556:	2311      	movs	r3, #17
 8001558:	617b      	str	r3, [r7, #20]
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	4619      	mov	r1, r3
 800155e:	4804      	ldr	r0, [pc, #16]	@ (8001570 <Button_Init+0x4c>)
 8001560:	f002 fa8e 	bl	8003a80 <HAL_GPIO_Init>
 8001564:	bf00      	nop
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40023800 	.word	0x40023800
 8001570:	40020000 	.word	0x40020000

08001574 <Button_IsPressed>:
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	2101      	movs	r1, #1
 800157c:	4807      	ldr	r0, [pc, #28]	@ (800159c <Button_IsPressed+0x28>)
 800157e:	f002 fd37 	bl	8003ff0 <HAL_GPIO_ReadPin>
 8001582:	4603      	mov	r3, r0
 8001584:	607b      	str	r3, [r7, #4]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <Button_IsPressed+0x1c>
 800158c:	2301      	movs	r3, #1
 800158e:	e000      	b.n	8001592 <Button_IsPressed+0x1e>
 8001590:	2300      	movs	r3, #0
 8001592:	4618      	mov	r0, r3
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40020000 	.word	0x40020000

080015a0 <LCD_GPIO_Init>:
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08c      	sub	sp, #48	@ 0x30
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	2300      	movs	r3, #0
 80015a8:	61bb      	str	r3, [r7, #24]
 80015aa:	4b5a      	ldr	r3, [pc, #360]	@ (8001714 <LCD_GPIO_Init+0x174>)
 80015ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ae:	4a59      	ldr	r2, [pc, #356]	@ (8001714 <LCD_GPIO_Init+0x174>)
 80015b0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80015b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80015b6:	4b57      	ldr	r3, [pc, #348]	@ (8001714 <LCD_GPIO_Init+0x174>)
 80015b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ba:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80015be:	61bb      	str	r3, [r7, #24]
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
 80015c6:	4b53      	ldr	r3, [pc, #332]	@ (8001714 <LCD_GPIO_Init+0x174>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ca:	4a52      	ldr	r2, [pc, #328]	@ (8001714 <LCD_GPIO_Init+0x174>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015d2:	4b50      	ldr	r3, [pc, #320]	@ (8001714 <LCD_GPIO_Init+0x174>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	617b      	str	r3, [r7, #20]
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	4b4c      	ldr	r3, [pc, #304]	@ (8001714 <LCD_GPIO_Init+0x174>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	4a4b      	ldr	r2, [pc, #300]	@ (8001714 <LCD_GPIO_Init+0x174>)
 80015e8:	f043 0302 	orr.w	r3, r3, #2
 80015ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ee:	4b49      	ldr	r3, [pc, #292]	@ (8001714 <LCD_GPIO_Init+0x174>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	4b45      	ldr	r3, [pc, #276]	@ (8001714 <LCD_GPIO_Init+0x174>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	4a44      	ldr	r2, [pc, #272]	@ (8001714 <LCD_GPIO_Init+0x174>)
 8001604:	f043 0304 	orr.w	r3, r3, #4
 8001608:	6313      	str	r3, [r2, #48]	@ 0x30
 800160a:	4b42      	ldr	r3, [pc, #264]	@ (8001714 <LCD_GPIO_Init+0x174>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160e:	f003 0304 	and.w	r3, r3, #4
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2300      	movs	r3, #0
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	4b3e      	ldr	r3, [pc, #248]	@ (8001714 <LCD_GPIO_Init+0x174>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	4a3d      	ldr	r2, [pc, #244]	@ (8001714 <LCD_GPIO_Init+0x174>)
 8001620:	f043 0308 	orr.w	r3, r3, #8
 8001624:	6313      	str	r3, [r2, #48]	@ 0x30
 8001626:	4b3b      	ldr	r3, [pc, #236]	@ (8001714 <LCD_GPIO_Init+0x174>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	f003 0308 	and.w	r3, r3, #8
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	2300      	movs	r3, #0
 8001634:	607b      	str	r3, [r7, #4]
 8001636:	4b37      	ldr	r3, [pc, #220]	@ (8001714 <LCD_GPIO_Init+0x174>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163a:	4a36      	ldr	r2, [pc, #216]	@ (8001714 <LCD_GPIO_Init+0x174>)
 800163c:	f043 0320 	orr.w	r3, r3, #32
 8001640:	6313      	str	r3, [r2, #48]	@ 0x30
 8001642:	4b34      	ldr	r3, [pc, #208]	@ (8001714 <LCD_GPIO_Init+0x174>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001646:	f003 0320 	and.w	r3, r3, #32
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2300      	movs	r3, #0
 8001650:	603b      	str	r3, [r7, #0]
 8001652:	4b30      	ldr	r3, [pc, #192]	@ (8001714 <LCD_GPIO_Init+0x174>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	4a2f      	ldr	r2, [pc, #188]	@ (8001714 <LCD_GPIO_Init+0x174>)
 8001658:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800165c:	6313      	str	r3, [r2, #48]	@ 0x30
 800165e:	4b2d      	ldr	r3, [pc, #180]	@ (8001714 <LCD_GPIO_Init+0x174>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001666:	603b      	str	r3, [r7, #0]
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	f641 0358 	movw	r3, #6232	@ 0x1858
 800166e:	61fb      	str	r3, [r7, #28]
 8001670:	2302      	movs	r3, #2
 8001672:	623b      	str	r3, [r7, #32]
 8001674:	2300      	movs	r3, #0
 8001676:	627b      	str	r3, [r7, #36]	@ 0x24
 8001678:	2302      	movs	r3, #2
 800167a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800167c:	230e      	movs	r3, #14
 800167e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001680:	f107 031c 	add.w	r3, r7, #28
 8001684:	4619      	mov	r1, r3
 8001686:	4824      	ldr	r0, [pc, #144]	@ (8001718 <LCD_GPIO_Init+0x178>)
 8001688:	f002 f9fa 	bl	8003a80 <HAL_GPIO_Init>
 800168c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001690:	61fb      	str	r3, [r7, #28]
 8001692:	f107 031c 	add.w	r3, r7, #28
 8001696:	4619      	mov	r1, r3
 8001698:	4820      	ldr	r0, [pc, #128]	@ (800171c <LCD_GPIO_Init+0x17c>)
 800169a:	f002 f9f1 	bl	8003a80 <HAL_GPIO_Init>
 800169e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80016a2:	61fb      	str	r3, [r7, #28]
 80016a4:	f107 031c 	add.w	r3, r7, #28
 80016a8:	4619      	mov	r1, r3
 80016aa:	481d      	ldr	r0, [pc, #116]	@ (8001720 <LCD_GPIO_Init+0x180>)
 80016ac:	f002 f9e8 	bl	8003a80 <HAL_GPIO_Init>
 80016b0:	2348      	movs	r3, #72	@ 0x48
 80016b2:	61fb      	str	r3, [r7, #28]
 80016b4:	f107 031c 	add.w	r3, r7, #28
 80016b8:	4619      	mov	r1, r3
 80016ba:	481a      	ldr	r0, [pc, #104]	@ (8001724 <LCD_GPIO_Init+0x184>)
 80016bc:	f002 f9e0 	bl	8003a80 <HAL_GPIO_Init>
 80016c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016c4:	61fb      	str	r3, [r7, #28]
 80016c6:	f107 031c 	add.w	r3, r7, #28
 80016ca:	4619      	mov	r1, r3
 80016cc:	4816      	ldr	r0, [pc, #88]	@ (8001728 <LCD_GPIO_Init+0x188>)
 80016ce:	f002 f9d7 	bl	8003a80 <HAL_GPIO_Init>
 80016d2:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80016d6:	61fb      	str	r3, [r7, #28]
 80016d8:	f107 031c 	add.w	r3, r7, #28
 80016dc:	4619      	mov	r1, r3
 80016de:	4813      	ldr	r0, [pc, #76]	@ (800172c <LCD_GPIO_Init+0x18c>)
 80016e0:	f002 f9ce 	bl	8003a80 <HAL_GPIO_Init>
 80016e4:	2303      	movs	r3, #3
 80016e6:	61fb      	str	r3, [r7, #28]
 80016e8:	2309      	movs	r3, #9
 80016ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016ec:	f107 031c 	add.w	r3, r7, #28
 80016f0:	4619      	mov	r1, r3
 80016f2:	480a      	ldr	r0, [pc, #40]	@ (800171c <LCD_GPIO_Init+0x17c>)
 80016f4:	f002 f9c4 	bl	8003a80 <HAL_GPIO_Init>
 80016f8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80016fc:	61fb      	str	r3, [r7, #28]
 80016fe:	f107 031c 	add.w	r3, r7, #28
 8001702:	4619      	mov	r1, r3
 8001704:	4809      	ldr	r0, [pc, #36]	@ (800172c <LCD_GPIO_Init+0x18c>)
 8001706:	f002 f9bb 	bl	8003a80 <HAL_GPIO_Init>
 800170a:	bf00      	nop
 800170c:	3730      	adds	r7, #48	@ 0x30
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40023800 	.word	0x40023800
 8001718:	40020000 	.word	0x40020000
 800171c:	40020400 	.word	0x40020400
 8001720:	40020800 	.word	0x40020800
 8001724:	40020c00 	.word	0x40020c00
 8001728:	40021400 	.word	0x40021400
 800172c:	40021800 	.word	0x40021800

08001730 <LTCD_Layer_Init>:
 8001730:	b580      	push	{r7, lr}
 8001732:	b090      	sub	sp, #64	@ 0x40
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	71fb      	strb	r3, [r7, #7]
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	23f0      	movs	r3, #240	@ 0xf0
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	2300      	movs	r3, #0
 8001744:	617b      	str	r3, [r7, #20]
 8001746:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800174a:	61bb      	str	r3, [r7, #24]
 800174c:	2302      	movs	r3, #2
 800174e:	61fb      	str	r3, [r7, #28]
 8001750:	23ff      	movs	r3, #255	@ 0xff
 8001752:	623b      	str	r3, [r7, #32]
 8001754:	2300      	movs	r3, #0
 8001756:	627b      	str	r3, [r7, #36]	@ 0x24
 8001758:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800175c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800175e:	2305      	movs	r3, #5
 8001760:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d101      	bne.n	800176c <LTCD_Layer_Init+0x3c>
 8001768:	4b0f      	ldr	r3, [pc, #60]	@ (80017a8 <LTCD_Layer_Init+0x78>)
 800176a:	633b      	str	r3, [r7, #48]	@ 0x30
 800176c:	23f0      	movs	r3, #240	@ 0xf0
 800176e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001770:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001774:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001776:	2300      	movs	r3, #0
 8001778:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 800177c:	2300      	movs	r3, #0
 800177e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8001782:	2300      	movs	r3, #0
 8001784:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8001788:	79fa      	ldrb	r2, [r7, #7]
 800178a:	f107 030c 	add.w	r3, r7, #12
 800178e:	4619      	mov	r1, r3
 8001790:	4806      	ldr	r0, [pc, #24]	@ (80017ac <LTCD_Layer_Init+0x7c>)
 8001792:	f003 fdcf 	bl	8005334 <HAL_LTDC_ConfigLayer>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <LTCD_Layer_Init+0x70>
 800179c:	f000 f9f2 	bl	8001b84 <LCD_Error_Handler>
 80017a0:	bf00      	nop
 80017a2:	3740      	adds	r7, #64	@ 0x40
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	200001d0 	.word	0x200001d0
 80017ac:	200000f4 	.word	0x200000f4

080017b0 <LTCD__Init>:
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001860 <LTCD__Init+0xb0>)
 80017b6:	4a2b      	ldr	r2, [pc, #172]	@ (8001864 <LTCD__Init+0xb4>)
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	4b29      	ldr	r3, [pc, #164]	@ (8001860 <LTCD__Init+0xb0>)
 80017bc:	2209      	movs	r2, #9
 80017be:	615a      	str	r2, [r3, #20]
 80017c0:	4b27      	ldr	r3, [pc, #156]	@ (8001860 <LTCD__Init+0xb0>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	619a      	str	r2, [r3, #24]
 80017c6:	4b26      	ldr	r3, [pc, #152]	@ (8001860 <LTCD__Init+0xb0>)
 80017c8:	221d      	movs	r2, #29
 80017ca:	61da      	str	r2, [r3, #28]
 80017cc:	4b24      	ldr	r3, [pc, #144]	@ (8001860 <LTCD__Init+0xb0>)
 80017ce:	2203      	movs	r2, #3
 80017d0:	621a      	str	r2, [r3, #32]
 80017d2:	4b23      	ldr	r3, [pc, #140]	@ (8001860 <LTCD__Init+0xb0>)
 80017d4:	f240 120d 	movw	r2, #269	@ 0x10d
 80017d8:	625a      	str	r2, [r3, #36]	@ 0x24
 80017da:	4b21      	ldr	r3, [pc, #132]	@ (8001860 <LTCD__Init+0xb0>)
 80017dc:	f240 1243 	movw	r2, #323	@ 0x143
 80017e0:	629a      	str	r2, [r3, #40]	@ 0x28
 80017e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001860 <LTCD__Init+0xb0>)
 80017e4:	f240 1217 	movw	r2, #279	@ 0x117
 80017e8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80017ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001860 <LTCD__Init+0xb0>)
 80017ec:	f240 1247 	movw	r2, #327	@ 0x147
 80017f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80017f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001860 <LTCD__Init+0xb0>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
 80017fa:	4b19      	ldr	r3, [pc, #100]	@ (8001860 <LTCD__Init+0xb0>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8001802:	4b17      	ldr	r3, [pc, #92]	@ (8001860 <LTCD__Init+0xb0>)
 8001804:	2200      	movs	r2, #0
 8001806:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800180a:	4b17      	ldr	r3, [pc, #92]	@ (8001868 <LTCD__Init+0xb8>)
 800180c:	2208      	movs	r2, #8
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	4b15      	ldr	r3, [pc, #84]	@ (8001868 <LTCD__Init+0xb8>)
 8001812:	22c0      	movs	r2, #192	@ 0xc0
 8001814:	611a      	str	r2, [r3, #16]
 8001816:	4b14      	ldr	r3, [pc, #80]	@ (8001868 <LTCD__Init+0xb8>)
 8001818:	2204      	movs	r2, #4
 800181a:	619a      	str	r2, [r3, #24]
 800181c:	4b12      	ldr	r3, [pc, #72]	@ (8001868 <LTCD__Init+0xb8>)
 800181e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001822:	625a      	str	r2, [r3, #36]	@ 0x24
 8001824:	4810      	ldr	r0, [pc, #64]	@ (8001868 <LTCD__Init+0xb8>)
 8001826:	f004 fbdf 	bl	8005fe8 <HAL_RCCEx_PeriphCLKConfig>
 800182a:	4b0d      	ldr	r3, [pc, #52]	@ (8001860 <LTCD__Init+0xb0>)
 800182c:	2200      	movs	r2, #0
 800182e:	605a      	str	r2, [r3, #4]
 8001830:	4b0b      	ldr	r3, [pc, #44]	@ (8001860 <LTCD__Init+0xb0>)
 8001832:	2200      	movs	r2, #0
 8001834:	609a      	str	r2, [r3, #8]
 8001836:	4b0a      	ldr	r3, [pc, #40]	@ (8001860 <LTCD__Init+0xb0>)
 8001838:	2200      	movs	r2, #0
 800183a:	60da      	str	r2, [r3, #12]
 800183c:	4b08      	ldr	r3, [pc, #32]	@ (8001860 <LTCD__Init+0xb0>)
 800183e:	2200      	movs	r2, #0
 8001840:	611a      	str	r2, [r3, #16]
 8001842:	f7ff fead 	bl	80015a0 <LCD_GPIO_Init>
 8001846:	4806      	ldr	r0, [pc, #24]	@ (8001860 <LTCD__Init+0xb0>)
 8001848:	f003 fca4 	bl	8005194 <HAL_LTDC_Init>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <LTCD__Init+0xa6>
 8001852:	f000 f997 	bl	8001b84 <LCD_Error_Handler>
 8001856:	f000 f9e5 	bl	8001c24 <ili9341_Init>
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	200000f4 	.word	0x200000f4
 8001864:	40016800 	.word	0x40016800
 8001868:	2000019c 	.word	0x2000019c

0800186c <LCD_Draw_Pixel>:
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	80fb      	strh	r3, [r7, #6]
 8001876:	460b      	mov	r3, r1
 8001878:	80bb      	strh	r3, [r7, #4]
 800187a:	4613      	mov	r3, r2
 800187c:	807b      	strh	r3, [r7, #2]
 800187e:	88ba      	ldrh	r2, [r7, #4]
 8001880:	4613      	mov	r3, r2
 8001882:	011b      	lsls	r3, r3, #4
 8001884:	1a9b      	subs	r3, r3, r2
 8001886:	011b      	lsls	r3, r3, #4
 8001888:	461a      	mov	r2, r3
 800188a:	88fb      	ldrh	r3, [r7, #6]
 800188c:	4413      	add	r3, r2
 800188e:	4905      	ldr	r1, [pc, #20]	@ (80018a4 <LCD_Draw_Pixel+0x38>)
 8001890:	887a      	ldrh	r2, [r7, #2]
 8001892:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	200001d0 	.word	0x200001d0

080018a8 <LCD_Draw_Circle_Fill>:
 80018a8:	b590      	push	{r4, r7, lr}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4604      	mov	r4, r0
 80018b0:	4608      	mov	r0, r1
 80018b2:	4611      	mov	r1, r2
 80018b4:	461a      	mov	r2, r3
 80018b6:	4623      	mov	r3, r4
 80018b8:	80fb      	strh	r3, [r7, #6]
 80018ba:	4603      	mov	r3, r0
 80018bc:	80bb      	strh	r3, [r7, #4]
 80018be:	460b      	mov	r3, r1
 80018c0:	807b      	strh	r3, [r7, #2]
 80018c2:	4613      	mov	r3, r2
 80018c4:	803b      	strh	r3, [r7, #0]
 80018c6:	887b      	ldrh	r3, [r7, #2]
 80018c8:	425b      	negs	r3, r3
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	81fb      	strh	r3, [r7, #14]
 80018ce:	e034      	b.n	800193a <LCD_Draw_Circle_Fill+0x92>
 80018d0:	887b      	ldrh	r3, [r7, #2]
 80018d2:	425b      	negs	r3, r3
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	81bb      	strh	r3, [r7, #12]
 80018d8:	e024      	b.n	8001924 <LCD_Draw_Circle_Fill+0x7c>
 80018da:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80018de:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80018e2:	fb03 f202 	mul.w	r2, r3, r2
 80018e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018ea:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80018ee:	fb01 f303 	mul.w	r3, r1, r3
 80018f2:	441a      	add	r2, r3
 80018f4:	887b      	ldrh	r3, [r7, #2]
 80018f6:	8879      	ldrh	r1, [r7, #2]
 80018f8:	fb01 f303 	mul.w	r3, r1, r3
 80018fc:	429a      	cmp	r2, r3
 80018fe:	dc0b      	bgt.n	8001918 <LCD_Draw_Circle_Fill+0x70>
 8001900:	89ba      	ldrh	r2, [r7, #12]
 8001902:	88fb      	ldrh	r3, [r7, #6]
 8001904:	4413      	add	r3, r2
 8001906:	b298      	uxth	r0, r3
 8001908:	89fa      	ldrh	r2, [r7, #14]
 800190a:	88bb      	ldrh	r3, [r7, #4]
 800190c:	4413      	add	r3, r2
 800190e:	b29b      	uxth	r3, r3
 8001910:	883a      	ldrh	r2, [r7, #0]
 8001912:	4619      	mov	r1, r3
 8001914:	f7ff ffaa 	bl	800186c <LCD_Draw_Pixel>
 8001918:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800191c:	b29b      	uxth	r3, r3
 800191e:	3301      	adds	r3, #1
 8001920:	b29b      	uxth	r3, r3
 8001922:	81bb      	strh	r3, [r7, #12]
 8001924:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001928:	887b      	ldrh	r3, [r7, #2]
 800192a:	429a      	cmp	r2, r3
 800192c:	ddd5      	ble.n	80018da <LCD_Draw_Circle_Fill+0x32>
 800192e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001932:	b29b      	uxth	r3, r3
 8001934:	3301      	adds	r3, #1
 8001936:	b29b      	uxth	r3, r3
 8001938:	81fb      	strh	r3, [r7, #14]
 800193a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800193e:	887b      	ldrh	r3, [r7, #2]
 8001940:	429a      	cmp	r2, r3
 8001942:	ddc5      	ble.n	80018d0 <LCD_Draw_Circle_Fill+0x28>
 8001944:	bf00      	nop
 8001946:	bf00      	nop
 8001948:	3714      	adds	r7, #20
 800194a:	46bd      	mov	sp, r7
 800194c:	bd90      	pop	{r4, r7, pc}

0800194e <LCD_Fill_Rect>:
 800194e:	b590      	push	{r4, r7, lr}
 8001950:	b085      	sub	sp, #20
 8001952:	af00      	add	r7, sp, #0
 8001954:	4604      	mov	r4, r0
 8001956:	4608      	mov	r0, r1
 8001958:	4611      	mov	r1, r2
 800195a:	461a      	mov	r2, r3
 800195c:	4623      	mov	r3, r4
 800195e:	80fb      	strh	r3, [r7, #6]
 8001960:	4603      	mov	r3, r0
 8001962:	80bb      	strh	r3, [r7, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	807b      	strh	r3, [r7, #2]
 8001968:	4613      	mov	r3, r2
 800196a:	803b      	strh	r3, [r7, #0]
 800196c:	88fb      	ldrh	r3, [r7, #6]
 800196e:	2bef      	cmp	r3, #239	@ 0xef
 8001970:	d832      	bhi.n	80019d8 <LCD_Fill_Rect+0x8a>
 8001972:	88bb      	ldrh	r3, [r7, #4]
 8001974:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001978:	d22e      	bcs.n	80019d8 <LCD_Fill_Rect+0x8a>
 800197a:	88fa      	ldrh	r2, [r7, #6]
 800197c:	887b      	ldrh	r3, [r7, #2]
 800197e:	4413      	add	r3, r2
 8001980:	81fb      	strh	r3, [r7, #14]
 8001982:	88ba      	ldrh	r2, [r7, #4]
 8001984:	883b      	ldrh	r3, [r7, #0]
 8001986:	4413      	add	r3, r2
 8001988:	81bb      	strh	r3, [r7, #12]
 800198a:	89fb      	ldrh	r3, [r7, #14]
 800198c:	2bf0      	cmp	r3, #240	@ 0xf0
 800198e:	d901      	bls.n	8001994 <LCD_Fill_Rect+0x46>
 8001990:	23f0      	movs	r3, #240	@ 0xf0
 8001992:	81fb      	strh	r3, [r7, #14]
 8001994:	89bb      	ldrh	r3, [r7, #12]
 8001996:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800199a:	d902      	bls.n	80019a2 <LCD_Fill_Rect+0x54>
 800199c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80019a0:	81bb      	strh	r3, [r7, #12]
 80019a2:	88bb      	ldrh	r3, [r7, #4]
 80019a4:	817b      	strh	r3, [r7, #10]
 80019a6:	e012      	b.n	80019ce <LCD_Fill_Rect+0x80>
 80019a8:	88fb      	ldrh	r3, [r7, #6]
 80019aa:	813b      	strh	r3, [r7, #8]
 80019ac:	e008      	b.n	80019c0 <LCD_Fill_Rect+0x72>
 80019ae:	8c3a      	ldrh	r2, [r7, #32]
 80019b0:	8979      	ldrh	r1, [r7, #10]
 80019b2:	893b      	ldrh	r3, [r7, #8]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff59 	bl	800186c <LCD_Draw_Pixel>
 80019ba:	893b      	ldrh	r3, [r7, #8]
 80019bc:	3301      	adds	r3, #1
 80019be:	813b      	strh	r3, [r7, #8]
 80019c0:	893a      	ldrh	r2, [r7, #8]
 80019c2:	89fb      	ldrh	r3, [r7, #14]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d3f2      	bcc.n	80019ae <LCD_Fill_Rect+0x60>
 80019c8:	897b      	ldrh	r3, [r7, #10]
 80019ca:	3301      	adds	r3, #1
 80019cc:	817b      	strh	r3, [r7, #10]
 80019ce:	897a      	ldrh	r2, [r7, #10]
 80019d0:	89bb      	ldrh	r3, [r7, #12]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d3e8      	bcc.n	80019a8 <LCD_Fill_Rect+0x5a>
 80019d6:	e000      	b.n	80019da <LCD_Fill_Rect+0x8c>
 80019d8:	bf00      	nop
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd90      	pop	{r4, r7, pc}

080019e0 <LCD_Clear>:
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	460a      	mov	r2, r1
 80019ea:	71fb      	strb	r3, [r7, #7]
 80019ec:	4613      	mov	r3, r2
 80019ee:	80bb      	strh	r3, [r7, #4]
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d10e      	bne.n	8001a14 <LCD_Clear+0x34>
 80019f6:	2300      	movs	r3, #0
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	e007      	b.n	8001a0c <LCD_Clear+0x2c>
 80019fc:	4908      	ldr	r1, [pc, #32]	@ (8001a20 <LCD_Clear+0x40>)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	88ba      	ldrh	r2, [r7, #4]
 8001a02:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8001a12:	d3f3      	bcc.n	80019fc <LCD_Clear+0x1c>
 8001a14:	bf00      	nop
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	200001d0 	.word	0x200001d0

08001a24 <LCD_SetTextColor>:
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	80fb      	strh	r3, [r7, #6]
 8001a2e:	4a04      	ldr	r2, [pc, #16]	@ (8001a40 <LCD_SetTextColor+0x1c>)
 8001a30:	88fb      	ldrh	r3, [r7, #6]
 8001a32:	8013      	strh	r3, [r2, #0]
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	20000002 	.word	0x20000002

08001a44 <LCD_SetFont>:
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	4a04      	ldr	r2, [pc, #16]	@ (8001a60 <LCD_SetFont+0x1c>)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	200001cc 	.word	0x200001cc

08001a64 <LCD_Draw_Char>:
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	603a      	str	r2, [r7, #0]
 8001a6e:	80fb      	strh	r3, [r7, #6]
 8001a70:	460b      	mov	r3, r1
 8001a72:	80bb      	strh	r3, [r7, #4]
 8001a74:	2300      	movs	r3, #0
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60bb      	str	r3, [r7, #8]
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	e04c      	b.n	8001b1c <LCD_Draw_Char+0xb8>
 8001a82:	2300      	movs	r3, #0
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	e03f      	b.n	8001b08 <LCD_Draw_Char+0xa4>
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	4413      	add	r3, r2
 8001a90:	881b      	ldrh	r3, [r3, #0]
 8001a92:	4619      	mov	r1, r3
 8001a94:	4b27      	ldr	r3, [pc, #156]	@ (8001b34 <LCD_Draw_Char+0xd0>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	889b      	ldrh	r3, [r3, #4]
 8001a9a:	4a27      	ldr	r2, [pc, #156]	@ (8001b38 <LCD_Draw_Char+0xd4>)
 8001a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa0:	08db      	lsrs	r3, r3, #3
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	00db      	lsls	r3, r3, #3
 8001aa6:	2280      	movs	r2, #128	@ 0x80
 8001aa8:	409a      	lsls	r2, r3
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	fa42 f303 	asr.w	r3, r2, r3
 8001ab0:	400b      	ands	r3, r1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d104      	bne.n	8001ac0 <LCD_Draw_Char+0x5c>
 8001ab6:	4b1f      	ldr	r3, [pc, #124]	@ (8001b34 <LCD_Draw_Char+0xd0>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	889b      	ldrh	r3, [r3, #4]
 8001abc:	2b0c      	cmp	r3, #12
 8001abe:	d920      	bls.n	8001b02 <LCD_Draw_Char+0x9e>
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	881b      	ldrh	r3, [r3, #0]
 8001aca:	461a      	mov	r2, r3
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	fa42 f303 	asr.w	r3, r2, r3
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d104      	bne.n	8001ae4 <LCD_Draw_Char+0x80>
 8001ada:	4b16      	ldr	r3, [pc, #88]	@ (8001b34 <LCD_Draw_Char+0xd0>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	889b      	ldrh	r3, [r3, #4]
 8001ae0:	2b0c      	cmp	r3, #12
 8001ae2:	d80e      	bhi.n	8001b02 <LCD_Draw_Char+0x9e>
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	88fb      	ldrh	r3, [r7, #6]
 8001aea:	4413      	add	r3, r2
 8001aec:	b298      	uxth	r0, r3
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	88bb      	ldrh	r3, [r7, #4]
 8001af4:	4413      	add	r3, r2
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	4a10      	ldr	r2, [pc, #64]	@ (8001b3c <LCD_Draw_Char+0xd8>)
 8001afa:	8812      	ldrh	r2, [r2, #0]
 8001afc:	4619      	mov	r1, r3
 8001afe:	f7ff feb5 	bl	800186c <LCD_Draw_Pixel>
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	3301      	adds	r3, #1
 8001b06:	60bb      	str	r3, [r7, #8]
 8001b08:	4b0a      	ldr	r3, [pc, #40]	@ (8001b34 <LCD_Draw_Char+0xd0>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	889b      	ldrh	r3, [r3, #4]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d3b8      	bcc.n	8001a88 <LCD_Draw_Char+0x24>
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	4b05      	ldr	r3, [pc, #20]	@ (8001b34 <LCD_Draw_Char+0xd0>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	88db      	ldrh	r3, [r3, #6]
 8001b22:	461a      	mov	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d3ab      	bcc.n	8001a82 <LCD_Draw_Char+0x1e>
 8001b2a:	bf00      	nop
 8001b2c:	bf00      	nop
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	200001cc 	.word	0x200001cc
 8001b38:	aaaaaaab 	.word	0xaaaaaaab
 8001b3c:	20000002 	.word	0x20000002

08001b40 <LCD_DisplayChar>:
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	80fb      	strh	r3, [r7, #6]
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	80bb      	strh	r3, [r7, #4]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	70fb      	strb	r3, [r7, #3]
 8001b52:	78fb      	ldrb	r3, [r7, #3]
 8001b54:	3b20      	subs	r3, #32
 8001b56:	70fb      	strb	r3, [r7, #3]
 8001b58:	4b09      	ldr	r3, [pc, #36]	@ (8001b80 <LCD_DisplayChar+0x40>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	78fb      	ldrb	r3, [r7, #3]
 8001b60:	4907      	ldr	r1, [pc, #28]	@ (8001b80 <LCD_DisplayChar+0x40>)
 8001b62:	6809      	ldr	r1, [r1, #0]
 8001b64:	88c9      	ldrh	r1, [r1, #6]
 8001b66:	fb01 f303 	mul.w	r3, r1, r3
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	441a      	add	r2, r3
 8001b6e:	88b9      	ldrh	r1, [r7, #4]
 8001b70:	88fb      	ldrh	r3, [r7, #6]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff ff76 	bl	8001a64 <LCD_Draw_Char>
 8001b78:	bf00      	nop
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	200001cc 	.word	0x200001cc

08001b84 <LCD_Error_Handler>:
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	b672      	cpsid	i
 8001b8a:	bf00      	nop
 8001b8c:	bf00      	nop
 8001b8e:	e7fd      	b.n	8001b8c <LCD_Error_Handler+0x8>

08001b90 <InitializeLCDTouch>:
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	f001 f9c8 	bl	8002f28 <STMPE811_Init>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d001      	beq.n	8001ba2 <InitializeLCDTouch+0x12>
 8001b9e:	bf00      	nop
 8001ba0:	e7fd      	b.n	8001b9e <InitializeLCDTouch+0xe>
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <returnTouchStateAndLocation>:
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b082      	sub	sp, #8
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f001 fa72 	bl	8003098 <STMPE811_ReadTouch>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <getScheduledEvents>:
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	4b03      	ldr	r3, [pc, #12]	@ (8001bd4 <getScheduledEvents+0x14>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	200259d0 	.word	0x200259d0

08001bd8 <addSchedulerEvent>:
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	4b05      	ldr	r3, [pc, #20]	@ (8001bf8 <addSchedulerEvent+0x20>)
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	4a03      	ldr	r2, [pc, #12]	@ (8001bf8 <addSchedulerEvent+0x20>)
 8001bea:	6013      	str	r3, [r2, #0]
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	200259d0 	.word	0x200259d0

08001bfc <removeSchedulerEvent>:
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	43da      	mvns	r2, r3
 8001c08:	4b05      	ldr	r3, [pc, #20]	@ (8001c20 <removeSchedulerEvent+0x24>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	4a04      	ldr	r2, [pc, #16]	@ (8001c20 <removeSchedulerEvent+0x24>)
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	200259d0 	.word	0x200259d0

08001c24 <ili9341_Init>:
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	f000 f9fe 	bl	8002028 <LCD_IO_Init>
 8001c2c:	20ca      	movs	r0, #202	@ 0xca
 8001c2e:	f000 f943 	bl	8001eb8 <ili9341_Write_Reg>
 8001c32:	20c3      	movs	r0, #195	@ 0xc3
 8001c34:	f000 f94d 	bl	8001ed2 <ili9341_Send_Data>
 8001c38:	2008      	movs	r0, #8
 8001c3a:	f000 f94a 	bl	8001ed2 <ili9341_Send_Data>
 8001c3e:	2050      	movs	r0, #80	@ 0x50
 8001c40:	f000 f947 	bl	8001ed2 <ili9341_Send_Data>
 8001c44:	20cf      	movs	r0, #207	@ 0xcf
 8001c46:	f000 f937 	bl	8001eb8 <ili9341_Write_Reg>
 8001c4a:	2000      	movs	r0, #0
 8001c4c:	f000 f941 	bl	8001ed2 <ili9341_Send_Data>
 8001c50:	20c1      	movs	r0, #193	@ 0xc1
 8001c52:	f000 f93e 	bl	8001ed2 <ili9341_Send_Data>
 8001c56:	2030      	movs	r0, #48	@ 0x30
 8001c58:	f000 f93b 	bl	8001ed2 <ili9341_Send_Data>
 8001c5c:	20ed      	movs	r0, #237	@ 0xed
 8001c5e:	f000 f92b 	bl	8001eb8 <ili9341_Write_Reg>
 8001c62:	2064      	movs	r0, #100	@ 0x64
 8001c64:	f000 f935 	bl	8001ed2 <ili9341_Send_Data>
 8001c68:	2003      	movs	r0, #3
 8001c6a:	f000 f932 	bl	8001ed2 <ili9341_Send_Data>
 8001c6e:	2012      	movs	r0, #18
 8001c70:	f000 f92f 	bl	8001ed2 <ili9341_Send_Data>
 8001c74:	2081      	movs	r0, #129	@ 0x81
 8001c76:	f000 f92c 	bl	8001ed2 <ili9341_Send_Data>
 8001c7a:	20e8      	movs	r0, #232	@ 0xe8
 8001c7c:	f000 f91c 	bl	8001eb8 <ili9341_Write_Reg>
 8001c80:	2085      	movs	r0, #133	@ 0x85
 8001c82:	f000 f926 	bl	8001ed2 <ili9341_Send_Data>
 8001c86:	2000      	movs	r0, #0
 8001c88:	f000 f923 	bl	8001ed2 <ili9341_Send_Data>
 8001c8c:	2078      	movs	r0, #120	@ 0x78
 8001c8e:	f000 f920 	bl	8001ed2 <ili9341_Send_Data>
 8001c92:	20cb      	movs	r0, #203	@ 0xcb
 8001c94:	f000 f910 	bl	8001eb8 <ili9341_Write_Reg>
 8001c98:	2039      	movs	r0, #57	@ 0x39
 8001c9a:	f000 f91a 	bl	8001ed2 <ili9341_Send_Data>
 8001c9e:	202c      	movs	r0, #44	@ 0x2c
 8001ca0:	f000 f917 	bl	8001ed2 <ili9341_Send_Data>
 8001ca4:	2000      	movs	r0, #0
 8001ca6:	f000 f914 	bl	8001ed2 <ili9341_Send_Data>
 8001caa:	2034      	movs	r0, #52	@ 0x34
 8001cac:	f000 f911 	bl	8001ed2 <ili9341_Send_Data>
 8001cb0:	2002      	movs	r0, #2
 8001cb2:	f000 f90e 	bl	8001ed2 <ili9341_Send_Data>
 8001cb6:	20f7      	movs	r0, #247	@ 0xf7
 8001cb8:	f000 f8fe 	bl	8001eb8 <ili9341_Write_Reg>
 8001cbc:	2020      	movs	r0, #32
 8001cbe:	f000 f908 	bl	8001ed2 <ili9341_Send_Data>
 8001cc2:	20ea      	movs	r0, #234	@ 0xea
 8001cc4:	f000 f8f8 	bl	8001eb8 <ili9341_Write_Reg>
 8001cc8:	2000      	movs	r0, #0
 8001cca:	f000 f902 	bl	8001ed2 <ili9341_Send_Data>
 8001cce:	2000      	movs	r0, #0
 8001cd0:	f000 f8ff 	bl	8001ed2 <ili9341_Send_Data>
 8001cd4:	20b1      	movs	r0, #177	@ 0xb1
 8001cd6:	f000 f8ef 	bl	8001eb8 <ili9341_Write_Reg>
 8001cda:	2000      	movs	r0, #0
 8001cdc:	f000 f8f9 	bl	8001ed2 <ili9341_Send_Data>
 8001ce0:	201b      	movs	r0, #27
 8001ce2:	f000 f8f6 	bl	8001ed2 <ili9341_Send_Data>
 8001ce6:	20b6      	movs	r0, #182	@ 0xb6
 8001ce8:	f000 f8e6 	bl	8001eb8 <ili9341_Write_Reg>
 8001cec:	200a      	movs	r0, #10
 8001cee:	f000 f8f0 	bl	8001ed2 <ili9341_Send_Data>
 8001cf2:	20a2      	movs	r0, #162	@ 0xa2
 8001cf4:	f000 f8ed 	bl	8001ed2 <ili9341_Send_Data>
 8001cf8:	20c0      	movs	r0, #192	@ 0xc0
 8001cfa:	f000 f8dd 	bl	8001eb8 <ili9341_Write_Reg>
 8001cfe:	2010      	movs	r0, #16
 8001d00:	f000 f8e7 	bl	8001ed2 <ili9341_Send_Data>
 8001d04:	20c1      	movs	r0, #193	@ 0xc1
 8001d06:	f000 f8d7 	bl	8001eb8 <ili9341_Write_Reg>
 8001d0a:	2010      	movs	r0, #16
 8001d0c:	f000 f8e1 	bl	8001ed2 <ili9341_Send_Data>
 8001d10:	20c5      	movs	r0, #197	@ 0xc5
 8001d12:	f000 f8d1 	bl	8001eb8 <ili9341_Write_Reg>
 8001d16:	2045      	movs	r0, #69	@ 0x45
 8001d18:	f000 f8db 	bl	8001ed2 <ili9341_Send_Data>
 8001d1c:	2015      	movs	r0, #21
 8001d1e:	f000 f8d8 	bl	8001ed2 <ili9341_Send_Data>
 8001d22:	20c7      	movs	r0, #199	@ 0xc7
 8001d24:	f000 f8c8 	bl	8001eb8 <ili9341_Write_Reg>
 8001d28:	2090      	movs	r0, #144	@ 0x90
 8001d2a:	f000 f8d2 	bl	8001ed2 <ili9341_Send_Data>
 8001d2e:	2036      	movs	r0, #54	@ 0x36
 8001d30:	f000 f8c2 	bl	8001eb8 <ili9341_Write_Reg>
 8001d34:	20c8      	movs	r0, #200	@ 0xc8
 8001d36:	f000 f8cc 	bl	8001ed2 <ili9341_Send_Data>
 8001d3a:	20f2      	movs	r0, #242	@ 0xf2
 8001d3c:	f000 f8bc 	bl	8001eb8 <ili9341_Write_Reg>
 8001d40:	2000      	movs	r0, #0
 8001d42:	f000 f8c6 	bl	8001ed2 <ili9341_Send_Data>
 8001d46:	20b0      	movs	r0, #176	@ 0xb0
 8001d48:	f000 f8b6 	bl	8001eb8 <ili9341_Write_Reg>
 8001d4c:	20c2      	movs	r0, #194	@ 0xc2
 8001d4e:	f000 f8c0 	bl	8001ed2 <ili9341_Send_Data>
 8001d52:	20b6      	movs	r0, #182	@ 0xb6
 8001d54:	f000 f8b0 	bl	8001eb8 <ili9341_Write_Reg>
 8001d58:	200a      	movs	r0, #10
 8001d5a:	f000 f8ba 	bl	8001ed2 <ili9341_Send_Data>
 8001d5e:	20a7      	movs	r0, #167	@ 0xa7
 8001d60:	f000 f8b7 	bl	8001ed2 <ili9341_Send_Data>
 8001d64:	2027      	movs	r0, #39	@ 0x27
 8001d66:	f000 f8b4 	bl	8001ed2 <ili9341_Send_Data>
 8001d6a:	2004      	movs	r0, #4
 8001d6c:	f000 f8b1 	bl	8001ed2 <ili9341_Send_Data>
 8001d70:	202a      	movs	r0, #42	@ 0x2a
 8001d72:	f000 f8a1 	bl	8001eb8 <ili9341_Write_Reg>
 8001d76:	2000      	movs	r0, #0
 8001d78:	f000 f8ab 	bl	8001ed2 <ili9341_Send_Data>
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	f000 f8a8 	bl	8001ed2 <ili9341_Send_Data>
 8001d82:	2000      	movs	r0, #0
 8001d84:	f000 f8a5 	bl	8001ed2 <ili9341_Send_Data>
 8001d88:	20ef      	movs	r0, #239	@ 0xef
 8001d8a:	f000 f8a2 	bl	8001ed2 <ili9341_Send_Data>
 8001d8e:	202b      	movs	r0, #43	@ 0x2b
 8001d90:	f000 f892 	bl	8001eb8 <ili9341_Write_Reg>
 8001d94:	2000      	movs	r0, #0
 8001d96:	f000 f89c 	bl	8001ed2 <ili9341_Send_Data>
 8001d9a:	2000      	movs	r0, #0
 8001d9c:	f000 f899 	bl	8001ed2 <ili9341_Send_Data>
 8001da0:	2001      	movs	r0, #1
 8001da2:	f000 f896 	bl	8001ed2 <ili9341_Send_Data>
 8001da6:	203f      	movs	r0, #63	@ 0x3f
 8001da8:	f000 f893 	bl	8001ed2 <ili9341_Send_Data>
 8001dac:	20f6      	movs	r0, #246	@ 0xf6
 8001dae:	f000 f883 	bl	8001eb8 <ili9341_Write_Reg>
 8001db2:	2001      	movs	r0, #1
 8001db4:	f000 f88d 	bl	8001ed2 <ili9341_Send_Data>
 8001db8:	2000      	movs	r0, #0
 8001dba:	f000 f88a 	bl	8001ed2 <ili9341_Send_Data>
 8001dbe:	2006      	movs	r0, #6
 8001dc0:	f000 f887 	bl	8001ed2 <ili9341_Send_Data>
 8001dc4:	202c      	movs	r0, #44	@ 0x2c
 8001dc6:	f000 f877 	bl	8001eb8 <ili9341_Write_Reg>
 8001dca:	20c8      	movs	r0, #200	@ 0xc8
 8001dcc:	f000 f9e8 	bl	80021a0 <LCD_Delay>
 8001dd0:	2026      	movs	r0, #38	@ 0x26
 8001dd2:	f000 f871 	bl	8001eb8 <ili9341_Write_Reg>
 8001dd6:	2001      	movs	r0, #1
 8001dd8:	f000 f87b 	bl	8001ed2 <ili9341_Send_Data>
 8001ddc:	20e0      	movs	r0, #224	@ 0xe0
 8001dde:	f000 f86b 	bl	8001eb8 <ili9341_Write_Reg>
 8001de2:	200f      	movs	r0, #15
 8001de4:	f000 f875 	bl	8001ed2 <ili9341_Send_Data>
 8001de8:	2029      	movs	r0, #41	@ 0x29
 8001dea:	f000 f872 	bl	8001ed2 <ili9341_Send_Data>
 8001dee:	2024      	movs	r0, #36	@ 0x24
 8001df0:	f000 f86f 	bl	8001ed2 <ili9341_Send_Data>
 8001df4:	200c      	movs	r0, #12
 8001df6:	f000 f86c 	bl	8001ed2 <ili9341_Send_Data>
 8001dfa:	200e      	movs	r0, #14
 8001dfc:	f000 f869 	bl	8001ed2 <ili9341_Send_Data>
 8001e00:	2009      	movs	r0, #9
 8001e02:	f000 f866 	bl	8001ed2 <ili9341_Send_Data>
 8001e06:	204e      	movs	r0, #78	@ 0x4e
 8001e08:	f000 f863 	bl	8001ed2 <ili9341_Send_Data>
 8001e0c:	2078      	movs	r0, #120	@ 0x78
 8001e0e:	f000 f860 	bl	8001ed2 <ili9341_Send_Data>
 8001e12:	203c      	movs	r0, #60	@ 0x3c
 8001e14:	f000 f85d 	bl	8001ed2 <ili9341_Send_Data>
 8001e18:	2009      	movs	r0, #9
 8001e1a:	f000 f85a 	bl	8001ed2 <ili9341_Send_Data>
 8001e1e:	2013      	movs	r0, #19
 8001e20:	f000 f857 	bl	8001ed2 <ili9341_Send_Data>
 8001e24:	2005      	movs	r0, #5
 8001e26:	f000 f854 	bl	8001ed2 <ili9341_Send_Data>
 8001e2a:	2017      	movs	r0, #23
 8001e2c:	f000 f851 	bl	8001ed2 <ili9341_Send_Data>
 8001e30:	2011      	movs	r0, #17
 8001e32:	f000 f84e 	bl	8001ed2 <ili9341_Send_Data>
 8001e36:	2000      	movs	r0, #0
 8001e38:	f000 f84b 	bl	8001ed2 <ili9341_Send_Data>
 8001e3c:	20e1      	movs	r0, #225	@ 0xe1
 8001e3e:	f000 f83b 	bl	8001eb8 <ili9341_Write_Reg>
 8001e42:	2000      	movs	r0, #0
 8001e44:	f000 f845 	bl	8001ed2 <ili9341_Send_Data>
 8001e48:	2016      	movs	r0, #22
 8001e4a:	f000 f842 	bl	8001ed2 <ili9341_Send_Data>
 8001e4e:	201b      	movs	r0, #27
 8001e50:	f000 f83f 	bl	8001ed2 <ili9341_Send_Data>
 8001e54:	2004      	movs	r0, #4
 8001e56:	f000 f83c 	bl	8001ed2 <ili9341_Send_Data>
 8001e5a:	2011      	movs	r0, #17
 8001e5c:	f000 f839 	bl	8001ed2 <ili9341_Send_Data>
 8001e60:	2007      	movs	r0, #7
 8001e62:	f000 f836 	bl	8001ed2 <ili9341_Send_Data>
 8001e66:	2031      	movs	r0, #49	@ 0x31
 8001e68:	f000 f833 	bl	8001ed2 <ili9341_Send_Data>
 8001e6c:	2033      	movs	r0, #51	@ 0x33
 8001e6e:	f000 f830 	bl	8001ed2 <ili9341_Send_Data>
 8001e72:	2042      	movs	r0, #66	@ 0x42
 8001e74:	f000 f82d 	bl	8001ed2 <ili9341_Send_Data>
 8001e78:	2005      	movs	r0, #5
 8001e7a:	f000 f82a 	bl	8001ed2 <ili9341_Send_Data>
 8001e7e:	200c      	movs	r0, #12
 8001e80:	f000 f827 	bl	8001ed2 <ili9341_Send_Data>
 8001e84:	200a      	movs	r0, #10
 8001e86:	f000 f824 	bl	8001ed2 <ili9341_Send_Data>
 8001e8a:	2028      	movs	r0, #40	@ 0x28
 8001e8c:	f000 f821 	bl	8001ed2 <ili9341_Send_Data>
 8001e90:	202f      	movs	r0, #47	@ 0x2f
 8001e92:	f000 f81e 	bl	8001ed2 <ili9341_Send_Data>
 8001e96:	200f      	movs	r0, #15
 8001e98:	f000 f81b 	bl	8001ed2 <ili9341_Send_Data>
 8001e9c:	2011      	movs	r0, #17
 8001e9e:	f000 f80b 	bl	8001eb8 <ili9341_Write_Reg>
 8001ea2:	20c8      	movs	r0, #200	@ 0xc8
 8001ea4:	f000 f97c 	bl	80021a0 <LCD_Delay>
 8001ea8:	2029      	movs	r0, #41	@ 0x29
 8001eaa:	f000 f805 	bl	8001eb8 <ili9341_Write_Reg>
 8001eae:	202c      	movs	r0, #44	@ 0x2c
 8001eb0:	f000 f802 	bl	8001eb8 <ili9341_Write_Reg>
 8001eb4:	bf00      	nop
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <ili9341_Write_Reg>:
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	71fb      	strb	r3, [r7, #7]
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f000 f949 	bl	800215c <LCD_IO_WriteReg>
 8001eca:	bf00      	nop
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <ili9341_Send_Data>:
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	4603      	mov	r3, r0
 8001eda:	80fb      	strh	r3, [r7, #6]
 8001edc:	88fb      	ldrh	r3, [r7, #6]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f000 f91a 	bl	8002118 <LCD_IO_WriteData>
 8001ee4:	bf00      	nop
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <SPI_Init>:
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	4819      	ldr	r0, [pc, #100]	@ (8001f58 <SPI_Init+0x6c>)
 8001ef2:	f004 fcae 	bl	8006852 <HAL_SPI_GetState>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d12b      	bne.n	8001f54 <SPI_Init+0x68>
 8001efc:	4b16      	ldr	r3, [pc, #88]	@ (8001f58 <SPI_Init+0x6c>)
 8001efe:	4a17      	ldr	r2, [pc, #92]	@ (8001f5c <SPI_Init+0x70>)
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	4b15      	ldr	r3, [pc, #84]	@ (8001f58 <SPI_Init+0x6c>)
 8001f04:	2218      	movs	r2, #24
 8001f06:	61da      	str	r2, [r3, #28]
 8001f08:	4b13      	ldr	r3, [pc, #76]	@ (8001f58 <SPI_Init+0x6c>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	609a      	str	r2, [r3, #8]
 8001f0e:	4b12      	ldr	r3, [pc, #72]	@ (8001f58 <SPI_Init+0x6c>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	615a      	str	r2, [r3, #20]
 8001f14:	4b10      	ldr	r3, [pc, #64]	@ (8001f58 <SPI_Init+0x6c>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	611a      	str	r2, [r3, #16]
 8001f1a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f58 <SPI_Init+0x6c>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001f20:	4b0d      	ldr	r3, [pc, #52]	@ (8001f58 <SPI_Init+0x6c>)
 8001f22:	2207      	movs	r2, #7
 8001f24:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001f26:	4b0c      	ldr	r3, [pc, #48]	@ (8001f58 <SPI_Init+0x6c>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	60da      	str	r2, [r3, #12]
 8001f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f58 <SPI_Init+0x6c>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	621a      	str	r2, [r3, #32]
 8001f32:	4b09      	ldr	r3, [pc, #36]	@ (8001f58 <SPI_Init+0x6c>)
 8001f34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f38:	619a      	str	r2, [r3, #24]
 8001f3a:	4b07      	ldr	r3, [pc, #28]	@ (8001f58 <SPI_Init+0x6c>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001f40:	4b05      	ldr	r3, [pc, #20]	@ (8001f58 <SPI_Init+0x6c>)
 8001f42:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f46:	605a      	str	r2, [r3, #4]
 8001f48:	4803      	ldr	r0, [pc, #12]	@ (8001f58 <SPI_Init+0x6c>)
 8001f4a:	f000 f833 	bl	8001fb4 <SPI_MspInit>
 8001f4e:	4802      	ldr	r0, [pc, #8]	@ (8001f58 <SPI_Init+0x6c>)
 8001f50:	f004 fa8a 	bl	8006468 <HAL_SPI_Init>
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	200259d4 	.word	0x200259d4
 8001f5c:	40015000 	.word	0x40015000

08001f60 <SPI_Write>:
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	80fb      	strh	r3, [r7, #6]
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	73fb      	strb	r3, [r7, #15]
 8001f6e:	4b09      	ldr	r3, [pc, #36]	@ (8001f94 <SPI_Write+0x34>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	1db9      	adds	r1, r7, #6
 8001f74:	2201      	movs	r2, #1
 8001f76:	4808      	ldr	r0, [pc, #32]	@ (8001f98 <SPI_Write+0x38>)
 8001f78:	f004 fb27 	bl	80065ca <HAL_SPI_Transmit>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	73fb      	strb	r3, [r7, #15]
 8001f80:	7bfb      	ldrb	r3, [r7, #15]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <SPI_Write+0x2a>
 8001f86:	f000 f809 	bl	8001f9c <SPI_Error>
 8001f8a:	bf00      	nop
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000014 	.word	0x20000014
 8001f98:	200259d4 	.word	0x200259d4

08001f9c <SPI_Error>:
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	4803      	ldr	r0, [pc, #12]	@ (8001fb0 <SPI_Error+0x14>)
 8001fa2:	f004 faea 	bl	800657a <HAL_SPI_DeInit>
 8001fa6:	f7ff ffa1 	bl	8001eec <SPI_Init>
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	200259d4 	.word	0x200259d4

08001fb4 <SPI_MspInit>:
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08a      	sub	sp, #40	@ 0x28
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	613b      	str	r3, [r7, #16]
 8001fc0:	4b17      	ldr	r3, [pc, #92]	@ (8002020 <SPI_MspInit+0x6c>)
 8001fc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc4:	4a16      	ldr	r2, [pc, #88]	@ (8002020 <SPI_MspInit+0x6c>)
 8001fc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001fca:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fcc:	4b14      	ldr	r3, [pc, #80]	@ (8002020 <SPI_MspInit+0x6c>)
 8001fce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fd4:	613b      	str	r3, [r7, #16]
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	4b10      	ldr	r3, [pc, #64]	@ (8002020 <SPI_MspInit+0x6c>)
 8001fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe0:	4a0f      	ldr	r2, [pc, #60]	@ (8002020 <SPI_MspInit+0x6c>)
 8001fe2:	f043 0320 	orr.w	r3, r3, #32
 8001fe6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fe8:	4b0d      	ldr	r3, [pc, #52]	@ (8002020 <SPI_MspInit+0x6c>)
 8001fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fec:	f003 0320 	and.w	r3, r3, #32
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001ff8:	617b      	str	r3, [r7, #20]
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	61bb      	str	r3, [r7, #24]
 8001ffe:	2302      	movs	r3, #2
 8002000:	61fb      	str	r3, [r7, #28]
 8002002:	2301      	movs	r3, #1
 8002004:	623b      	str	r3, [r7, #32]
 8002006:	2305      	movs	r3, #5
 8002008:	627b      	str	r3, [r7, #36]	@ 0x24
 800200a:	f107 0314 	add.w	r3, r7, #20
 800200e:	4619      	mov	r1, r3
 8002010:	4804      	ldr	r0, [pc, #16]	@ (8002024 <SPI_MspInit+0x70>)
 8002012:	f001 fd35 	bl	8003a80 <HAL_GPIO_Init>
 8002016:	bf00      	nop
 8002018:	3728      	adds	r7, #40	@ 0x28
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40023800 	.word	0x40023800
 8002024:	40021400 	.word	0x40021400

08002028 <LCD_IO_Init>:
 8002028:	b580      	push	{r7, lr}
 800202a:	b088      	sub	sp, #32
 800202c:	af00      	add	r7, sp, #0
 800202e:	4b36      	ldr	r3, [pc, #216]	@ (8002108 <LCD_IO_Init+0xe0>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d164      	bne.n	8002100 <LCD_IO_Init+0xd8>
 8002036:	4b34      	ldr	r3, [pc, #208]	@ (8002108 <LCD_IO_Init+0xe0>)
 8002038:	2201      	movs	r2, #1
 800203a:	701a      	strb	r2, [r3, #0]
 800203c:	2300      	movs	r3, #0
 800203e:	60bb      	str	r3, [r7, #8]
 8002040:	4b32      	ldr	r3, [pc, #200]	@ (800210c <LCD_IO_Init+0xe4>)
 8002042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002044:	4a31      	ldr	r2, [pc, #196]	@ (800210c <LCD_IO_Init+0xe4>)
 8002046:	f043 0308 	orr.w	r3, r3, #8
 800204a:	6313      	str	r3, [r2, #48]	@ 0x30
 800204c:	4b2f      	ldr	r3, [pc, #188]	@ (800210c <LCD_IO_Init+0xe4>)
 800204e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002050:	f003 0308 	and.w	r3, r3, #8
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	2301      	movs	r3, #1
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	2300      	movs	r3, #0
 8002064:	617b      	str	r3, [r7, #20]
 8002066:	2302      	movs	r3, #2
 8002068:	61bb      	str	r3, [r7, #24]
 800206a:	f107 030c 	add.w	r3, r7, #12
 800206e:	4619      	mov	r1, r3
 8002070:	4827      	ldr	r0, [pc, #156]	@ (8002110 <LCD_IO_Init+0xe8>)
 8002072:	f001 fd05 	bl	8003a80 <HAL_GPIO_Init>
 8002076:	2300      	movs	r3, #0
 8002078:	607b      	str	r3, [r7, #4]
 800207a:	4b24      	ldr	r3, [pc, #144]	@ (800210c <LCD_IO_Init+0xe4>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207e:	4a23      	ldr	r2, [pc, #140]	@ (800210c <LCD_IO_Init+0xe4>)
 8002080:	f043 0308 	orr.w	r3, r3, #8
 8002084:	6313      	str	r3, [r2, #48]	@ 0x30
 8002086:	4b21      	ldr	r3, [pc, #132]	@ (800210c <LCD_IO_Init+0xe4>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208a:	f003 0308 	and.w	r3, r3, #8
 800208e:	607b      	str	r3, [r7, #4]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	2301      	movs	r3, #1
 800209a:	613b      	str	r3, [r7, #16]
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]
 80020a0:	2302      	movs	r3, #2
 80020a2:	61bb      	str	r3, [r7, #24]
 80020a4:	f107 030c 	add.w	r3, r7, #12
 80020a8:	4619      	mov	r1, r3
 80020aa:	4819      	ldr	r0, [pc, #100]	@ (8002110 <LCD_IO_Init+0xe8>)
 80020ac:	f001 fce8 	bl	8003a80 <HAL_GPIO_Init>
 80020b0:	2300      	movs	r3, #0
 80020b2:	603b      	str	r3, [r7, #0]
 80020b4:	4b15      	ldr	r3, [pc, #84]	@ (800210c <LCD_IO_Init+0xe4>)
 80020b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b8:	4a14      	ldr	r2, [pc, #80]	@ (800210c <LCD_IO_Init+0xe4>)
 80020ba:	f043 0304 	orr.w	r3, r3, #4
 80020be:	6313      	str	r3, [r2, #48]	@ 0x30
 80020c0:	4b12      	ldr	r3, [pc, #72]	@ (800210c <LCD_IO_Init+0xe4>)
 80020c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	603b      	str	r3, [r7, #0]
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	2304      	movs	r3, #4
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	2301      	movs	r3, #1
 80020d2:	613b      	str	r3, [r7, #16]
 80020d4:	2300      	movs	r3, #0
 80020d6:	617b      	str	r3, [r7, #20]
 80020d8:	2302      	movs	r3, #2
 80020da:	61bb      	str	r3, [r7, #24]
 80020dc:	f107 030c 	add.w	r3, r7, #12
 80020e0:	4619      	mov	r1, r3
 80020e2:	480c      	ldr	r0, [pc, #48]	@ (8002114 <LCD_IO_Init+0xec>)
 80020e4:	f001 fccc 	bl	8003a80 <HAL_GPIO_Init>
 80020e8:	2200      	movs	r2, #0
 80020ea:	2104      	movs	r1, #4
 80020ec:	4809      	ldr	r0, [pc, #36]	@ (8002114 <LCD_IO_Init+0xec>)
 80020ee:	f001 ff97 	bl	8004020 <HAL_GPIO_WritePin>
 80020f2:	2201      	movs	r2, #1
 80020f4:	2104      	movs	r1, #4
 80020f6:	4807      	ldr	r0, [pc, #28]	@ (8002114 <LCD_IO_Init+0xec>)
 80020f8:	f001 ff92 	bl	8004020 <HAL_GPIO_WritePin>
 80020fc:	f7ff fef6 	bl	8001eec <SPI_Init>
 8002100:	bf00      	nop
 8002102:	3720      	adds	r7, #32
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	20025a2c 	.word	0x20025a2c
 800210c:	40023800 	.word	0x40023800
 8002110:	40020c00 	.word	0x40020c00
 8002114:	40020800 	.word	0x40020800

08002118 <LCD_IO_WriteData>:
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	80fb      	strh	r3, [r7, #6]
 8002122:	2201      	movs	r2, #1
 8002124:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002128:	480a      	ldr	r0, [pc, #40]	@ (8002154 <LCD_IO_WriteData+0x3c>)
 800212a:	f001 ff79 	bl	8004020 <HAL_GPIO_WritePin>
 800212e:	2200      	movs	r2, #0
 8002130:	2104      	movs	r1, #4
 8002132:	4809      	ldr	r0, [pc, #36]	@ (8002158 <LCD_IO_WriteData+0x40>)
 8002134:	f001 ff74 	bl	8004020 <HAL_GPIO_WritePin>
 8002138:	88fb      	ldrh	r3, [r7, #6]
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff ff10 	bl	8001f60 <SPI_Write>
 8002140:	2201      	movs	r2, #1
 8002142:	2104      	movs	r1, #4
 8002144:	4804      	ldr	r0, [pc, #16]	@ (8002158 <LCD_IO_WriteData+0x40>)
 8002146:	f001 ff6b 	bl	8004020 <HAL_GPIO_WritePin>
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40020c00 	.word	0x40020c00
 8002158:	40020800 	.word	0x40020800

0800215c <LCD_IO_WriteReg>:
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	71fb      	strb	r3, [r7, #7]
 8002166:	2200      	movs	r2, #0
 8002168:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800216c:	480a      	ldr	r0, [pc, #40]	@ (8002198 <LCD_IO_WriteReg+0x3c>)
 800216e:	f001 ff57 	bl	8004020 <HAL_GPIO_WritePin>
 8002172:	2200      	movs	r2, #0
 8002174:	2104      	movs	r1, #4
 8002176:	4809      	ldr	r0, [pc, #36]	@ (800219c <LCD_IO_WriteReg+0x40>)
 8002178:	f001 ff52 	bl	8004020 <HAL_GPIO_WritePin>
 800217c:	79fb      	ldrb	r3, [r7, #7]
 800217e:	b29b      	uxth	r3, r3
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff feed 	bl	8001f60 <SPI_Write>
 8002186:	2201      	movs	r2, #1
 8002188:	2104      	movs	r1, #4
 800218a:	4804      	ldr	r0, [pc, #16]	@ (800219c <LCD_IO_WriteReg+0x40>)
 800218c:	f001 ff48 	bl	8004020 <HAL_GPIO_WritePin>
 8002190:	bf00      	nop
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40020c00 	.word	0x40020c00
 800219c:	40020800 	.word	0x40020800

080021a0 <LCD_Delay>:
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f001 fb5f 	bl	800386c <HAL_Delay>
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021ba:	f001 fae5 	bl	8003788 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021be:	f000 f84b 	bl	8002258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021c2:	f000 fa3b 	bl	800263c <MX_GPIO_Init>
  MX_LTDC_Init();
 80021c6:	f000 f8f1 	bl	80023ac <MX_LTDC_Init>
  MX_RNG_Init();
 80021ca:	f000 f9a1 	bl	8002510 <MX_RNG_Init>
  MX_TIM2_Init();
 80021ce:	f000 f9e9 	bl	80025a4 <MX_TIM2_Init>
  MX_SPI5_Init();
 80021d2:	f000 f9b1 	bl	8002538 <MX_SPI5_Init>
  MX_I2C3_Init();
 80021d6:	f000 f8a9 	bl	800232c <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit(); // Initializes the LCD functionality
 80021da:	f7fe f9f7 	bl	80005cc <ApplicationInit>


  while (1)
  {
    /* USER CODE END WHILE */
	Scheduler_Run(); // Run the scheduler checks
 80021de:	f000 f801 	bl	80021e4 <Scheduler_Run>
 80021e2:	e7fc      	b.n	80021de <main+0x28>

080021e4 <Scheduler_Run>:
  }
  /* USER CODE END 3 */
}

// --- Scheduler Execution ---
void Scheduler_Run(void) {
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
    // Wait for SysTick to signal a check interval
    while(scheduler_ticks == 0) { } // Wait for SysTick
 80021ea:	bf00      	nop
 80021ec:	4b19      	ldr	r3, [pc, #100]	@ (8002254 <Scheduler_Run+0x70>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d0fb      	beq.n	80021ec <Scheduler_Run+0x8>
    scheduler_ticks = 0;
 80021f4:	4b17      	ldr	r3, [pc, #92]	@ (8002254 <Scheduler_Run+0x70>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]

    uint32_t events = getScheduledEvents();
 80021fa:	f7ff fce1 	bl	8001bc0 <getScheduledEvents>
 80021fe:	6078      	str	r0, [r7, #4]

    if (events & TOUCH_POLLING_EVENT) {
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d004      	beq.n	8002214 <Scheduler_Run+0x30>
        handleTouchInput(); // Handles touch based on internal state
 800220a:	f7fe fded 	bl	8000de8 <handleTouchInput>
        removeSchedulerEvent(TOUCH_POLLING_EVENT);
 800220e:	2001      	movs	r0, #1
 8002210:	f7ff fcf4 	bl	8001bfc <removeSchedulerEvent>
    }

    if (events & HW_BUTTON_POLLING_EVENT) {
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d004      	beq.n	8002228 <Scheduler_Run+0x44>
        pollHardwareButton(); // Checks button based on internal state
 800221e:	f7fe ff07 	bl	8001030 <pollHardwareButton>
        removeSchedulerEvent(HW_BUTTON_POLLING_EVENT);
 8002222:	2002      	movs	r0, #2
 8002224:	f7ff fcea 	bl	8001bfc <removeSchedulerEvent>
    }

    if (events & GAME_UPDATE_EVENT) {
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f003 0304 	and.w	r3, r3, #4
 800222e:	2b00      	cmp	r3, #0
 8002230:	d004      	beq.n	800223c <Scheduler_Run+0x58>
        // Simply call the handler. It will check the state internally.
        handleAITurn(); // Call the AI handler function
 8002232:	f7fe ff2b 	bl	800108c <handleAITurn>
        // Add other game updates here if GAME_UPDATE_EVENT is used for more things
        removeSchedulerEvent(GAME_UPDATE_EVENT);
 8002236:	2004      	movs	r0, #4
 8002238:	f7ff fce0 	bl	8001bfc <removeSchedulerEvent>
    }

    if (events & RENDER_SCREEN_EVENT) {
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f003 0310 	and.w	r3, r3, #16
 8002242:	2b00      	cmp	r3, #0
 8002244:	d002      	beq.n	800224c <Scheduler_Run+0x68>
         // If drawing is event-driven, call the relevant draw function
         // Example: could call a generic drawUpdate() function
         removeSchedulerEvent(RENDER_SCREEN_EVENT);
 8002246:	2010      	movs	r0, #16
 8002248:	f7ff fcd8 	bl	8001bfc <removeSchedulerEvent>
    }
}
 800224c:	bf00      	nop
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	20025bdc 	.word	0x20025bdc

08002258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b094      	sub	sp, #80	@ 0x50
 800225c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800225e:	f107 0320 	add.w	r3, r7, #32
 8002262:	2230      	movs	r2, #48	@ 0x30
 8002264:	2100      	movs	r1, #0
 8002266:	4618      	mov	r0, r3
 8002268:	f005 f80a 	bl	8007280 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800226c:	f107 030c 	add.w	r3, r7, #12
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	605a      	str	r2, [r3, #4]
 8002276:	609a      	str	r2, [r3, #8]
 8002278:	60da      	str	r2, [r3, #12]
 800227a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800227c:	2300      	movs	r3, #0
 800227e:	60bb      	str	r3, [r7, #8]
 8002280:	4b28      	ldr	r3, [pc, #160]	@ (8002324 <SystemClock_Config+0xcc>)
 8002282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002284:	4a27      	ldr	r2, [pc, #156]	@ (8002324 <SystemClock_Config+0xcc>)
 8002286:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800228a:	6413      	str	r3, [r2, #64]	@ 0x40
 800228c:	4b25      	ldr	r3, [pc, #148]	@ (8002324 <SystemClock_Config+0xcc>)
 800228e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002290:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002294:	60bb      	str	r3, [r7, #8]
 8002296:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002298:	2300      	movs	r3, #0
 800229a:	607b      	str	r3, [r7, #4]
 800229c:	4b22      	ldr	r3, [pc, #136]	@ (8002328 <SystemClock_Config+0xd0>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a21      	ldr	r2, [pc, #132]	@ (8002328 <SystemClock_Config+0xd0>)
 80022a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80022a6:	6013      	str	r3, [r2, #0]
 80022a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002328 <SystemClock_Config+0xd0>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80022b0:	607b      	str	r3, [r7, #4]
 80022b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022b4:	2301      	movs	r3, #1
 80022b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80022bc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022be:	2302      	movs	r3, #2
 80022c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022c2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80022c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80022c8:	2308      	movs	r3, #8
 80022ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80022cc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80022d0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022d2:	2302      	movs	r3, #2
 80022d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80022d6:	2307      	movs	r3, #7
 80022d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022da:	f107 0320 	add.w	r3, r7, #32
 80022de:	4618      	mov	r0, r3
 80022e0:	f003 f9fe 	bl	80056e0 <HAL_RCC_OscConfig>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <SystemClock_Config+0x96>
  {
    Error_Handler();
 80022ea:	f000 fb55 	bl	8002998 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022ee:	230f      	movs	r3, #15
 80022f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022f2:	2302      	movs	r3, #2
 80022f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022f6:	2300      	movs	r3, #0
 80022f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80022fa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80022fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002300:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002304:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002306:	f107 030c 	add.w	r3, r7, #12
 800230a:	2105      	movs	r1, #5
 800230c:	4618      	mov	r0, r3
 800230e:	f003 fc5f 	bl	8005bd0 <HAL_RCC_ClockConfig>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002318:	f000 fb3e 	bl	8002998 <Error_Handler>
  }
}
 800231c:	bf00      	nop
 800231e:	3750      	adds	r7, #80	@ 0x50
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40023800 	.word	0x40023800
 8002328:	40007000 	.word	0x40007000

0800232c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002330:	4b1b      	ldr	r3, [pc, #108]	@ (80023a0 <MX_I2C3_Init+0x74>)
 8002332:	4a1c      	ldr	r2, [pc, #112]	@ (80023a4 <MX_I2C3_Init+0x78>)
 8002334:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002336:	4b1a      	ldr	r3, [pc, #104]	@ (80023a0 <MX_I2C3_Init+0x74>)
 8002338:	4a1b      	ldr	r2, [pc, #108]	@ (80023a8 <MX_I2C3_Init+0x7c>)
 800233a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800233c:	4b18      	ldr	r3, [pc, #96]	@ (80023a0 <MX_I2C3_Init+0x74>)
 800233e:	2200      	movs	r2, #0
 8002340:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002342:	4b17      	ldr	r3, [pc, #92]	@ (80023a0 <MX_I2C3_Init+0x74>)
 8002344:	2200      	movs	r2, #0
 8002346:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002348:	4b15      	ldr	r3, [pc, #84]	@ (80023a0 <MX_I2C3_Init+0x74>)
 800234a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800234e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002350:	4b13      	ldr	r3, [pc, #76]	@ (80023a0 <MX_I2C3_Init+0x74>)
 8002352:	2200      	movs	r2, #0
 8002354:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002356:	4b12      	ldr	r3, [pc, #72]	@ (80023a0 <MX_I2C3_Init+0x74>)
 8002358:	2200      	movs	r2, #0
 800235a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800235c:	4b10      	ldr	r3, [pc, #64]	@ (80023a0 <MX_I2C3_Init+0x74>)
 800235e:	2200      	movs	r2, #0
 8002360:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002362:	4b0f      	ldr	r3, [pc, #60]	@ (80023a0 <MX_I2C3_Init+0x74>)
 8002364:	2200      	movs	r2, #0
 8002366:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002368:	480d      	ldr	r0, [pc, #52]	@ (80023a0 <MX_I2C3_Init+0x74>)
 800236a:	f001 fe73 	bl	8004054 <HAL_I2C_Init>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002374:	f000 fb10 	bl	8002998 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002378:	2100      	movs	r1, #0
 800237a:	4809      	ldr	r0, [pc, #36]	@ (80023a0 <MX_I2C3_Init+0x74>)
 800237c:	f002 fe8e 	bl	800509c <HAL_I2CEx_ConfigAnalogFilter>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8002386:	f000 fb07 	bl	8002998 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800238a:	2100      	movs	r1, #0
 800238c:	4804      	ldr	r0, [pc, #16]	@ (80023a0 <MX_I2C3_Init+0x74>)
 800238e:	f002 fec1 	bl	8005114 <HAL_I2CEx_ConfigDigitalFilter>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8002398:	f000 fafe 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800239c:	bf00      	nop
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	20025a30 	.word	0x20025a30
 80023a4:	40005c00 	.word	0x40005c00
 80023a8:	000186a0 	.word	0x000186a0

080023ac <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b09a      	sub	sp, #104	@ 0x68
 80023b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80023b2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80023b6:	2234      	movs	r2, #52	@ 0x34
 80023b8:	2100      	movs	r1, #0
 80023ba:	4618      	mov	r0, r3
 80023bc:	f004 ff60 	bl	8007280 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80023c0:	463b      	mov	r3, r7
 80023c2:	2234      	movs	r2, #52	@ 0x34
 80023c4:	2100      	movs	r1, #0
 80023c6:	4618      	mov	r0, r3
 80023c8:	f004 ff5a 	bl	8007280 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80023cc:	4b4e      	ldr	r3, [pc, #312]	@ (8002508 <MX_LTDC_Init+0x15c>)
 80023ce:	4a4f      	ldr	r2, [pc, #316]	@ (800250c <MX_LTDC_Init+0x160>)
 80023d0:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80023d2:	4b4d      	ldr	r3, [pc, #308]	@ (8002508 <MX_LTDC_Init+0x15c>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80023d8:	4b4b      	ldr	r3, [pc, #300]	@ (8002508 <MX_LTDC_Init+0x15c>)
 80023da:	2200      	movs	r2, #0
 80023dc:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80023de:	4b4a      	ldr	r3, [pc, #296]	@ (8002508 <MX_LTDC_Init+0x15c>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80023e4:	4b48      	ldr	r3, [pc, #288]	@ (8002508 <MX_LTDC_Init+0x15c>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80023ea:	4b47      	ldr	r3, [pc, #284]	@ (8002508 <MX_LTDC_Init+0x15c>)
 80023ec:	2207      	movs	r2, #7
 80023ee:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80023f0:	4b45      	ldr	r3, [pc, #276]	@ (8002508 <MX_LTDC_Init+0x15c>)
 80023f2:	2203      	movs	r2, #3
 80023f4:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80023f6:	4b44      	ldr	r3, [pc, #272]	@ (8002508 <MX_LTDC_Init+0x15c>)
 80023f8:	220e      	movs	r2, #14
 80023fa:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80023fc:	4b42      	ldr	r3, [pc, #264]	@ (8002508 <MX_LTDC_Init+0x15c>)
 80023fe:	2205      	movs	r2, #5
 8002400:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8002402:	4b41      	ldr	r3, [pc, #260]	@ (8002508 <MX_LTDC_Init+0x15c>)
 8002404:	f240 228e 	movw	r2, #654	@ 0x28e
 8002408:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 800240a:	4b3f      	ldr	r3, [pc, #252]	@ (8002508 <MX_LTDC_Init+0x15c>)
 800240c:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8002410:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 8002412:	4b3d      	ldr	r3, [pc, #244]	@ (8002508 <MX_LTDC_Init+0x15c>)
 8002414:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8002418:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 800241a:	4b3b      	ldr	r3, [pc, #236]	@ (8002508 <MX_LTDC_Init+0x15c>)
 800241c:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8002420:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002422:	4b39      	ldr	r3, [pc, #228]	@ (8002508 <MX_LTDC_Init+0x15c>)
 8002424:	2200      	movs	r2, #0
 8002426:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 800242a:	4b37      	ldr	r3, [pc, #220]	@ (8002508 <MX_LTDC_Init+0x15c>)
 800242c:	2200      	movs	r2, #0
 800242e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002432:	4b35      	ldr	r3, [pc, #212]	@ (8002508 <MX_LTDC_Init+0x15c>)
 8002434:	2200      	movs	r2, #0
 8002436:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800243a:	4833      	ldr	r0, [pc, #204]	@ (8002508 <MX_LTDC_Init+0x15c>)
 800243c:	f002 feaa 	bl	8005194 <HAL_LTDC_Init>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8002446:	f000 faa7 	bl	8002998 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800244a:	2300      	movs	r3, #0
 800244c:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 800244e:	2300      	movs	r3, #0
 8002450:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8002452:	2300      	movs	r3, #0
 8002454:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8002456:	2300      	movs	r3, #0
 8002458:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800245a:	2300      	movs	r3, #0
 800245c:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 800245e:	2300      	movs	r3, #0
 8002460:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8002462:	2300      	movs	r3, #0
 8002464:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002466:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800246a:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800246c:	2305      	movs	r3, #5
 800246e:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8002470:	2300      	movs	r3, #0
 8002472:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8002474:	2300      	movs	r3, #0
 8002476:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8002478:	2300      	movs	r3, #0
 800247a:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800247c:	2300      	movs	r3, #0
 800247e:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8002482:	2300      	movs	r3, #0
 8002484:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8002488:	2300      	movs	r3, #0
 800248a:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800248e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002492:	2200      	movs	r2, #0
 8002494:	4619      	mov	r1, r3
 8002496:	481c      	ldr	r0, [pc, #112]	@ (8002508 <MX_LTDC_Init+0x15c>)
 8002498:	f002 ff4c 	bl	8005334 <HAL_LTDC_ConfigLayer>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80024a2:	f000 fa79 	bl	8002998 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80024a6:	2300      	movs	r3, #0
 80024a8:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80024ae:	2300      	movs	r3, #0
 80024b0:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80024b2:	2300      	movs	r3, #0
 80024b4:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80024b6:	2300      	movs	r3, #0
 80024b8:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80024ba:	2300      	movs	r3, #0
 80024bc:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80024be:	2300      	movs	r3, #0
 80024c0:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80024c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024c6:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80024c8:	2305      	movs	r3, #5
 80024ca:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80024cc:	2300      	movs	r3, #0
 80024ce:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 80024d0:	2300      	movs	r3, #0
 80024d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 80024d4:	2300      	movs	r3, #0
 80024d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80024d8:	2300      	movs	r3, #0
 80024da:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80024de:	2300      	movs	r3, #0
 80024e0:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80024e4:	2300      	movs	r3, #0
 80024e6:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80024ea:	463b      	mov	r3, r7
 80024ec:	2201      	movs	r2, #1
 80024ee:	4619      	mov	r1, r3
 80024f0:	4805      	ldr	r0, [pc, #20]	@ (8002508 <MX_LTDC_Init+0x15c>)
 80024f2:	f002 ff1f 	bl	8005334 <HAL_LTDC_ConfigLayer>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80024fc:	f000 fa4c 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002500:	bf00      	nop
 8002502:	3768      	adds	r7, #104	@ 0x68
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	20025a84 	.word	0x20025a84
 800250c:	40016800 	.word	0x40016800

08002510 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002514:	4b06      	ldr	r3, [pc, #24]	@ (8002530 <MX_RNG_Init+0x20>)
 8002516:	4a07      	ldr	r2, [pc, #28]	@ (8002534 <MX_RNG_Init+0x24>)
 8002518:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800251a:	4805      	ldr	r0, [pc, #20]	@ (8002530 <MX_RNG_Init+0x20>)
 800251c:	f003 ff24 	bl	8006368 <HAL_RNG_Init>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8002526:	f000 fa37 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	20025b2c 	.word	0x20025b2c
 8002534:	50060800 	.word	0x50060800

08002538 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800253c:	4b17      	ldr	r3, [pc, #92]	@ (800259c <MX_SPI5_Init+0x64>)
 800253e:	4a18      	ldr	r2, [pc, #96]	@ (80025a0 <MX_SPI5_Init+0x68>)
 8002540:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002542:	4b16      	ldr	r3, [pc, #88]	@ (800259c <MX_SPI5_Init+0x64>)
 8002544:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002548:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800254a:	4b14      	ldr	r3, [pc, #80]	@ (800259c <MX_SPI5_Init+0x64>)
 800254c:	2200      	movs	r2, #0
 800254e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002550:	4b12      	ldr	r3, [pc, #72]	@ (800259c <MX_SPI5_Init+0x64>)
 8002552:	2200      	movs	r2, #0
 8002554:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002556:	4b11      	ldr	r3, [pc, #68]	@ (800259c <MX_SPI5_Init+0x64>)
 8002558:	2200      	movs	r2, #0
 800255a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800255c:	4b0f      	ldr	r3, [pc, #60]	@ (800259c <MX_SPI5_Init+0x64>)
 800255e:	2200      	movs	r2, #0
 8002560:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002562:	4b0e      	ldr	r3, [pc, #56]	@ (800259c <MX_SPI5_Init+0x64>)
 8002564:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002568:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800256a:	4b0c      	ldr	r3, [pc, #48]	@ (800259c <MX_SPI5_Init+0x64>)
 800256c:	2200      	movs	r2, #0
 800256e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002570:	4b0a      	ldr	r3, [pc, #40]	@ (800259c <MX_SPI5_Init+0x64>)
 8002572:	2200      	movs	r2, #0
 8002574:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002576:	4b09      	ldr	r3, [pc, #36]	@ (800259c <MX_SPI5_Init+0x64>)
 8002578:	2200      	movs	r2, #0
 800257a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800257c:	4b07      	ldr	r3, [pc, #28]	@ (800259c <MX_SPI5_Init+0x64>)
 800257e:	2200      	movs	r2, #0
 8002580:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8002582:	4b06      	ldr	r3, [pc, #24]	@ (800259c <MX_SPI5_Init+0x64>)
 8002584:	220a      	movs	r2, #10
 8002586:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002588:	4804      	ldr	r0, [pc, #16]	@ (800259c <MX_SPI5_Init+0x64>)
 800258a:	f003 ff6d 	bl	8006468 <HAL_SPI_Init>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8002594:	f000 fa00 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002598:	bf00      	nop
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20025b3c 	.word	0x20025b3c
 80025a0:	40015000 	.word	0x40015000

080025a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025aa:	f107 0308 	add.w	r3, r7, #8
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	605a      	str	r2, [r3, #4]
 80025b4:	609a      	str	r2, [r3, #8]
 80025b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025b8:	463b      	mov	r3, r7
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80025c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002638 <MX_TIM2_Init+0x94>)
 80025c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80025c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80025c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002638 <MX_TIM2_Init+0x94>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002638 <MX_TIM2_Init+0x94>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80025d4:	4b18      	ldr	r3, [pc, #96]	@ (8002638 <MX_TIM2_Init+0x94>)
 80025d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80025da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025dc:	4b16      	ldr	r3, [pc, #88]	@ (8002638 <MX_TIM2_Init+0x94>)
 80025de:	2200      	movs	r2, #0
 80025e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025e2:	4b15      	ldr	r3, [pc, #84]	@ (8002638 <MX_TIM2_Init+0x94>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80025e8:	4813      	ldr	r0, [pc, #76]	@ (8002638 <MX_TIM2_Init+0x94>)
 80025ea:	f004 fa1d 	bl	8006a28 <HAL_TIM_Base_Init>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80025f4:	f000 f9d0 	bl	8002998 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025fe:	f107 0308 	add.w	r3, r7, #8
 8002602:	4619      	mov	r1, r3
 8002604:	480c      	ldr	r0, [pc, #48]	@ (8002638 <MX_TIM2_Init+0x94>)
 8002606:	f004 fa5e 	bl	8006ac6 <HAL_TIM_ConfigClockSource>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002610:	f000 f9c2 	bl	8002998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002614:	2300      	movs	r3, #0
 8002616:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002618:	2300      	movs	r3, #0
 800261a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800261c:	463b      	mov	r3, r7
 800261e:	4619      	mov	r1, r3
 8002620:	4805      	ldr	r0, [pc, #20]	@ (8002638 <MX_TIM2_Init+0x94>)
 8002622:	f004 fc5d 	bl	8006ee0 <HAL_TIMEx_MasterConfigSynchronization>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800262c:	f000 f9b4 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002630:	bf00      	nop
 8002632:	3718      	adds	r7, #24
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	20025b94 	.word	0x20025b94

0800263c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b08e      	sub	sp, #56	@ 0x38
 8002640:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002642:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002646:	2200      	movs	r2, #0
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	605a      	str	r2, [r3, #4]
 800264c:	609a      	str	r2, [r3, #8]
 800264e:	60da      	str	r2, [r3, #12]
 8002650:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002652:	2300      	movs	r3, #0
 8002654:	623b      	str	r3, [r7, #32]
 8002656:	4bb2      	ldr	r3, [pc, #712]	@ (8002920 <MX_GPIO_Init+0x2e4>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265a:	4ab1      	ldr	r2, [pc, #708]	@ (8002920 <MX_GPIO_Init+0x2e4>)
 800265c:	f043 0304 	orr.w	r3, r3, #4
 8002660:	6313      	str	r3, [r2, #48]	@ 0x30
 8002662:	4baf      	ldr	r3, [pc, #700]	@ (8002920 <MX_GPIO_Init+0x2e4>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002666:	f003 0304 	and.w	r3, r3, #4
 800266a:	623b      	str	r3, [r7, #32]
 800266c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	61fb      	str	r3, [r7, #28]
 8002672:	4bab      	ldr	r3, [pc, #684]	@ (8002920 <MX_GPIO_Init+0x2e4>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002676:	4aaa      	ldr	r2, [pc, #680]	@ (8002920 <MX_GPIO_Init+0x2e4>)
 8002678:	f043 0320 	orr.w	r3, r3, #32
 800267c:	6313      	str	r3, [r2, #48]	@ 0x30
 800267e:	4ba8      	ldr	r3, [pc, #672]	@ (8002920 <MX_GPIO_Init+0x2e4>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002682:	f003 0320 	and.w	r3, r3, #32
 8002686:	61fb      	str	r3, [r7, #28]
 8002688:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800268a:	2300      	movs	r3, #0
 800268c:	61bb      	str	r3, [r7, #24]
 800268e:	4ba4      	ldr	r3, [pc, #656]	@ (8002920 <MX_GPIO_Init+0x2e4>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002692:	4aa3      	ldr	r2, [pc, #652]	@ (8002920 <MX_GPIO_Init+0x2e4>)
 8002694:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002698:	6313      	str	r3, [r2, #48]	@ 0x30
 800269a:	4ba1      	ldr	r3, [pc, #644]	@ (8002920 <MX_GPIO_Init+0x2e4>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026a2:	61bb      	str	r3, [r7, #24]
 80026a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	617b      	str	r3, [r7, #20]
 80026aa:	4b9d      	ldr	r3, [pc, #628]	@ (8002920 <MX_GPIO_Init+0x2e4>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ae:	4a9c      	ldr	r2, [pc, #624]	@ (8002920 <MX_GPIO_Init+0x2e4>)
 80026b0:	f043 0301 	orr.w	r3, r3, #1
 80026b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026b6:	4b9a      	ldr	r3, [pc, #616]	@ (8002920 <MX_GPIO_Init+0x2e4>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	617b      	str	r3, [r7, #20]
 80026c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026c2:	2300      	movs	r3, #0
 80026c4:	613b      	str	r3, [r7, #16]
 80026c6:	4b96      	ldr	r3, [pc, #600]	@ (8002920 <MX_GPIO_Init+0x2e4>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ca:	4a95      	ldr	r2, [pc, #596]	@ (8002920 <MX_GPIO_Init+0x2e4>)
 80026cc:	f043 0302 	orr.w	r3, r3, #2
 80026d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026d2:	4b93      	ldr	r3, [pc, #588]	@ (8002920 <MX_GPIO_Init+0x2e4>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	613b      	str	r3, [r7, #16]
 80026dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	4b8f      	ldr	r3, [pc, #572]	@ (8002920 <MX_GPIO_Init+0x2e4>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e6:	4a8e      	ldr	r2, [pc, #568]	@ (8002920 <MX_GPIO_Init+0x2e4>)
 80026e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ee:	4b8c      	ldr	r3, [pc, #560]	@ (8002920 <MX_GPIO_Init+0x2e4>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80026fa:	2300      	movs	r3, #0
 80026fc:	60bb      	str	r3, [r7, #8]
 80026fe:	4b88      	ldr	r3, [pc, #544]	@ (8002920 <MX_GPIO_Init+0x2e4>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002702:	4a87      	ldr	r2, [pc, #540]	@ (8002920 <MX_GPIO_Init+0x2e4>)
 8002704:	f043 0310 	orr.w	r3, r3, #16
 8002708:	6313      	str	r3, [r2, #48]	@ 0x30
 800270a:	4b85      	ldr	r3, [pc, #532]	@ (8002920 <MX_GPIO_Init+0x2e4>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270e:	f003 0310 	and.w	r3, r3, #16
 8002712:	60bb      	str	r3, [r7, #8]
 8002714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002716:	2300      	movs	r3, #0
 8002718:	607b      	str	r3, [r7, #4]
 800271a:	4b81      	ldr	r3, [pc, #516]	@ (8002920 <MX_GPIO_Init+0x2e4>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271e:	4a80      	ldr	r2, [pc, #512]	@ (8002920 <MX_GPIO_Init+0x2e4>)
 8002720:	f043 0308 	orr.w	r3, r3, #8
 8002724:	6313      	str	r3, [r2, #48]	@ 0x30
 8002726:	4b7e      	ldr	r3, [pc, #504]	@ (8002920 <MX_GPIO_Init+0x2e4>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272a:	f003 0308 	and.w	r3, r3, #8
 800272e:	607b      	str	r3, [r7, #4]
 8002730:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8002732:	2200      	movs	r2, #0
 8002734:	2116      	movs	r1, #22
 8002736:	487b      	ldr	r0, [pc, #492]	@ (8002924 <MX_GPIO_Init+0x2e8>)
 8002738:	f001 fc72 	bl	8004020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800273c:	2200      	movs	r2, #0
 800273e:	2180      	movs	r1, #128	@ 0x80
 8002740:	4879      	ldr	r0, [pc, #484]	@ (8002928 <MX_GPIO_Init+0x2ec>)
 8002742:	f001 fc6d 	bl	8004020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8002746:	2200      	movs	r2, #0
 8002748:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 800274c:	4877      	ldr	r0, [pc, #476]	@ (800292c <MX_GPIO_Init+0x2f0>)
 800274e:	f001 fc67 	bl	8004020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8002752:	2200      	movs	r2, #0
 8002754:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8002758:	4875      	ldr	r0, [pc, #468]	@ (8002930 <MX_GPIO_Init+0x2f4>)
 800275a:	f001 fc61 	bl	8004020 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800275e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002762:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002764:	2302      	movs	r3, #2
 8002766:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002768:	2300      	movs	r3, #0
 800276a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800276c:	2303      	movs	r3, #3
 800276e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002770:	230c      	movs	r3, #12
 8002772:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002774:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002778:	4619      	mov	r1, r3
 800277a:	486e      	ldr	r0, [pc, #440]	@ (8002934 <MX_GPIO_Init+0x2f8>)
 800277c:	f001 f980 	bl	8003a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002780:	2301      	movs	r3, #1
 8002782:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002784:	2302      	movs	r3, #2
 8002786:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002788:	2300      	movs	r3, #0
 800278a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800278c:	2303      	movs	r3, #3
 800278e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002790:	230c      	movs	r3, #12
 8002792:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002794:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002798:	4619      	mov	r1, r3
 800279a:	4862      	ldr	r0, [pc, #392]	@ (8002924 <MX_GPIO_Init+0x2e8>)
 800279c:	f001 f970 	bl	8003a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80027a0:	2316      	movs	r3, #22
 80027a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027a4:	2301      	movs	r3, #1
 80027a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a8:	2300      	movs	r3, #0
 80027aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ac:	2300      	movs	r3, #0
 80027ae:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027b4:	4619      	mov	r1, r3
 80027b6:	485b      	ldr	r0, [pc, #364]	@ (8002924 <MX_GPIO_Init+0x2e8>)
 80027b8:	f001 f962 	bl	8003a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80027bc:	f248 0307 	movw	r3, #32775	@ 0x8007
 80027c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80027c2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80027c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c8:	2300      	movs	r3, #0
 80027ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027d0:	4619      	mov	r1, r3
 80027d2:	4855      	ldr	r0, [pc, #340]	@ (8002928 <MX_GPIO_Init+0x2ec>)
 80027d4:	f001 f954 	bl	8003a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80027d8:	2380      	movs	r3, #128	@ 0x80
 80027da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027dc:	2301      	movs	r3, #1
 80027de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e0:	2300      	movs	r3, #0
 80027e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e4:	2300      	movs	r3, #0
 80027e6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80027e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027ec:	4619      	mov	r1, r3
 80027ee:	484e      	ldr	r0, [pc, #312]	@ (8002928 <MX_GPIO_Init+0x2ec>)
 80027f0:	f001 f946 	bl	8003a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80027f4:	2320      	movs	r3, #32
 80027f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80027f8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80027fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fe:	2300      	movs	r3, #0
 8002800:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8002802:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002806:	4619      	mov	r1, r3
 8002808:	4846      	ldr	r0, [pc, #280]	@ (8002924 <MX_GPIO_Init+0x2e8>)
 800280a:	f001 f939 	bl	8003a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800280e:	2304      	movs	r3, #4
 8002810:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002812:	2300      	movs	r3, #0
 8002814:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002816:	2300      	movs	r3, #0
 8002818:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800281a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800281e:	4619      	mov	r1, r3
 8002820:	4845      	ldr	r0, [pc, #276]	@ (8002938 <MX_GPIO_Init+0x2fc>)
 8002822:	f001 f92d 	bl	8003a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002826:	f248 1333 	movw	r3, #33075	@ 0x8133
 800282a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282c:	2302      	movs	r3, #2
 800282e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002830:	2300      	movs	r3, #0
 8002832:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002834:	2303      	movs	r3, #3
 8002836:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002838:	230c      	movs	r3, #12
 800283a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800283c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002840:	4619      	mov	r1, r3
 8002842:	483b      	ldr	r0, [pc, #236]	@ (8002930 <MX_GPIO_Init+0x2f4>)
 8002844:	f001 f91c 	bl	8003a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002848:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800284c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284e:	2302      	movs	r3, #2
 8002850:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002852:	2300      	movs	r3, #0
 8002854:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002856:	2303      	movs	r3, #3
 8002858:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800285a:	230c      	movs	r3, #12
 800285c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800285e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002862:	4619      	mov	r1, r3
 8002864:	4835      	ldr	r0, [pc, #212]	@ (800293c <MX_GPIO_Init+0x300>)
 8002866:	f001 f90b 	bl	8003a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800286a:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 800286e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002870:	2302      	movs	r3, #2
 8002872:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002874:	2300      	movs	r3, #0
 8002876:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002878:	2300      	movs	r3, #0
 800287a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800287c:	230c      	movs	r3, #12
 800287e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002880:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002884:	4619      	mov	r1, r3
 8002886:	482c      	ldr	r0, [pc, #176]	@ (8002938 <MX_GPIO_Init+0x2fc>)
 8002888:	f001 f8fa 	bl	8003a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800288c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002890:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002892:	2300      	movs	r3, #0
 8002894:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002896:	2300      	movs	r3, #0
 8002898:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800289a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800289e:	4619      	mov	r1, r3
 80028a0:	4825      	ldr	r0, [pc, #148]	@ (8002938 <MX_GPIO_Init+0x2fc>)
 80028a2:	f001 f8ed 	bl	8003a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80028a6:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80028aa:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ac:	2302      	movs	r3, #2
 80028ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b4:	2303      	movs	r3, #3
 80028b6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80028b8:	230c      	movs	r3, #12
 80028ba:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028c0:	4619      	mov	r1, r3
 80028c2:	481a      	ldr	r0, [pc, #104]	@ (800292c <MX_GPIO_Init+0x2f0>)
 80028c4:	f001 f8dc 	bl	8003a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 80028c8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80028cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028ce:	2300      	movs	r3, #0
 80028d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d2:	2300      	movs	r3, #0
 80028d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80028d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028da:	4619      	mov	r1, r3
 80028dc:	4813      	ldr	r0, [pc, #76]	@ (800292c <MX_GPIO_Init+0x2f0>)
 80028de:	f001 f8cf 	bl	8003a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80028e2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80028e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028e8:	2301      	movs	r3, #1
 80028ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ec:	2300      	movs	r3, #0
 80028ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f0:	2300      	movs	r3, #0
 80028f2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028f8:	4619      	mov	r1, r3
 80028fa:	480c      	ldr	r0, [pc, #48]	@ (800292c <MX_GPIO_Init+0x2f0>)
 80028fc:	f001 f8c0 	bl	8003a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002900:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002904:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002906:	2302      	movs	r3, #2
 8002908:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290a:	2300      	movs	r3, #0
 800290c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800290e:	2303      	movs	r3, #3
 8002910:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002912:	2307      	movs	r3, #7
 8002914:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002916:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800291a:	4619      	mov	r1, r3
 800291c:	e010      	b.n	8002940 <MX_GPIO_Init+0x304>
 800291e:	bf00      	nop
 8002920:	40023800 	.word	0x40023800
 8002924:	40020800 	.word	0x40020800
 8002928:	40020000 	.word	0x40020000
 800292c:	40020c00 	.word	0x40020c00
 8002930:	40021800 	.word	0x40021800
 8002934:	40021400 	.word	0x40021400
 8002938:	40020400 	.word	0x40020400
 800293c:	40021000 	.word	0x40021000
 8002940:	4812      	ldr	r0, [pc, #72]	@ (800298c <MX_GPIO_Init+0x350>)
 8002942:	f001 f89d 	bl	8003a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8002946:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800294a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800294c:	2301      	movs	r3, #1
 800294e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002950:	2300      	movs	r3, #0
 8002952:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002954:	2300      	movs	r3, #0
 8002956:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002958:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800295c:	4619      	mov	r1, r3
 800295e:	480c      	ldr	r0, [pc, #48]	@ (8002990 <MX_GPIO_Init+0x354>)
 8002960:	f001 f88e 	bl	8003a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002964:	2360      	movs	r3, #96	@ 0x60
 8002966:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002968:	2302      	movs	r3, #2
 800296a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296c:	2300      	movs	r3, #0
 800296e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002970:	2303      	movs	r3, #3
 8002972:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002974:	230c      	movs	r3, #12
 8002976:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002978:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800297c:	4619      	mov	r1, r3
 800297e:	4805      	ldr	r0, [pc, #20]	@ (8002994 <MX_GPIO_Init+0x358>)
 8002980:	f001 f87e 	bl	8003a80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002984:	bf00      	nop
 8002986:	3738      	adds	r7, #56	@ 0x38
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40020000 	.word	0x40020000
 8002990:	40021800 	.word	0x40021800
 8002994:	40020400 	.word	0x40020400

08002998 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800299c:	b672      	cpsid	i
}
 800299e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029a0:	bf00      	nop
 80029a2:	e7fd      	b.n	80029a0 <Error_Handler+0x8>

080029a4 <HAL_MspInit>:
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	2300      	movs	r3, #0
 80029ac:	607b      	str	r3, [r7, #4]
 80029ae:	4b10      	ldr	r3, [pc, #64]	@ (80029f0 <HAL_MspInit+0x4c>)
 80029b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b2:	4a0f      	ldr	r2, [pc, #60]	@ (80029f0 <HAL_MspInit+0x4c>)
 80029b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80029ba:	4b0d      	ldr	r3, [pc, #52]	@ (80029f0 <HAL_MspInit+0x4c>)
 80029bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029c2:	607b      	str	r3, [r7, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2300      	movs	r3, #0
 80029c8:	603b      	str	r3, [r7, #0]
 80029ca:	4b09      	ldr	r3, [pc, #36]	@ (80029f0 <HAL_MspInit+0x4c>)
 80029cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ce:	4a08      	ldr	r2, [pc, #32]	@ (80029f0 <HAL_MspInit+0x4c>)
 80029d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80029d6:	4b06      	ldr	r3, [pc, #24]	@ (80029f0 <HAL_MspInit+0x4c>)
 80029d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029de:	603b      	str	r3, [r7, #0]
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	2007      	movs	r0, #7
 80029e4:	f001 f818 	bl	8003a18 <HAL_NVIC_SetPriorityGrouping>
 80029e8:	bf00      	nop
 80029ea:	3708      	adds	r7, #8
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40023800 	.word	0x40023800

080029f4 <HAL_I2C_MspInit>:
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b08a      	sub	sp, #40	@ 0x28
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	f107 0314 	add.w	r3, r7, #20
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	605a      	str	r2, [r3, #4]
 8002a06:	609a      	str	r2, [r3, #8]
 8002a08:	60da      	str	r2, [r3, #12]
 8002a0a:	611a      	str	r2, [r3, #16]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a29      	ldr	r2, [pc, #164]	@ (8002ab8 <HAL_I2C_MspInit+0xc4>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d14b      	bne.n	8002aae <HAL_I2C_MspInit+0xba>
 8002a16:	2300      	movs	r3, #0
 8002a18:	613b      	str	r3, [r7, #16]
 8002a1a:	4b28      	ldr	r3, [pc, #160]	@ (8002abc <HAL_I2C_MspInit+0xc8>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1e:	4a27      	ldr	r2, [pc, #156]	@ (8002abc <HAL_I2C_MspInit+0xc8>)
 8002a20:	f043 0304 	orr.w	r3, r3, #4
 8002a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a26:	4b25      	ldr	r3, [pc, #148]	@ (8002abc <HAL_I2C_MspInit+0xc8>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2a:	f003 0304 	and.w	r3, r3, #4
 8002a2e:	613b      	str	r3, [r7, #16]
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	2300      	movs	r3, #0
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	4b21      	ldr	r3, [pc, #132]	@ (8002abc <HAL_I2C_MspInit+0xc8>)
 8002a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3a:	4a20      	ldr	r2, [pc, #128]	@ (8002abc <HAL_I2C_MspInit+0xc8>)
 8002a3c:	f043 0301 	orr.w	r3, r3, #1
 8002a40:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a42:	4b1e      	ldr	r3, [pc, #120]	@ (8002abc <HAL_I2C_MspInit+0xc8>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a52:	617b      	str	r3, [r7, #20]
 8002a54:	2312      	movs	r3, #18
 8002a56:	61bb      	str	r3, [r7, #24]
 8002a58:	2300      	movs	r3, #0
 8002a5a:	61fb      	str	r3, [r7, #28]
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	623b      	str	r3, [r7, #32]
 8002a60:	2304      	movs	r3, #4
 8002a62:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a64:	f107 0314 	add.w	r3, r7, #20
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4815      	ldr	r0, [pc, #84]	@ (8002ac0 <HAL_I2C_MspInit+0xcc>)
 8002a6c:	f001 f808 	bl	8003a80 <HAL_GPIO_Init>
 8002a70:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a74:	617b      	str	r3, [r7, #20]
 8002a76:	2312      	movs	r3, #18
 8002a78:	61bb      	str	r3, [r7, #24]
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61fb      	str	r3, [r7, #28]
 8002a7e:	2300      	movs	r3, #0
 8002a80:	623b      	str	r3, [r7, #32]
 8002a82:	2304      	movs	r3, #4
 8002a84:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a86:	f107 0314 	add.w	r3, r7, #20
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	480d      	ldr	r0, [pc, #52]	@ (8002ac4 <HAL_I2C_MspInit+0xd0>)
 8002a8e:	f000 fff7 	bl	8003a80 <HAL_GPIO_Init>
 8002a92:	2300      	movs	r3, #0
 8002a94:	60bb      	str	r3, [r7, #8]
 8002a96:	4b09      	ldr	r3, [pc, #36]	@ (8002abc <HAL_I2C_MspInit+0xc8>)
 8002a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9a:	4a08      	ldr	r2, [pc, #32]	@ (8002abc <HAL_I2C_MspInit+0xc8>)
 8002a9c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002aa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002aa2:	4b06      	ldr	r3, [pc, #24]	@ (8002abc <HAL_I2C_MspInit+0xc8>)
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002aaa:	60bb      	str	r3, [r7, #8]
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	bf00      	nop
 8002ab0:	3728      	adds	r7, #40	@ 0x28
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40005c00 	.word	0x40005c00
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	40020800 	.word	0x40020800
 8002ac4:	40020000 	.word	0x40020000

08002ac8 <HAL_LTDC_MspInit>:
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b09a      	sub	sp, #104	@ 0x68
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	605a      	str	r2, [r3, #4]
 8002ada:	609a      	str	r2, [r3, #8]
 8002adc:	60da      	str	r2, [r3, #12]
 8002ade:	611a      	str	r2, [r3, #16]
 8002ae0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ae4:	2230      	movs	r2, #48	@ 0x30
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f004 fbc9 	bl	8007280 <memset>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a81      	ldr	r2, [pc, #516]	@ (8002cf8 <HAL_LTDC_MspInit+0x230>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	f040 80fb 	bne.w	8002cf0 <HAL_LTDC_MspInit+0x228>
 8002afa:	2308      	movs	r3, #8
 8002afc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002afe:	23c8      	movs	r3, #200	@ 0xc8
 8002b00:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b02:	2302      	movs	r3, #2
 8002b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b06:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8002b0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b10:	4618      	mov	r0, r3
 8002b12:	f003 fa69 	bl	8005fe8 <HAL_RCCEx_PeriphCLKConfig>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <HAL_LTDC_MspInit+0x58>
 8002b1c:	f7ff ff3c 	bl	8002998 <Error_Handler>
 8002b20:	2300      	movs	r3, #0
 8002b22:	623b      	str	r3, [r7, #32]
 8002b24:	4b75      	ldr	r3, [pc, #468]	@ (8002cfc <HAL_LTDC_MspInit+0x234>)
 8002b26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b28:	4a74      	ldr	r2, [pc, #464]	@ (8002cfc <HAL_LTDC_MspInit+0x234>)
 8002b2a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002b2e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b30:	4b72      	ldr	r3, [pc, #456]	@ (8002cfc <HAL_LTDC_MspInit+0x234>)
 8002b32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b34:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002b38:	623b      	str	r3, [r7, #32]
 8002b3a:	6a3b      	ldr	r3, [r7, #32]
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	61fb      	str	r3, [r7, #28]
 8002b40:	4b6e      	ldr	r3, [pc, #440]	@ (8002cfc <HAL_LTDC_MspInit+0x234>)
 8002b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b44:	4a6d      	ldr	r2, [pc, #436]	@ (8002cfc <HAL_LTDC_MspInit+0x234>)
 8002b46:	f043 0320 	orr.w	r3, r3, #32
 8002b4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b4c:	4b6b      	ldr	r3, [pc, #428]	@ (8002cfc <HAL_LTDC_MspInit+0x234>)
 8002b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b50:	f003 0320 	and.w	r3, r3, #32
 8002b54:	61fb      	str	r3, [r7, #28]
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	2300      	movs	r3, #0
 8002b5a:	61bb      	str	r3, [r7, #24]
 8002b5c:	4b67      	ldr	r3, [pc, #412]	@ (8002cfc <HAL_LTDC_MspInit+0x234>)
 8002b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b60:	4a66      	ldr	r2, [pc, #408]	@ (8002cfc <HAL_LTDC_MspInit+0x234>)
 8002b62:	f043 0301 	orr.w	r3, r3, #1
 8002b66:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b68:	4b64      	ldr	r3, [pc, #400]	@ (8002cfc <HAL_LTDC_MspInit+0x234>)
 8002b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	61bb      	str	r3, [r7, #24]
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	2300      	movs	r3, #0
 8002b76:	617b      	str	r3, [r7, #20]
 8002b78:	4b60      	ldr	r3, [pc, #384]	@ (8002cfc <HAL_LTDC_MspInit+0x234>)
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7c:	4a5f      	ldr	r2, [pc, #380]	@ (8002cfc <HAL_LTDC_MspInit+0x234>)
 8002b7e:	f043 0302 	orr.w	r3, r3, #2
 8002b82:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b84:	4b5d      	ldr	r3, [pc, #372]	@ (8002cfc <HAL_LTDC_MspInit+0x234>)
 8002b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	617b      	str	r3, [r7, #20]
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	2300      	movs	r3, #0
 8002b92:	613b      	str	r3, [r7, #16]
 8002b94:	4b59      	ldr	r3, [pc, #356]	@ (8002cfc <HAL_LTDC_MspInit+0x234>)
 8002b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b98:	4a58      	ldr	r2, [pc, #352]	@ (8002cfc <HAL_LTDC_MspInit+0x234>)
 8002b9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ba0:	4b56      	ldr	r3, [pc, #344]	@ (8002cfc <HAL_LTDC_MspInit+0x234>)
 8002ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ba8:	613b      	str	r3, [r7, #16]
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	2300      	movs	r3, #0
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	4b52      	ldr	r3, [pc, #328]	@ (8002cfc <HAL_LTDC_MspInit+0x234>)
 8002bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb4:	4a51      	ldr	r2, [pc, #324]	@ (8002cfc <HAL_LTDC_MspInit+0x234>)
 8002bb6:	f043 0304 	orr.w	r3, r3, #4
 8002bba:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bbc:	4b4f      	ldr	r3, [pc, #316]	@ (8002cfc <HAL_LTDC_MspInit+0x234>)
 8002bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60bb      	str	r3, [r7, #8]
 8002bcc:	4b4b      	ldr	r3, [pc, #300]	@ (8002cfc <HAL_LTDC_MspInit+0x234>)
 8002bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd0:	4a4a      	ldr	r2, [pc, #296]	@ (8002cfc <HAL_LTDC_MspInit+0x234>)
 8002bd2:	f043 0308 	orr.w	r3, r3, #8
 8002bd6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bd8:	4b48      	ldr	r3, [pc, #288]	@ (8002cfc <HAL_LTDC_MspInit+0x234>)
 8002bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bdc:	f003 0308 	and.w	r3, r3, #8
 8002be0:	60bb      	str	r3, [r7, #8]
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002be8:	657b      	str	r3, [r7, #84]	@ 0x54
 8002bea:	2302      	movs	r3, #2
 8002bec:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002bee:	2300      	movs	r3, #0
 8002bf0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	663b      	str	r3, [r7, #96]	@ 0x60
 8002bf6:	230e      	movs	r3, #14
 8002bf8:	667b      	str	r3, [r7, #100]	@ 0x64
 8002bfa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002bfe:	4619      	mov	r1, r3
 8002c00:	483f      	ldr	r0, [pc, #252]	@ (8002d00 <HAL_LTDC_MspInit+0x238>)
 8002c02:	f000 ff3d 	bl	8003a80 <HAL_GPIO_Init>
 8002c06:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002c0a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002c10:	2300      	movs	r3, #0
 8002c12:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002c14:	2300      	movs	r3, #0
 8002c16:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c18:	230e      	movs	r3, #14
 8002c1a:	667b      	str	r3, [r7, #100]	@ 0x64
 8002c1c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002c20:	4619      	mov	r1, r3
 8002c22:	4838      	ldr	r0, [pc, #224]	@ (8002d04 <HAL_LTDC_MspInit+0x23c>)
 8002c24:	f000 ff2c 	bl	8003a80 <HAL_GPIO_Init>
 8002c28:	2303      	movs	r3, #3
 8002c2a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002c30:	2300      	movs	r3, #0
 8002c32:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002c34:	2300      	movs	r3, #0
 8002c36:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c38:	2309      	movs	r3, #9
 8002c3a:	667b      	str	r3, [r7, #100]	@ 0x64
 8002c3c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002c40:	4619      	mov	r1, r3
 8002c42:	4831      	ldr	r0, [pc, #196]	@ (8002d08 <HAL_LTDC_MspInit+0x240>)
 8002c44:	f000 ff1c 	bl	8003a80 <HAL_GPIO_Init>
 8002c48:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002c4c:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c4e:	2302      	movs	r3, #2
 8002c50:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002c52:	2300      	movs	r3, #0
 8002c54:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002c56:	2300      	movs	r3, #0
 8002c58:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c5a:	230e      	movs	r3, #14
 8002c5c:	667b      	str	r3, [r7, #100]	@ 0x64
 8002c5e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002c62:	4619      	mov	r1, r3
 8002c64:	4828      	ldr	r0, [pc, #160]	@ (8002d08 <HAL_LTDC_MspInit+0x240>)
 8002c66:	f000 ff0b 	bl	8003a80 <HAL_GPIO_Init>
 8002c6a:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002c6e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c70:	2302      	movs	r3, #2
 8002c72:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002c74:	2300      	movs	r3, #0
 8002c76:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002c78:	2300      	movs	r3, #0
 8002c7a:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c7c:	230e      	movs	r3, #14
 8002c7e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002c80:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002c84:	4619      	mov	r1, r3
 8002c86:	4821      	ldr	r0, [pc, #132]	@ (8002d0c <HAL_LTDC_MspInit+0x244>)
 8002c88:	f000 fefa 	bl	8003a80 <HAL_GPIO_Init>
 8002c8c:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002c90:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c92:	2302      	movs	r3, #2
 8002c94:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002c96:	2300      	movs	r3, #0
 8002c98:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c9e:	230e      	movs	r3, #14
 8002ca0:	667b      	str	r3, [r7, #100]	@ 0x64
 8002ca2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4819      	ldr	r0, [pc, #100]	@ (8002d10 <HAL_LTDC_MspInit+0x248>)
 8002caa:	f000 fee9 	bl	8003a80 <HAL_GPIO_Init>
 8002cae:	2348      	movs	r3, #72	@ 0x48
 8002cb0:	657b      	str	r3, [r7, #84]	@ 0x54
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002cba:	2300      	movs	r3, #0
 8002cbc:	663b      	str	r3, [r7, #96]	@ 0x60
 8002cbe:	230e      	movs	r3, #14
 8002cc0:	667b      	str	r3, [r7, #100]	@ 0x64
 8002cc2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	4812      	ldr	r0, [pc, #72]	@ (8002d14 <HAL_LTDC_MspInit+0x24c>)
 8002cca:	f000 fed9 	bl	8003a80 <HAL_GPIO_Init>
 8002cce:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002cd2:	657b      	str	r3, [r7, #84]	@ 0x54
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002cd8:	2300      	movs	r3, #0
 8002cda:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002cdc:	2300      	movs	r3, #0
 8002cde:	663b      	str	r3, [r7, #96]	@ 0x60
 8002ce0:	2309      	movs	r3, #9
 8002ce2:	667b      	str	r3, [r7, #100]	@ 0x64
 8002ce4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002ce8:	4619      	mov	r1, r3
 8002cea:	4808      	ldr	r0, [pc, #32]	@ (8002d0c <HAL_LTDC_MspInit+0x244>)
 8002cec:	f000 fec8 	bl	8003a80 <HAL_GPIO_Init>
 8002cf0:	bf00      	nop
 8002cf2:	3768      	adds	r7, #104	@ 0x68
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40016800 	.word	0x40016800
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	40021400 	.word	0x40021400
 8002d04:	40020000 	.word	0x40020000
 8002d08:	40020400 	.word	0x40020400
 8002d0c:	40021800 	.word	0x40021800
 8002d10:	40020800 	.word	0x40020800
 8002d14:	40020c00 	.word	0x40020c00

08002d18 <HAL_RNG_MspInit>:
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a0b      	ldr	r2, [pc, #44]	@ (8002d54 <HAL_RNG_MspInit+0x3c>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d10d      	bne.n	8002d46 <HAL_RNG_MspInit+0x2e>
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60fb      	str	r3, [r7, #12]
 8002d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d58 <HAL_RNG_MspInit+0x40>)
 8002d30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d32:	4a09      	ldr	r2, [pc, #36]	@ (8002d58 <HAL_RNG_MspInit+0x40>)
 8002d34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d38:	6353      	str	r3, [r2, #52]	@ 0x34
 8002d3a:	4b07      	ldr	r3, [pc, #28]	@ (8002d58 <HAL_RNG_MspInit+0x40>)
 8002d3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	bf00      	nop
 8002d48:	3714      	adds	r7, #20
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	50060800 	.word	0x50060800
 8002d58:	40023800 	.word	0x40023800

08002d5c <HAL_SPI_MspInit>:
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b08a      	sub	sp, #40	@ 0x28
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	f107 0314 	add.w	r3, r7, #20
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	605a      	str	r2, [r3, #4]
 8002d6e:	609a      	str	r2, [r3, #8]
 8002d70:	60da      	str	r2, [r3, #12]
 8002d72:	611a      	str	r2, [r3, #16]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a19      	ldr	r2, [pc, #100]	@ (8002de0 <HAL_SPI_MspInit+0x84>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d12c      	bne.n	8002dd8 <HAL_SPI_MspInit+0x7c>
 8002d7e:	2300      	movs	r3, #0
 8002d80:	613b      	str	r3, [r7, #16]
 8002d82:	4b18      	ldr	r3, [pc, #96]	@ (8002de4 <HAL_SPI_MspInit+0x88>)
 8002d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d86:	4a17      	ldr	r2, [pc, #92]	@ (8002de4 <HAL_SPI_MspInit+0x88>)
 8002d88:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d8e:	4b15      	ldr	r3, [pc, #84]	@ (8002de4 <HAL_SPI_MspInit+0x88>)
 8002d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d96:	613b      	str	r3, [r7, #16]
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	4b11      	ldr	r3, [pc, #68]	@ (8002de4 <HAL_SPI_MspInit+0x88>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da2:	4a10      	ldr	r2, [pc, #64]	@ (8002de4 <HAL_SPI_MspInit+0x88>)
 8002da4:	f043 0320 	orr.w	r3, r3, #32
 8002da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002daa:	4b0e      	ldr	r3, [pc, #56]	@ (8002de4 <HAL_SPI_MspInit+0x88>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dae:	f003 0320 	and.w	r3, r3, #32
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002dba:	617b      	str	r3, [r7, #20]
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	61bb      	str	r3, [r7, #24]
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	61fb      	str	r3, [r7, #28]
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	623b      	str	r3, [r7, #32]
 8002dc8:	2305      	movs	r3, #5
 8002dca:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dcc:	f107 0314 	add.w	r3, r7, #20
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	4805      	ldr	r0, [pc, #20]	@ (8002de8 <HAL_SPI_MspInit+0x8c>)
 8002dd4:	f000 fe54 	bl	8003a80 <HAL_GPIO_Init>
 8002dd8:	bf00      	nop
 8002dda:	3728      	adds	r7, #40	@ 0x28
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40015000 	.word	0x40015000
 8002de4:	40023800 	.word	0x40023800
 8002de8:	40021400 	.word	0x40021400

08002dec <HAL_SPI_MspDeInit>:
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a08      	ldr	r2, [pc, #32]	@ (8002e1c <HAL_SPI_MspDeInit+0x30>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d10a      	bne.n	8002e14 <HAL_SPI_MspDeInit+0x28>
 8002dfe:	4b08      	ldr	r3, [pc, #32]	@ (8002e20 <HAL_SPI_MspDeInit+0x34>)
 8002e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e02:	4a07      	ldr	r2, [pc, #28]	@ (8002e20 <HAL_SPI_MspDeInit+0x34>)
 8002e04:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002e08:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e0a:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8002e0e:	4805      	ldr	r0, [pc, #20]	@ (8002e24 <HAL_SPI_MspDeInit+0x38>)
 8002e10:	f000 ffe2 	bl	8003dd8 <HAL_GPIO_DeInit>
 8002e14:	bf00      	nop
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40015000 	.word	0x40015000
 8002e20:	40023800 	.word	0x40023800
 8002e24:	40021400 	.word	0x40021400

08002e28 <HAL_TIM_Base_MspInit>:
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e38:	d10d      	bne.n	8002e56 <HAL_TIM_Base_MspInit+0x2e>
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	60fb      	str	r3, [r7, #12]
 8002e3e:	4b09      	ldr	r3, [pc, #36]	@ (8002e64 <HAL_TIM_Base_MspInit+0x3c>)
 8002e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e42:	4a08      	ldr	r2, [pc, #32]	@ (8002e64 <HAL_TIM_Base_MspInit+0x3c>)
 8002e44:	f043 0301 	orr.w	r3, r3, #1
 8002e48:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e4a:	4b06      	ldr	r3, [pc, #24]	@ (8002e64 <HAL_TIM_Base_MspInit+0x3c>)
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	60fb      	str	r3, [r7, #12]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	bf00      	nop
 8002e58:	3714      	adds	r7, #20
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	40023800 	.word	0x40023800

08002e68 <NMI_Handler>:
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	bf00      	nop
 8002e6e:	e7fd      	b.n	8002e6c <NMI_Handler+0x4>

08002e70 <HardFault_Handler>:
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	bf00      	nop
 8002e76:	e7fd      	b.n	8002e74 <HardFault_Handler+0x4>

08002e78 <MemManage_Handler>:
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	bf00      	nop
 8002e7e:	e7fd      	b.n	8002e7c <MemManage_Handler+0x4>

08002e80 <BusFault_Handler>:
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	bf00      	nop
 8002e86:	e7fd      	b.n	8002e84 <BusFault_Handler+0x4>

08002e88 <UsageFault_Handler>:
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	bf00      	nop
 8002e8e:	e7fd      	b.n	8002e8c <UsageFault_Handler+0x4>

08002e90 <SVC_Handler>:
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	bf00      	nop
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <DebugMon_Handler>:
 8002e9e:	b480      	push	{r7}
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	bf00      	nop
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <PendSV_Handler>:
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	bf00      	nop
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
	...

08002ebc <SysTick_Handler>:
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	f000 fcb4 	bl	800382c <HAL_IncTick>
 8002ec4:	4b14      	ldr	r3, [pc, #80]	@ (8002f18 <SysTick_Handler+0x5c>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	4a13      	ldr	r2, [pc, #76]	@ (8002f18 <SysTick_Handler+0x5c>)
 8002ecc:	6013      	str	r3, [r2, #0]
 8002ece:	4b12      	ldr	r3, [pc, #72]	@ (8002f18 <SysTick_Handler+0x5c>)
 8002ed0:	6819      	ldr	r1, [r3, #0]
 8002ed2:	4b12      	ldr	r3, [pc, #72]	@ (8002f1c <SysTick_Handler+0x60>)
 8002ed4:	fba3 2301 	umull	r2, r3, r3, r1
 8002ed8:	08da      	lsrs	r2, r3, #3
 8002eda:	4613      	mov	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	4413      	add	r3, r2
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	1aca      	subs	r2, r1, r3
 8002ee4:	2a00      	cmp	r2, #0
 8002ee6:	d105      	bne.n	8002ef4 <SysTick_Handler+0x38>
 8002ee8:	4b0d      	ldr	r3, [pc, #52]	@ (8002f20 <SysTick_Handler+0x64>)
 8002eea:	2201      	movs	r2, #1
 8002eec:	601a      	str	r2, [r3, #0]
 8002eee:	2002      	movs	r0, #2
 8002ef0:	f7fe fe72 	bl	8001bd8 <addSchedulerEvent>
 8002ef4:	4b08      	ldr	r3, [pc, #32]	@ (8002f18 <SysTick_Handler+0x5c>)
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8002f24 <SysTick_Handler+0x68>)
 8002efa:	fba3 1302 	umull	r1, r3, r3, r2
 8002efe:	091b      	lsrs	r3, r3, #4
 8002f00:	2132      	movs	r1, #50	@ 0x32
 8002f02:	fb01 f303 	mul.w	r3, r1, r3
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d102      	bne.n	8002f12 <SysTick_Handler+0x56>
 8002f0c:	2001      	movs	r0, #1
 8002f0e:	f7fe fe63 	bl	8001bd8 <addSchedulerEvent>
 8002f12:	bf00      	nop
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	20025be0 	.word	0x20025be0
 8002f1c:	cccccccd 	.word	0xcccccccd
 8002f20:	20025bdc 	.word	0x20025bdc
 8002f24:	51eb851f 	.word	0x51eb851f

08002f28 <STMPE811_Init>:
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	f000 f9cd 	bl	80032cc <I2C3_MspInit>
 8002f32:	f000 f98d 	bl	8003250 <I2C3_Init>
 8002f36:	2202      	movs	r2, #2
 8002f38:	2103      	movs	r1, #3
 8002f3a:	2082      	movs	r0, #130	@ 0x82
 8002f3c:	f000 fa1a 	bl	8003374 <I2C3_Write>
 8002f40:	2005      	movs	r0, #5
 8002f42:	f000 fc93 	bl	800386c <HAL_Delay>
 8002f46:	2200      	movs	r2, #0
 8002f48:	2103      	movs	r1, #3
 8002f4a:	2082      	movs	r0, #130	@ 0x82
 8002f4c:	f000 fa12 	bl	8003374 <I2C3_Write>
 8002f50:	2002      	movs	r0, #2
 8002f52:	f000 fc8b 	bl	800386c <HAL_Delay>
 8002f56:	1cba      	adds	r2, r7, #2
 8002f58:	2302      	movs	r3, #2
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	2082      	movs	r0, #130	@ 0x82
 8002f5e:	f000 fa59 	bl	8003414 <I2C3_MulitByteRead>
 8002f62:	887b      	ldrh	r3, [r7, #2]
 8002f64:	021b      	lsls	r3, r3, #8
 8002f66:	80fb      	strh	r3, [r7, #6]
 8002f68:	887b      	ldrh	r3, [r7, #2]
 8002f6a:	0a1b      	lsrs	r3, r3, #8
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	88fb      	ldrh	r3, [r7, #6]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	80fb      	strh	r3, [r7, #6]
 8002f74:	88fb      	ldrh	r3, [r7, #6]
 8002f76:	f640 0211 	movw	r2, #2065	@ 0x811
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d001      	beq.n	8002f82 <STMPE811_Init+0x5a>
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e075      	b.n	800306e <STMPE811_Init+0x146>
 8002f82:	2202      	movs	r2, #2
 8002f84:	2103      	movs	r1, #3
 8002f86:	2082      	movs	r0, #130	@ 0x82
 8002f88:	f000 f9f4 	bl	8003374 <I2C3_Write>
 8002f8c:	2005      	movs	r0, #5
 8002f8e:	f000 fc6d 	bl	800386c <HAL_Delay>
 8002f92:	2200      	movs	r2, #0
 8002f94:	2103      	movs	r1, #3
 8002f96:	2082      	movs	r0, #130	@ 0x82
 8002f98:	f000 f9ec 	bl	8003374 <I2C3_Write>
 8002f9c:	2002      	movs	r0, #2
 8002f9e:	f000 fc65 	bl	800386c <HAL_Delay>
 8002fa2:	2004      	movs	r0, #4
 8002fa4:	f000 f867 	bl	8003076 <STMPE811_Read>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	717b      	strb	r3, [r7, #5]
 8002fac:	797b      	ldrb	r3, [r7, #5]
 8002fae:	f023 0301 	bic.w	r3, r3, #1
 8002fb2:	717b      	strb	r3, [r7, #5]
 8002fb4:	797b      	ldrb	r3, [r7, #5]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	2104      	movs	r1, #4
 8002fba:	2082      	movs	r0, #130	@ 0x82
 8002fbc:	f000 f9da 	bl	8003374 <I2C3_Write>
 8002fc0:	2004      	movs	r0, #4
 8002fc2:	f000 f858 	bl	8003076 <STMPE811_Read>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	717b      	strb	r3, [r7, #5]
 8002fca:	797b      	ldrb	r3, [r7, #5]
 8002fcc:	f023 0302 	bic.w	r3, r3, #2
 8002fd0:	717b      	strb	r3, [r7, #5]
 8002fd2:	797b      	ldrb	r3, [r7, #5]
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	2104      	movs	r1, #4
 8002fd8:	2082      	movs	r0, #130	@ 0x82
 8002fda:	f000 f9cb 	bl	8003374 <I2C3_Write>
 8002fde:	2249      	movs	r2, #73	@ 0x49
 8002fe0:	2120      	movs	r1, #32
 8002fe2:	2082      	movs	r0, #130	@ 0x82
 8002fe4:	f000 f9c6 	bl	8003374 <I2C3_Write>
 8002fe8:	2002      	movs	r0, #2
 8002fea:	f000 fc3f 	bl	800386c <HAL_Delay>
 8002fee:	2201      	movs	r2, #1
 8002ff0:	2121      	movs	r1, #33	@ 0x21
 8002ff2:	2082      	movs	r0, #130	@ 0x82
 8002ff4:	f000 f9be 	bl	8003374 <I2C3_Write>
 8002ff8:	2017      	movs	r0, #23
 8002ffa:	f000 f83c 	bl	8003076 <STMPE811_Read>
 8002ffe:	4603      	mov	r3, r0
 8003000:	717b      	strb	r3, [r7, #5]
 8003002:	797b      	ldrb	r3, [r7, #5]
 8003004:	f043 031e 	orr.w	r3, r3, #30
 8003008:	717b      	strb	r3, [r7, #5]
 800300a:	797b      	ldrb	r3, [r7, #5]
 800300c:	461a      	mov	r2, r3
 800300e:	2117      	movs	r1, #23
 8003010:	2082      	movs	r0, #130	@ 0x82
 8003012:	f000 f9af 	bl	8003374 <I2C3_Write>
 8003016:	229a      	movs	r2, #154	@ 0x9a
 8003018:	2141      	movs	r1, #65	@ 0x41
 800301a:	2082      	movs	r0, #130	@ 0x82
 800301c:	f000 f9aa 	bl	8003374 <I2C3_Write>
 8003020:	2201      	movs	r2, #1
 8003022:	214a      	movs	r1, #74	@ 0x4a
 8003024:	2082      	movs	r0, #130	@ 0x82
 8003026:	f000 f9a5 	bl	8003374 <I2C3_Write>
 800302a:	2201      	movs	r2, #1
 800302c:	214b      	movs	r1, #75	@ 0x4b
 800302e:	2082      	movs	r0, #130	@ 0x82
 8003030:	f000 f9a0 	bl	8003374 <I2C3_Write>
 8003034:	2200      	movs	r2, #0
 8003036:	214b      	movs	r1, #75	@ 0x4b
 8003038:	2082      	movs	r0, #130	@ 0x82
 800303a:	f000 f99b 	bl	8003374 <I2C3_Write>
 800303e:	2201      	movs	r2, #1
 8003040:	2156      	movs	r1, #86	@ 0x56
 8003042:	2082      	movs	r0, #130	@ 0x82
 8003044:	f000 f996 	bl	8003374 <I2C3_Write>
 8003048:	2201      	movs	r2, #1
 800304a:	2158      	movs	r1, #88	@ 0x58
 800304c:	2082      	movs	r0, #130	@ 0x82
 800304e:	f000 f991 	bl	8003374 <I2C3_Write>
 8003052:	2203      	movs	r2, #3
 8003054:	2140      	movs	r1, #64	@ 0x40
 8003056:	2082      	movs	r0, #130	@ 0x82
 8003058:	f000 f98c 	bl	8003374 <I2C3_Write>
 800305c:	22ff      	movs	r2, #255	@ 0xff
 800305e:	210b      	movs	r1, #11
 8003060:	2082      	movs	r0, #130	@ 0x82
 8003062:	f000 f987 	bl	8003374 <I2C3_Write>
 8003066:	20c8      	movs	r0, #200	@ 0xc8
 8003068:	f000 fc00 	bl	800386c <HAL_Delay>
 800306c:	2302      	movs	r3, #2
 800306e:	4618      	mov	r0, r3
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <STMPE811_Read>:
 8003076:	b580      	push	{r7, lr}
 8003078:	b084      	sub	sp, #16
 800307a:	af00      	add	r7, sp, #0
 800307c:	4603      	mov	r3, r0
 800307e:	71fb      	strb	r3, [r7, #7]
 8003080:	f107 020f 	add.w	r2, r7, #15
 8003084:	79fb      	ldrb	r3, [r7, #7]
 8003086:	4619      	mov	r1, r3
 8003088:	2082      	movs	r0, #130	@ 0x82
 800308a:	f000 f99d 	bl	80033c8 <I2C3_Read>
 800308e:	7bfb      	ldrb	r3, [r7, #15]
 8003090:	4618      	mov	r0, r3
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <STMPE811_ReadTouch>:
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	791a      	ldrb	r2, [r3, #4]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	715a      	strb	r2, [r3, #5]
 80030a8:	2040      	movs	r0, #64	@ 0x40
 80030aa:	f7ff ffe4 	bl	8003076 <STMPE811_Read>
 80030ae:	4603      	mov	r3, r0
 80030b0:	73fb      	strb	r3, [r7, #15]
 80030b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	db0e      	blt.n	80030d8 <STMPE811_ReadTouch+0x40>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	711a      	strb	r2, [r3, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	214b      	movs	r1, #75	@ 0x4b
 80030c4:	2082      	movs	r0, #130	@ 0x82
 80030c6:	f000 f955 	bl	8003374 <I2C3_Write>
 80030ca:	2200      	movs	r2, #0
 80030cc:	214b      	movs	r1, #75	@ 0x4b
 80030ce:	2082      	movs	r0, #130	@ 0x82
 80030d0:	f000 f950 	bl	8003374 <I2C3_Write>
 80030d4:	2301      	movs	r3, #1
 80030d6:	e0a7      	b.n	8003228 <STMPE811_ReadTouch+0x190>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	799b      	ldrb	r3, [r3, #6]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d117      	bne.n	8003110 <STMPE811_ReadTouch+0x78>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	881b      	ldrh	r3, [r3, #0]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f000 f9b7 	bl	8003458 <TM_STMPE811_ReadX>
 80030ea:	4603      	mov	r3, r0
 80030ec:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	801a      	strh	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	885b      	ldrh	r3, [r3, #2]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f000 fa0c 	bl	8003518 <TM_STMPE811_ReadY>
 8003100:	4603      	mov	r3, r0
 8003102:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8003106:	3301      	adds	r3, #1
 8003108:	b29a      	uxth	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	805a      	strh	r2, [r3, #2]
 800310e:	e048      	b.n	80031a2 <STMPE811_ReadTouch+0x10a>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	799b      	ldrb	r3, [r3, #6]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d112      	bne.n	800313e <STMPE811_ReadTouch+0xa6>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	881b      	ldrh	r3, [r3, #0]
 800311c:	4618      	mov	r0, r3
 800311e:	f000 f99b 	bl	8003458 <TM_STMPE811_ReadX>
 8003122:	4603      	mov	r3, r0
 8003124:	461a      	mov	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	801a      	strh	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	885b      	ldrh	r3, [r3, #2]
 800312e:	4618      	mov	r0, r3
 8003130:	f000 f9f2 	bl	8003518 <TM_STMPE811_ReadY>
 8003134:	4603      	mov	r3, r0
 8003136:	461a      	mov	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	805a      	strh	r2, [r3, #2]
 800313c:	e031      	b.n	80031a2 <STMPE811_ReadTouch+0x10a>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	799b      	ldrb	r3, [r3, #6]
 8003142:	2b02      	cmp	r3, #2
 8003144:	d115      	bne.n	8003172 <STMPE811_ReadTouch+0xda>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	885b      	ldrh	r3, [r3, #2]
 800314a:	4618      	mov	r0, r3
 800314c:	f000 f984 	bl	8003458 <TM_STMPE811_ReadX>
 8003150:	4603      	mov	r3, r0
 8003152:	461a      	mov	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	805a      	strh	r2, [r3, #2]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	881b      	ldrh	r3, [r3, #0]
 800315c:	4618      	mov	r0, r3
 800315e:	f000 f9db 	bl	8003518 <TM_STMPE811_ReadY>
 8003162:	4603      	mov	r3, r0
 8003164:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8003168:	3301      	adds	r3, #1
 800316a:	b29a      	uxth	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	801a      	strh	r2, [r3, #0]
 8003170:	e017      	b.n	80031a2 <STMPE811_ReadTouch+0x10a>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	799b      	ldrb	r3, [r3, #6]
 8003176:	2b03      	cmp	r3, #3
 8003178:	d113      	bne.n	80031a2 <STMPE811_ReadTouch+0x10a>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	881b      	ldrh	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f000 f96a 	bl	8003458 <TM_STMPE811_ReadX>
 8003184:	4603      	mov	r3, r0
 8003186:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 800318a:	b29a      	uxth	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	805a      	strh	r2, [r3, #2]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	881b      	ldrh	r3, [r3, #0]
 8003194:	4618      	mov	r0, r3
 8003196:	f000 f9bf 	bl	8003518 <TM_STMPE811_ReadY>
 800319a:	4603      	mov	r3, r0
 800319c:	461a      	mov	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	801a      	strh	r2, [r3, #0]
 80031a2:	2201      	movs	r2, #1
 80031a4:	214b      	movs	r1, #75	@ 0x4b
 80031a6:	2082      	movs	r0, #130	@ 0x82
 80031a8:	f000 f8e4 	bl	8003374 <I2C3_Write>
 80031ac:	2200      	movs	r2, #0
 80031ae:	214b      	movs	r1, #75	@ 0x4b
 80031b0:	2082      	movs	r0, #130	@ 0x82
 80031b2:	f000 f8df 	bl	8003374 <I2C3_Write>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	799b      	ldrb	r3, [r3, #6]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <STMPE811_ReadTouch+0x12e>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	799b      	ldrb	r3, [r3, #6]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d115      	bne.n	80031f2 <STMPE811_ReadTouch+0x15a>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	881b      	ldrh	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d027      	beq.n	800321e <STMPE811_ReadTouch+0x186>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	881b      	ldrh	r3, [r3, #0]
 80031d2:	2bee      	cmp	r3, #238	@ 0xee
 80031d4:	d823      	bhi.n	800321e <STMPE811_ReadTouch+0x186>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	885b      	ldrh	r3, [r3, #2]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d01f      	beq.n	800321e <STMPE811_ReadTouch+0x186>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	885b      	ldrh	r3, [r3, #2]
 80031e2:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 80031e6:	d81a      	bhi.n	800321e <STMPE811_ReadTouch+0x186>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	711a      	strb	r2, [r3, #4]
 80031ee:	2300      	movs	r3, #0
 80031f0:	e01a      	b.n	8003228 <STMPE811_ReadTouch+0x190>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	881b      	ldrh	r3, [r3, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d012      	beq.n	8003220 <STMPE811_ReadTouch+0x188>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	881b      	ldrh	r3, [r3, #0]
 80031fe:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8003202:	d80d      	bhi.n	8003220 <STMPE811_ReadTouch+0x188>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	885b      	ldrh	r3, [r3, #2]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d009      	beq.n	8003220 <STMPE811_ReadTouch+0x188>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	885b      	ldrh	r3, [r3, #2]
 8003210:	2bee      	cmp	r3, #238	@ 0xee
 8003212:	d805      	bhi.n	8003220 <STMPE811_ReadTouch+0x188>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	711a      	strb	r2, [r3, #4]
 800321a:	2300      	movs	r3, #0
 800321c:	e004      	b.n	8003228 <STMPE811_ReadTouch+0x190>
 800321e:	bf00      	nop
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	711a      	strb	r2, [r3, #4]
 8003226:	2301      	movs	r3, #1
 8003228:	4618      	mov	r0, r3
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <verifyHAL_I2C_IS_OKAY>:
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
 8003234:	4b05      	ldr	r3, [pc, #20]	@ (800324c <verifyHAL_I2C_IS_OKAY+0x1c>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <verifyHAL_I2C_IS_OKAY+0x10>
 800323c:	bf00      	nop
 800323e:	e7fd      	b.n	800323c <verifyHAL_I2C_IS_OKAY+0xc>
 8003240:	bf00      	nop
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	20025c38 	.word	0x20025c38

08003250 <I2C3_Init>:
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	2300      	movs	r3, #0
 8003258:	603b      	str	r3, [r7, #0]
 800325a:	4b18      	ldr	r3, [pc, #96]	@ (80032bc <I2C3_Init+0x6c>)
 800325c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325e:	4a17      	ldr	r2, [pc, #92]	@ (80032bc <I2C3_Init+0x6c>)
 8003260:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003264:	6413      	str	r3, [r2, #64]	@ 0x40
 8003266:	4b15      	ldr	r3, [pc, #84]	@ (80032bc <I2C3_Init+0x6c>)
 8003268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800326e:	603b      	str	r3, [r7, #0]
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	4b13      	ldr	r3, [pc, #76]	@ (80032c0 <I2C3_Init+0x70>)
 8003274:	4a13      	ldr	r2, [pc, #76]	@ (80032c4 <I2C3_Init+0x74>)
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	4b11      	ldr	r3, [pc, #68]	@ (80032c0 <I2C3_Init+0x70>)
 800327a:	4a13      	ldr	r2, [pc, #76]	@ (80032c8 <I2C3_Init+0x78>)
 800327c:	605a      	str	r2, [r3, #4]
 800327e:	4b10      	ldr	r3, [pc, #64]	@ (80032c0 <I2C3_Init+0x70>)
 8003280:	2200      	movs	r2, #0
 8003282:	609a      	str	r2, [r3, #8]
 8003284:	4b0e      	ldr	r3, [pc, #56]	@ (80032c0 <I2C3_Init+0x70>)
 8003286:	2200      	movs	r2, #0
 8003288:	60da      	str	r2, [r3, #12]
 800328a:	4b0d      	ldr	r3, [pc, #52]	@ (80032c0 <I2C3_Init+0x70>)
 800328c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003290:	611a      	str	r2, [r3, #16]
 8003292:	4b0b      	ldr	r3, [pc, #44]	@ (80032c0 <I2C3_Init+0x70>)
 8003294:	2200      	movs	r2, #0
 8003296:	61da      	str	r2, [r3, #28]
 8003298:	4b09      	ldr	r3, [pc, #36]	@ (80032c0 <I2C3_Init+0x70>)
 800329a:	2200      	movs	r2, #0
 800329c:	621a      	str	r2, [r3, #32]
 800329e:	4808      	ldr	r0, [pc, #32]	@ (80032c0 <I2C3_Init+0x70>)
 80032a0:	f000 fed8 	bl	8004054 <HAL_I2C_Init>
 80032a4:	4603      	mov	r3, r0
 80032a6:	71fb      	strb	r3, [r7, #7]
 80032a8:	79fb      	ldrb	r3, [r7, #7]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <I2C3_Init+0x62>
 80032ae:	bf00      	nop
 80032b0:	e7fd      	b.n	80032ae <I2C3_Init+0x5e>
 80032b2:	bf00      	nop
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40023800 	.word	0x40023800
 80032c0:	20025be4 	.word	0x20025be4
 80032c4:	40005c00 	.word	0x40005c00
 80032c8:	000186a0 	.word	0x000186a0

080032cc <I2C3_MspInit>:
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b088      	sub	sp, #32
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	f107 030c 	add.w	r3, r7, #12
 80032d6:	2200      	movs	r2, #0
 80032d8:	601a      	str	r2, [r3, #0]
 80032da:	605a      	str	r2, [r3, #4]
 80032dc:	609a      	str	r2, [r3, #8]
 80032de:	60da      	str	r2, [r3, #12]
 80032e0:	611a      	str	r2, [r3, #16]
 80032e2:	2300      	movs	r3, #0
 80032e4:	60bb      	str	r3, [r7, #8]
 80032e6:	4b20      	ldr	r3, [pc, #128]	@ (8003368 <I2C3_MspInit+0x9c>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ea:	4a1f      	ldr	r2, [pc, #124]	@ (8003368 <I2C3_MspInit+0x9c>)
 80032ec:	f043 0304 	orr.w	r3, r3, #4
 80032f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80032f2:	4b1d      	ldr	r3, [pc, #116]	@ (8003368 <I2C3_MspInit+0x9c>)
 80032f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f6:	f003 0304 	and.w	r3, r3, #4
 80032fa:	60bb      	str	r3, [r7, #8]
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	2300      	movs	r3, #0
 8003300:	607b      	str	r3, [r7, #4]
 8003302:	4b19      	ldr	r3, [pc, #100]	@ (8003368 <I2C3_MspInit+0x9c>)
 8003304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003306:	4a18      	ldr	r2, [pc, #96]	@ (8003368 <I2C3_MspInit+0x9c>)
 8003308:	f043 0301 	orr.w	r3, r3, #1
 800330c:	6313      	str	r3, [r2, #48]	@ 0x30
 800330e:	4b16      	ldr	r3, [pc, #88]	@ (8003368 <I2C3_MspInit+0x9c>)
 8003310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	607b      	str	r3, [r7, #4]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	2312      	movs	r3, #18
 8003322:	613b      	str	r3, [r7, #16]
 8003324:	2300      	movs	r3, #0
 8003326:	617b      	str	r3, [r7, #20]
 8003328:	2300      	movs	r3, #0
 800332a:	61bb      	str	r3, [r7, #24]
 800332c:	2304      	movs	r3, #4
 800332e:	61fb      	str	r3, [r7, #28]
 8003330:	f107 030c 	add.w	r3, r7, #12
 8003334:	4619      	mov	r1, r3
 8003336:	480d      	ldr	r0, [pc, #52]	@ (800336c <I2C3_MspInit+0xa0>)
 8003338:	f000 fba2 	bl	8003a80 <HAL_GPIO_Init>
 800333c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003340:	60fb      	str	r3, [r7, #12]
 8003342:	2312      	movs	r3, #18
 8003344:	613b      	str	r3, [r7, #16]
 8003346:	2300      	movs	r3, #0
 8003348:	617b      	str	r3, [r7, #20]
 800334a:	2300      	movs	r3, #0
 800334c:	61bb      	str	r3, [r7, #24]
 800334e:	2304      	movs	r3, #4
 8003350:	61fb      	str	r3, [r7, #28]
 8003352:	f107 030c 	add.w	r3, r7, #12
 8003356:	4619      	mov	r1, r3
 8003358:	4805      	ldr	r0, [pc, #20]	@ (8003370 <I2C3_MspInit+0xa4>)
 800335a:	f000 fb91 	bl	8003a80 <HAL_GPIO_Init>
 800335e:	bf00      	nop
 8003360:	3720      	adds	r7, #32
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	40023800 	.word	0x40023800
 800336c:	40020800 	.word	0x40020800
 8003370:	40020000 	.word	0x40020000

08003374 <I2C3_Write>:
 8003374:	b580      	push	{r7, lr}
 8003376:	b088      	sub	sp, #32
 8003378:	af04      	add	r7, sp, #16
 800337a:	4603      	mov	r3, r0
 800337c:	80fb      	strh	r3, [r7, #6]
 800337e:	460b      	mov	r3, r1
 8003380:	717b      	strb	r3, [r7, #5]
 8003382:	4613      	mov	r3, r2
 8003384:	713b      	strb	r3, [r7, #4]
 8003386:	793b      	ldrb	r3, [r7, #4]
 8003388:	73fb      	strb	r3, [r7, #15]
 800338a:	797b      	ldrb	r3, [r7, #5]
 800338c:	b29a      	uxth	r2, r3
 800338e:	88f9      	ldrh	r1, [r7, #6]
 8003390:	4b0a      	ldr	r3, [pc, #40]	@ (80033bc <I2C3_Write+0x48>)
 8003392:	9302      	str	r3, [sp, #8]
 8003394:	2301      	movs	r3, #1
 8003396:	9301      	str	r3, [sp, #4]
 8003398:	f107 030f 	add.w	r3, r7, #15
 800339c:	9300      	str	r3, [sp, #0]
 800339e:	2301      	movs	r3, #1
 80033a0:	4807      	ldr	r0, [pc, #28]	@ (80033c0 <I2C3_Write+0x4c>)
 80033a2:	f000 ff9b 	bl	80042dc <HAL_I2C_Mem_Write>
 80033a6:	4603      	mov	r3, r0
 80033a8:	461a      	mov	r2, r3
 80033aa:	4b06      	ldr	r3, [pc, #24]	@ (80033c4 <I2C3_Write+0x50>)
 80033ac:	701a      	strb	r2, [r3, #0]
 80033ae:	f7ff ff3f 	bl	8003230 <verifyHAL_I2C_IS_OKAY>
 80033b2:	bf00      	nop
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	0003d090 	.word	0x0003d090
 80033c0:	20025be4 	.word	0x20025be4
 80033c4:	20025c38 	.word	0x20025c38

080033c8 <I2C3_Read>:
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af04      	add	r7, sp, #16
 80033ce:	4603      	mov	r3, r0
 80033d0:	603a      	str	r2, [r7, #0]
 80033d2:	71fb      	strb	r3, [r7, #7]
 80033d4:	460b      	mov	r3, r1
 80033d6:	71bb      	strb	r3, [r7, #6]
 80033d8:	79fb      	ldrb	r3, [r7, #7]
 80033da:	b299      	uxth	r1, r3
 80033dc:	79bb      	ldrb	r3, [r7, #6]
 80033de:	b29a      	uxth	r2, r3
 80033e0:	4b09      	ldr	r3, [pc, #36]	@ (8003408 <I2C3_Read+0x40>)
 80033e2:	9302      	str	r3, [sp, #8]
 80033e4:	2301      	movs	r3, #1
 80033e6:	9301      	str	r3, [sp, #4]
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	9300      	str	r3, [sp, #0]
 80033ec:	2301      	movs	r3, #1
 80033ee:	4807      	ldr	r0, [pc, #28]	@ (800340c <I2C3_Read+0x44>)
 80033f0:	f001 f86e 	bl	80044d0 <HAL_I2C_Mem_Read>
 80033f4:	4603      	mov	r3, r0
 80033f6:	461a      	mov	r2, r3
 80033f8:	4b05      	ldr	r3, [pc, #20]	@ (8003410 <I2C3_Read+0x48>)
 80033fa:	701a      	strb	r2, [r3, #0]
 80033fc:	f7ff ff18 	bl	8003230 <verifyHAL_I2C_IS_OKAY>
 8003400:	bf00      	nop
 8003402:	3708      	adds	r7, #8
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	0003d090 	.word	0x0003d090
 800340c:	20025be4 	.word	0x20025be4
 8003410:	20025c38 	.word	0x20025c38

08003414 <I2C3_MulitByteRead>:
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af04      	add	r7, sp, #16
 800341a:	603a      	str	r2, [r7, #0]
 800341c:	461a      	mov	r2, r3
 800341e:	4603      	mov	r3, r0
 8003420:	71fb      	strb	r3, [r7, #7]
 8003422:	460b      	mov	r3, r1
 8003424:	71bb      	strb	r3, [r7, #6]
 8003426:	4613      	mov	r3, r2
 8003428:	80bb      	strh	r3, [r7, #4]
 800342a:	79fb      	ldrb	r3, [r7, #7]
 800342c:	b299      	uxth	r1, r3
 800342e:	79bb      	ldrb	r3, [r7, #6]
 8003430:	b29a      	uxth	r2, r3
 8003432:	4b07      	ldr	r3, [pc, #28]	@ (8003450 <I2C3_MulitByteRead+0x3c>)
 8003434:	9302      	str	r3, [sp, #8]
 8003436:	88bb      	ldrh	r3, [r7, #4]
 8003438:	9301      	str	r3, [sp, #4]
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	2301      	movs	r3, #1
 8003440:	4804      	ldr	r0, [pc, #16]	@ (8003454 <I2C3_MulitByteRead+0x40>)
 8003442:	f001 f845 	bl	80044d0 <HAL_I2C_Mem_Read>
 8003446:	bf00      	nop
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	0003d090 	.word	0x0003d090
 8003454:	20025be4 	.word	0x20025be4

08003458 <TM_STMPE811_ReadX>:
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	4603      	mov	r3, r0
 8003460:	80fb      	strh	r3, [r7, #6]
 8003462:	204d      	movs	r0, #77	@ 0x4d
 8003464:	f7ff fe07 	bl	8003076 <STMPE811_Read>
 8003468:	4603      	mov	r3, r0
 800346a:	727b      	strb	r3, [r7, #9]
 800346c:	204e      	movs	r0, #78	@ 0x4e
 800346e:	f7ff fe02 	bl	8003076 <STMPE811_Read>
 8003472:	4603      	mov	r3, r0
 8003474:	723b      	strb	r3, [r7, #8]
 8003476:	7a7b      	ldrb	r3, [r7, #9]
 8003478:	b21b      	sxth	r3, r3
 800347a:	021b      	lsls	r3, r3, #8
 800347c:	b21a      	sxth	r2, r3
 800347e:	7a3b      	ldrb	r3, [r7, #8]
 8003480:	b21b      	sxth	r3, r3
 8003482:	4313      	orrs	r3, r2
 8003484:	81fb      	strh	r3, [r7, #14]
 8003486:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800348a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800348e:	4293      	cmp	r3, r2
 8003490:	dc06      	bgt.n	80034a0 <TM_STMPE811_ReadX+0x48>
 8003492:	89fb      	ldrh	r3, [r7, #14]
 8003494:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8003498:	330c      	adds	r3, #12
 800349a:	b29b      	uxth	r3, r3
 800349c:	81fb      	strh	r3, [r7, #14]
 800349e:	e005      	b.n	80034ac <TM_STMPE811_ReadX+0x54>
 80034a0:	89fb      	ldrh	r3, [r7, #14]
 80034a2:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 80034a6:	3308      	adds	r3, #8
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	81fb      	strh	r3, [r7, #14]
 80034ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80034b0:	4a18      	ldr	r2, [pc, #96]	@ (8003514 <TM_STMPE811_ReadX+0xbc>)
 80034b2:	fb82 1203 	smull	r1, r2, r2, r3
 80034b6:	441a      	add	r2, r3
 80034b8:	10d2      	asrs	r2, r2, #3
 80034ba:	17db      	asrs	r3, r3, #31
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	81fb      	strh	r3, [r7, #14]
 80034c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80034c4:	2bef      	cmp	r3, #239	@ 0xef
 80034c6:	dd02      	ble.n	80034ce <TM_STMPE811_ReadX+0x76>
 80034c8:	23ef      	movs	r3, #239	@ 0xef
 80034ca:	81fb      	strh	r3, [r7, #14]
 80034cc:	e005      	b.n	80034da <TM_STMPE811_ReadX+0x82>
 80034ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	da01      	bge.n	80034da <TM_STMPE811_ReadX+0x82>
 80034d6:	2300      	movs	r3, #0
 80034d8:	81fb      	strh	r3, [r7, #14]
 80034da:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80034de:	88fb      	ldrh	r3, [r7, #6]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	dd05      	ble.n	80034f0 <TM_STMPE811_ReadX+0x98>
 80034e4:	89fa      	ldrh	r2, [r7, #14]
 80034e6:	88fb      	ldrh	r3, [r7, #6]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	b21b      	sxth	r3, r3
 80034ee:	e004      	b.n	80034fa <TM_STMPE811_ReadX+0xa2>
 80034f0:	89fb      	ldrh	r3, [r7, #14]
 80034f2:	88fa      	ldrh	r2, [r7, #6]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	b21b      	sxth	r3, r3
 80034fa:	81bb      	strh	r3, [r7, #12]
 80034fc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003500:	2b04      	cmp	r3, #4
 8003502:	dd01      	ble.n	8003508 <TM_STMPE811_ReadX+0xb0>
 8003504:	89fb      	ldrh	r3, [r7, #14]
 8003506:	e000      	b.n	800350a <TM_STMPE811_ReadX+0xb2>
 8003508:	88fb      	ldrh	r3, [r7, #6]
 800350a:	4618      	mov	r0, r3
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	88888889 	.word	0x88888889

08003518 <TM_STMPE811_ReadY>:
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	4603      	mov	r3, r0
 8003520:	80fb      	strh	r3, [r7, #6]
 8003522:	204f      	movs	r0, #79	@ 0x4f
 8003524:	f7ff fda7 	bl	8003076 <STMPE811_Read>
 8003528:	4603      	mov	r3, r0
 800352a:	727b      	strb	r3, [r7, #9]
 800352c:	2050      	movs	r0, #80	@ 0x50
 800352e:	f7ff fda2 	bl	8003076 <STMPE811_Read>
 8003532:	4603      	mov	r3, r0
 8003534:	723b      	strb	r3, [r7, #8]
 8003536:	7a7b      	ldrb	r3, [r7, #9]
 8003538:	b21b      	sxth	r3, r3
 800353a:	021b      	lsls	r3, r3, #8
 800353c:	b21a      	sxth	r2, r3
 800353e:	7a3b      	ldrb	r3, [r7, #8]
 8003540:	b21b      	sxth	r3, r3
 8003542:	4313      	orrs	r3, r2
 8003544:	81fb      	strh	r3, [r7, #14]
 8003546:	89fb      	ldrh	r3, [r7, #14]
 8003548:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800354c:	b29b      	uxth	r3, r3
 800354e:	81fb      	strh	r3, [r7, #14]
 8003550:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003554:	4a18      	ldr	r2, [pc, #96]	@ (80035b8 <TM_STMPE811_ReadY+0xa0>)
 8003556:	fb82 1203 	smull	r1, r2, r2, r3
 800355a:	1052      	asrs	r2, r2, #1
 800355c:	17db      	asrs	r3, r3, #31
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	81fb      	strh	r3, [r7, #14]
 8003562:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003566:	2b00      	cmp	r3, #0
 8003568:	dc02      	bgt.n	8003570 <TM_STMPE811_ReadY+0x58>
 800356a:	2300      	movs	r3, #0
 800356c:	81fb      	strh	r3, [r7, #14]
 800356e:	e007      	b.n	8003580 <TM_STMPE811_ReadY+0x68>
 8003570:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003574:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003578:	db02      	blt.n	8003580 <TM_STMPE811_ReadY+0x68>
 800357a:	f240 133f 	movw	r3, #319	@ 0x13f
 800357e:	81fb      	strh	r3, [r7, #14]
 8003580:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003584:	88fb      	ldrh	r3, [r7, #6]
 8003586:	429a      	cmp	r2, r3
 8003588:	dd05      	ble.n	8003596 <TM_STMPE811_ReadY+0x7e>
 800358a:	89fa      	ldrh	r2, [r7, #14]
 800358c:	88fb      	ldrh	r3, [r7, #6]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	b29b      	uxth	r3, r3
 8003592:	b21b      	sxth	r3, r3
 8003594:	e004      	b.n	80035a0 <TM_STMPE811_ReadY+0x88>
 8003596:	89fb      	ldrh	r3, [r7, #14]
 8003598:	88fa      	ldrh	r2, [r7, #6]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	b29b      	uxth	r3, r3
 800359e:	b21b      	sxth	r3, r3
 80035a0:	81bb      	strh	r3, [r7, #12]
 80035a2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	dd01      	ble.n	80035ae <TM_STMPE811_ReadY+0x96>
 80035aa:	89fb      	ldrh	r3, [r7, #14]
 80035ac:	e000      	b.n	80035b0 <TM_STMPE811_ReadY+0x98>
 80035ae:	88fb      	ldrh	r3, [r7, #6]
 80035b0:	4618      	mov	r0, r3
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	2e8ba2e9 	.word	0x2e8ba2e9

080035bc <initialise_monitor_handles>:
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0
 80035c0:	bf00      	nop
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <_read>:
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b086      	sub	sp, #24
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	60f8      	str	r0, [r7, #12]
 80035d2:	60b9      	str	r1, [r7, #8]
 80035d4:	607a      	str	r2, [r7, #4]
 80035d6:	2300      	movs	r3, #0
 80035d8:	617b      	str	r3, [r7, #20]
 80035da:	e00a      	b.n	80035f2 <_read+0x28>
 80035dc:	f3af 8000 	nop.w
 80035e0:	4601      	mov	r1, r0
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	1c5a      	adds	r2, r3, #1
 80035e6:	60ba      	str	r2, [r7, #8]
 80035e8:	b2ca      	uxtb	r2, r1
 80035ea:	701a      	strb	r2, [r3, #0]
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	3301      	adds	r3, #1
 80035f0:	617b      	str	r3, [r7, #20]
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	dbf0      	blt.n	80035dc <_read+0x12>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4618      	mov	r0, r3
 80035fe:	3718      	adds	r7, #24
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <_write>:
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
 8003610:	2300      	movs	r3, #0
 8003612:	617b      	str	r3, [r7, #20]
 8003614:	e009      	b.n	800362a <_write+0x26>
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	1c5a      	adds	r2, r3, #1
 800361a:	60ba      	str	r2, [r7, #8]
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	4618      	mov	r0, r3
 8003620:	f3af 8000 	nop.w
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	3301      	adds	r3, #1
 8003628:	617b      	str	r3, [r7, #20]
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	429a      	cmp	r2, r3
 8003630:	dbf1      	blt.n	8003616 <_write+0x12>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4618      	mov	r0, r3
 8003636:	3718      	adds	r7, #24
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <_close>:
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003648:	4618      	mov	r0, r3
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <_fstat>:
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003664:	605a      	str	r2, [r3, #4]
 8003666:	2300      	movs	r3, #0
 8003668:	4618      	mov	r0, r3
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <_isatty>:
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	2301      	movs	r3, #1
 800367e:	4618      	mov	r0, r3
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr

0800368a <_lseek>:
 800368a:	b480      	push	{r7}
 800368c:	b085      	sub	sp, #20
 800368e:	af00      	add	r7, sp, #0
 8003690:	60f8      	str	r0, [r7, #12]
 8003692:	60b9      	str	r1, [r7, #8]
 8003694:	607a      	str	r2, [r7, #4]
 8003696:	2300      	movs	r3, #0
 8003698:	4618      	mov	r0, r3
 800369a:	3714      	adds	r7, #20
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <_sbrk>:
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	4a14      	ldr	r2, [pc, #80]	@ (8003700 <_sbrk+0x5c>)
 80036ae:	4b15      	ldr	r3, [pc, #84]	@ (8003704 <_sbrk+0x60>)
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	617b      	str	r3, [r7, #20]
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	613b      	str	r3, [r7, #16]
 80036b8:	4b13      	ldr	r3, [pc, #76]	@ (8003708 <_sbrk+0x64>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d102      	bne.n	80036c6 <_sbrk+0x22>
 80036c0:	4b11      	ldr	r3, [pc, #68]	@ (8003708 <_sbrk+0x64>)
 80036c2:	4a12      	ldr	r2, [pc, #72]	@ (800370c <_sbrk+0x68>)
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	4b10      	ldr	r3, [pc, #64]	@ (8003708 <_sbrk+0x64>)
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4413      	add	r3, r2
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d207      	bcs.n	80036e4 <_sbrk+0x40>
 80036d4:	f003 fddc 	bl	8007290 <__errno>
 80036d8:	4603      	mov	r3, r0
 80036da:	220c      	movs	r2, #12
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80036e2:	e009      	b.n	80036f8 <_sbrk+0x54>
 80036e4:	4b08      	ldr	r3, [pc, #32]	@ (8003708 <_sbrk+0x64>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	60fb      	str	r3, [r7, #12]
 80036ea:	4b07      	ldr	r3, [pc, #28]	@ (8003708 <_sbrk+0x64>)
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4413      	add	r3, r2
 80036f2:	4a05      	ldr	r2, [pc, #20]	@ (8003708 <_sbrk+0x64>)
 80036f4:	6013      	str	r3, [r2, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	4618      	mov	r0, r3
 80036fa:	3718      	adds	r7, #24
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	20030000 	.word	0x20030000
 8003704:	00000400 	.word	0x00000400
 8003708:	20025c3c 	.word	0x20025c3c
 800370c:	20025d90 	.word	0x20025d90

08003710 <SystemInit>:
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
 8003714:	4b06      	ldr	r3, [pc, #24]	@ (8003730 <SystemInit+0x20>)
 8003716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800371a:	4a05      	ldr	r2, [pc, #20]	@ (8003730 <SystemInit+0x20>)
 800371c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003720:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8003724:	bf00      	nop
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	e000ed00 	.word	0xe000ed00

08003734 <Reset_Handler>:
 8003734:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800376c <LoopFillZerobss+0xe>
 8003738:	f7ff ffea 	bl	8003710 <SystemInit>
 800373c:	480c      	ldr	r0, [pc, #48]	@ (8003770 <LoopFillZerobss+0x12>)
 800373e:	490d      	ldr	r1, [pc, #52]	@ (8003774 <LoopFillZerobss+0x16>)
 8003740:	4a0d      	ldr	r2, [pc, #52]	@ (8003778 <LoopFillZerobss+0x1a>)
 8003742:	2300      	movs	r3, #0
 8003744:	e002      	b.n	800374c <LoopCopyDataInit>

08003746 <CopyDataInit>:
 8003746:	58d4      	ldr	r4, [r2, r3]
 8003748:	50c4      	str	r4, [r0, r3]
 800374a:	3304      	adds	r3, #4

0800374c <LoopCopyDataInit>:
 800374c:	18c4      	adds	r4, r0, r3
 800374e:	428c      	cmp	r4, r1
 8003750:	d3f9      	bcc.n	8003746 <CopyDataInit>
 8003752:	4a0a      	ldr	r2, [pc, #40]	@ (800377c <LoopFillZerobss+0x1e>)
 8003754:	4c0a      	ldr	r4, [pc, #40]	@ (8003780 <LoopFillZerobss+0x22>)
 8003756:	2300      	movs	r3, #0
 8003758:	e001      	b.n	800375e <LoopFillZerobss>

0800375a <FillZerobss>:
 800375a:	6013      	str	r3, [r2, #0]
 800375c:	3204      	adds	r2, #4

0800375e <LoopFillZerobss>:
 800375e:	42a2      	cmp	r2, r4
 8003760:	d3fb      	bcc.n	800375a <FillZerobss>
 8003762:	f003 fd9b 	bl	800729c <__libc_init_array>
 8003766:	f7fe fd26 	bl	80021b6 <main>
 800376a:	4770      	bx	lr
 800376c:	20030000 	.word	0x20030000
 8003770:	20000000 	.word	0x20000000
 8003774:	20000080 	.word	0x20000080
 8003778:	0800a020 	.word	0x0800a020
 800377c:	20000080 	.word	0x20000080
 8003780:	20025d90 	.word	0x20025d90

08003784 <ADC_IRQHandler>:
 8003784:	e7fe      	b.n	8003784 <ADC_IRQHandler>
	...

08003788 <HAL_Init>:
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
 800378c:	4b0e      	ldr	r3, [pc, #56]	@ (80037c8 <HAL_Init+0x40>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a0d      	ldr	r2, [pc, #52]	@ (80037c8 <HAL_Init+0x40>)
 8003792:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003796:	6013      	str	r3, [r2, #0]
 8003798:	4b0b      	ldr	r3, [pc, #44]	@ (80037c8 <HAL_Init+0x40>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a0a      	ldr	r2, [pc, #40]	@ (80037c8 <HAL_Init+0x40>)
 800379e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80037a2:	6013      	str	r3, [r2, #0]
 80037a4:	4b08      	ldr	r3, [pc, #32]	@ (80037c8 <HAL_Init+0x40>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a07      	ldr	r2, [pc, #28]	@ (80037c8 <HAL_Init+0x40>)
 80037aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037ae:	6013      	str	r3, [r2, #0]
 80037b0:	2003      	movs	r0, #3
 80037b2:	f000 f931 	bl	8003a18 <HAL_NVIC_SetPriorityGrouping>
 80037b6:	2000      	movs	r0, #0
 80037b8:	f000 f808 	bl	80037cc <HAL_InitTick>
 80037bc:	f7ff f8f2 	bl	80029a4 <HAL_MspInit>
 80037c0:	2300      	movs	r3, #0
 80037c2:	4618      	mov	r0, r3
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	40023c00 	.word	0x40023c00

080037cc <HAL_InitTick>:
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	4b12      	ldr	r3, [pc, #72]	@ (8003820 <HAL_InitTick+0x54>)
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	4b12      	ldr	r3, [pc, #72]	@ (8003824 <HAL_InitTick+0x58>)
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	4619      	mov	r1, r3
 80037de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80037e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 f93b 	bl	8003a66 <HAL_SYSTICK_Config>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <HAL_InitTick+0x2e>
 80037f6:	2301      	movs	r3, #1
 80037f8:	e00e      	b.n	8003818 <HAL_InitTick+0x4c>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b0f      	cmp	r3, #15
 80037fe:	d80a      	bhi.n	8003816 <HAL_InitTick+0x4a>
 8003800:	2200      	movs	r2, #0
 8003802:	6879      	ldr	r1, [r7, #4]
 8003804:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003808:	f000 f911 	bl	8003a2e <HAL_NVIC_SetPriority>
 800380c:	4a06      	ldr	r2, [pc, #24]	@ (8003828 <HAL_InitTick+0x5c>)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6013      	str	r3, [r2, #0]
 8003812:	2300      	movs	r3, #0
 8003814:	e000      	b.n	8003818 <HAL_InitTick+0x4c>
 8003816:	2301      	movs	r3, #1
 8003818:	4618      	mov	r0, r3
 800381a:	3708      	adds	r7, #8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	20000018 	.word	0x20000018
 8003824:	20000020 	.word	0x20000020
 8003828:	2000001c 	.word	0x2000001c

0800382c <HAL_IncTick>:
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
 8003830:	4b06      	ldr	r3, [pc, #24]	@ (800384c <HAL_IncTick+0x20>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	461a      	mov	r2, r3
 8003836:	4b06      	ldr	r3, [pc, #24]	@ (8003850 <HAL_IncTick+0x24>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4413      	add	r3, r2
 800383c:	4a04      	ldr	r2, [pc, #16]	@ (8003850 <HAL_IncTick+0x24>)
 800383e:	6013      	str	r3, [r2, #0]
 8003840:	bf00      	nop
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	20000020 	.word	0x20000020
 8003850:	20025c40 	.word	0x20025c40

08003854 <HAL_GetTick>:
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
 8003858:	4b03      	ldr	r3, [pc, #12]	@ (8003868 <HAL_GetTick+0x14>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4618      	mov	r0, r3
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	20025c40 	.word	0x20025c40

0800386c <HAL_Delay>:
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	f7ff ffee 	bl	8003854 <HAL_GetTick>
 8003878:	60b8      	str	r0, [r7, #8]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	60fb      	str	r3, [r7, #12]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003884:	d005      	beq.n	8003892 <HAL_Delay+0x26>
 8003886:	4b0a      	ldr	r3, [pc, #40]	@ (80038b0 <HAL_Delay+0x44>)
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	461a      	mov	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	4413      	add	r3, r2
 8003890:	60fb      	str	r3, [r7, #12]
 8003892:	bf00      	nop
 8003894:	f7ff ffde 	bl	8003854 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d8f7      	bhi.n	8003894 <HAL_Delay+0x28>
 80038a4:	bf00      	nop
 80038a6:	bf00      	nop
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	20000020 	.word	0x20000020

080038b4 <__NVIC_SetPriorityGrouping>:
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f003 0307 	and.w	r3, r3, #7
 80038c2:	60fb      	str	r3, [r7, #12]
 80038c4:	4b0c      	ldr	r3, [pc, #48]	@ (80038f8 <__NVIC_SetPriorityGrouping+0x44>)
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	60bb      	str	r3, [r7, #8]
 80038ca:	68ba      	ldr	r2, [r7, #8]
 80038cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80038d0:	4013      	ands	r3, r2
 80038d2:	60bb      	str	r3, [r7, #8]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	021a      	lsls	r2, r3, #8
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	4313      	orrs	r3, r2
 80038dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80038e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038e4:	60bb      	str	r3, [r7, #8]
 80038e6:	4a04      	ldr	r2, [pc, #16]	@ (80038f8 <__NVIC_SetPriorityGrouping+0x44>)
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	60d3      	str	r3, [r2, #12]
 80038ec:	bf00      	nop
 80038ee:	3714      	adds	r7, #20
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr
 80038f8:	e000ed00 	.word	0xe000ed00

080038fc <__NVIC_GetPriorityGrouping>:
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
 8003900:	4b04      	ldr	r3, [pc, #16]	@ (8003914 <__NVIC_GetPriorityGrouping+0x18>)
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	0a1b      	lsrs	r3, r3, #8
 8003906:	f003 0307 	and.w	r3, r3, #7
 800390a:	4618      	mov	r0, r3
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr
 8003914:	e000ed00 	.word	0xe000ed00

08003918 <__NVIC_SetPriority>:
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	4603      	mov	r3, r0
 8003920:	6039      	str	r1, [r7, #0]
 8003922:	71fb      	strb	r3, [r7, #7]
 8003924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003928:	2b00      	cmp	r3, #0
 800392a:	db0a      	blt.n	8003942 <__NVIC_SetPriority+0x2a>
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	b2da      	uxtb	r2, r3
 8003930:	490c      	ldr	r1, [pc, #48]	@ (8003964 <__NVIC_SetPriority+0x4c>)
 8003932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003936:	0112      	lsls	r2, r2, #4
 8003938:	b2d2      	uxtb	r2, r2
 800393a:	440b      	add	r3, r1
 800393c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8003940:	e00a      	b.n	8003958 <__NVIC_SetPriority+0x40>
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	b2da      	uxtb	r2, r3
 8003946:	4908      	ldr	r1, [pc, #32]	@ (8003968 <__NVIC_SetPriority+0x50>)
 8003948:	79fb      	ldrb	r3, [r7, #7]
 800394a:	f003 030f 	and.w	r3, r3, #15
 800394e:	3b04      	subs	r3, #4
 8003950:	0112      	lsls	r2, r2, #4
 8003952:	b2d2      	uxtb	r2, r2
 8003954:	440b      	add	r3, r1
 8003956:	761a      	strb	r2, [r3, #24]
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr
 8003964:	e000e100 	.word	0xe000e100
 8003968:	e000ed00 	.word	0xe000ed00

0800396c <NVIC_EncodePriority>:
 800396c:	b480      	push	{r7}
 800396e:	b089      	sub	sp, #36	@ 0x24
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	61fb      	str	r3, [r7, #28]
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	f1c3 0307 	rsb	r3, r3, #7
 8003986:	2b04      	cmp	r3, #4
 8003988:	bf28      	it	cs
 800398a:	2304      	movcs	r3, #4
 800398c:	61bb      	str	r3, [r7, #24]
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	3304      	adds	r3, #4
 8003992:	2b06      	cmp	r3, #6
 8003994:	d902      	bls.n	800399c <NVIC_EncodePriority+0x30>
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	3b03      	subs	r3, #3
 800399a:	e000      	b.n	800399e <NVIC_EncodePriority+0x32>
 800399c:	2300      	movs	r3, #0
 800399e:	617b      	str	r3, [r7, #20]
 80039a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	fa02 f303 	lsl.w	r3, r2, r3
 80039aa:	43da      	mvns	r2, r3
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	401a      	ands	r2, r3
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	409a      	lsls	r2, r3
 80039b4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	fa01 f303 	lsl.w	r3, r1, r3
 80039be:	43d9      	mvns	r1, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	400b      	ands	r3, r1
 80039c4:	4313      	orrs	r3, r2
 80039c6:	4618      	mov	r0, r3
 80039c8:	3724      	adds	r7, #36	@ 0x24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
	...

080039d4 <SysTick_Config>:
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3b01      	subs	r3, #1
 80039e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039e4:	d301      	bcc.n	80039ea <SysTick_Config+0x16>
 80039e6:	2301      	movs	r3, #1
 80039e8:	e00f      	b.n	8003a0a <SysTick_Config+0x36>
 80039ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003a14 <SysTick_Config+0x40>)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	3b01      	subs	r3, #1
 80039f0:	6053      	str	r3, [r2, #4]
 80039f2:	210f      	movs	r1, #15
 80039f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80039f8:	f7ff ff8e 	bl	8003918 <__NVIC_SetPriority>
 80039fc:	4b05      	ldr	r3, [pc, #20]	@ (8003a14 <SysTick_Config+0x40>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	609a      	str	r2, [r3, #8]
 8003a02:	4b04      	ldr	r3, [pc, #16]	@ (8003a14 <SysTick_Config+0x40>)
 8003a04:	2207      	movs	r2, #7
 8003a06:	601a      	str	r2, [r3, #0]
 8003a08:	2300      	movs	r3, #0
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	e000e010 	.word	0xe000e010

08003a18 <HAL_NVIC_SetPriorityGrouping>:
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f7ff ff47 	bl	80038b4 <__NVIC_SetPriorityGrouping>
 8003a26:	bf00      	nop
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <HAL_NVIC_SetPriority>:
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b086      	sub	sp, #24
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	4603      	mov	r3, r0
 8003a36:	60b9      	str	r1, [r7, #8]
 8003a38:	607a      	str	r2, [r7, #4]
 8003a3a:	73fb      	strb	r3, [r7, #15]
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	617b      	str	r3, [r7, #20]
 8003a40:	f7ff ff5c 	bl	80038fc <__NVIC_GetPriorityGrouping>
 8003a44:	6178      	str	r0, [r7, #20]
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	68b9      	ldr	r1, [r7, #8]
 8003a4a:	6978      	ldr	r0, [r7, #20]
 8003a4c:	f7ff ff8e 	bl	800396c <NVIC_EncodePriority>
 8003a50:	4602      	mov	r2, r0
 8003a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a56:	4611      	mov	r1, r2
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7ff ff5d 	bl	8003918 <__NVIC_SetPriority>
 8003a5e:	bf00      	nop
 8003a60:	3718      	adds	r7, #24
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <HAL_SYSTICK_Config>:
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b082      	sub	sp, #8
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f7ff ffb0 	bl	80039d4 <SysTick_Config>
 8003a74:	4603      	mov	r3, r0
 8003a76:	4618      	mov	r0, r3
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
	...

08003a80 <HAL_GPIO_Init>:
 8003a80:	b480      	push	{r7}
 8003a82:	b089      	sub	sp, #36	@ 0x24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	617b      	str	r3, [r7, #20]
 8003a8e:	2300      	movs	r3, #0
 8003a90:	613b      	str	r3, [r7, #16]
 8003a92:	2300      	movs	r3, #0
 8003a94:	61bb      	str	r3, [r7, #24]
 8003a96:	2300      	movs	r3, #0
 8003a98:	61fb      	str	r3, [r7, #28]
 8003a9a:	e177      	b.n	8003d8c <HAL_GPIO_Init+0x30c>
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa4:	617b      	str	r3, [r7, #20]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	4013      	ands	r3, r2
 8003aae:	613b      	str	r3, [r7, #16]
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	f040 8166 	bne.w	8003d86 <HAL_GPIO_Init+0x306>
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f003 0303 	and.w	r3, r3, #3
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d005      	beq.n	8003ad2 <HAL_GPIO_Init+0x52>
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f003 0303 	and.w	r3, r3, #3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d130      	bne.n	8003b34 <HAL_GPIO_Init+0xb4>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	61bb      	str	r3, [r7, #24]
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	2203      	movs	r2, #3
 8003ade:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae2:	43db      	mvns	r3, r3
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	61bb      	str	r3, [r7, #24]
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	68da      	ldr	r2, [r3, #12]
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	fa02 f303 	lsl.w	r3, r2, r3
 8003af6:	69ba      	ldr	r2, [r7, #24]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	61bb      	str	r3, [r7, #24]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	609a      	str	r2, [r3, #8]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	61bb      	str	r3, [r7, #24]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	43db      	mvns	r3, r3
 8003b12:	69ba      	ldr	r2, [r7, #24]
 8003b14:	4013      	ands	r3, r2
 8003b16:	61bb      	str	r3, [r7, #24]
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	091b      	lsrs	r3, r3, #4
 8003b1e:	f003 0201 	and.w	r2, r3, #1
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	61bb      	str	r3, [r7, #24]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	605a      	str	r2, [r3, #4]
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f003 0303 	and.w	r3, r3, #3
 8003b3c:	2b03      	cmp	r3, #3
 8003b3e:	d017      	beq.n	8003b70 <HAL_GPIO_Init+0xf0>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	61bb      	str	r3, [r7, #24]
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	2203      	movs	r2, #3
 8003b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b50:	43db      	mvns	r3, r3
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	4013      	ands	r3, r2
 8003b56:	61bb      	str	r3, [r7, #24]
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	fa02 f303 	lsl.w	r3, r2, r3
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	61bb      	str	r3, [r7, #24]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	60da      	str	r2, [r3, #12]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f003 0303 	and.w	r3, r3, #3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d123      	bne.n	8003bc4 <HAL_GPIO_Init+0x144>
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	08da      	lsrs	r2, r3, #3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	3208      	adds	r2, #8
 8003b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b88:	61bb      	str	r3, [r7, #24]
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	f003 0307 	and.w	r3, r3, #7
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	220f      	movs	r2, #15
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	43db      	mvns	r3, r3
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	61bb      	str	r3, [r7, #24]
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	691a      	ldr	r2, [r3, #16]
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	f003 0307 	and.w	r3, r3, #7
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	61bb      	str	r3, [r7, #24]
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	08da      	lsrs	r2, r3, #3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	3208      	adds	r2, #8
 8003bbe:	69b9      	ldr	r1, [r7, #24]
 8003bc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	61bb      	str	r3, [r7, #24]
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	2203      	movs	r2, #3
 8003bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd4:	43db      	mvns	r3, r3
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	61bb      	str	r3, [r7, #24]
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f003 0203 	and.w	r2, r3, #3
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	61bb      	str	r3, [r7, #24]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 80c0 	beq.w	8003d86 <HAL_GPIO_Init+0x306>
 8003c06:	2300      	movs	r3, #0
 8003c08:	60fb      	str	r3, [r7, #12]
 8003c0a:	4b66      	ldr	r3, [pc, #408]	@ (8003da4 <HAL_GPIO_Init+0x324>)
 8003c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c0e:	4a65      	ldr	r2, [pc, #404]	@ (8003da4 <HAL_GPIO_Init+0x324>)
 8003c10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c14:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c16:	4b63      	ldr	r3, [pc, #396]	@ (8003da4 <HAL_GPIO_Init+0x324>)
 8003c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c1e:	60fb      	str	r3, [r7, #12]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	4a61      	ldr	r2, [pc, #388]	@ (8003da8 <HAL_GPIO_Init+0x328>)
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	089b      	lsrs	r3, r3, #2
 8003c28:	3302      	adds	r3, #2
 8003c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c2e:	61bb      	str	r3, [r7, #24]
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	f003 0303 	and.w	r3, r3, #3
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	220f      	movs	r2, #15
 8003c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3e:	43db      	mvns	r3, r3
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	4013      	ands	r3, r2
 8003c44:	61bb      	str	r3, [r7, #24]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a58      	ldr	r2, [pc, #352]	@ (8003dac <HAL_GPIO_Init+0x32c>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d037      	beq.n	8003cbe <HAL_GPIO_Init+0x23e>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a57      	ldr	r2, [pc, #348]	@ (8003db0 <HAL_GPIO_Init+0x330>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d031      	beq.n	8003cba <HAL_GPIO_Init+0x23a>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a56      	ldr	r2, [pc, #344]	@ (8003db4 <HAL_GPIO_Init+0x334>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d02b      	beq.n	8003cb6 <HAL_GPIO_Init+0x236>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a55      	ldr	r2, [pc, #340]	@ (8003db8 <HAL_GPIO_Init+0x338>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d025      	beq.n	8003cb2 <HAL_GPIO_Init+0x232>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a54      	ldr	r2, [pc, #336]	@ (8003dbc <HAL_GPIO_Init+0x33c>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d01f      	beq.n	8003cae <HAL_GPIO_Init+0x22e>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a53      	ldr	r2, [pc, #332]	@ (8003dc0 <HAL_GPIO_Init+0x340>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d019      	beq.n	8003caa <HAL_GPIO_Init+0x22a>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a52      	ldr	r2, [pc, #328]	@ (8003dc4 <HAL_GPIO_Init+0x344>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d013      	beq.n	8003ca6 <HAL_GPIO_Init+0x226>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a51      	ldr	r2, [pc, #324]	@ (8003dc8 <HAL_GPIO_Init+0x348>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d00d      	beq.n	8003ca2 <HAL_GPIO_Init+0x222>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a50      	ldr	r2, [pc, #320]	@ (8003dcc <HAL_GPIO_Init+0x34c>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d007      	beq.n	8003c9e <HAL_GPIO_Init+0x21e>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a4f      	ldr	r2, [pc, #316]	@ (8003dd0 <HAL_GPIO_Init+0x350>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d101      	bne.n	8003c9a <HAL_GPIO_Init+0x21a>
 8003c96:	2309      	movs	r3, #9
 8003c98:	e012      	b.n	8003cc0 <HAL_GPIO_Init+0x240>
 8003c9a:	230a      	movs	r3, #10
 8003c9c:	e010      	b.n	8003cc0 <HAL_GPIO_Init+0x240>
 8003c9e:	2308      	movs	r3, #8
 8003ca0:	e00e      	b.n	8003cc0 <HAL_GPIO_Init+0x240>
 8003ca2:	2307      	movs	r3, #7
 8003ca4:	e00c      	b.n	8003cc0 <HAL_GPIO_Init+0x240>
 8003ca6:	2306      	movs	r3, #6
 8003ca8:	e00a      	b.n	8003cc0 <HAL_GPIO_Init+0x240>
 8003caa:	2305      	movs	r3, #5
 8003cac:	e008      	b.n	8003cc0 <HAL_GPIO_Init+0x240>
 8003cae:	2304      	movs	r3, #4
 8003cb0:	e006      	b.n	8003cc0 <HAL_GPIO_Init+0x240>
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e004      	b.n	8003cc0 <HAL_GPIO_Init+0x240>
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	e002      	b.n	8003cc0 <HAL_GPIO_Init+0x240>
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e000      	b.n	8003cc0 <HAL_GPIO_Init+0x240>
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	69fa      	ldr	r2, [r7, #28]
 8003cc2:	f002 0203 	and.w	r2, r2, #3
 8003cc6:	0092      	lsls	r2, r2, #2
 8003cc8:	4093      	lsls	r3, r2
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	61bb      	str	r3, [r7, #24]
 8003cd0:	4935      	ldr	r1, [pc, #212]	@ (8003da8 <HAL_GPIO_Init+0x328>)
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	089b      	lsrs	r3, r3, #2
 8003cd6:	3302      	adds	r3, #2
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003cde:	4b3d      	ldr	r3, [pc, #244]	@ (8003dd4 <HAL_GPIO_Init+0x354>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	61bb      	str	r3, [r7, #24]
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	43db      	mvns	r3, r3
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	4013      	ands	r3, r2
 8003cec:	61bb      	str	r3, [r7, #24]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <HAL_GPIO_Init+0x282>
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
 8003d02:	4a34      	ldr	r2, [pc, #208]	@ (8003dd4 <HAL_GPIO_Init+0x354>)
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	6093      	str	r3, [r2, #8]
 8003d08:	4b32      	ldr	r3, [pc, #200]	@ (8003dd4 <HAL_GPIO_Init+0x354>)
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	61bb      	str	r3, [r7, #24]
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	43db      	mvns	r3, r3
 8003d12:	69ba      	ldr	r2, [r7, #24]
 8003d14:	4013      	ands	r3, r2
 8003d16:	61bb      	str	r3, [r7, #24]
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d003      	beq.n	8003d2c <HAL_GPIO_Init+0x2ac>
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
 8003d2c:	4a29      	ldr	r2, [pc, #164]	@ (8003dd4 <HAL_GPIO_Init+0x354>)
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	60d3      	str	r3, [r2, #12]
 8003d32:	4b28      	ldr	r3, [pc, #160]	@ (8003dd4 <HAL_GPIO_Init+0x354>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	61bb      	str	r3, [r7, #24]
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	43db      	mvns	r3, r3
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	61bb      	str	r3, [r7, #24]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d003      	beq.n	8003d56 <HAL_GPIO_Init+0x2d6>
 8003d4e:	69ba      	ldr	r2, [r7, #24]
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	61bb      	str	r3, [r7, #24]
 8003d56:	4a1f      	ldr	r2, [pc, #124]	@ (8003dd4 <HAL_GPIO_Init+0x354>)
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	6053      	str	r3, [r2, #4]
 8003d5c:	4b1d      	ldr	r3, [pc, #116]	@ (8003dd4 <HAL_GPIO_Init+0x354>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	61bb      	str	r3, [r7, #24]
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	43db      	mvns	r3, r3
 8003d66:	69ba      	ldr	r2, [r7, #24]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	61bb      	str	r3, [r7, #24]
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d003      	beq.n	8003d80 <HAL_GPIO_Init+0x300>
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	61bb      	str	r3, [r7, #24]
 8003d80:	4a14      	ldr	r2, [pc, #80]	@ (8003dd4 <HAL_GPIO_Init+0x354>)
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	6013      	str	r3, [r2, #0]
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	3301      	adds	r3, #1
 8003d8a:	61fb      	str	r3, [r7, #28]
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	2b0f      	cmp	r3, #15
 8003d90:	f67f ae84 	bls.w	8003a9c <HAL_GPIO_Init+0x1c>
 8003d94:	bf00      	nop
 8003d96:	bf00      	nop
 8003d98:	3724      	adds	r7, #36	@ 0x24
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	40023800 	.word	0x40023800
 8003da8:	40013800 	.word	0x40013800
 8003dac:	40020000 	.word	0x40020000
 8003db0:	40020400 	.word	0x40020400
 8003db4:	40020800 	.word	0x40020800
 8003db8:	40020c00 	.word	0x40020c00
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	40021400 	.word	0x40021400
 8003dc4:	40021800 	.word	0x40021800
 8003dc8:	40021c00 	.word	0x40021c00
 8003dcc:	40022000 	.word	0x40022000
 8003dd0:	40022400 	.word	0x40022400
 8003dd4:	40013c00 	.word	0x40013c00

08003dd8 <HAL_GPIO_DeInit>:
 8003dd8:	b480      	push	{r7}
 8003dda:	b087      	sub	sp, #28
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
 8003de2:	2300      	movs	r3, #0
 8003de4:	613b      	str	r3, [r7, #16]
 8003de6:	2300      	movs	r3, #0
 8003de8:	60fb      	str	r3, [r7, #12]
 8003dea:	2300      	movs	r3, #0
 8003dec:	60bb      	str	r3, [r7, #8]
 8003dee:	2300      	movs	r3, #0
 8003df0:	617b      	str	r3, [r7, #20]
 8003df2:	e0d9      	b.n	8003fa8 <HAL_GPIO_DeInit+0x1d0>
 8003df4:	2201      	movs	r2, #1
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfc:	613b      	str	r3, [r7, #16]
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	4013      	ands	r3, r2
 8003e04:	60fb      	str	r3, [r7, #12]
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	f040 80c9 	bne.w	8003fa2 <HAL_GPIO_DeInit+0x1ca>
 8003e10:	4a6b      	ldr	r2, [pc, #428]	@ (8003fc0 <HAL_GPIO_DeInit+0x1e8>)
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	089b      	lsrs	r3, r3, #2
 8003e16:	3302      	adds	r3, #2
 8003e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e1c:	60bb      	str	r3, [r7, #8]
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f003 0303 	and.w	r3, r3, #3
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	220f      	movs	r2, #15
 8003e28:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2c:	68ba      	ldr	r2, [r7, #8]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	60bb      	str	r3, [r7, #8]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a63      	ldr	r2, [pc, #396]	@ (8003fc4 <HAL_GPIO_DeInit+0x1ec>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d037      	beq.n	8003eaa <HAL_GPIO_DeInit+0xd2>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a62      	ldr	r2, [pc, #392]	@ (8003fc8 <HAL_GPIO_DeInit+0x1f0>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d031      	beq.n	8003ea6 <HAL_GPIO_DeInit+0xce>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a61      	ldr	r2, [pc, #388]	@ (8003fcc <HAL_GPIO_DeInit+0x1f4>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d02b      	beq.n	8003ea2 <HAL_GPIO_DeInit+0xca>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a60      	ldr	r2, [pc, #384]	@ (8003fd0 <HAL_GPIO_DeInit+0x1f8>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d025      	beq.n	8003e9e <HAL_GPIO_DeInit+0xc6>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a5f      	ldr	r2, [pc, #380]	@ (8003fd4 <HAL_GPIO_DeInit+0x1fc>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d01f      	beq.n	8003e9a <HAL_GPIO_DeInit+0xc2>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a5e      	ldr	r2, [pc, #376]	@ (8003fd8 <HAL_GPIO_DeInit+0x200>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d019      	beq.n	8003e96 <HAL_GPIO_DeInit+0xbe>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a5d      	ldr	r2, [pc, #372]	@ (8003fdc <HAL_GPIO_DeInit+0x204>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d013      	beq.n	8003e92 <HAL_GPIO_DeInit+0xba>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a5c      	ldr	r2, [pc, #368]	@ (8003fe0 <HAL_GPIO_DeInit+0x208>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d00d      	beq.n	8003e8e <HAL_GPIO_DeInit+0xb6>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a5b      	ldr	r2, [pc, #364]	@ (8003fe4 <HAL_GPIO_DeInit+0x20c>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d007      	beq.n	8003e8a <HAL_GPIO_DeInit+0xb2>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a5a      	ldr	r2, [pc, #360]	@ (8003fe8 <HAL_GPIO_DeInit+0x210>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d101      	bne.n	8003e86 <HAL_GPIO_DeInit+0xae>
 8003e82:	2309      	movs	r3, #9
 8003e84:	e012      	b.n	8003eac <HAL_GPIO_DeInit+0xd4>
 8003e86:	230a      	movs	r3, #10
 8003e88:	e010      	b.n	8003eac <HAL_GPIO_DeInit+0xd4>
 8003e8a:	2308      	movs	r3, #8
 8003e8c:	e00e      	b.n	8003eac <HAL_GPIO_DeInit+0xd4>
 8003e8e:	2307      	movs	r3, #7
 8003e90:	e00c      	b.n	8003eac <HAL_GPIO_DeInit+0xd4>
 8003e92:	2306      	movs	r3, #6
 8003e94:	e00a      	b.n	8003eac <HAL_GPIO_DeInit+0xd4>
 8003e96:	2305      	movs	r3, #5
 8003e98:	e008      	b.n	8003eac <HAL_GPIO_DeInit+0xd4>
 8003e9a:	2304      	movs	r3, #4
 8003e9c:	e006      	b.n	8003eac <HAL_GPIO_DeInit+0xd4>
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e004      	b.n	8003eac <HAL_GPIO_DeInit+0xd4>
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	e002      	b.n	8003eac <HAL_GPIO_DeInit+0xd4>
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e000      	b.n	8003eac <HAL_GPIO_DeInit+0xd4>
 8003eaa:	2300      	movs	r3, #0
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	f002 0203 	and.w	r2, r2, #3
 8003eb2:	0092      	lsls	r2, r2, #2
 8003eb4:	4093      	lsls	r3, r2
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d132      	bne.n	8003f22 <HAL_GPIO_DeInit+0x14a>
 8003ebc:	4b4b      	ldr	r3, [pc, #300]	@ (8003fec <HAL_GPIO_DeInit+0x214>)
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	43db      	mvns	r3, r3
 8003ec4:	4949      	ldr	r1, [pc, #292]	@ (8003fec <HAL_GPIO_DeInit+0x214>)
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	600b      	str	r3, [r1, #0]
 8003eca:	4b48      	ldr	r3, [pc, #288]	@ (8003fec <HAL_GPIO_DeInit+0x214>)
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	43db      	mvns	r3, r3
 8003ed2:	4946      	ldr	r1, [pc, #280]	@ (8003fec <HAL_GPIO_DeInit+0x214>)
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	604b      	str	r3, [r1, #4]
 8003ed8:	4b44      	ldr	r3, [pc, #272]	@ (8003fec <HAL_GPIO_DeInit+0x214>)
 8003eda:	68da      	ldr	r2, [r3, #12]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	43db      	mvns	r3, r3
 8003ee0:	4942      	ldr	r1, [pc, #264]	@ (8003fec <HAL_GPIO_DeInit+0x214>)
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	60cb      	str	r3, [r1, #12]
 8003ee6:	4b41      	ldr	r3, [pc, #260]	@ (8003fec <HAL_GPIO_DeInit+0x214>)
 8003ee8:	689a      	ldr	r2, [r3, #8]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	43db      	mvns	r3, r3
 8003eee:	493f      	ldr	r1, [pc, #252]	@ (8003fec <HAL_GPIO_DeInit+0x214>)
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	608b      	str	r3, [r1, #8]
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	f003 0303 	and.w	r3, r3, #3
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	220f      	movs	r2, #15
 8003efe:	fa02 f303 	lsl.w	r3, r2, r3
 8003f02:	60bb      	str	r3, [r7, #8]
 8003f04:	4a2e      	ldr	r2, [pc, #184]	@ (8003fc0 <HAL_GPIO_DeInit+0x1e8>)
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	089b      	lsrs	r3, r3, #2
 8003f0a:	3302      	adds	r3, #2
 8003f0c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	43da      	mvns	r2, r3
 8003f14:	482a      	ldr	r0, [pc, #168]	@ (8003fc0 <HAL_GPIO_DeInit+0x1e8>)
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	089b      	lsrs	r3, r3, #2
 8003f1a:	400a      	ands	r2, r1
 8003f1c:	3302      	adds	r3, #2
 8003f1e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	2103      	movs	r1, #3
 8003f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f30:	43db      	mvns	r3, r3
 8003f32:	401a      	ands	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	08da      	lsrs	r2, r3, #3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	3208      	adds	r2, #8
 8003f40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	f003 0307 	and.w	r3, r3, #7
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	220f      	movs	r2, #15
 8003f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f52:	43db      	mvns	r3, r3
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	08d2      	lsrs	r2, r2, #3
 8003f58:	4019      	ands	r1, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	3208      	adds	r2, #8
 8003f5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68da      	ldr	r2, [r3, #12]
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	2103      	movs	r1, #3
 8003f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f70:	43db      	mvns	r3, r3
 8003f72:	401a      	ands	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	60da      	str	r2, [r3, #12]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	2101      	movs	r1, #1
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	fa01 f303 	lsl.w	r3, r1, r3
 8003f84:	43db      	mvns	r3, r3
 8003f86:	401a      	ands	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	605a      	str	r2, [r3, #4]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	005b      	lsls	r3, r3, #1
 8003f94:	2103      	movs	r1, #3
 8003f96:	fa01 f303 	lsl.w	r3, r1, r3
 8003f9a:	43db      	mvns	r3, r3
 8003f9c:	401a      	ands	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	609a      	str	r2, [r3, #8]
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	617b      	str	r3, [r7, #20]
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	2b0f      	cmp	r3, #15
 8003fac:	f67f af22 	bls.w	8003df4 <HAL_GPIO_DeInit+0x1c>
 8003fb0:	bf00      	nop
 8003fb2:	bf00      	nop
 8003fb4:	371c      	adds	r7, #28
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	40013800 	.word	0x40013800
 8003fc4:	40020000 	.word	0x40020000
 8003fc8:	40020400 	.word	0x40020400
 8003fcc:	40020800 	.word	0x40020800
 8003fd0:	40020c00 	.word	0x40020c00
 8003fd4:	40021000 	.word	0x40021000
 8003fd8:	40021400 	.word	0x40021400
 8003fdc:	40021800 	.word	0x40021800
 8003fe0:	40021c00 	.word	0x40021c00
 8003fe4:	40022000 	.word	0x40022000
 8003fe8:	40022400 	.word	0x40022400
 8003fec:	40013c00 	.word	0x40013c00

08003ff0 <HAL_GPIO_ReadPin>:
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	807b      	strh	r3, [r7, #2]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	691a      	ldr	r2, [r3, #16]
 8004000:	887b      	ldrh	r3, [r7, #2]
 8004002:	4013      	ands	r3, r2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d002      	beq.n	800400e <HAL_GPIO_ReadPin+0x1e>
 8004008:	2301      	movs	r3, #1
 800400a:	73fb      	strb	r3, [r7, #15]
 800400c:	e001      	b.n	8004012 <HAL_GPIO_ReadPin+0x22>
 800400e:	2300      	movs	r3, #0
 8004010:	73fb      	strb	r3, [r7, #15]
 8004012:	7bfb      	ldrb	r3, [r7, #15]
 8004014:	4618      	mov	r0, r3
 8004016:	3714      	adds	r7, #20
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <HAL_GPIO_WritePin>:
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	460b      	mov	r3, r1
 800402a:	807b      	strh	r3, [r7, #2]
 800402c:	4613      	mov	r3, r2
 800402e:	707b      	strb	r3, [r7, #1]
 8004030:	787b      	ldrb	r3, [r7, #1]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d003      	beq.n	800403e <HAL_GPIO_WritePin+0x1e>
 8004036:	887a      	ldrh	r2, [r7, #2]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	619a      	str	r2, [r3, #24]
 800403c:	e003      	b.n	8004046 <HAL_GPIO_WritePin+0x26>
 800403e:	887b      	ldrh	r3, [r7, #2]
 8004040:	041a      	lsls	r2, r3, #16
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	619a      	str	r2, [r3, #24]
 8004046:	bf00      	nop
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
	...

08004054 <HAL_I2C_Init>:
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <HAL_I2C_Init+0x12>
 8004062:	2301      	movs	r3, #1
 8004064:	e12b      	b.n	80042be <HAL_I2C_Init+0x26a>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d106      	bne.n	8004080 <HAL_I2C_Init+0x2c>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7fe fcba 	bl	80029f4 <HAL_I2C_MspInit>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2224      	movs	r2, #36	@ 0x24
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f022 0201 	bic.w	r2, r2, #1
 8004096:	601a      	str	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80040b6:	601a      	str	r2, [r3, #0]
 80040b8:	f001 ff82 	bl	8005fc0 <HAL_RCC_GetPCLK1Freq>
 80040bc:	60f8      	str	r0, [r7, #12]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	4a81      	ldr	r2, [pc, #516]	@ (80042c8 <HAL_I2C_Init+0x274>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d807      	bhi.n	80040d8 <HAL_I2C_Init+0x84>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	4a80      	ldr	r2, [pc, #512]	@ (80042cc <HAL_I2C_Init+0x278>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	bf94      	ite	ls
 80040d0:	2301      	movls	r3, #1
 80040d2:	2300      	movhi	r3, #0
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	e006      	b.n	80040e6 <HAL_I2C_Init+0x92>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	4a7d      	ldr	r2, [pc, #500]	@ (80042d0 <HAL_I2C_Init+0x27c>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	bf94      	ite	ls
 80040e0:	2301      	movls	r3, #1
 80040e2:	2300      	movhi	r3, #0
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <HAL_I2C_Init+0x9a>
 80040ea:	2301      	movs	r3, #1
 80040ec:	e0e7      	b.n	80042be <HAL_I2C_Init+0x26a>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	4a78      	ldr	r2, [pc, #480]	@ (80042d4 <HAL_I2C_Init+0x280>)
 80040f2:	fba2 2303 	umull	r2, r3, r2, r3
 80040f6:	0c9b      	lsrs	r3, r3, #18
 80040f8:	60bb      	str	r3, [r7, #8]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68ba      	ldr	r2, [r7, #8]
 800410a:	430a      	orrs	r2, r1
 800410c:	605a      	str	r2, [r3, #4]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	6a1b      	ldr	r3, [r3, #32]
 8004114:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	4a6a      	ldr	r2, [pc, #424]	@ (80042c8 <HAL_I2C_Init+0x274>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d802      	bhi.n	8004128 <HAL_I2C_Init+0xd4>
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	3301      	adds	r3, #1
 8004126:	e009      	b.n	800413c <HAL_I2C_Init+0xe8>
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800412e:	fb02 f303 	mul.w	r3, r2, r3
 8004132:	4a69      	ldr	r2, [pc, #420]	@ (80042d8 <HAL_I2C_Init+0x284>)
 8004134:	fba2 2303 	umull	r2, r3, r2, r3
 8004138:	099b      	lsrs	r3, r3, #6
 800413a:	3301      	adds	r3, #1
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	6812      	ldr	r2, [r2, #0]
 8004140:	430b      	orrs	r3, r1
 8004142:	6213      	str	r3, [r2, #32]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	69db      	ldr	r3, [r3, #28]
 800414a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800414e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	495c      	ldr	r1, [pc, #368]	@ (80042c8 <HAL_I2C_Init+0x274>)
 8004158:	428b      	cmp	r3, r1
 800415a:	d819      	bhi.n	8004190 <HAL_I2C_Init+0x13c>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	1e59      	subs	r1, r3, #1
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	fbb1 f3f3 	udiv	r3, r1, r3
 800416a:	1c59      	adds	r1, r3, #1
 800416c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004170:	400b      	ands	r3, r1
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00a      	beq.n	800418c <HAL_I2C_Init+0x138>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	1e59      	subs	r1, r3, #1
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	005b      	lsls	r3, r3, #1
 8004180:	fbb1 f3f3 	udiv	r3, r1, r3
 8004184:	3301      	adds	r3, #1
 8004186:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800418a:	e051      	b.n	8004230 <HAL_I2C_Init+0x1dc>
 800418c:	2304      	movs	r3, #4
 800418e:	e04f      	b.n	8004230 <HAL_I2C_Init+0x1dc>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d111      	bne.n	80041bc <HAL_I2C_Init+0x168>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	1e58      	subs	r0, r3, #1
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6859      	ldr	r1, [r3, #4]
 80041a0:	460b      	mov	r3, r1
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	440b      	add	r3, r1
 80041a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80041aa:	3301      	adds	r3, #1
 80041ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	bf0c      	ite	eq
 80041b4:	2301      	moveq	r3, #1
 80041b6:	2300      	movne	r3, #0
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	e012      	b.n	80041e2 <HAL_I2C_Init+0x18e>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	1e58      	subs	r0, r3, #1
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6859      	ldr	r1, [r3, #4]
 80041c4:	460b      	mov	r3, r1
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	440b      	add	r3, r1
 80041ca:	0099      	lsls	r1, r3, #2
 80041cc:	440b      	add	r3, r1
 80041ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80041d2:	3301      	adds	r3, #1
 80041d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041d8:	2b00      	cmp	r3, #0
 80041da:	bf0c      	ite	eq
 80041dc:	2301      	moveq	r3, #1
 80041de:	2300      	movne	r3, #0
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <HAL_I2C_Init+0x196>
 80041e6:	2301      	movs	r3, #1
 80041e8:	e022      	b.n	8004230 <HAL_I2C_Init+0x1dc>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10e      	bne.n	8004210 <HAL_I2C_Init+0x1bc>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	1e58      	subs	r0, r3, #1
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6859      	ldr	r1, [r3, #4]
 80041fa:	460b      	mov	r3, r1
 80041fc:	005b      	lsls	r3, r3, #1
 80041fe:	440b      	add	r3, r1
 8004200:	fbb0 f3f3 	udiv	r3, r0, r3
 8004204:	3301      	adds	r3, #1
 8004206:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800420a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800420e:	e00f      	b.n	8004230 <HAL_I2C_Init+0x1dc>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	1e58      	subs	r0, r3, #1
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6859      	ldr	r1, [r3, #4]
 8004218:	460b      	mov	r3, r1
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	440b      	add	r3, r1
 800421e:	0099      	lsls	r1, r3, #2
 8004220:	440b      	add	r3, r1
 8004222:	fbb0 f3f3 	udiv	r3, r0, r3
 8004226:	3301      	adds	r3, #1
 8004228:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800422c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004230:	6879      	ldr	r1, [r7, #4]
 8004232:	6809      	ldr	r1, [r1, #0]
 8004234:	4313      	orrs	r3, r2
 8004236:	61cb      	str	r3, [r1, #28]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	69da      	ldr	r2, [r3, #28]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	431a      	orrs	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	430a      	orrs	r2, r1
 8004252:	601a      	str	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800425e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	6911      	ldr	r1, [r2, #16]
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	68d2      	ldr	r2, [r2, #12]
 800426a:	4311      	orrs	r1, r2
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	6812      	ldr	r2, [r2, #0]
 8004270:	430b      	orrs	r3, r1
 8004272:	6093      	str	r3, [r2, #8]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	695a      	ldr	r2, [r3, #20]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	431a      	orrs	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	430a      	orrs	r2, r1
 800428e:	60da      	str	r2, [r3, #12]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f042 0201 	orr.w	r2, r2, #1
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	641a      	str	r2, [r3, #64]	@ 0x40
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2220      	movs	r2, #32
 80042aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042bc:	2300      	movs	r3, #0
 80042be:	4618      	mov	r0, r3
 80042c0:	3710      	adds	r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	000186a0 	.word	0x000186a0
 80042cc:	001e847f 	.word	0x001e847f
 80042d0:	003d08ff 	.word	0x003d08ff
 80042d4:	431bde83 	.word	0x431bde83
 80042d8:	10624dd3 	.word	0x10624dd3

080042dc <HAL_I2C_Mem_Write>:
 80042dc:	b580      	push	{r7, lr}
 80042de:	b088      	sub	sp, #32
 80042e0:	af02      	add	r7, sp, #8
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	4608      	mov	r0, r1
 80042e6:	4611      	mov	r1, r2
 80042e8:	461a      	mov	r2, r3
 80042ea:	4603      	mov	r3, r0
 80042ec:	817b      	strh	r3, [r7, #10]
 80042ee:	460b      	mov	r3, r1
 80042f0:	813b      	strh	r3, [r7, #8]
 80042f2:	4613      	mov	r3, r2
 80042f4:	80fb      	strh	r3, [r7, #6]
 80042f6:	f7ff faad 	bl	8003854 <HAL_GetTick>
 80042fa:	6178      	str	r0, [r7, #20]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b20      	cmp	r3, #32
 8004306:	f040 80d9 	bne.w	80044bc <HAL_I2C_Mem_Write+0x1e0>
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	2319      	movs	r3, #25
 8004310:	2201      	movs	r2, #1
 8004312:	496d      	ldr	r1, [pc, #436]	@ (80044c8 <HAL_I2C_Mem_Write+0x1ec>)
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f000 fc8b 	bl	8004c30 <I2C_WaitOnFlagUntilTimeout>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d001      	beq.n	8004324 <HAL_I2C_Mem_Write+0x48>
 8004320:	2302      	movs	r3, #2
 8004322:	e0cc      	b.n	80044be <HAL_I2C_Mem_Write+0x1e2>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800432a:	2b01      	cmp	r3, #1
 800432c:	d101      	bne.n	8004332 <HAL_I2C_Mem_Write+0x56>
 800432e:	2302      	movs	r3, #2
 8004330:	e0c5      	b.n	80044be <HAL_I2C_Mem_Write+0x1e2>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	2b01      	cmp	r3, #1
 8004346:	d007      	beq.n	8004358 <HAL_I2C_Mem_Write+0x7c>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f042 0201 	orr.w	r2, r2, #1
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004366:	601a      	str	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2221      	movs	r2, #33	@ 0x21
 800436c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2240      	movs	r2, #64	@ 0x40
 8004374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	641a      	str	r2, [r3, #64]	@ 0x40
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6a3a      	ldr	r2, [r7, #32]
 8004382:	625a      	str	r2, [r3, #36]	@ 0x24
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004388:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800438e:	b29a      	uxth	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	4a4d      	ldr	r2, [pc, #308]	@ (80044cc <HAL_I2C_Mem_Write+0x1f0>)
 8004398:	62da      	str	r2, [r3, #44]	@ 0x2c
 800439a:	88f8      	ldrh	r0, [r7, #6]
 800439c:	893a      	ldrh	r2, [r7, #8]
 800439e:	8979      	ldrh	r1, [r7, #10]
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	9301      	str	r3, [sp, #4]
 80043a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043a6:	9300      	str	r3, [sp, #0]
 80043a8:	4603      	mov	r3, r0
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f000 fac2 	bl	8004934 <I2C_RequestMemoryWrite>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d052      	beq.n	800445c <HAL_I2C_Mem_Write+0x180>
 80043b6:	2301      	movs	r3, #1
 80043b8:	e081      	b.n	80044be <HAL_I2C_Mem_Write+0x1e2>
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f000 fd50 	bl	8004e64 <I2C_WaitOnTXEFlagUntilTimeout>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00d      	beq.n	80043e6 <HAL_I2C_Mem_Write+0x10a>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ce:	2b04      	cmp	r3, #4
 80043d0:	d107      	bne.n	80043e2 <HAL_I2C_Mem_Write+0x106>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043e0:	601a      	str	r2, [r3, #0]
 80043e2:	2301      	movs	r3, #1
 80043e4:	e06b      	b.n	80044be <HAL_I2C_Mem_Write+0x1e2>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ea:	781a      	ldrb	r2, [r3, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	611a      	str	r2, [r3, #16]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f6:	1c5a      	adds	r2, r3, #1
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	625a      	str	r2, [r3, #36]	@ 0x24
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004400:	3b01      	subs	r3, #1
 8004402:	b29a      	uxth	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800440c:	b29b      	uxth	r3, r3
 800440e:	3b01      	subs	r3, #1
 8004410:	b29a      	uxth	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	695b      	ldr	r3, [r3, #20]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b04      	cmp	r3, #4
 8004422:	d11b      	bne.n	800445c <HAL_I2C_Mem_Write+0x180>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004428:	2b00      	cmp	r3, #0
 800442a:	d017      	beq.n	800445c <HAL_I2C_Mem_Write+0x180>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004430:	781a      	ldrb	r2, [r3, #0]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	611a      	str	r2, [r3, #16]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800443c:	1c5a      	adds	r2, r3, #1
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	625a      	str	r2, [r3, #36]	@ 0x24
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004446:	3b01      	subs	r3, #1
 8004448:	b29a      	uxth	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004452:	b29b      	uxth	r3, r3
 8004454:	3b01      	subs	r3, #1
 8004456:	b29a      	uxth	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1aa      	bne.n	80043ba <HAL_I2C_Mem_Write+0xde>
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f000 fd43 	bl	8004ef4 <I2C_WaitOnBTFFlagUntilTimeout>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00d      	beq.n	8004490 <HAL_I2C_Mem_Write+0x1b4>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004478:	2b04      	cmp	r3, #4
 800447a:	d107      	bne.n	800448c <HAL_I2C_Mem_Write+0x1b0>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800448a:	601a      	str	r2, [r3, #0]
 800448c:	2301      	movs	r3, #1
 800448e:	e016      	b.n	80044be <HAL_I2C_Mem_Write+0x1e2>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800449e:	601a      	str	r2, [r3, #0]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2220      	movs	r2, #32
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80044b8:	2300      	movs	r3, #0
 80044ba:	e000      	b.n	80044be <HAL_I2C_Mem_Write+0x1e2>
 80044bc:	2302      	movs	r3, #2
 80044be:	4618      	mov	r0, r3
 80044c0:	3718      	adds	r7, #24
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	00100002 	.word	0x00100002
 80044cc:	ffff0000 	.word	0xffff0000

080044d0 <HAL_I2C_Mem_Read>:
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b08c      	sub	sp, #48	@ 0x30
 80044d4:	af02      	add	r7, sp, #8
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	4608      	mov	r0, r1
 80044da:	4611      	mov	r1, r2
 80044dc:	461a      	mov	r2, r3
 80044de:	4603      	mov	r3, r0
 80044e0:	817b      	strh	r3, [r7, #10]
 80044e2:	460b      	mov	r3, r1
 80044e4:	813b      	strh	r3, [r7, #8]
 80044e6:	4613      	mov	r3, r2
 80044e8:	80fb      	strh	r3, [r7, #6]
 80044ea:	f7ff f9b3 	bl	8003854 <HAL_GetTick>
 80044ee:	6278      	str	r0, [r7, #36]	@ 0x24
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	2b20      	cmp	r3, #32
 80044fa:	f040 8214 	bne.w	8004926 <HAL_I2C_Mem_Read+0x456>
 80044fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004500:	9300      	str	r3, [sp, #0]
 8004502:	2319      	movs	r3, #25
 8004504:	2201      	movs	r2, #1
 8004506:	497b      	ldr	r1, [pc, #492]	@ (80046f4 <HAL_I2C_Mem_Read+0x224>)
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f000 fb91 	bl	8004c30 <I2C_WaitOnFlagUntilTimeout>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d001      	beq.n	8004518 <HAL_I2C_Mem_Read+0x48>
 8004514:	2302      	movs	r3, #2
 8004516:	e207      	b.n	8004928 <HAL_I2C_Mem_Read+0x458>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800451e:	2b01      	cmp	r3, #1
 8004520:	d101      	bne.n	8004526 <HAL_I2C_Mem_Read+0x56>
 8004522:	2302      	movs	r3, #2
 8004524:	e200      	b.n	8004928 <HAL_I2C_Mem_Read+0x458>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2201      	movs	r2, #1
 800452a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0301 	and.w	r3, r3, #1
 8004538:	2b01      	cmp	r3, #1
 800453a:	d007      	beq.n	800454c <HAL_I2C_Mem_Read+0x7c>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f042 0201 	orr.w	r2, r2, #1
 800454a:	601a      	str	r2, [r3, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800455a:	601a      	str	r2, [r3, #0]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2222      	movs	r2, #34	@ 0x22
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2240      	movs	r2, #64	@ 0x40
 8004568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	641a      	str	r2, [r3, #64]	@ 0x40
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004576:	625a      	str	r2, [r3, #36]	@ 0x24
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800457c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004582:	b29a      	uxth	r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	4a5b      	ldr	r2, [pc, #364]	@ (80046f8 <HAL_I2C_Mem_Read+0x228>)
 800458c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800458e:	88f8      	ldrh	r0, [r7, #6]
 8004590:	893a      	ldrh	r2, [r7, #8]
 8004592:	8979      	ldrh	r1, [r7, #10]
 8004594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004596:	9301      	str	r3, [sp, #4]
 8004598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800459a:	9300      	str	r3, [sp, #0]
 800459c:	4603      	mov	r3, r0
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f000 fa5e 	bl	8004a60 <I2C_RequestMemoryRead>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d001      	beq.n	80045ae <HAL_I2C_Mem_Read+0xde>
 80045aa:	2301      	movs	r3, #1
 80045ac:	e1bc      	b.n	8004928 <HAL_I2C_Mem_Read+0x458>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d113      	bne.n	80045de <HAL_I2C_Mem_Read+0x10e>
 80045b6:	2300      	movs	r3, #0
 80045b8:	623b      	str	r3, [r7, #32]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	623b      	str	r3, [r7, #32]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	623b      	str	r3, [r7, #32]
 80045ca:	6a3b      	ldr	r3, [r7, #32]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045da:	601a      	str	r2, [r3, #0]
 80045dc:	e190      	b.n	8004900 <HAL_I2C_Mem_Read+0x430>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d11b      	bne.n	800461e <HAL_I2C_Mem_Read+0x14e>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045f4:	601a      	str	r2, [r3, #0]
 80045f6:	2300      	movs	r3, #0
 80045f8:	61fb      	str	r3, [r7, #28]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	695b      	ldr	r3, [r3, #20]
 8004600:	61fb      	str	r3, [r7, #28]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	61fb      	str	r3, [r7, #28]
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	e170      	b.n	8004900 <HAL_I2C_Mem_Read+0x430>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004622:	2b02      	cmp	r3, #2
 8004624:	d11b      	bne.n	800465e <HAL_I2C_Mem_Read+0x18e>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004634:	601a      	str	r2, [r3, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004644:	601a      	str	r2, [r3, #0]
 8004646:	2300      	movs	r3, #0
 8004648:	61bb      	str	r3, [r7, #24]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	61bb      	str	r3, [r7, #24]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	61bb      	str	r3, [r7, #24]
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	e150      	b.n	8004900 <HAL_I2C_Mem_Read+0x430>
 800465e:	2300      	movs	r3, #0
 8004660:	617b      	str	r3, [r7, #20]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	695b      	ldr	r3, [r3, #20]
 8004668:	617b      	str	r3, [r7, #20]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	617b      	str	r3, [r7, #20]
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	e144      	b.n	8004900 <HAL_I2C_Mem_Read+0x430>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800467a:	2b03      	cmp	r3, #3
 800467c:	f200 80f1 	bhi.w	8004862 <HAL_I2C_Mem_Read+0x392>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004684:	2b01      	cmp	r3, #1
 8004686:	d123      	bne.n	80046d0 <HAL_I2C_Mem_Read+0x200>
 8004688:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800468a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	f000 fc79 	bl	8004f84 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d001      	beq.n	800469c <HAL_I2C_Mem_Read+0x1cc>
 8004698:	2301      	movs	r3, #1
 800469a:	e145      	b.n	8004928 <HAL_I2C_Mem_Read+0x458>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	691a      	ldr	r2, [r3, #16]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a6:	b2d2      	uxtb	r2, r2
 80046a8:	701a      	strb	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ae:	1c5a      	adds	r2, r3, #1
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	625a      	str	r2, [r3, #36]	@ 0x24
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046b8:	3b01      	subs	r3, #1
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	851a      	strh	r2, [r3, #40]	@ 0x28
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	3b01      	subs	r3, #1
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80046ce:	e117      	b.n	8004900 <HAL_I2C_Mem_Read+0x430>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d14e      	bne.n	8004776 <HAL_I2C_Mem_Read+0x2a6>
 80046d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046da:	9300      	str	r3, [sp, #0]
 80046dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046de:	2200      	movs	r2, #0
 80046e0:	4906      	ldr	r1, [pc, #24]	@ (80046fc <HAL_I2C_Mem_Read+0x22c>)
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f000 faa4 	bl	8004c30 <I2C_WaitOnFlagUntilTimeout>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d008      	beq.n	8004700 <HAL_I2C_Mem_Read+0x230>
 80046ee:	2301      	movs	r3, #1
 80046f0:	e11a      	b.n	8004928 <HAL_I2C_Mem_Read+0x458>
 80046f2:	bf00      	nop
 80046f4:	00100002 	.word	0x00100002
 80046f8:	ffff0000 	.word	0xffff0000
 80046fc:	00010004 	.word	0x00010004
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	691a      	ldr	r2, [r3, #16]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800471a:	b2d2      	uxtb	r2, r2
 800471c:	701a      	strb	r2, [r3, #0]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004722:	1c5a      	adds	r2, r3, #1
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	625a      	str	r2, [r3, #36]	@ 0x24
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800472c:	3b01      	subs	r3, #1
 800472e:	b29a      	uxth	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004738:	b29b      	uxth	r3, r3
 800473a:	3b01      	subs	r3, #1
 800473c:	b29a      	uxth	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	691a      	ldr	r2, [r3, #16]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474c:	b2d2      	uxtb	r2, r2
 800474e:	701a      	strb	r2, [r3, #0]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004754:	1c5a      	adds	r2, r3, #1
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	625a      	str	r2, [r3, #36]	@ 0x24
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800475e:	3b01      	subs	r3, #1
 8004760:	b29a      	uxth	r2, r3
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800476a:	b29b      	uxth	r3, r3
 800476c:	3b01      	subs	r3, #1
 800476e:	b29a      	uxth	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004774:	e0c4      	b.n	8004900 <HAL_I2C_Mem_Read+0x430>
 8004776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800477c:	2200      	movs	r2, #0
 800477e:	496c      	ldr	r1, [pc, #432]	@ (8004930 <HAL_I2C_Mem_Read+0x460>)
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	f000 fa55 	bl	8004c30 <I2C_WaitOnFlagUntilTimeout>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d001      	beq.n	8004790 <HAL_I2C_Mem_Read+0x2c0>
 800478c:	2301      	movs	r3, #1
 800478e:	e0cb      	b.n	8004928 <HAL_I2C_Mem_Read+0x458>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800479e:	601a      	str	r2, [r3, #0]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	691a      	ldr	r2, [r3, #16]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047aa:	b2d2      	uxtb	r2, r2
 80047ac:	701a      	strb	r2, [r3, #0]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b2:	1c5a      	adds	r2, r3, #1
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	625a      	str	r2, [r3, #36]	@ 0x24
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047bc:	3b01      	subs	r3, #1
 80047be:	b29a      	uxth	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	3b01      	subs	r3, #1
 80047cc:	b29a      	uxth	r2, r3
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80047d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d4:	9300      	str	r3, [sp, #0]
 80047d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047d8:	2200      	movs	r2, #0
 80047da:	4955      	ldr	r1, [pc, #340]	@ (8004930 <HAL_I2C_Mem_Read+0x460>)
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	f000 fa27 	bl	8004c30 <I2C_WaitOnFlagUntilTimeout>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d001      	beq.n	80047ec <HAL_I2C_Mem_Read+0x31c>
 80047e8:	2301      	movs	r3, #1
 80047ea:	e09d      	b.n	8004928 <HAL_I2C_Mem_Read+0x458>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047fa:	601a      	str	r2, [r3, #0]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	691a      	ldr	r2, [r3, #16]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004806:	b2d2      	uxtb	r2, r2
 8004808:	701a      	strb	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800480e:	1c5a      	adds	r2, r3, #1
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	625a      	str	r2, [r3, #36]	@ 0x24
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004818:	3b01      	subs	r3, #1
 800481a:	b29a      	uxth	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004824:	b29b      	uxth	r3, r3
 8004826:	3b01      	subs	r3, #1
 8004828:	b29a      	uxth	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	691a      	ldr	r2, [r3, #16]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004838:	b2d2      	uxtb	r2, r2
 800483a:	701a      	strb	r2, [r3, #0]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004840:	1c5a      	adds	r2, r3, #1
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	625a      	str	r2, [r3, #36]	@ 0x24
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800484a:	3b01      	subs	r3, #1
 800484c:	b29a      	uxth	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004856:	b29b      	uxth	r3, r3
 8004858:	3b01      	subs	r3, #1
 800485a:	b29a      	uxth	r2, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004860:	e04e      	b.n	8004900 <HAL_I2C_Mem_Read+0x430>
 8004862:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004864:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f000 fb8c 	bl	8004f84 <I2C_WaitOnRXNEFlagUntilTimeout>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <HAL_I2C_Mem_Read+0x3a6>
 8004872:	2301      	movs	r3, #1
 8004874:	e058      	b.n	8004928 <HAL_I2C_Mem_Read+0x458>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	691a      	ldr	r2, [r3, #16]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004880:	b2d2      	uxtb	r2, r2
 8004882:	701a      	strb	r2, [r3, #0]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004888:	1c5a      	adds	r2, r3, #1
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	625a      	str	r2, [r3, #36]	@ 0x24
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004892:	3b01      	subs	r3, #1
 8004894:	b29a      	uxth	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	851a      	strh	r2, [r3, #40]	@ 0x28
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800489e:	b29b      	uxth	r3, r3
 80048a0:	3b01      	subs	r3, #1
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	f003 0304 	and.w	r3, r3, #4
 80048b2:	2b04      	cmp	r3, #4
 80048b4:	d124      	bne.n	8004900 <HAL_I2C_Mem_Read+0x430>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048ba:	2b03      	cmp	r3, #3
 80048bc:	d107      	bne.n	80048ce <HAL_I2C_Mem_Read+0x3fe>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048cc:	601a      	str	r2, [r3, #0]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	691a      	ldr	r2, [r3, #16]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d8:	b2d2      	uxtb	r2, r2
 80048da:	701a      	strb	r2, [r3, #0]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e0:	1c5a      	adds	r2, r3, #1
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	625a      	str	r2, [r3, #36]	@ 0x24
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048ea:	3b01      	subs	r3, #1
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	851a      	strh	r2, [r3, #40]	@ 0x28
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	3b01      	subs	r3, #1
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004904:	2b00      	cmp	r3, #0
 8004906:	f47f aeb6 	bne.w	8004676 <HAL_I2C_Mem_Read+0x1a6>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2220      	movs	r2, #32
 800490e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004922:	2300      	movs	r3, #0
 8004924:	e000      	b.n	8004928 <HAL_I2C_Mem_Read+0x458>
 8004926:	2302      	movs	r3, #2
 8004928:	4618      	mov	r0, r3
 800492a:	3728      	adds	r7, #40	@ 0x28
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	00010004 	.word	0x00010004

08004934 <I2C_RequestMemoryWrite>:
 8004934:	b580      	push	{r7, lr}
 8004936:	b088      	sub	sp, #32
 8004938:	af02      	add	r7, sp, #8
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	4608      	mov	r0, r1
 800493e:	4611      	mov	r1, r2
 8004940:	461a      	mov	r2, r3
 8004942:	4603      	mov	r3, r0
 8004944:	817b      	strh	r3, [r7, #10]
 8004946:	460b      	mov	r3, r1
 8004948:	813b      	strh	r3, [r7, #8]
 800494a:	4613      	mov	r3, r2
 800494c:	80fb      	strh	r3, [r7, #6]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800495c:	601a      	str	r2, [r3, #0]
 800495e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004960:	9300      	str	r3, [sp, #0]
 8004962:	6a3b      	ldr	r3, [r7, #32]
 8004964:	2200      	movs	r2, #0
 8004966:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f000 f960 	bl	8004c30 <I2C_WaitOnFlagUntilTimeout>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00d      	beq.n	8004992 <I2C_RequestMemoryWrite+0x5e>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004980:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004984:	d103      	bne.n	800498e <I2C_RequestMemoryWrite+0x5a>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800498c:	641a      	str	r2, [r3, #64]	@ 0x40
 800498e:	2303      	movs	r3, #3
 8004990:	e05f      	b.n	8004a52 <I2C_RequestMemoryWrite+0x11e>
 8004992:	897b      	ldrh	r3, [r7, #10]
 8004994:	b2db      	uxtb	r3, r3
 8004996:	461a      	mov	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80049a0:	611a      	str	r2, [r3, #16]
 80049a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a4:	6a3a      	ldr	r2, [r7, #32]
 80049a6:	492d      	ldr	r1, [pc, #180]	@ (8004a5c <I2C_RequestMemoryWrite+0x128>)
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f000 f9bb 	bl	8004d24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d001      	beq.n	80049b8 <I2C_RequestMemoryWrite+0x84>
 80049b4:	2301      	movs	r3, #1
 80049b6:	e04c      	b.n	8004a52 <I2C_RequestMemoryWrite+0x11e>
 80049b8:	2300      	movs	r3, #0
 80049ba:	617b      	str	r3, [r7, #20]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	617b      	str	r3, [r7, #20]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	617b      	str	r3, [r7, #20]
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049d0:	6a39      	ldr	r1, [r7, #32]
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	f000 fa46 	bl	8004e64 <I2C_WaitOnTXEFlagUntilTimeout>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00d      	beq.n	80049fa <I2C_RequestMemoryWrite+0xc6>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	d107      	bne.n	80049f6 <I2C_RequestMemoryWrite+0xc2>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049f4:	601a      	str	r2, [r3, #0]
 80049f6:	2301      	movs	r3, #1
 80049f8:	e02b      	b.n	8004a52 <I2C_RequestMemoryWrite+0x11e>
 80049fa:	88fb      	ldrh	r3, [r7, #6]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d105      	bne.n	8004a0c <I2C_RequestMemoryWrite+0xd8>
 8004a00:	893b      	ldrh	r3, [r7, #8]
 8004a02:	b2da      	uxtb	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	611a      	str	r2, [r3, #16]
 8004a0a:	e021      	b.n	8004a50 <I2C_RequestMemoryWrite+0x11c>
 8004a0c:	893b      	ldrh	r3, [r7, #8]
 8004a0e:	0a1b      	lsrs	r3, r3, #8
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	b2da      	uxtb	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	611a      	str	r2, [r3, #16]
 8004a1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a1c:	6a39      	ldr	r1, [r7, #32]
 8004a1e:	68f8      	ldr	r0, [r7, #12]
 8004a20:	f000 fa20 	bl	8004e64 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00d      	beq.n	8004a46 <I2C_RequestMemoryWrite+0x112>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a2e:	2b04      	cmp	r3, #4
 8004a30:	d107      	bne.n	8004a42 <I2C_RequestMemoryWrite+0x10e>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a40:	601a      	str	r2, [r3, #0]
 8004a42:	2301      	movs	r3, #1
 8004a44:	e005      	b.n	8004a52 <I2C_RequestMemoryWrite+0x11e>
 8004a46:	893b      	ldrh	r3, [r7, #8]
 8004a48:	b2da      	uxtb	r2, r3
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	611a      	str	r2, [r3, #16]
 8004a50:	2300      	movs	r3, #0
 8004a52:	4618      	mov	r0, r3
 8004a54:	3718      	adds	r7, #24
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	00010002 	.word	0x00010002

08004a60 <I2C_RequestMemoryRead>:
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b088      	sub	sp, #32
 8004a64:	af02      	add	r7, sp, #8
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	4608      	mov	r0, r1
 8004a6a:	4611      	mov	r1, r2
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	4603      	mov	r3, r0
 8004a70:	817b      	strh	r3, [r7, #10]
 8004a72:	460b      	mov	r3, r1
 8004a74:	813b      	strh	r3, [r7, #8]
 8004a76:	4613      	mov	r3, r2
 8004a78:	80fb      	strh	r3, [r7, #6]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004a88:	601a      	str	r2, [r3, #0]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a98:	601a      	str	r2, [r3, #0]
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a9c:	9300      	str	r3, [sp, #0]
 8004a9e:	6a3b      	ldr	r3, [r7, #32]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	f000 f8c2 	bl	8004c30 <I2C_WaitOnFlagUntilTimeout>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00d      	beq.n	8004ace <I2C_RequestMemoryRead+0x6e>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004abc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ac0:	d103      	bne.n	8004aca <I2C_RequestMemoryRead+0x6a>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ac8:	641a      	str	r2, [r3, #64]	@ 0x40
 8004aca:	2303      	movs	r3, #3
 8004acc:	e0aa      	b.n	8004c24 <I2C_RequestMemoryRead+0x1c4>
 8004ace:	897b      	ldrh	r3, [r7, #10]
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004adc:	611a      	str	r2, [r3, #16]
 8004ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae0:	6a3a      	ldr	r2, [r7, #32]
 8004ae2:	4952      	ldr	r1, [pc, #328]	@ (8004c2c <I2C_RequestMemoryRead+0x1cc>)
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f000 f91d 	bl	8004d24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d001      	beq.n	8004af4 <I2C_RequestMemoryRead+0x94>
 8004af0:	2301      	movs	r3, #1
 8004af2:	e097      	b.n	8004c24 <I2C_RequestMemoryRead+0x1c4>
 8004af4:	2300      	movs	r3, #0
 8004af6:	617b      	str	r3, [r7, #20]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	617b      	str	r3, [r7, #20]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	617b      	str	r3, [r7, #20]
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b0c:	6a39      	ldr	r1, [r7, #32]
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f000 f9a8 	bl	8004e64 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00d      	beq.n	8004b36 <I2C_RequestMemoryRead+0xd6>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b1e:	2b04      	cmp	r3, #4
 8004b20:	d107      	bne.n	8004b32 <I2C_RequestMemoryRead+0xd2>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b30:	601a      	str	r2, [r3, #0]
 8004b32:	2301      	movs	r3, #1
 8004b34:	e076      	b.n	8004c24 <I2C_RequestMemoryRead+0x1c4>
 8004b36:	88fb      	ldrh	r3, [r7, #6]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d105      	bne.n	8004b48 <I2C_RequestMemoryRead+0xe8>
 8004b3c:	893b      	ldrh	r3, [r7, #8]
 8004b3e:	b2da      	uxtb	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	611a      	str	r2, [r3, #16]
 8004b46:	e021      	b.n	8004b8c <I2C_RequestMemoryRead+0x12c>
 8004b48:	893b      	ldrh	r3, [r7, #8]
 8004b4a:	0a1b      	lsrs	r3, r3, #8
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	b2da      	uxtb	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	611a      	str	r2, [r3, #16]
 8004b56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b58:	6a39      	ldr	r1, [r7, #32]
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f000 f982 	bl	8004e64 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00d      	beq.n	8004b82 <I2C_RequestMemoryRead+0x122>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b6a:	2b04      	cmp	r3, #4
 8004b6c:	d107      	bne.n	8004b7e <I2C_RequestMemoryRead+0x11e>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b7c:	601a      	str	r2, [r3, #0]
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e050      	b.n	8004c24 <I2C_RequestMemoryRead+0x1c4>
 8004b82:	893b      	ldrh	r3, [r7, #8]
 8004b84:	b2da      	uxtb	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	611a      	str	r2, [r3, #16]
 8004b8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b8e:	6a39      	ldr	r1, [r7, #32]
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	f000 f967 	bl	8004e64 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d00d      	beq.n	8004bb8 <I2C_RequestMemoryRead+0x158>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba0:	2b04      	cmp	r3, #4
 8004ba2:	d107      	bne.n	8004bb4 <I2C_RequestMemoryRead+0x154>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bb2:	601a      	str	r2, [r3, #0]
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e035      	b.n	8004c24 <I2C_RequestMemoryRead+0x1c4>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bc6:	601a      	str	r2, [r3, #0]
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bca:	9300      	str	r3, [sp, #0]
 8004bcc:	6a3b      	ldr	r3, [r7, #32]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f000 f82b 	bl	8004c30 <I2C_WaitOnFlagUntilTimeout>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00d      	beq.n	8004bfc <I2C_RequestMemoryRead+0x19c>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bee:	d103      	bne.n	8004bf8 <I2C_RequestMemoryRead+0x198>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bf6:	641a      	str	r2, [r3, #64]	@ 0x40
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e013      	b.n	8004c24 <I2C_RequestMemoryRead+0x1c4>
 8004bfc:	897b      	ldrh	r3, [r7, #10]
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	f043 0301 	orr.w	r3, r3, #1
 8004c04:	b2da      	uxtb	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	611a      	str	r2, [r3, #16]
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0e:	6a3a      	ldr	r2, [r7, #32]
 8004c10:	4906      	ldr	r1, [pc, #24]	@ (8004c2c <I2C_RequestMemoryRead+0x1cc>)
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f000 f886 	bl	8004d24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d001      	beq.n	8004c22 <I2C_RequestMemoryRead+0x1c2>
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e000      	b.n	8004c24 <I2C_RequestMemoryRead+0x1c4>
 8004c22:	2300      	movs	r3, #0
 8004c24:	4618      	mov	r0, r3
 8004c26:	3718      	adds	r7, #24
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	00010002 	.word	0x00010002

08004c30 <I2C_WaitOnFlagUntilTimeout>:
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	603b      	str	r3, [r7, #0]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	71fb      	strb	r3, [r7, #7]
 8004c40:	e048      	b.n	8004cd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c48:	d044      	beq.n	8004cd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
 8004c4a:	f7fe fe03 	bl	8003854 <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	683a      	ldr	r2, [r7, #0]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d302      	bcc.n	8004c60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d139      	bne.n	8004cd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	0c1b      	lsrs	r3, r3, #16
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d10d      	bne.n	8004c86 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	43da      	mvns	r2, r3
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	4013      	ands	r3, r2
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	bf0c      	ite	eq
 8004c7c:	2301      	moveq	r3, #1
 8004c7e:	2300      	movne	r3, #0
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	461a      	mov	r2, r3
 8004c84:	e00c      	b.n	8004ca0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	43da      	mvns	r2, r3
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	4013      	ands	r3, r2
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	bf0c      	ite	eq
 8004c98:	2301      	moveq	r3, #1
 8004c9a:	2300      	movne	r3, #0
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	79fb      	ldrb	r3, [r7, #7]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d116      	bne.n	8004cd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	631a      	str	r2, [r3, #48]	@ 0x30
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2220      	movs	r2, #32
 8004cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc0:	f043 0220 	orr.w	r2, r3, #32
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	641a      	str	r2, [r3, #64]	@ 0x40
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e023      	b.n	8004d1c <I2C_WaitOnFlagUntilTimeout+0xec>
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	0c1b      	lsrs	r3, r3, #16
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d10d      	bne.n	8004cfa <I2C_WaitOnFlagUntilTimeout+0xca>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	695b      	ldr	r3, [r3, #20]
 8004ce4:	43da      	mvns	r2, r3
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	4013      	ands	r3, r2
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	bf0c      	ite	eq
 8004cf0:	2301      	moveq	r3, #1
 8004cf2:	2300      	movne	r3, #0
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	e00c      	b.n	8004d14 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	43da      	mvns	r2, r3
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	4013      	ands	r3, r2
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	bf0c      	ite	eq
 8004d0c:	2301      	moveq	r3, #1
 8004d0e:	2300      	movne	r3, #0
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	461a      	mov	r2, r3
 8004d14:	79fb      	ldrb	r3, [r7, #7]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d093      	beq.n	8004c42 <I2C_WaitOnFlagUntilTimeout+0x12>
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3710      	adds	r7, #16
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]
 8004d30:	603b      	str	r3, [r7, #0]
 8004d32:	e071      	b.n	8004e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d42:	d123      	bne.n	8004d8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d52:	601a      	str	r2, [r3, #0]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d5c:	615a      	str	r2, [r3, #20]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	631a      	str	r2, [r3, #48]	@ 0x30
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2220      	movs	r2, #32
 8004d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d78:	f043 0204 	orr.w	r2, r3, #4
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e067      	b.n	8004e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d92:	d041      	beq.n	8004e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 8004d94:	f7fe fd5e 	bl	8003854 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d302      	bcc.n	8004daa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d136      	bne.n	8004e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	0c1b      	lsrs	r3, r3, #16
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d10c      	bne.n	8004dce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	43da      	mvns	r2, r3
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	bf14      	ite	ne
 8004dc6:	2301      	movne	r3, #1
 8004dc8:	2300      	moveq	r3, #0
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	e00b      	b.n	8004de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	699b      	ldr	r3, [r3, #24]
 8004dd4:	43da      	mvns	r2, r3
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	4013      	ands	r3, r2
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	bf14      	ite	ne
 8004de0:	2301      	movne	r3, #1
 8004de2:	2300      	moveq	r3, #0
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d016      	beq.n	8004e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	631a      	str	r2, [r3, #48]	@ 0x30
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2220      	movs	r2, #32
 8004df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e04:	f043 0220 	orr.w	r2, r3, #32
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	641a      	str	r2, [r3, #64]	@ 0x40
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004e14:	2301      	movs	r3, #1
 8004e16:	e021      	b.n	8004e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	0c1b      	lsrs	r3, r3, #16
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d10c      	bne.n	8004e3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	695b      	ldr	r3, [r3, #20]
 8004e28:	43da      	mvns	r2, r3
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	bf14      	ite	ne
 8004e34:	2301      	movne	r3, #1
 8004e36:	2300      	moveq	r3, #0
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	e00b      	b.n	8004e54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	43da      	mvns	r2, r3
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	4013      	ands	r3, r2
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	bf14      	ite	ne
 8004e4e:	2301      	movne	r3, #1
 8004e50:	2300      	moveq	r3, #0
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f47f af6d 	bne.w	8004d34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3710      	adds	r7, #16
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <I2C_WaitOnTXEFlagUntilTimeout>:
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
 8004e70:	e034      	b.n	8004edc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	f000 f8e3 	bl	800503e <I2C_IsAcknowledgeFailed>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d001      	beq.n	8004e82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e034      	b.n	8004eec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e88:	d028      	beq.n	8004edc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 8004e8a:	f7fe fce3 	bl	8003854 <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	68ba      	ldr	r2, [r7, #8]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d302      	bcc.n	8004ea0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d11d      	bne.n	8004edc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eaa:	2b80      	cmp	r3, #128	@ 0x80
 8004eac:	d016      	beq.n	8004edc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	631a      	str	r2, [r3, #48]	@ 0x30
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2220      	movs	r2, #32
 8004eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec8:	f043 0220 	orr.w	r2, r3, #32
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	641a      	str	r2, [r3, #64]	@ 0x40
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e007      	b.n	8004eec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ee6:	2b80      	cmp	r3, #128	@ 0x80
 8004ee8:	d1c3      	bne.n	8004e72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
 8004eea:	2300      	movs	r3, #0
 8004eec:	4618      	mov	r0, r3
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <I2C_WaitOnBTFFlagUntilTimeout>:
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
 8004f00:	e034      	b.n	8004f6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 8004f02:	68f8      	ldr	r0, [r7, #12]
 8004f04:	f000 f89b 	bl	800503e <I2C_IsAcknowledgeFailed>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d001      	beq.n	8004f12 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e034      	b.n	8004f7c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f18:	d028      	beq.n	8004f6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 8004f1a:	f7fe fc9b 	bl	8003854 <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	68ba      	ldr	r2, [r7, #8]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d302      	bcc.n	8004f30 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d11d      	bne.n	8004f6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	f003 0304 	and.w	r3, r3, #4
 8004f3a:	2b04      	cmp	r3, #4
 8004f3c:	d016      	beq.n	8004f6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2220      	movs	r2, #32
 8004f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f58:	f043 0220 	orr.w	r2, r3, #32
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e007      	b.n	8004f7c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	f003 0304 	and.w	r3, r3, #4
 8004f76:	2b04      	cmp	r3, #4
 8004f78:	d1c3      	bne.n	8004f02 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3710      	adds	r7, #16
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <I2C_WaitOnRXNEFlagUntilTimeout>:
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
 8004f90:	e049      	b.n	8005026 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	695b      	ldr	r3, [r3, #20]
 8004f98:	f003 0310 	and.w	r3, r3, #16
 8004f9c:	2b10      	cmp	r3, #16
 8004f9e:	d119      	bne.n	8004fd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f06f 0210 	mvn.w	r2, #16
 8004fa8:	615a      	str	r2, [r3, #20]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	631a      	str	r2, [r3, #48]	@ 0x30
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2220      	movs	r2, #32
 8004fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	641a      	str	r2, [r3, #64]	@ 0x40
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e030      	b.n	8005036 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
 8004fd4:	f7fe fc3e 	bl	8003854 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	68ba      	ldr	r2, [r7, #8]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d302      	bcc.n	8004fea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d11d      	bne.n	8005026 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	695b      	ldr	r3, [r3, #20]
 8004ff0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ff4:	2b40      	cmp	r3, #64	@ 0x40
 8004ff6:	d016      	beq.n	8005026 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	631a      	str	r2, [r3, #48]	@ 0x30
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2220      	movs	r2, #32
 8005002:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005012:	f043 0220 	orr.w	r2, r3, #32
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	641a      	str	r2, [r3, #64]	@ 0x40
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005022:	2301      	movs	r3, #1
 8005024:	e007      	b.n	8005036 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	695b      	ldr	r3, [r3, #20]
 800502c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005030:	2b40      	cmp	r3, #64	@ 0x40
 8005032:	d1ae      	bne.n	8004f92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
 8005034:	2300      	movs	r3, #0
 8005036:	4618      	mov	r0, r3
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <I2C_IsAcknowledgeFailed>:
 800503e:	b480      	push	{r7}
 8005040:	b083      	sub	sp, #12
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	695b      	ldr	r3, [r3, #20]
 800504c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005050:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005054:	d11b      	bne.n	800508e <I2C_IsAcknowledgeFailed+0x50>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800505e:	615a      	str	r2, [r3, #20]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	631a      	str	r2, [r3, #48]	@ 0x30
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2220      	movs	r2, #32
 800506a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800507a:	f043 0204 	orr.w	r2, r3, #4
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	641a      	str	r2, [r3, #64]	@ 0x40
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800508a:	2301      	movs	r3, #1
 800508c:	e000      	b.n	8005090 <I2C_IsAcknowledgeFailed+0x52>
 800508e:	2300      	movs	r3, #0
 8005090:	4618      	mov	r0, r3
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <HAL_I2CEx_ConfigAnalogFilter>:
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b20      	cmp	r3, #32
 80050b0:	d129      	bne.n	8005106 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2224      	movs	r2, #36	@ 0x24
 80050b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f022 0201 	bic.w	r2, r2, #1
 80050c8:	601a      	str	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 0210 	bic.w	r2, r2, #16
 80050d8:	625a      	str	r2, [r3, #36]	@ 0x24
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	683a      	ldr	r2, [r7, #0]
 80050e6:	430a      	orrs	r2, r1
 80050e8:	625a      	str	r2, [r3, #36]	@ 0x24
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f042 0201 	orr.w	r2, r2, #1
 80050f8:	601a      	str	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2220      	movs	r2, #32
 80050fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005102:	2300      	movs	r3, #0
 8005104:	e000      	b.n	8005108 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
 8005106:	2302      	movs	r3, #2
 8005108:	4618      	mov	r0, r3
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <HAL_I2CEx_ConfigDigitalFilter>:
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
 800511e:	2300      	movs	r3, #0
 8005120:	81fb      	strh	r3, [r7, #14]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b20      	cmp	r3, #32
 800512c:	d12a      	bne.n	8005184 <HAL_I2CEx_ConfigDigitalFilter+0x70>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2224      	movs	r2, #36	@ 0x24
 8005132:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f022 0201 	bic.w	r2, r2, #1
 8005144:	601a      	str	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800514c:	81fb      	strh	r3, [r7, #14]
 800514e:	89fb      	ldrh	r3, [r7, #14]
 8005150:	f023 030f 	bic.w	r3, r3, #15
 8005154:	81fb      	strh	r3, [r7, #14]
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	b29a      	uxth	r2, r3
 800515a:	89fb      	ldrh	r3, [r7, #14]
 800515c:	4313      	orrs	r3, r2
 800515e:	81fb      	strh	r3, [r7, #14]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	89fa      	ldrh	r2, [r7, #14]
 8005166:	625a      	str	r2, [r3, #36]	@ 0x24
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f042 0201 	orr.w	r2, r2, #1
 8005176:	601a      	str	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2220      	movs	r2, #32
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005180:	2300      	movs	r3, #0
 8005182:	e000      	b.n	8005186 <HAL_I2CEx_ConfigDigitalFilter+0x72>
 8005184:	2302      	movs	r3, #2
 8005186:	4618      	mov	r0, r3
 8005188:	3714      	adds	r7, #20
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
	...

08005194 <HAL_LTDC_Init>:
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <HAL_LTDC_Init+0x12>
 80051a2:	2301      	movs	r3, #1
 80051a4:	e0bf      	b.n	8005326 <HAL_LTDC_Init+0x192>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d106      	bne.n	80051c0 <HAL_LTDC_Init+0x2c>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f7fd fc84 	bl	8002ac8 <HAL_LTDC_MspInit>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2202      	movs	r2, #2
 80051c4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	699a      	ldr	r2, [r3, #24]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80051d6:	619a      	str	r2, [r3, #24]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6999      	ldr	r1, [r3, #24]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	685a      	ldr	r2, [r3, #4]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	431a      	orrs	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	431a      	orrs	r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	431a      	orrs	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	430a      	orrs	r2, r1
 80051fa:	619a      	str	r2, [r3, #24]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6899      	ldr	r1, [r3, #8]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	4b4a      	ldr	r3, [pc, #296]	@ (8005330 <HAL_LTDC_Init+0x19c>)
 8005208:	400b      	ands	r3, r1
 800520a:	6093      	str	r3, [r2, #8]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	041b      	lsls	r3, r3, #16
 8005212:	60fb      	str	r3, [r7, #12]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6899      	ldr	r1, [r3, #8]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	699a      	ldr	r2, [r3, #24]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	431a      	orrs	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	430a      	orrs	r2, r1
 8005228:	609a      	str	r2, [r3, #8]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68d9      	ldr	r1, [r3, #12]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	4b3e      	ldr	r3, [pc, #248]	@ (8005330 <HAL_LTDC_Init+0x19c>)
 8005236:	400b      	ands	r3, r1
 8005238:	60d3      	str	r3, [r2, #12]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	041b      	lsls	r3, r3, #16
 8005240:	60fb      	str	r3, [r7, #12]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68d9      	ldr	r1, [r3, #12]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a1a      	ldr	r2, [r3, #32]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	431a      	orrs	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	430a      	orrs	r2, r1
 8005256:	60da      	str	r2, [r3, #12]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	6919      	ldr	r1, [r3, #16]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	4b33      	ldr	r3, [pc, #204]	@ (8005330 <HAL_LTDC_Init+0x19c>)
 8005264:	400b      	ands	r3, r1
 8005266:	6113      	str	r3, [r2, #16]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800526c:	041b      	lsls	r3, r3, #16
 800526e:	60fb      	str	r3, [r7, #12]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	6919      	ldr	r1, [r3, #16]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	431a      	orrs	r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	430a      	orrs	r2, r1
 8005284:	611a      	str	r2, [r3, #16]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	6959      	ldr	r1, [r3, #20]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	4b27      	ldr	r3, [pc, #156]	@ (8005330 <HAL_LTDC_Init+0x19c>)
 8005292:	400b      	ands	r3, r1
 8005294:	6153      	str	r3, [r2, #20]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800529a:	041b      	lsls	r3, r3, #16
 800529c:	60fb      	str	r3, [r7, #12]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	6959      	ldr	r1, [r3, #20]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	431a      	orrs	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	430a      	orrs	r2, r1
 80052b2:	615a      	str	r2, [r3, #20]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80052ba:	021b      	lsls	r3, r3, #8
 80052bc:	60fb      	str	r3, [r7, #12]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80052c4:	041b      	lsls	r3, r3, #16
 80052c6:	60bb      	str	r3, [r7, #8]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80052d6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80052de:	68ba      	ldr	r2, [r7, #8]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80052ea:	431a      	orrs	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	430a      	orrs	r2, r1
 80052f2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f042 0206 	orr.w	r2, r2, #6
 8005302:	635a      	str	r2, [r3, #52]	@ 0x34
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	699a      	ldr	r2, [r3, #24]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f042 0201 	orr.w	r2, r2, #1
 8005312:	619a      	str	r2, [r3, #24]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
 8005324:	2300      	movs	r3, #0
 8005326:	4618      	mov	r0, r3
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	f000f800 	.word	0xf000f800

08005334 <HAL_LTDC_ConfigLayer>:
 8005334:	b5b0      	push	{r4, r5, r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8005346:	2b01      	cmp	r3, #1
 8005348:	d101      	bne.n	800534e <HAL_LTDC_ConfigLayer+0x1a>
 800534a:	2302      	movs	r3, #2
 800534c:	e02c      	b.n	80053a8 <HAL_LTDC_ConfigLayer+0x74>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2201      	movs	r2, #1
 8005352:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2202      	movs	r2, #2
 800535a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2134      	movs	r1, #52	@ 0x34
 8005364:	fb01 f303 	mul.w	r3, r1, r3
 8005368:	4413      	add	r3, r2
 800536a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	4614      	mov	r4, r2
 8005372:	461d      	mov	r5, r3
 8005374:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005376:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005378:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800537a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800537c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800537e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005380:	682b      	ldr	r3, [r5, #0]
 8005382:	6023      	str	r3, [r4, #0]
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	68b9      	ldr	r1, [r7, #8]
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f000 f811 	bl	80053b0 <LTDC_SetConfig>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2201      	movs	r2, #1
 8005394:	625a      	str	r2, [r3, #36]	@ 0x24
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
 80053a6:	2300      	movs	r3, #0
 80053a8:	4618      	mov	r0, r3
 80053aa:	3710      	adds	r7, #16
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bdb0      	pop	{r4, r5, r7, pc}

080053b0 <LTDC_SetConfig>:
 80053b0:	b480      	push	{r7}
 80053b2:	b089      	sub	sp, #36	@ 0x24
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	685a      	ldr	r2, [r3, #4]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	0c1b      	lsrs	r3, r3, #16
 80053c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053cc:	4413      	add	r3, r2
 80053ce:	041b      	lsls	r3, r3, #16
 80053d0:	61fb      	str	r3, [r7, #28]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	461a      	mov	r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	01db      	lsls	r3, r3, #7
 80053dc:	4413      	add	r3, r2
 80053de:	3384      	adds	r3, #132	@ 0x84
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	6812      	ldr	r2, [r2, #0]
 80053e6:	4611      	mov	r1, r2
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	01d2      	lsls	r2, r2, #7
 80053ec:	440a      	add	r2, r1
 80053ee:	3284      	adds	r2, #132	@ 0x84
 80053f0:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80053f4:	6053      	str	r3, [r2, #4]
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	0c1b      	lsrs	r3, r3, #16
 8005402:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005406:	4413      	add	r3, r2
 8005408:	1c5a      	adds	r2, r3, #1
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4619      	mov	r1, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	01db      	lsls	r3, r3, #7
 8005414:	440b      	add	r3, r1
 8005416:	3384      	adds	r3, #132	@ 0x84
 8005418:	4619      	mov	r1, r3
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	4313      	orrs	r3, r2
 800541e:	604b      	str	r3, [r1, #4]
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	68da      	ldr	r2, [r3, #12]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800542e:	4413      	add	r3, r2
 8005430:	041b      	lsls	r3, r3, #16
 8005432:	61fb      	str	r3, [r7, #28]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	461a      	mov	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	01db      	lsls	r3, r3, #7
 800543e:	4413      	add	r3, r2
 8005440:	3384      	adds	r3, #132	@ 0x84
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	6812      	ldr	r2, [r2, #0]
 8005448:	4611      	mov	r1, r2
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	01d2      	lsls	r2, r2, #7
 800544e:	440a      	add	r2, r1
 8005450:	3284      	adds	r2, #132	@ 0x84
 8005452:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005456:	6093      	str	r3, [r2, #8]
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	689a      	ldr	r2, [r3, #8]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005466:	4413      	add	r3, r2
 8005468:	1c5a      	adds	r2, r3, #1
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4619      	mov	r1, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	01db      	lsls	r3, r3, #7
 8005474:	440b      	add	r3, r1
 8005476:	3384      	adds	r3, #132	@ 0x84
 8005478:	4619      	mov	r1, r3
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	4313      	orrs	r3, r2
 800547e:	608b      	str	r3, [r1, #8]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	461a      	mov	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	01db      	lsls	r3, r3, #7
 800548a:	4413      	add	r3, r2
 800548c:	3384      	adds	r3, #132	@ 0x84
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	6812      	ldr	r2, [r2, #0]
 8005494:	4611      	mov	r1, r2
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	01d2      	lsls	r2, r2, #7
 800549a:	440a      	add	r2, r1
 800549c:	3284      	adds	r2, #132	@ 0x84
 800549e:	f023 0307 	bic.w	r3, r3, #7
 80054a2:	6113      	str	r3, [r2, #16]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	461a      	mov	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	01db      	lsls	r3, r3, #7
 80054ae:	4413      	add	r3, r2
 80054b0:	3384      	adds	r3, #132	@ 0x84
 80054b2:	461a      	mov	r2, r3
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	6113      	str	r3, [r2, #16]
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80054c0:	021b      	lsls	r3, r3, #8
 80054c2:	61fb      	str	r3, [r7, #28]
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80054ca:	041b      	lsls	r3, r3, #16
 80054cc:	61bb      	str	r3, [r7, #24]
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	061b      	lsls	r3, r3, #24
 80054d4:	617b      	str	r3, [r7, #20]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	461a      	mov	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	01db      	lsls	r3, r3, #7
 80054e0:	4413      	add	r3, r2
 80054e2:	3384      	adds	r3, #132	@ 0x84
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	461a      	mov	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	01db      	lsls	r3, r3, #7
 80054f0:	4413      	add	r3, r2
 80054f2:	3384      	adds	r3, #132	@ 0x84
 80054f4:	461a      	mov	r2, r3
 80054f6:	2300      	movs	r3, #0
 80054f8:	6193      	str	r3, [r2, #24]
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005500:	461a      	mov	r2, r3
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	431a      	orrs	r2, r3
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	431a      	orrs	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4619      	mov	r1, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	01db      	lsls	r3, r3, #7
 8005514:	440b      	add	r3, r1
 8005516:	3384      	adds	r3, #132	@ 0x84
 8005518:	4619      	mov	r1, r3
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	4313      	orrs	r3, r2
 800551e:	618b      	str	r3, [r1, #24]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	461a      	mov	r2, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	01db      	lsls	r3, r3, #7
 800552a:	4413      	add	r3, r2
 800552c:	3384      	adds	r3, #132	@ 0x84
 800552e:	695b      	ldr	r3, [r3, #20]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	6812      	ldr	r2, [r2, #0]
 8005534:	4611      	mov	r1, r2
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	01d2      	lsls	r2, r2, #7
 800553a:	440a      	add	r2, r1
 800553c:	3284      	adds	r2, #132	@ 0x84
 800553e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005542:	6153      	str	r3, [r2, #20]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	461a      	mov	r2, r3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	01db      	lsls	r3, r3, #7
 800554e:	4413      	add	r3, r2
 8005550:	3384      	adds	r3, #132	@ 0x84
 8005552:	461a      	mov	r2, r3
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	695b      	ldr	r3, [r3, #20]
 8005558:	6153      	str	r3, [r2, #20]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	461a      	mov	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	01db      	lsls	r3, r3, #7
 8005564:	4413      	add	r3, r2
 8005566:	3384      	adds	r3, #132	@ 0x84
 8005568:	69db      	ldr	r3, [r3, #28]
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	6812      	ldr	r2, [r2, #0]
 800556e:	4611      	mov	r1, r2
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	01d2      	lsls	r2, r2, #7
 8005574:	440a      	add	r2, r1
 8005576:	3284      	adds	r2, #132	@ 0x84
 8005578:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800557c:	f023 0307 	bic.w	r3, r3, #7
 8005580:	61d3      	str	r3, [r2, #28]
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	69da      	ldr	r2, [r3, #28]
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	68f9      	ldr	r1, [r7, #12]
 800558c:	6809      	ldr	r1, [r1, #0]
 800558e:	4608      	mov	r0, r1
 8005590:	6879      	ldr	r1, [r7, #4]
 8005592:	01c9      	lsls	r1, r1, #7
 8005594:	4401      	add	r1, r0
 8005596:	3184      	adds	r1, #132	@ 0x84
 8005598:	4313      	orrs	r3, r2
 800559a:	61cb      	str	r3, [r1, #28]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	461a      	mov	r2, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	01db      	lsls	r3, r3, #7
 80055a6:	4413      	add	r3, r2
 80055a8:	3384      	adds	r3, #132	@ 0x84
 80055aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	461a      	mov	r2, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	01db      	lsls	r3, r3, #7
 80055b6:	4413      	add	r3, r2
 80055b8:	3384      	adds	r3, #132	@ 0x84
 80055ba:	461a      	mov	r2, r3
 80055bc:	2300      	movs	r3, #0
 80055be:	6293      	str	r3, [r2, #40]	@ 0x28
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	461a      	mov	r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	01db      	lsls	r3, r3, #7
 80055ca:	4413      	add	r3, r2
 80055cc:	3384      	adds	r3, #132	@ 0x84
 80055ce:	461a      	mov	r2, r3
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d4:	6293      	str	r3, [r2, #40]	@ 0x28
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d102      	bne.n	80055e4 <LTDC_SetConfig+0x234>
 80055de:	2304      	movs	r3, #4
 80055e0:	61fb      	str	r3, [r7, #28]
 80055e2:	e01b      	b.n	800561c <LTDC_SetConfig+0x26c>
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d102      	bne.n	80055f2 <LTDC_SetConfig+0x242>
 80055ec:	2303      	movs	r3, #3
 80055ee:	61fb      	str	r3, [r7, #28]
 80055f0:	e014      	b.n	800561c <LTDC_SetConfig+0x26c>
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	2b04      	cmp	r3, #4
 80055f8:	d00b      	beq.n	8005612 <LTDC_SetConfig+0x262>
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d007      	beq.n	8005612 <LTDC_SetConfig+0x262>
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	2b03      	cmp	r3, #3
 8005608:	d003      	beq.n	8005612 <LTDC_SetConfig+0x262>
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	2b07      	cmp	r3, #7
 8005610:	d102      	bne.n	8005618 <LTDC_SetConfig+0x268>
 8005612:	2302      	movs	r3, #2
 8005614:	61fb      	str	r3, [r7, #28]
 8005616:	e001      	b.n	800561c <LTDC_SetConfig+0x26c>
 8005618:	2301      	movs	r3, #1
 800561a:	61fb      	str	r3, [r7, #28]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	461a      	mov	r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	01db      	lsls	r3, r3, #7
 8005626:	4413      	add	r3, r2
 8005628:	3384      	adds	r3, #132	@ 0x84
 800562a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	6812      	ldr	r2, [r2, #0]
 8005630:	4611      	mov	r1, r2
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	01d2      	lsls	r2, r2, #7
 8005636:	440a      	add	r2, r1
 8005638:	3284      	adds	r2, #132	@ 0x84
 800563a:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800563e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005644:	69fa      	ldr	r2, [r7, #28]
 8005646:	fb02 f303 	mul.w	r3, r2, r3
 800564a:	041a      	lsls	r2, r3, #16
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	6859      	ldr	r1, [r3, #4]
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	1acb      	subs	r3, r1, r3
 8005656:	69f9      	ldr	r1, [r7, #28]
 8005658:	fb01 f303 	mul.w	r3, r1, r3
 800565c:	3303      	adds	r3, #3
 800565e:	68f9      	ldr	r1, [r7, #12]
 8005660:	6809      	ldr	r1, [r1, #0]
 8005662:	4608      	mov	r0, r1
 8005664:	6879      	ldr	r1, [r7, #4]
 8005666:	01c9      	lsls	r1, r1, #7
 8005668:	4401      	add	r1, r0
 800566a:	3184      	adds	r1, #132	@ 0x84
 800566c:	4313      	orrs	r3, r2
 800566e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	461a      	mov	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	01db      	lsls	r3, r3, #7
 800567a:	4413      	add	r3, r2
 800567c:	3384      	adds	r3, #132	@ 0x84
 800567e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	6812      	ldr	r2, [r2, #0]
 8005684:	4611      	mov	r1, r2
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	01d2      	lsls	r2, r2, #7
 800568a:	440a      	add	r2, r1
 800568c:	3284      	adds	r2, #132	@ 0x84
 800568e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005692:	f023 0307 	bic.w	r3, r3, #7
 8005696:	6313      	str	r3, [r2, #48]	@ 0x30
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	461a      	mov	r2, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	01db      	lsls	r3, r3, #7
 80056a2:	4413      	add	r3, r2
 80056a4:	3384      	adds	r3, #132	@ 0x84
 80056a6:	461a      	mov	r2, r3
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	461a      	mov	r2, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	01db      	lsls	r3, r3, #7
 80056b8:	4413      	add	r3, r2
 80056ba:	3384      	adds	r3, #132	@ 0x84
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	6812      	ldr	r2, [r2, #0]
 80056c2:	4611      	mov	r1, r2
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	01d2      	lsls	r2, r2, #7
 80056c8:	440a      	add	r2, r1
 80056ca:	3284      	adds	r2, #132	@ 0x84
 80056cc:	f043 0301 	orr.w	r3, r3, #1
 80056d0:	6013      	str	r3, [r2, #0]
 80056d2:	bf00      	nop
 80056d4:	3724      	adds	r7, #36	@ 0x24
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
	...

080056e0 <HAL_RCC_OscConfig>:
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b086      	sub	sp, #24
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d101      	bne.n	80056f2 <HAL_RCC_OscConfig+0x12>
 80056ee:	2301      	movs	r3, #1
 80056f0:	e267      	b.n	8005bc2 <HAL_RCC_OscConfig+0x4e2>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d075      	beq.n	80057ea <HAL_RCC_OscConfig+0x10a>
 80056fe:	4b88      	ldr	r3, [pc, #544]	@ (8005920 <HAL_RCC_OscConfig+0x240>)
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	f003 030c 	and.w	r3, r3, #12
 8005706:	2b04      	cmp	r3, #4
 8005708:	d00c      	beq.n	8005724 <HAL_RCC_OscConfig+0x44>
 800570a:	4b85      	ldr	r3, [pc, #532]	@ (8005920 <HAL_RCC_OscConfig+0x240>)
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f003 030c 	and.w	r3, r3, #12
 8005712:	2b08      	cmp	r3, #8
 8005714:	d112      	bne.n	800573c <HAL_RCC_OscConfig+0x5c>
 8005716:	4b82      	ldr	r3, [pc, #520]	@ (8005920 <HAL_RCC_OscConfig+0x240>)
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800571e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005722:	d10b      	bne.n	800573c <HAL_RCC_OscConfig+0x5c>
 8005724:	4b7e      	ldr	r3, [pc, #504]	@ (8005920 <HAL_RCC_OscConfig+0x240>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d05b      	beq.n	80057e8 <HAL_RCC_OscConfig+0x108>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d157      	bne.n	80057e8 <HAL_RCC_OscConfig+0x108>
 8005738:	2301      	movs	r3, #1
 800573a:	e242      	b.n	8005bc2 <HAL_RCC_OscConfig+0x4e2>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005744:	d106      	bne.n	8005754 <HAL_RCC_OscConfig+0x74>
 8005746:	4b76      	ldr	r3, [pc, #472]	@ (8005920 <HAL_RCC_OscConfig+0x240>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a75      	ldr	r2, [pc, #468]	@ (8005920 <HAL_RCC_OscConfig+0x240>)
 800574c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005750:	6013      	str	r3, [r2, #0]
 8005752:	e01d      	b.n	8005790 <HAL_RCC_OscConfig+0xb0>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800575c:	d10c      	bne.n	8005778 <HAL_RCC_OscConfig+0x98>
 800575e:	4b70      	ldr	r3, [pc, #448]	@ (8005920 <HAL_RCC_OscConfig+0x240>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a6f      	ldr	r2, [pc, #444]	@ (8005920 <HAL_RCC_OscConfig+0x240>)
 8005764:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005768:	6013      	str	r3, [r2, #0]
 800576a:	4b6d      	ldr	r3, [pc, #436]	@ (8005920 <HAL_RCC_OscConfig+0x240>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a6c      	ldr	r2, [pc, #432]	@ (8005920 <HAL_RCC_OscConfig+0x240>)
 8005770:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005774:	6013      	str	r3, [r2, #0]
 8005776:	e00b      	b.n	8005790 <HAL_RCC_OscConfig+0xb0>
 8005778:	4b69      	ldr	r3, [pc, #420]	@ (8005920 <HAL_RCC_OscConfig+0x240>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a68      	ldr	r2, [pc, #416]	@ (8005920 <HAL_RCC_OscConfig+0x240>)
 800577e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005782:	6013      	str	r3, [r2, #0]
 8005784:	4b66      	ldr	r3, [pc, #408]	@ (8005920 <HAL_RCC_OscConfig+0x240>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a65      	ldr	r2, [pc, #404]	@ (8005920 <HAL_RCC_OscConfig+0x240>)
 800578a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800578e:	6013      	str	r3, [r2, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d013      	beq.n	80057c0 <HAL_RCC_OscConfig+0xe0>
 8005798:	f7fe f85c 	bl	8003854 <HAL_GetTick>
 800579c:	6138      	str	r0, [r7, #16]
 800579e:	e008      	b.n	80057b2 <HAL_RCC_OscConfig+0xd2>
 80057a0:	f7fe f858 	bl	8003854 <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	2b64      	cmp	r3, #100	@ 0x64
 80057ac:	d901      	bls.n	80057b2 <HAL_RCC_OscConfig+0xd2>
 80057ae:	2303      	movs	r3, #3
 80057b0:	e207      	b.n	8005bc2 <HAL_RCC_OscConfig+0x4e2>
 80057b2:	4b5b      	ldr	r3, [pc, #364]	@ (8005920 <HAL_RCC_OscConfig+0x240>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d0f0      	beq.n	80057a0 <HAL_RCC_OscConfig+0xc0>
 80057be:	e014      	b.n	80057ea <HAL_RCC_OscConfig+0x10a>
 80057c0:	f7fe f848 	bl	8003854 <HAL_GetTick>
 80057c4:	6138      	str	r0, [r7, #16]
 80057c6:	e008      	b.n	80057da <HAL_RCC_OscConfig+0xfa>
 80057c8:	f7fe f844 	bl	8003854 <HAL_GetTick>
 80057cc:	4602      	mov	r2, r0
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	2b64      	cmp	r3, #100	@ 0x64
 80057d4:	d901      	bls.n	80057da <HAL_RCC_OscConfig+0xfa>
 80057d6:	2303      	movs	r3, #3
 80057d8:	e1f3      	b.n	8005bc2 <HAL_RCC_OscConfig+0x4e2>
 80057da:	4b51      	ldr	r3, [pc, #324]	@ (8005920 <HAL_RCC_OscConfig+0x240>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d1f0      	bne.n	80057c8 <HAL_RCC_OscConfig+0xe8>
 80057e6:	e000      	b.n	80057ea <HAL_RCC_OscConfig+0x10a>
 80057e8:	bf00      	nop
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0302 	and.w	r3, r3, #2
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d063      	beq.n	80058be <HAL_RCC_OscConfig+0x1de>
 80057f6:	4b4a      	ldr	r3, [pc, #296]	@ (8005920 <HAL_RCC_OscConfig+0x240>)
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f003 030c 	and.w	r3, r3, #12
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00b      	beq.n	800581a <HAL_RCC_OscConfig+0x13a>
 8005802:	4b47      	ldr	r3, [pc, #284]	@ (8005920 <HAL_RCC_OscConfig+0x240>)
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	f003 030c 	and.w	r3, r3, #12
 800580a:	2b08      	cmp	r3, #8
 800580c:	d11c      	bne.n	8005848 <HAL_RCC_OscConfig+0x168>
 800580e:	4b44      	ldr	r3, [pc, #272]	@ (8005920 <HAL_RCC_OscConfig+0x240>)
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d116      	bne.n	8005848 <HAL_RCC_OscConfig+0x168>
 800581a:	4b41      	ldr	r3, [pc, #260]	@ (8005920 <HAL_RCC_OscConfig+0x240>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0302 	and.w	r3, r3, #2
 8005822:	2b00      	cmp	r3, #0
 8005824:	d005      	beq.n	8005832 <HAL_RCC_OscConfig+0x152>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	2b01      	cmp	r3, #1
 800582c:	d001      	beq.n	8005832 <HAL_RCC_OscConfig+0x152>
 800582e:	2301      	movs	r3, #1
 8005830:	e1c7      	b.n	8005bc2 <HAL_RCC_OscConfig+0x4e2>
 8005832:	4b3b      	ldr	r3, [pc, #236]	@ (8005920 <HAL_RCC_OscConfig+0x240>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	00db      	lsls	r3, r3, #3
 8005840:	4937      	ldr	r1, [pc, #220]	@ (8005920 <HAL_RCC_OscConfig+0x240>)
 8005842:	4313      	orrs	r3, r2
 8005844:	600b      	str	r3, [r1, #0]
 8005846:	e03a      	b.n	80058be <HAL_RCC_OscConfig+0x1de>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d020      	beq.n	8005892 <HAL_RCC_OscConfig+0x1b2>
 8005850:	4b34      	ldr	r3, [pc, #208]	@ (8005924 <HAL_RCC_OscConfig+0x244>)
 8005852:	2201      	movs	r2, #1
 8005854:	601a      	str	r2, [r3, #0]
 8005856:	f7fd fffd 	bl	8003854 <HAL_GetTick>
 800585a:	6138      	str	r0, [r7, #16]
 800585c:	e008      	b.n	8005870 <HAL_RCC_OscConfig+0x190>
 800585e:	f7fd fff9 	bl	8003854 <HAL_GetTick>
 8005862:	4602      	mov	r2, r0
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	2b02      	cmp	r3, #2
 800586a:	d901      	bls.n	8005870 <HAL_RCC_OscConfig+0x190>
 800586c:	2303      	movs	r3, #3
 800586e:	e1a8      	b.n	8005bc2 <HAL_RCC_OscConfig+0x4e2>
 8005870:	4b2b      	ldr	r3, [pc, #172]	@ (8005920 <HAL_RCC_OscConfig+0x240>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0302 	and.w	r3, r3, #2
 8005878:	2b00      	cmp	r3, #0
 800587a:	d0f0      	beq.n	800585e <HAL_RCC_OscConfig+0x17e>
 800587c:	4b28      	ldr	r3, [pc, #160]	@ (8005920 <HAL_RCC_OscConfig+0x240>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	00db      	lsls	r3, r3, #3
 800588a:	4925      	ldr	r1, [pc, #148]	@ (8005920 <HAL_RCC_OscConfig+0x240>)
 800588c:	4313      	orrs	r3, r2
 800588e:	600b      	str	r3, [r1, #0]
 8005890:	e015      	b.n	80058be <HAL_RCC_OscConfig+0x1de>
 8005892:	4b24      	ldr	r3, [pc, #144]	@ (8005924 <HAL_RCC_OscConfig+0x244>)
 8005894:	2200      	movs	r2, #0
 8005896:	601a      	str	r2, [r3, #0]
 8005898:	f7fd ffdc 	bl	8003854 <HAL_GetTick>
 800589c:	6138      	str	r0, [r7, #16]
 800589e:	e008      	b.n	80058b2 <HAL_RCC_OscConfig+0x1d2>
 80058a0:	f7fd ffd8 	bl	8003854 <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d901      	bls.n	80058b2 <HAL_RCC_OscConfig+0x1d2>
 80058ae:	2303      	movs	r3, #3
 80058b0:	e187      	b.n	8005bc2 <HAL_RCC_OscConfig+0x4e2>
 80058b2:	4b1b      	ldr	r3, [pc, #108]	@ (8005920 <HAL_RCC_OscConfig+0x240>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0302 	and.w	r3, r3, #2
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1f0      	bne.n	80058a0 <HAL_RCC_OscConfig+0x1c0>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0308 	and.w	r3, r3, #8
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d036      	beq.n	8005938 <HAL_RCC_OscConfig+0x258>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d016      	beq.n	8005900 <HAL_RCC_OscConfig+0x220>
 80058d2:	4b15      	ldr	r3, [pc, #84]	@ (8005928 <HAL_RCC_OscConfig+0x248>)
 80058d4:	2201      	movs	r2, #1
 80058d6:	601a      	str	r2, [r3, #0]
 80058d8:	f7fd ffbc 	bl	8003854 <HAL_GetTick>
 80058dc:	6138      	str	r0, [r7, #16]
 80058de:	e008      	b.n	80058f2 <HAL_RCC_OscConfig+0x212>
 80058e0:	f7fd ffb8 	bl	8003854 <HAL_GetTick>
 80058e4:	4602      	mov	r2, r0
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d901      	bls.n	80058f2 <HAL_RCC_OscConfig+0x212>
 80058ee:	2303      	movs	r3, #3
 80058f0:	e167      	b.n	8005bc2 <HAL_RCC_OscConfig+0x4e2>
 80058f2:	4b0b      	ldr	r3, [pc, #44]	@ (8005920 <HAL_RCC_OscConfig+0x240>)
 80058f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058f6:	f003 0302 	and.w	r3, r3, #2
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d0f0      	beq.n	80058e0 <HAL_RCC_OscConfig+0x200>
 80058fe:	e01b      	b.n	8005938 <HAL_RCC_OscConfig+0x258>
 8005900:	4b09      	ldr	r3, [pc, #36]	@ (8005928 <HAL_RCC_OscConfig+0x248>)
 8005902:	2200      	movs	r2, #0
 8005904:	601a      	str	r2, [r3, #0]
 8005906:	f7fd ffa5 	bl	8003854 <HAL_GetTick>
 800590a:	6138      	str	r0, [r7, #16]
 800590c:	e00e      	b.n	800592c <HAL_RCC_OscConfig+0x24c>
 800590e:	f7fd ffa1 	bl	8003854 <HAL_GetTick>
 8005912:	4602      	mov	r2, r0
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	2b02      	cmp	r3, #2
 800591a:	d907      	bls.n	800592c <HAL_RCC_OscConfig+0x24c>
 800591c:	2303      	movs	r3, #3
 800591e:	e150      	b.n	8005bc2 <HAL_RCC_OscConfig+0x4e2>
 8005920:	40023800 	.word	0x40023800
 8005924:	42470000 	.word	0x42470000
 8005928:	42470e80 	.word	0x42470e80
 800592c:	4b88      	ldr	r3, [pc, #544]	@ (8005b50 <HAL_RCC_OscConfig+0x470>)
 800592e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005930:	f003 0302 	and.w	r3, r3, #2
 8005934:	2b00      	cmp	r3, #0
 8005936:	d1ea      	bne.n	800590e <HAL_RCC_OscConfig+0x22e>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0304 	and.w	r3, r3, #4
 8005940:	2b00      	cmp	r3, #0
 8005942:	f000 8097 	beq.w	8005a74 <HAL_RCC_OscConfig+0x394>
 8005946:	2300      	movs	r3, #0
 8005948:	75fb      	strb	r3, [r7, #23]
 800594a:	4b81      	ldr	r3, [pc, #516]	@ (8005b50 <HAL_RCC_OscConfig+0x470>)
 800594c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800594e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d10f      	bne.n	8005976 <HAL_RCC_OscConfig+0x296>
 8005956:	2300      	movs	r3, #0
 8005958:	60bb      	str	r3, [r7, #8]
 800595a:	4b7d      	ldr	r3, [pc, #500]	@ (8005b50 <HAL_RCC_OscConfig+0x470>)
 800595c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800595e:	4a7c      	ldr	r2, [pc, #496]	@ (8005b50 <HAL_RCC_OscConfig+0x470>)
 8005960:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005964:	6413      	str	r3, [r2, #64]	@ 0x40
 8005966:	4b7a      	ldr	r3, [pc, #488]	@ (8005b50 <HAL_RCC_OscConfig+0x470>)
 8005968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800596a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800596e:	60bb      	str	r3, [r7, #8]
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	2301      	movs	r3, #1
 8005974:	75fb      	strb	r3, [r7, #23]
 8005976:	4b77      	ldr	r3, [pc, #476]	@ (8005b54 <HAL_RCC_OscConfig+0x474>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800597e:	2b00      	cmp	r3, #0
 8005980:	d118      	bne.n	80059b4 <HAL_RCC_OscConfig+0x2d4>
 8005982:	4b74      	ldr	r3, [pc, #464]	@ (8005b54 <HAL_RCC_OscConfig+0x474>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a73      	ldr	r2, [pc, #460]	@ (8005b54 <HAL_RCC_OscConfig+0x474>)
 8005988:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800598c:	6013      	str	r3, [r2, #0]
 800598e:	f7fd ff61 	bl	8003854 <HAL_GetTick>
 8005992:	6138      	str	r0, [r7, #16]
 8005994:	e008      	b.n	80059a8 <HAL_RCC_OscConfig+0x2c8>
 8005996:	f7fd ff5d 	bl	8003854 <HAL_GetTick>
 800599a:	4602      	mov	r2, r0
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	d901      	bls.n	80059a8 <HAL_RCC_OscConfig+0x2c8>
 80059a4:	2303      	movs	r3, #3
 80059a6:	e10c      	b.n	8005bc2 <HAL_RCC_OscConfig+0x4e2>
 80059a8:	4b6a      	ldr	r3, [pc, #424]	@ (8005b54 <HAL_RCC_OscConfig+0x474>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d0f0      	beq.n	8005996 <HAL_RCC_OscConfig+0x2b6>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d106      	bne.n	80059ca <HAL_RCC_OscConfig+0x2ea>
 80059bc:	4b64      	ldr	r3, [pc, #400]	@ (8005b50 <HAL_RCC_OscConfig+0x470>)
 80059be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059c0:	4a63      	ldr	r2, [pc, #396]	@ (8005b50 <HAL_RCC_OscConfig+0x470>)
 80059c2:	f043 0301 	orr.w	r3, r3, #1
 80059c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80059c8:	e01c      	b.n	8005a04 <HAL_RCC_OscConfig+0x324>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	2b05      	cmp	r3, #5
 80059d0:	d10c      	bne.n	80059ec <HAL_RCC_OscConfig+0x30c>
 80059d2:	4b5f      	ldr	r3, [pc, #380]	@ (8005b50 <HAL_RCC_OscConfig+0x470>)
 80059d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059d6:	4a5e      	ldr	r2, [pc, #376]	@ (8005b50 <HAL_RCC_OscConfig+0x470>)
 80059d8:	f043 0304 	orr.w	r3, r3, #4
 80059dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80059de:	4b5c      	ldr	r3, [pc, #368]	@ (8005b50 <HAL_RCC_OscConfig+0x470>)
 80059e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059e2:	4a5b      	ldr	r2, [pc, #364]	@ (8005b50 <HAL_RCC_OscConfig+0x470>)
 80059e4:	f043 0301 	orr.w	r3, r3, #1
 80059e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80059ea:	e00b      	b.n	8005a04 <HAL_RCC_OscConfig+0x324>
 80059ec:	4b58      	ldr	r3, [pc, #352]	@ (8005b50 <HAL_RCC_OscConfig+0x470>)
 80059ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059f0:	4a57      	ldr	r2, [pc, #348]	@ (8005b50 <HAL_RCC_OscConfig+0x470>)
 80059f2:	f023 0301 	bic.w	r3, r3, #1
 80059f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80059f8:	4b55      	ldr	r3, [pc, #340]	@ (8005b50 <HAL_RCC_OscConfig+0x470>)
 80059fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059fc:	4a54      	ldr	r2, [pc, #336]	@ (8005b50 <HAL_RCC_OscConfig+0x470>)
 80059fe:	f023 0304 	bic.w	r3, r3, #4
 8005a02:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d015      	beq.n	8005a38 <HAL_RCC_OscConfig+0x358>
 8005a0c:	f7fd ff22 	bl	8003854 <HAL_GetTick>
 8005a10:	6138      	str	r0, [r7, #16]
 8005a12:	e00a      	b.n	8005a2a <HAL_RCC_OscConfig+0x34a>
 8005a14:	f7fd ff1e 	bl	8003854 <HAL_GetTick>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d901      	bls.n	8005a2a <HAL_RCC_OscConfig+0x34a>
 8005a26:	2303      	movs	r3, #3
 8005a28:	e0cb      	b.n	8005bc2 <HAL_RCC_OscConfig+0x4e2>
 8005a2a:	4b49      	ldr	r3, [pc, #292]	@ (8005b50 <HAL_RCC_OscConfig+0x470>)
 8005a2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a2e:	f003 0302 	and.w	r3, r3, #2
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d0ee      	beq.n	8005a14 <HAL_RCC_OscConfig+0x334>
 8005a36:	e014      	b.n	8005a62 <HAL_RCC_OscConfig+0x382>
 8005a38:	f7fd ff0c 	bl	8003854 <HAL_GetTick>
 8005a3c:	6138      	str	r0, [r7, #16]
 8005a3e:	e00a      	b.n	8005a56 <HAL_RCC_OscConfig+0x376>
 8005a40:	f7fd ff08 	bl	8003854 <HAL_GetTick>
 8005a44:	4602      	mov	r2, r0
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d901      	bls.n	8005a56 <HAL_RCC_OscConfig+0x376>
 8005a52:	2303      	movs	r3, #3
 8005a54:	e0b5      	b.n	8005bc2 <HAL_RCC_OscConfig+0x4e2>
 8005a56:	4b3e      	ldr	r3, [pc, #248]	@ (8005b50 <HAL_RCC_OscConfig+0x470>)
 8005a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a5a:	f003 0302 	and.w	r3, r3, #2
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d1ee      	bne.n	8005a40 <HAL_RCC_OscConfig+0x360>
 8005a62:	7dfb      	ldrb	r3, [r7, #23]
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d105      	bne.n	8005a74 <HAL_RCC_OscConfig+0x394>
 8005a68:	4b39      	ldr	r3, [pc, #228]	@ (8005b50 <HAL_RCC_OscConfig+0x470>)
 8005a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a6c:	4a38      	ldr	r2, [pc, #224]	@ (8005b50 <HAL_RCC_OscConfig+0x470>)
 8005a6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a72:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f000 80a1 	beq.w	8005bc0 <HAL_RCC_OscConfig+0x4e0>
 8005a7e:	4b34      	ldr	r3, [pc, #208]	@ (8005b50 <HAL_RCC_OscConfig+0x470>)
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f003 030c 	and.w	r3, r3, #12
 8005a86:	2b08      	cmp	r3, #8
 8005a88:	d05c      	beq.n	8005b44 <HAL_RCC_OscConfig+0x464>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d141      	bne.n	8005b16 <HAL_RCC_OscConfig+0x436>
 8005a92:	4b31      	ldr	r3, [pc, #196]	@ (8005b58 <HAL_RCC_OscConfig+0x478>)
 8005a94:	2200      	movs	r2, #0
 8005a96:	601a      	str	r2, [r3, #0]
 8005a98:	f7fd fedc 	bl	8003854 <HAL_GetTick>
 8005a9c:	6138      	str	r0, [r7, #16]
 8005a9e:	e008      	b.n	8005ab2 <HAL_RCC_OscConfig+0x3d2>
 8005aa0:	f7fd fed8 	bl	8003854 <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d901      	bls.n	8005ab2 <HAL_RCC_OscConfig+0x3d2>
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e087      	b.n	8005bc2 <HAL_RCC_OscConfig+0x4e2>
 8005ab2:	4b27      	ldr	r3, [pc, #156]	@ (8005b50 <HAL_RCC_OscConfig+0x470>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1f0      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x3c0>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	69da      	ldr	r2, [r3, #28]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	431a      	orrs	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005acc:	019b      	lsls	r3, r3, #6
 8005ace:	431a      	orrs	r2, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ad4:	085b      	lsrs	r3, r3, #1
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	041b      	lsls	r3, r3, #16
 8005ada:	431a      	orrs	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae0:	061b      	lsls	r3, r3, #24
 8005ae2:	491b      	ldr	r1, [pc, #108]	@ (8005b50 <HAL_RCC_OscConfig+0x470>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	604b      	str	r3, [r1, #4]
 8005ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8005b58 <HAL_RCC_OscConfig+0x478>)
 8005aea:	2201      	movs	r2, #1
 8005aec:	601a      	str	r2, [r3, #0]
 8005aee:	f7fd feb1 	bl	8003854 <HAL_GetTick>
 8005af2:	6138      	str	r0, [r7, #16]
 8005af4:	e008      	b.n	8005b08 <HAL_RCC_OscConfig+0x428>
 8005af6:	f7fd fead 	bl	8003854 <HAL_GetTick>
 8005afa:	4602      	mov	r2, r0
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d901      	bls.n	8005b08 <HAL_RCC_OscConfig+0x428>
 8005b04:	2303      	movs	r3, #3
 8005b06:	e05c      	b.n	8005bc2 <HAL_RCC_OscConfig+0x4e2>
 8005b08:	4b11      	ldr	r3, [pc, #68]	@ (8005b50 <HAL_RCC_OscConfig+0x470>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d0f0      	beq.n	8005af6 <HAL_RCC_OscConfig+0x416>
 8005b14:	e054      	b.n	8005bc0 <HAL_RCC_OscConfig+0x4e0>
 8005b16:	4b10      	ldr	r3, [pc, #64]	@ (8005b58 <HAL_RCC_OscConfig+0x478>)
 8005b18:	2200      	movs	r2, #0
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	f7fd fe9a 	bl	8003854 <HAL_GetTick>
 8005b20:	6138      	str	r0, [r7, #16]
 8005b22:	e008      	b.n	8005b36 <HAL_RCC_OscConfig+0x456>
 8005b24:	f7fd fe96 	bl	8003854 <HAL_GetTick>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d901      	bls.n	8005b36 <HAL_RCC_OscConfig+0x456>
 8005b32:	2303      	movs	r3, #3
 8005b34:	e045      	b.n	8005bc2 <HAL_RCC_OscConfig+0x4e2>
 8005b36:	4b06      	ldr	r3, [pc, #24]	@ (8005b50 <HAL_RCC_OscConfig+0x470>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1f0      	bne.n	8005b24 <HAL_RCC_OscConfig+0x444>
 8005b42:	e03d      	b.n	8005bc0 <HAL_RCC_OscConfig+0x4e0>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d107      	bne.n	8005b5c <HAL_RCC_OscConfig+0x47c>
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e038      	b.n	8005bc2 <HAL_RCC_OscConfig+0x4e2>
 8005b50:	40023800 	.word	0x40023800
 8005b54:	40007000 	.word	0x40007000
 8005b58:	42470060 	.word	0x42470060
 8005b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8005bcc <HAL_RCC_OscConfig+0x4ec>)
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	60fb      	str	r3, [r7, #12]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d028      	beq.n	8005bbc <HAL_RCC_OscConfig+0x4dc>
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	69db      	ldr	r3, [r3, #28]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d121      	bne.n	8005bbc <HAL_RCC_OscConfig+0x4dc>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d11a      	bne.n	8005bbc <HAL_RCC_OscConfig+0x4dc>
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005b92:	0192      	lsls	r2, r2, #6
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d111      	bne.n	8005bbc <HAL_RCC_OscConfig+0x4dc>
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ba2:	085b      	lsrs	r3, r3, #1
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	041b      	lsls	r3, r3, #16
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d107      	bne.n	8005bbc <HAL_RCC_OscConfig+0x4dc>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bb6:	061b      	lsls	r3, r3, #24
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d001      	beq.n	8005bc0 <HAL_RCC_OscConfig+0x4e0>
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e000      	b.n	8005bc2 <HAL_RCC_OscConfig+0x4e2>
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3718      	adds	r7, #24
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	40023800 	.word	0x40023800

08005bd0 <HAL_RCC_ClockConfig>:
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d101      	bne.n	8005be4 <HAL_RCC_ClockConfig+0x14>
 8005be0:	2301      	movs	r3, #1
 8005be2:	e0cc      	b.n	8005d7e <HAL_RCC_ClockConfig+0x1ae>
 8005be4:	4b68      	ldr	r3, [pc, #416]	@ (8005d88 <HAL_RCC_ClockConfig+0x1b8>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 030f 	and.w	r3, r3, #15
 8005bec:	683a      	ldr	r2, [r7, #0]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d90c      	bls.n	8005c0c <HAL_RCC_ClockConfig+0x3c>
 8005bf2:	4b65      	ldr	r3, [pc, #404]	@ (8005d88 <HAL_RCC_ClockConfig+0x1b8>)
 8005bf4:	683a      	ldr	r2, [r7, #0]
 8005bf6:	b2d2      	uxtb	r2, r2
 8005bf8:	701a      	strb	r2, [r3, #0]
 8005bfa:	4b63      	ldr	r3, [pc, #396]	@ (8005d88 <HAL_RCC_ClockConfig+0x1b8>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 030f 	and.w	r3, r3, #15
 8005c02:	683a      	ldr	r2, [r7, #0]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d001      	beq.n	8005c0c <HAL_RCC_ClockConfig+0x3c>
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e0b8      	b.n	8005d7e <HAL_RCC_ClockConfig+0x1ae>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0302 	and.w	r3, r3, #2
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d020      	beq.n	8005c5a <HAL_RCC_ClockConfig+0x8a>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0304 	and.w	r3, r3, #4
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d005      	beq.n	8005c30 <HAL_RCC_ClockConfig+0x60>
 8005c24:	4b59      	ldr	r3, [pc, #356]	@ (8005d8c <HAL_RCC_ClockConfig+0x1bc>)
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	4a58      	ldr	r2, [pc, #352]	@ (8005d8c <HAL_RCC_ClockConfig+0x1bc>)
 8005c2a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005c2e:	6093      	str	r3, [r2, #8]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0308 	and.w	r3, r3, #8
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d005      	beq.n	8005c48 <HAL_RCC_ClockConfig+0x78>
 8005c3c:	4b53      	ldr	r3, [pc, #332]	@ (8005d8c <HAL_RCC_ClockConfig+0x1bc>)
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	4a52      	ldr	r2, [pc, #328]	@ (8005d8c <HAL_RCC_ClockConfig+0x1bc>)
 8005c42:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005c46:	6093      	str	r3, [r2, #8]
 8005c48:	4b50      	ldr	r3, [pc, #320]	@ (8005d8c <HAL_RCC_ClockConfig+0x1bc>)
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	494d      	ldr	r1, [pc, #308]	@ (8005d8c <HAL_RCC_ClockConfig+0x1bc>)
 8005c56:	4313      	orrs	r3, r2
 8005c58:	608b      	str	r3, [r1, #8]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d044      	beq.n	8005cf0 <HAL_RCC_ClockConfig+0x120>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d107      	bne.n	8005c7e <HAL_RCC_ClockConfig+0xae>
 8005c6e:	4b47      	ldr	r3, [pc, #284]	@ (8005d8c <HAL_RCC_ClockConfig+0x1bc>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d119      	bne.n	8005cae <HAL_RCC_ClockConfig+0xde>
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e07f      	b.n	8005d7e <HAL_RCC_ClockConfig+0x1ae>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d003      	beq.n	8005c8e <HAL_RCC_ClockConfig+0xbe>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	2b03      	cmp	r3, #3
 8005c8c:	d107      	bne.n	8005c9e <HAL_RCC_ClockConfig+0xce>
 8005c8e:	4b3f      	ldr	r3, [pc, #252]	@ (8005d8c <HAL_RCC_ClockConfig+0x1bc>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d109      	bne.n	8005cae <HAL_RCC_ClockConfig+0xde>
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e06f      	b.n	8005d7e <HAL_RCC_ClockConfig+0x1ae>
 8005c9e:	4b3b      	ldr	r3, [pc, #236]	@ (8005d8c <HAL_RCC_ClockConfig+0x1bc>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0302 	and.w	r3, r3, #2
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d101      	bne.n	8005cae <HAL_RCC_ClockConfig+0xde>
 8005caa:	2301      	movs	r3, #1
 8005cac:	e067      	b.n	8005d7e <HAL_RCC_ClockConfig+0x1ae>
 8005cae:	4b37      	ldr	r3, [pc, #220]	@ (8005d8c <HAL_RCC_ClockConfig+0x1bc>)
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	f023 0203 	bic.w	r2, r3, #3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	4934      	ldr	r1, [pc, #208]	@ (8005d8c <HAL_RCC_ClockConfig+0x1bc>)
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	608b      	str	r3, [r1, #8]
 8005cc0:	f7fd fdc8 	bl	8003854 <HAL_GetTick>
 8005cc4:	60f8      	str	r0, [r7, #12]
 8005cc6:	e00a      	b.n	8005cde <HAL_RCC_ClockConfig+0x10e>
 8005cc8:	f7fd fdc4 	bl	8003854 <HAL_GetTick>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d901      	bls.n	8005cde <HAL_RCC_ClockConfig+0x10e>
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e04f      	b.n	8005d7e <HAL_RCC_ClockConfig+0x1ae>
 8005cde:	4b2b      	ldr	r3, [pc, #172]	@ (8005d8c <HAL_RCC_ClockConfig+0x1bc>)
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	f003 020c 	and.w	r2, r3, #12
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d1eb      	bne.n	8005cc8 <HAL_RCC_ClockConfig+0xf8>
 8005cf0:	4b25      	ldr	r3, [pc, #148]	@ (8005d88 <HAL_RCC_ClockConfig+0x1b8>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 030f 	and.w	r3, r3, #15
 8005cf8:	683a      	ldr	r2, [r7, #0]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d20c      	bcs.n	8005d18 <HAL_RCC_ClockConfig+0x148>
 8005cfe:	4b22      	ldr	r3, [pc, #136]	@ (8005d88 <HAL_RCC_ClockConfig+0x1b8>)
 8005d00:	683a      	ldr	r2, [r7, #0]
 8005d02:	b2d2      	uxtb	r2, r2
 8005d04:	701a      	strb	r2, [r3, #0]
 8005d06:	4b20      	ldr	r3, [pc, #128]	@ (8005d88 <HAL_RCC_ClockConfig+0x1b8>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 030f 	and.w	r3, r3, #15
 8005d0e:	683a      	ldr	r2, [r7, #0]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d001      	beq.n	8005d18 <HAL_RCC_ClockConfig+0x148>
 8005d14:	2301      	movs	r3, #1
 8005d16:	e032      	b.n	8005d7e <HAL_RCC_ClockConfig+0x1ae>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0304 	and.w	r3, r3, #4
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d008      	beq.n	8005d36 <HAL_RCC_ClockConfig+0x166>
 8005d24:	4b19      	ldr	r3, [pc, #100]	@ (8005d8c <HAL_RCC_ClockConfig+0x1bc>)
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	4916      	ldr	r1, [pc, #88]	@ (8005d8c <HAL_RCC_ClockConfig+0x1bc>)
 8005d32:	4313      	orrs	r3, r2
 8005d34:	608b      	str	r3, [r1, #8]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0308 	and.w	r3, r3, #8
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d009      	beq.n	8005d56 <HAL_RCC_ClockConfig+0x186>
 8005d42:	4b12      	ldr	r3, [pc, #72]	@ (8005d8c <HAL_RCC_ClockConfig+0x1bc>)
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	00db      	lsls	r3, r3, #3
 8005d50:	490e      	ldr	r1, [pc, #56]	@ (8005d8c <HAL_RCC_ClockConfig+0x1bc>)
 8005d52:	4313      	orrs	r3, r2
 8005d54:	608b      	str	r3, [r1, #8]
 8005d56:	f000 f821 	bl	8005d9c <HAL_RCC_GetSysClockFreq>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8005d8c <HAL_RCC_ClockConfig+0x1bc>)
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	091b      	lsrs	r3, r3, #4
 8005d62:	f003 030f 	and.w	r3, r3, #15
 8005d66:	490a      	ldr	r1, [pc, #40]	@ (8005d90 <HAL_RCC_ClockConfig+0x1c0>)
 8005d68:	5ccb      	ldrb	r3, [r1, r3]
 8005d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d6e:	4a09      	ldr	r2, [pc, #36]	@ (8005d94 <HAL_RCC_ClockConfig+0x1c4>)
 8005d70:	6013      	str	r3, [r2, #0]
 8005d72:	4b09      	ldr	r3, [pc, #36]	@ (8005d98 <HAL_RCC_ClockConfig+0x1c8>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7fd fd28 	bl	80037cc <HAL_InitTick>
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	40023c00 	.word	0x40023c00
 8005d8c:	40023800 	.word	0x40023800
 8005d90:	08009fc4 	.word	0x08009fc4
 8005d94:	20000018 	.word	0x20000018
 8005d98:	2000001c 	.word	0x2000001c

08005d9c <HAL_RCC_GetSysClockFreq>:
 8005d9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005da0:	b094      	sub	sp, #80	@ 0x50
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	2300      	movs	r3, #0
 8005da6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005da8:	2300      	movs	r3, #0
 8005daa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005dac:	2300      	movs	r3, #0
 8005dae:	643b      	str	r3, [r7, #64]	@ 0x40
 8005db0:	2300      	movs	r3, #0
 8005db2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005db4:	4b79      	ldr	r3, [pc, #484]	@ (8005f9c <HAL_RCC_GetSysClockFreq+0x200>)
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	f003 030c 	and.w	r3, r3, #12
 8005dbc:	2b08      	cmp	r3, #8
 8005dbe:	d00d      	beq.n	8005ddc <HAL_RCC_GetSysClockFreq+0x40>
 8005dc0:	2b08      	cmp	r3, #8
 8005dc2:	f200 80e1 	bhi.w	8005f88 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d002      	beq.n	8005dd0 <HAL_RCC_GetSysClockFreq+0x34>
 8005dca:	2b04      	cmp	r3, #4
 8005dcc:	d003      	beq.n	8005dd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005dce:	e0db      	b.n	8005f88 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005dd0:	4b73      	ldr	r3, [pc, #460]	@ (8005fa0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005dd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dd4:	e0db      	b.n	8005f8e <HAL_RCC_GetSysClockFreq+0x1f2>
 8005dd6:	4b73      	ldr	r3, [pc, #460]	@ (8005fa4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005dd8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dda:	e0d8      	b.n	8005f8e <HAL_RCC_GetSysClockFreq+0x1f2>
 8005ddc:	4b6f      	ldr	r3, [pc, #444]	@ (8005f9c <HAL_RCC_GetSysClockFreq+0x200>)
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005de4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005de6:	4b6d      	ldr	r3, [pc, #436]	@ (8005f9c <HAL_RCC_GetSysClockFreq+0x200>)
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d063      	beq.n	8005eba <HAL_RCC_GetSysClockFreq+0x11e>
 8005df2:	4b6a      	ldr	r3, [pc, #424]	@ (8005f9c <HAL_RCC_GetSysClockFreq+0x200>)
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	099b      	lsrs	r3, r3, #6
 8005df8:	2200      	movs	r2, #0
 8005dfa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005dfc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005dfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e04:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e06:	2300      	movs	r3, #0
 8005e08:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e0a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005e0e:	4622      	mov	r2, r4
 8005e10:	462b      	mov	r3, r5
 8005e12:	f04f 0000 	mov.w	r0, #0
 8005e16:	f04f 0100 	mov.w	r1, #0
 8005e1a:	0159      	lsls	r1, r3, #5
 8005e1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e20:	0150      	lsls	r0, r2, #5
 8005e22:	4602      	mov	r2, r0
 8005e24:	460b      	mov	r3, r1
 8005e26:	4621      	mov	r1, r4
 8005e28:	1a51      	subs	r1, r2, r1
 8005e2a:	6139      	str	r1, [r7, #16]
 8005e2c:	4629      	mov	r1, r5
 8005e2e:	eb63 0301 	sbc.w	r3, r3, r1
 8005e32:	617b      	str	r3, [r7, #20]
 8005e34:	f04f 0200 	mov.w	r2, #0
 8005e38:	f04f 0300 	mov.w	r3, #0
 8005e3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e40:	4659      	mov	r1, fp
 8005e42:	018b      	lsls	r3, r1, #6
 8005e44:	4651      	mov	r1, sl
 8005e46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005e4a:	4651      	mov	r1, sl
 8005e4c:	018a      	lsls	r2, r1, #6
 8005e4e:	4651      	mov	r1, sl
 8005e50:	ebb2 0801 	subs.w	r8, r2, r1
 8005e54:	4659      	mov	r1, fp
 8005e56:	eb63 0901 	sbc.w	r9, r3, r1
 8005e5a:	f04f 0200 	mov.w	r2, #0
 8005e5e:	f04f 0300 	mov.w	r3, #0
 8005e62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e6e:	4690      	mov	r8, r2
 8005e70:	4699      	mov	r9, r3
 8005e72:	4623      	mov	r3, r4
 8005e74:	eb18 0303 	adds.w	r3, r8, r3
 8005e78:	60bb      	str	r3, [r7, #8]
 8005e7a:	462b      	mov	r3, r5
 8005e7c:	eb49 0303 	adc.w	r3, r9, r3
 8005e80:	60fb      	str	r3, [r7, #12]
 8005e82:	f04f 0200 	mov.w	r2, #0
 8005e86:	f04f 0300 	mov.w	r3, #0
 8005e8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005e8e:	4629      	mov	r1, r5
 8005e90:	024b      	lsls	r3, r1, #9
 8005e92:	4621      	mov	r1, r4
 8005e94:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005e98:	4621      	mov	r1, r4
 8005e9a:	024a      	lsls	r2, r1, #9
 8005e9c:	4610      	mov	r0, r2
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ea6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ea8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005eac:	f7fa f9f8 	bl	80002a0 <__aeabi_uldivmod>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005eb8:	e058      	b.n	8005f6c <HAL_RCC_GetSysClockFreq+0x1d0>
 8005eba:	4b38      	ldr	r3, [pc, #224]	@ (8005f9c <HAL_RCC_GetSysClockFreq+0x200>)
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	099b      	lsrs	r3, r3, #6
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	4611      	mov	r1, r2
 8005ec6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005eca:	623b      	str	r3, [r7, #32]
 8005ecc:	2300      	movs	r3, #0
 8005ece:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ed0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005ed4:	4642      	mov	r2, r8
 8005ed6:	464b      	mov	r3, r9
 8005ed8:	f04f 0000 	mov.w	r0, #0
 8005edc:	f04f 0100 	mov.w	r1, #0
 8005ee0:	0159      	lsls	r1, r3, #5
 8005ee2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ee6:	0150      	lsls	r0, r2, #5
 8005ee8:	4602      	mov	r2, r0
 8005eea:	460b      	mov	r3, r1
 8005eec:	4641      	mov	r1, r8
 8005eee:	ebb2 0a01 	subs.w	sl, r2, r1
 8005ef2:	4649      	mov	r1, r9
 8005ef4:	eb63 0b01 	sbc.w	fp, r3, r1
 8005ef8:	f04f 0200 	mov.w	r2, #0
 8005efc:	f04f 0300 	mov.w	r3, #0
 8005f00:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005f04:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005f08:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005f0c:	ebb2 040a 	subs.w	r4, r2, sl
 8005f10:	eb63 050b 	sbc.w	r5, r3, fp
 8005f14:	f04f 0200 	mov.w	r2, #0
 8005f18:	f04f 0300 	mov.w	r3, #0
 8005f1c:	00eb      	lsls	r3, r5, #3
 8005f1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f22:	00e2      	lsls	r2, r4, #3
 8005f24:	4614      	mov	r4, r2
 8005f26:	461d      	mov	r5, r3
 8005f28:	4643      	mov	r3, r8
 8005f2a:	18e3      	adds	r3, r4, r3
 8005f2c:	603b      	str	r3, [r7, #0]
 8005f2e:	464b      	mov	r3, r9
 8005f30:	eb45 0303 	adc.w	r3, r5, r3
 8005f34:	607b      	str	r3, [r7, #4]
 8005f36:	f04f 0200 	mov.w	r2, #0
 8005f3a:	f04f 0300 	mov.w	r3, #0
 8005f3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005f42:	4629      	mov	r1, r5
 8005f44:	028b      	lsls	r3, r1, #10
 8005f46:	4621      	mov	r1, r4
 8005f48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005f4c:	4621      	mov	r1, r4
 8005f4e:	028a      	lsls	r2, r1, #10
 8005f50:	4610      	mov	r0, r2
 8005f52:	4619      	mov	r1, r3
 8005f54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f56:	2200      	movs	r2, #0
 8005f58:	61bb      	str	r3, [r7, #24]
 8005f5a:	61fa      	str	r2, [r7, #28]
 8005f5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f60:	f7fa f99e 	bl	80002a0 <__aeabi_uldivmod>
 8005f64:	4602      	mov	r2, r0
 8005f66:	460b      	mov	r3, r1
 8005f68:	4613      	mov	r3, r2
 8005f6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8005f9c <HAL_RCC_GetSysClockFreq+0x200>)
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	0c1b      	lsrs	r3, r3, #16
 8005f72:	f003 0303 	and.w	r3, r3, #3
 8005f76:	3301      	adds	r3, #1
 8005f78:	005b      	lsls	r3, r3, #1
 8005f7a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f7c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005f7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f86:	e002      	b.n	8005f8e <HAL_RCC_GetSysClockFreq+0x1f2>
 8005f88:	4b05      	ldr	r3, [pc, #20]	@ (8005fa0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005f8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f8c:	bf00      	nop
 8005f8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f90:	4618      	mov	r0, r3
 8005f92:	3750      	adds	r7, #80	@ 0x50
 8005f94:	46bd      	mov	sp, r7
 8005f96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f9a:	bf00      	nop
 8005f9c:	40023800 	.word	0x40023800
 8005fa0:	00f42400 	.word	0x00f42400
 8005fa4:	007a1200 	.word	0x007a1200

08005fa8 <HAL_RCC_GetHCLKFreq>:
 8005fa8:	b480      	push	{r7}
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	4b03      	ldr	r3, [pc, #12]	@ (8005fbc <HAL_RCC_GetHCLKFreq+0x14>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	20000018 	.word	0x20000018

08005fc0 <HAL_RCC_GetPCLK1Freq>:
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	f7ff fff0 	bl	8005fa8 <HAL_RCC_GetHCLKFreq>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	4b05      	ldr	r3, [pc, #20]	@ (8005fe0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	0a9b      	lsrs	r3, r3, #10
 8005fd0:	f003 0307 	and.w	r3, r3, #7
 8005fd4:	4903      	ldr	r1, [pc, #12]	@ (8005fe4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fd6:	5ccb      	ldrb	r3, [r1, r3]
 8005fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8005fdc:	4618      	mov	r0, r3
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	40023800 	.word	0x40023800
 8005fe4:	08009fd4 	.word	0x08009fd4

08005fe8 <HAL_RCCEx_PeriphCLKConfig>:
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	617b      	str	r3, [r7, #20]
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	613b      	str	r3, [r7, #16]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0301 	and.w	r3, r3, #1
 8006000:	2b00      	cmp	r3, #0
 8006002:	d10b      	bne.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x34>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0302 	and.w	r3, r3, #2
 800600c:	2b00      	cmp	r3, #0
 800600e:	d105      	bne.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x34>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006018:	2b00      	cmp	r3, #0
 800601a:	d075      	beq.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x120>
 800601c:	4b91      	ldr	r3, [pc, #580]	@ (8006264 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800601e:	2200      	movs	r2, #0
 8006020:	601a      	str	r2, [r3, #0]
 8006022:	f7fd fc17 	bl	8003854 <HAL_GetTick>
 8006026:	6178      	str	r0, [r7, #20]
 8006028:	e008      	b.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x54>
 800602a:	f7fd fc13 	bl	8003854 <HAL_GetTick>
 800602e:	4602      	mov	r2, r0
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	2b02      	cmp	r3, #2
 8006036:	d901      	bls.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8006038:	2303      	movs	r3, #3
 800603a:	e189      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800603c:	4b8a      	ldr	r3, [pc, #552]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1f0      	bne.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 0301 	and.w	r3, r3, #1
 8006050:	2b00      	cmp	r3, #0
 8006052:	d009      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x80>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	019a      	lsls	r2, r3, #6
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	071b      	lsls	r3, r3, #28
 8006060:	4981      	ldr	r1, [pc, #516]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006062:	4313      	orrs	r3, r2
 8006064:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0302 	and.w	r3, r3, #2
 8006070:	2b00      	cmp	r3, #0
 8006072:	d01f      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8006074:	4b7c      	ldr	r3, [pc, #496]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006076:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800607a:	0f1b      	lsrs	r3, r3, #28
 800607c:	f003 0307 	and.w	r3, r3, #7
 8006080:	613b      	str	r3, [r7, #16]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	019a      	lsls	r2, r3, #6
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	061b      	lsls	r3, r3, #24
 800608e:	431a      	orrs	r2, r3
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	071b      	lsls	r3, r3, #28
 8006094:	4974      	ldr	r1, [pc, #464]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006096:	4313      	orrs	r3, r2
 8006098:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
 800609c:	4b72      	ldr	r3, [pc, #456]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800609e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80060a2:	f023 021f 	bic.w	r2, r3, #31
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	69db      	ldr	r3, [r3, #28]
 80060aa:	3b01      	subs	r3, #1
 80060ac:	496e      	ldr	r1, [pc, #440]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00d      	beq.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	019a      	lsls	r2, r3, #6
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	061b      	lsls	r3, r3, #24
 80060cc:	431a      	orrs	r2, r3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	071b      	lsls	r3, r3, #28
 80060d4:	4964      	ldr	r1, [pc, #400]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060d6:	4313      	orrs	r3, r2
 80060d8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
 80060dc:	4b61      	ldr	r3, [pc, #388]	@ (8006264 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80060de:	2201      	movs	r2, #1
 80060e0:	601a      	str	r2, [r3, #0]
 80060e2:	f7fd fbb7 	bl	8003854 <HAL_GetTick>
 80060e6:	6178      	str	r0, [r7, #20]
 80060e8:	e008      	b.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x114>
 80060ea:	f7fd fbb3 	bl	8003854 <HAL_GetTick>
 80060ee:	4602      	mov	r2, r0
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	d901      	bls.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x114>
 80060f8:	2303      	movs	r3, #3
 80060fa:	e129      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80060fc:	4b5a      	ldr	r3, [pc, #360]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006104:	2b00      	cmp	r3, #0
 8006106:	d0f0      	beq.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x102>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0304 	and.w	r3, r3, #4
 8006110:	2b00      	cmp	r3, #0
 8006112:	d105      	bne.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x138>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 0308 	and.w	r3, r3, #8
 800611c:	2b00      	cmp	r3, #0
 800611e:	d079      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8006120:	4b52      	ldr	r3, [pc, #328]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006122:	2200      	movs	r2, #0
 8006124:	601a      	str	r2, [r3, #0]
 8006126:	f7fd fb95 	bl	8003854 <HAL_GetTick>
 800612a:	6178      	str	r0, [r7, #20]
 800612c:	e008      	b.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x158>
 800612e:	f7fd fb91 	bl	8003854 <HAL_GetTick>
 8006132:	4602      	mov	r2, r0
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	2b02      	cmp	r3, #2
 800613a:	d901      	bls.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x158>
 800613c:	2303      	movs	r3, #3
 800613e:	e107      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006140:	4b49      	ldr	r3, [pc, #292]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006148:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800614c:	d0ef      	beq.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x146>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 0304 	and.w	r3, r3, #4
 8006156:	2b00      	cmp	r3, #0
 8006158:	d020      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800615a:	4b43      	ldr	r3, [pc, #268]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800615c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006160:	0f1b      	lsrs	r3, r3, #28
 8006162:	f003 0307 	and.w	r3, r3, #7
 8006166:	613b      	str	r3, [r7, #16]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	019a      	lsls	r2, r3, #6
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	695b      	ldr	r3, [r3, #20]
 8006172:	061b      	lsls	r3, r3, #24
 8006174:	431a      	orrs	r2, r3
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	071b      	lsls	r3, r3, #28
 800617a:	493b      	ldr	r1, [pc, #236]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800617c:	4313      	orrs	r3, r2
 800617e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006182:	4b39      	ldr	r3, [pc, #228]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006184:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006188:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a1b      	ldr	r3, [r3, #32]
 8006190:	3b01      	subs	r3, #1
 8006192:	021b      	lsls	r3, r3, #8
 8006194:	4934      	ldr	r1, [pc, #208]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006196:	4313      	orrs	r3, r2
 8006198:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0308 	and.w	r3, r3, #8
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d01e      	beq.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80061a8:	4b2f      	ldr	r3, [pc, #188]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061ae:	0e1b      	lsrs	r3, r3, #24
 80061b0:	f003 030f 	and.w	r3, r3, #15
 80061b4:	613b      	str	r3, [r7, #16]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	691b      	ldr	r3, [r3, #16]
 80061ba:	019a      	lsls	r2, r3, #6
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	061b      	lsls	r3, r3, #24
 80061c0:	431a      	orrs	r2, r3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	071b      	lsls	r3, r3, #28
 80061c8:	4927      	ldr	r1, [pc, #156]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061ca:	4313      	orrs	r3, r2
 80061cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80061d0:	4b25      	ldr	r3, [pc, #148]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80061d6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061de:	4922      	ldr	r1, [pc, #136]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061e0:	4313      	orrs	r3, r2
 80061e2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
 80061e6:	4b21      	ldr	r3, [pc, #132]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80061e8:	2201      	movs	r2, #1
 80061ea:	601a      	str	r2, [r3, #0]
 80061ec:	f7fd fb32 	bl	8003854 <HAL_GetTick>
 80061f0:	6178      	str	r0, [r7, #20]
 80061f2:	e008      	b.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80061f4:	f7fd fb2e 	bl	8003854 <HAL_GetTick>
 80061f8:	4602      	mov	r2, r0
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d901      	bls.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006202:	2303      	movs	r3, #3
 8006204:	e0a4      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006206:	4b18      	ldr	r3, [pc, #96]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800620e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006212:	d1ef      	bne.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 0320 	and.w	r3, r3, #32
 800621c:	2b00      	cmp	r3, #0
 800621e:	f000 808b 	beq.w	8006338 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8006222:	2300      	movs	r3, #0
 8006224:	60fb      	str	r3, [r7, #12]
 8006226:	4b10      	ldr	r3, [pc, #64]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800622a:	4a0f      	ldr	r2, [pc, #60]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800622c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006230:	6413      	str	r3, [r2, #64]	@ 0x40
 8006232:	4b0d      	ldr	r3, [pc, #52]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006236:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800623a:	60fb      	str	r3, [r7, #12]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	4b0c      	ldr	r3, [pc, #48]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a0b      	ldr	r2, [pc, #44]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006244:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006248:	6013      	str	r3, [r2, #0]
 800624a:	f7fd fb03 	bl	8003854 <HAL_GetTick>
 800624e:	6178      	str	r0, [r7, #20]
 8006250:	e010      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8006252:	f7fd faff 	bl	8003854 <HAL_GetTick>
 8006256:	4602      	mov	r2, r0
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	1ad3      	subs	r3, r2, r3
 800625c:	2b02      	cmp	r3, #2
 800625e:	d909      	bls.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8006260:	2303      	movs	r3, #3
 8006262:	e075      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006264:	42470068 	.word	0x42470068
 8006268:	40023800 	.word	0x40023800
 800626c:	42470070 	.word	0x42470070
 8006270:	40007000 	.word	0x40007000
 8006274:	4b38      	ldr	r3, [pc, #224]	@ (8006358 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800627c:	2b00      	cmp	r3, #0
 800627e:	d0e8      	beq.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006280:	4b36      	ldr	r3, [pc, #216]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006282:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006284:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006288:	613b      	str	r3, [r7, #16]
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d02f      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006294:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006298:	693a      	ldr	r2, [r7, #16]
 800629a:	429a      	cmp	r2, r3
 800629c:	d028      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 800629e:	4b2f      	ldr	r3, [pc, #188]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80062a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062a6:	613b      	str	r3, [r7, #16]
 80062a8:	4b2d      	ldr	r3, [pc, #180]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80062aa:	2201      	movs	r2, #1
 80062ac:	601a      	str	r2, [r3, #0]
 80062ae:	4b2c      	ldr	r3, [pc, #176]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80062b0:	2200      	movs	r2, #0
 80062b2:	601a      	str	r2, [r3, #0]
 80062b4:	4a29      	ldr	r2, [pc, #164]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80062ba:	4b28      	ldr	r3, [pc, #160]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80062bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062be:	f003 0301 	and.w	r3, r3, #1
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d114      	bne.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80062c6:	f7fd fac5 	bl	8003854 <HAL_GetTick>
 80062ca:	6178      	str	r0, [r7, #20]
 80062cc:	e00a      	b.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80062ce:	f7fd fac1 	bl	8003854 <HAL_GetTick>
 80062d2:	4602      	mov	r2, r0
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062dc:	4293      	cmp	r3, r2
 80062de:	d901      	bls.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80062e0:	2303      	movs	r3, #3
 80062e2:	e035      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80062e4:	4b1d      	ldr	r3, [pc, #116]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80062e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062e8:	f003 0302 	and.w	r3, r3, #2
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d0ee      	beq.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062fc:	d10d      	bne.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x332>
 80062fe:	4b17      	ldr	r3, [pc, #92]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800630a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800630e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006312:	4912      	ldr	r1, [pc, #72]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006314:	4313      	orrs	r3, r2
 8006316:	608b      	str	r3, [r1, #8]
 8006318:	e005      	b.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800631a:	4b10      	ldr	r3, [pc, #64]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	4a0f      	ldr	r2, [pc, #60]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006320:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006324:	6093      	str	r3, [r2, #8]
 8006326:	4b0d      	ldr	r3, [pc, #52]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006328:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800632e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006332:	490a      	ldr	r1, [pc, #40]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006334:	4313      	orrs	r3, r2
 8006336:	670b      	str	r3, [r1, #112]	@ 0x70
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 0310 	and.w	r3, r3, #16
 8006340:	2b00      	cmp	r3, #0
 8006342:	d004      	beq.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x366>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800634a:	4b06      	ldr	r3, [pc, #24]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800634c:	601a      	str	r2, [r3, #0]
 800634e:	2300      	movs	r3, #0
 8006350:	4618      	mov	r0, r3
 8006352:	3718      	adds	r7, #24
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	40007000 	.word	0x40007000
 800635c:	40023800 	.word	0x40023800
 8006360:	42470e40 	.word	0x42470e40
 8006364:	424711e0 	.word	0x424711e0

08006368 <HAL_RNG_Init>:
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d101      	bne.n	800637a <HAL_RNG_Init+0x12>
 8006376:	2301      	movs	r3, #1
 8006378:	e01c      	b.n	80063b4 <HAL_RNG_Init+0x4c>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	795b      	ldrb	r3, [r3, #5]
 800637e:	b2db      	uxtb	r3, r3
 8006380:	2b00      	cmp	r3, #0
 8006382:	d105      	bne.n	8006390 <HAL_RNG_Init+0x28>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	711a      	strb	r2, [r3, #4]
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f7fc fcc4 	bl	8002d18 <HAL_RNG_MspInit>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2202      	movs	r2, #2
 8006394:	715a      	strb	r2, [r3, #5]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f042 0204 	orr.w	r2, r2, #4
 80063a4:	601a      	str	r2, [r3, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2201      	movs	r2, #1
 80063aa:	715a      	strb	r2, [r3, #5]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	609a      	str	r2, [r3, #8]
 80063b2:	2300      	movs	r3, #0
 80063b4:	4618      	mov	r0, r3
 80063b6:	3708      	adds	r7, #8
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <HAL_RNG_GenerateRandomNumber>:
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
 80063c6:	2300      	movs	r3, #0
 80063c8:	73fb      	strb	r3, [r7, #15]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	791b      	ldrb	r3, [r3, #4]
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d101      	bne.n	80063d6 <HAL_RNG_GenerateRandomNumber+0x1a>
 80063d2:	2302      	movs	r3, #2
 80063d4:	e044      	b.n	8006460 <HAL_RNG_GenerateRandomNumber+0xa4>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2201      	movs	r2, #1
 80063da:	711a      	strb	r2, [r3, #4]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	795b      	ldrb	r3, [r3, #5]
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d133      	bne.n	800644e <HAL_RNG_GenerateRandomNumber+0x92>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2202      	movs	r2, #2
 80063ea:	715a      	strb	r2, [r3, #5]
 80063ec:	f7fd fa32 	bl	8003854 <HAL_GetTick>
 80063f0:	60b8      	str	r0, [r7, #8]
 80063f2:	e018      	b.n	8006426 <HAL_RNG_GenerateRandomNumber+0x6a>
 80063f4:	f7fd fa2e 	bl	8003854 <HAL_GetTick>
 80063f8:	4602      	mov	r2, r0
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	2b02      	cmp	r3, #2
 8006400:	d911      	bls.n	8006426 <HAL_RNG_GenerateRandomNumber+0x6a>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	f003 0301 	and.w	r3, r3, #1
 800640c:	2b01      	cmp	r3, #1
 800640e:	d00a      	beq.n	8006426 <HAL_RNG_GenerateRandomNumber+0x6a>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	715a      	strb	r2, [r3, #5]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2202      	movs	r2, #2
 800641a:	609a      	str	r2, [r3, #8]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	711a      	strb	r2, [r3, #4]
 8006422:	2301      	movs	r3, #1
 8006424:	e01c      	b.n	8006460 <HAL_RNG_GenerateRandomNumber+0xa4>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	f003 0301 	and.w	r3, r3, #1
 8006430:	2b01      	cmp	r3, #1
 8006432:	d1df      	bne.n	80063f4 <HAL_RNG_GenerateRandomNumber+0x38>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	689a      	ldr	r2, [r3, #8]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	60da      	str	r2, [r3, #12]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	68da      	ldr	r2, [r3, #12]
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	601a      	str	r2, [r3, #0]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2201      	movs	r2, #1
 800644a:	715a      	strb	r2, [r3, #5]
 800644c:	e004      	b.n	8006458 <HAL_RNG_GenerateRandomNumber+0x9c>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2204      	movs	r2, #4
 8006452:	609a      	str	r2, [r3, #8]
 8006454:	2301      	movs	r3, #1
 8006456:	73fb      	strb	r3, [r7, #15]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	711a      	strb	r2, [r3, #4]
 800645e:	7bfb      	ldrb	r3, [r7, #15]
 8006460:	4618      	mov	r0, r3
 8006462:	3710      	adds	r7, #16
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <HAL_SPI_Init>:
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d101      	bne.n	800647a <HAL_SPI_Init+0x12>
 8006476:	2301      	movs	r3, #1
 8006478:	e07b      	b.n	8006572 <HAL_SPI_Init+0x10a>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800647e:	2b00      	cmp	r3, #0
 8006480:	d108      	bne.n	8006494 <HAL_SPI_Init+0x2c>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800648a:	d009      	beq.n	80064a0 <HAL_SPI_Init+0x38>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	61da      	str	r2, [r3, #28]
 8006492:	e005      	b.n	80064a0 <HAL_SPI_Init+0x38>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	611a      	str	r2, [r3, #16]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	615a      	str	r2, [r3, #20]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	629a      	str	r2, [r3, #40]	@ 0x28
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d106      	bne.n	80064c0 <HAL_SPI_Init+0x58>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f7fc fc4e 	bl	8002d5c <HAL_SPI_MspInit>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2202      	movs	r2, #2
 80064c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80064d6:	601a      	str	r2, [r3, #0]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80064e8:	431a      	orrs	r2, r3
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80064f2:	431a      	orrs	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	f003 0302 	and.w	r3, r3, #2
 80064fc:	431a      	orrs	r2, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	695b      	ldr	r3, [r3, #20]
 8006502:	f003 0301 	and.w	r3, r3, #1
 8006506:	431a      	orrs	r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	699b      	ldr	r3, [r3, #24]
 800650c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006510:	431a      	orrs	r2, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	69db      	ldr	r3, [r3, #28]
 8006516:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800651a:	431a      	orrs	r2, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6a1b      	ldr	r3, [r3, #32]
 8006520:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006524:	ea42 0103 	orr.w	r1, r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800652c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	430a      	orrs	r2, r1
 8006536:	601a      	str	r2, [r3, #0]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	699b      	ldr	r3, [r3, #24]
 800653c:	0c1b      	lsrs	r3, r3, #16
 800653e:	f003 0104 	and.w	r1, r3, #4
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006546:	f003 0210 	and.w	r2, r3, #16
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	430a      	orrs	r2, r1
 8006550:	605a      	str	r2, [r3, #4]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	69da      	ldr	r2, [r3, #28]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006560:	61da      	str	r2, [r3, #28]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	655a      	str	r2, [r3, #84]	@ 0x54
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8006570:	2300      	movs	r3, #0
 8006572:	4618      	mov	r0, r3
 8006574:	3708      	adds	r7, #8
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}

0800657a <HAL_SPI_DeInit>:
 800657a:	b580      	push	{r7, lr}
 800657c:	b082      	sub	sp, #8
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d101      	bne.n	800658c <HAL_SPI_DeInit+0x12>
 8006588:	2301      	movs	r3, #1
 800658a:	e01a      	b.n	80065c2 <HAL_SPI_DeInit+0x48>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2202      	movs	r2, #2
 8006590:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065a2:	601a      	str	r2, [r3, #0]
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f7fc fc21 	bl	8002dec <HAL_SPI_MspDeInit>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	655a      	str	r2, [r3, #84]	@ 0x54
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80065c0:	2300      	movs	r3, #0
 80065c2:	4618      	mov	r0, r3
 80065c4:	3708      	adds	r7, #8
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <HAL_SPI_Transmit>:
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b088      	sub	sp, #32
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	60f8      	str	r0, [r7, #12]
 80065d2:	60b9      	str	r1, [r7, #8]
 80065d4:	603b      	str	r3, [r7, #0]
 80065d6:	4613      	mov	r3, r2
 80065d8:	80fb      	strh	r3, [r7, #6]
 80065da:	f7fd f93b 	bl	8003854 <HAL_GetTick>
 80065de:	61f8      	str	r0, [r7, #28]
 80065e0:	88fb      	ldrh	r3, [r7, #6]
 80065e2:	837b      	strh	r3, [r7, #26]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d001      	beq.n	80065f4 <HAL_SPI_Transmit+0x2a>
 80065f0:	2302      	movs	r3, #2
 80065f2:	e12a      	b.n	800684a <HAL_SPI_Transmit+0x280>
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d002      	beq.n	8006600 <HAL_SPI_Transmit+0x36>
 80065fa:	88fb      	ldrh	r3, [r7, #6]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d101      	bne.n	8006604 <HAL_SPI_Transmit+0x3a>
 8006600:	2301      	movs	r3, #1
 8006602:	e122      	b.n	800684a <HAL_SPI_Transmit+0x280>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800660a:	2b01      	cmp	r3, #1
 800660c:	d101      	bne.n	8006612 <HAL_SPI_Transmit+0x48>
 800660e:	2302      	movs	r3, #2
 8006610:	e11b      	b.n	800684a <HAL_SPI_Transmit+0x280>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2201      	movs	r2, #1
 8006616:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2203      	movs	r2, #3
 800661e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	655a      	str	r2, [r3, #84]	@ 0x54
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	68ba      	ldr	r2, [r7, #8]
 800662c:	631a      	str	r2, [r3, #48]	@ 0x30
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	88fa      	ldrh	r2, [r7, #6]
 8006632:	869a      	strh	r2, [r3, #52]	@ 0x34
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	88fa      	ldrh	r2, [r7, #6]
 8006638:	86da      	strh	r2, [r3, #54]	@ 0x36
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2200      	movs	r2, #0
 800663e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2200      	movs	r2, #0
 8006644:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2200      	movs	r2, #0
 8006650:	645a      	str	r2, [r3, #68]	@ 0x44
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2200      	movs	r2, #0
 8006656:	641a      	str	r2, [r3, #64]	@ 0x40
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006660:	d10f      	bne.n	8006682 <HAL_SPI_Transmit+0xb8>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006670:	601a      	str	r2, [r3, #0]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006680:	601a      	str	r2, [r3, #0]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800668c:	2b40      	cmp	r3, #64	@ 0x40
 800668e:	d007      	beq.n	80066a0 <HAL_SPI_Transmit+0xd6>
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800669e:	601a      	str	r2, [r3, #0]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066a8:	d152      	bne.n	8006750 <HAL_SPI_Transmit+0x186>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d002      	beq.n	80066b8 <HAL_SPI_Transmit+0xee>
 80066b2:	8b7b      	ldrh	r3, [r7, #26]
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d145      	bne.n	8006744 <HAL_SPI_Transmit+0x17a>
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066bc:	881a      	ldrh	r2, [r3, #0]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	60da      	str	r2, [r3, #12]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066c8:	1c9a      	adds	r2, r3, #2
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	3b01      	subs	r3, #1
 80066d6:	b29a      	uxth	r2, r3
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	86da      	strh	r2, [r3, #54]	@ 0x36
 80066dc:	e032      	b.n	8006744 <HAL_SPI_Transmit+0x17a>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	f003 0302 	and.w	r3, r3, #2
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d112      	bne.n	8006712 <HAL_SPI_Transmit+0x148>
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066f0:	881a      	ldrh	r2, [r3, #0]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	60da      	str	r2, [r3, #12]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066fc:	1c9a      	adds	r2, r3, #2
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	631a      	str	r2, [r3, #48]	@ 0x30
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006706:	b29b      	uxth	r3, r3
 8006708:	3b01      	subs	r3, #1
 800670a:	b29a      	uxth	r2, r3
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006710:	e018      	b.n	8006744 <HAL_SPI_Transmit+0x17a>
 8006712:	f7fd f89f 	bl	8003854 <HAL_GetTick>
 8006716:	4602      	mov	r2, r0
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	1ad3      	subs	r3, r2, r3
 800671c:	683a      	ldr	r2, [r7, #0]
 800671e:	429a      	cmp	r2, r3
 8006720:	d803      	bhi.n	800672a <HAL_SPI_Transmit+0x160>
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006728:	d102      	bne.n	8006730 <HAL_SPI_Transmit+0x166>
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d109      	bne.n	8006744 <HAL_SPI_Transmit+0x17a>
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2200      	movs	r2, #0
 800673c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8006740:	2303      	movs	r3, #3
 8006742:	e082      	b.n	800684a <HAL_SPI_Transmit+0x280>
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006748:	b29b      	uxth	r3, r3
 800674a:	2b00      	cmp	r3, #0
 800674c:	d1c7      	bne.n	80066de <HAL_SPI_Transmit+0x114>
 800674e:	e053      	b.n	80067f8 <HAL_SPI_Transmit+0x22e>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d002      	beq.n	800675e <HAL_SPI_Transmit+0x194>
 8006758:	8b7b      	ldrh	r3, [r7, #26]
 800675a:	2b01      	cmp	r3, #1
 800675c:	d147      	bne.n	80067ee <HAL_SPI_Transmit+0x224>
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	330c      	adds	r3, #12
 8006768:	7812      	ldrb	r2, [r2, #0]
 800676a:	701a      	strb	r2, [r3, #0]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006770:	1c5a      	adds	r2, r3, #1
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	631a      	str	r2, [r3, #48]	@ 0x30
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800677a:	b29b      	uxth	r3, r3
 800677c:	3b01      	subs	r3, #1
 800677e:	b29a      	uxth	r2, r3
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006784:	e033      	b.n	80067ee <HAL_SPI_Transmit+0x224>
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	f003 0302 	and.w	r3, r3, #2
 8006790:	2b02      	cmp	r3, #2
 8006792:	d113      	bne.n	80067bc <HAL_SPI_Transmit+0x1f2>
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	330c      	adds	r3, #12
 800679e:	7812      	ldrb	r2, [r2, #0]
 80067a0:	701a      	strb	r2, [r3, #0]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067a6:	1c5a      	adds	r2, r3, #1
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	3b01      	subs	r3, #1
 80067b4:	b29a      	uxth	r2, r3
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80067ba:	e018      	b.n	80067ee <HAL_SPI_Transmit+0x224>
 80067bc:	f7fd f84a 	bl	8003854 <HAL_GetTick>
 80067c0:	4602      	mov	r2, r0
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	683a      	ldr	r2, [r7, #0]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d803      	bhi.n	80067d4 <HAL_SPI_Transmit+0x20a>
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80067d2:	d102      	bne.n	80067da <HAL_SPI_Transmit+0x210>
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d109      	bne.n	80067ee <HAL_SPI_Transmit+0x224>
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2201      	movs	r2, #1
 80067de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80067ea:	2303      	movs	r3, #3
 80067ec:	e02d      	b.n	800684a <HAL_SPI_Transmit+0x280>
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d1c6      	bne.n	8006786 <HAL_SPI_Transmit+0x1bc>
 80067f8:	69fa      	ldr	r2, [r7, #28]
 80067fa:	6839      	ldr	r1, [r7, #0]
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	f000 f8bf 	bl	8006980 <SPI_EndRxTxTransaction>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d002      	beq.n	800680e <HAL_SPI_Transmit+0x244>
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2220      	movs	r2, #32
 800680c:	655a      	str	r2, [r3, #84]	@ 0x54
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d10a      	bne.n	800682c <HAL_SPI_Transmit+0x262>
 8006816:	2300      	movs	r3, #0
 8006818:	617b      	str	r3, [r7, #20]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	617b      	str	r3, [r7, #20]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	617b      	str	r3, [r7, #20]
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2200      	movs	r2, #0
 8006838:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006840:	2b00      	cmp	r3, #0
 8006842:	d001      	beq.n	8006848 <HAL_SPI_Transmit+0x27e>
 8006844:	2301      	movs	r3, #1
 8006846:	e000      	b.n	800684a <HAL_SPI_Transmit+0x280>
 8006848:	2300      	movs	r3, #0
 800684a:	4618      	mov	r0, r3
 800684c:	3720      	adds	r7, #32
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}

08006852 <HAL_SPI_GetState>:
 8006852:	b480      	push	{r7}
 8006854:	b083      	sub	sp, #12
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006860:	b2db      	uxtb	r3, r3
 8006862:	4618      	mov	r0, r3
 8006864:	370c      	adds	r7, #12
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
	...

08006870 <SPI_WaitFlagStateUntilTimeout>:
 8006870:	b580      	push	{r7, lr}
 8006872:	b088      	sub	sp, #32
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	603b      	str	r3, [r7, #0]
 800687c:	4613      	mov	r3, r2
 800687e:	71fb      	strb	r3, [r7, #7]
 8006880:	f7fc ffe8 	bl	8003854 <HAL_GetTick>
 8006884:	4602      	mov	r2, r0
 8006886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006888:	1a9b      	subs	r3, r3, r2
 800688a:	683a      	ldr	r2, [r7, #0]
 800688c:	4413      	add	r3, r2
 800688e:	61fb      	str	r3, [r7, #28]
 8006890:	f7fc ffe0 	bl	8003854 <HAL_GetTick>
 8006894:	61b8      	str	r0, [r7, #24]
 8006896:	4b39      	ldr	r3, [pc, #228]	@ (800697c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	015b      	lsls	r3, r3, #5
 800689c:	0d1b      	lsrs	r3, r3, #20
 800689e:	69fa      	ldr	r2, [r7, #28]
 80068a0:	fb02 f303 	mul.w	r3, r2, r3
 80068a4:	617b      	str	r3, [r7, #20]
 80068a6:	e054      	b.n	8006952 <SPI_WaitFlagStateUntilTimeout+0xe2>
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80068ae:	d050      	beq.n	8006952 <SPI_WaitFlagStateUntilTimeout+0xe2>
 80068b0:	f7fc ffd0 	bl	8003854 <HAL_GetTick>
 80068b4:	4602      	mov	r2, r0
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	69fa      	ldr	r2, [r7, #28]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d902      	bls.n	80068c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d13d      	bne.n	8006942 <SPI_WaitFlagStateUntilTimeout+0xd2>
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	685a      	ldr	r2, [r3, #4]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80068d4:	605a      	str	r2, [r3, #4]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80068de:	d111      	bne.n	8006904 <SPI_WaitFlagStateUntilTimeout+0x94>
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068e8:	d004      	beq.n	80068f4 <SPI_WaitFlagStateUntilTimeout+0x84>
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068f2:	d107      	bne.n	8006904 <SPI_WaitFlagStateUntilTimeout+0x94>
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006902:	601a      	str	r2, [r3, #0]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006908:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800690c:	d10f      	bne.n	800692e <SPI_WaitFlagStateUntilTimeout+0xbe>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800691c:	601a      	str	r2, [r3, #0]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800692c:	601a      	str	r2, [r3, #0]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2201      	movs	r2, #1
 8006932:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800693e:	2303      	movs	r3, #3
 8006940:	e017      	b.n	8006972 <SPI_WaitFlagStateUntilTimeout+0x102>
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d101      	bne.n	800694c <SPI_WaitFlagStateUntilTimeout+0xdc>
 8006948:	2300      	movs	r3, #0
 800694a:	61fb      	str	r3, [r7, #28]
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	3b01      	subs	r3, #1
 8006950:	617b      	str	r3, [r7, #20]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	689a      	ldr	r2, [r3, #8]
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	4013      	ands	r3, r2
 800695c:	68ba      	ldr	r2, [r7, #8]
 800695e:	429a      	cmp	r2, r3
 8006960:	bf0c      	ite	eq
 8006962:	2301      	moveq	r3, #1
 8006964:	2300      	movne	r3, #0
 8006966:	b2db      	uxtb	r3, r3
 8006968:	461a      	mov	r2, r3
 800696a:	79fb      	ldrb	r3, [r7, #7]
 800696c:	429a      	cmp	r2, r3
 800696e:	d19b      	bne.n	80068a8 <SPI_WaitFlagStateUntilTimeout+0x38>
 8006970:	2300      	movs	r3, #0
 8006972:	4618      	mov	r0, r3
 8006974:	3720      	adds	r7, #32
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	20000018 	.word	0x20000018

08006980 <SPI_EndRxTxTransaction>:
 8006980:	b580      	push	{r7, lr}
 8006982:	b088      	sub	sp, #32
 8006984:	af02      	add	r7, sp, #8
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	607a      	str	r2, [r7, #4]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	9300      	str	r3, [sp, #0]
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	2201      	movs	r2, #1
 8006994:	2102      	movs	r1, #2
 8006996:	68f8      	ldr	r0, [r7, #12]
 8006998:	f7ff ff6a 	bl	8006870 <SPI_WaitFlagStateUntilTimeout>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d007      	beq.n	80069b2 <SPI_EndRxTxTransaction+0x32>
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069a6:	f043 0220 	orr.w	r2, r3, #32
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	655a      	str	r2, [r3, #84]	@ 0x54
 80069ae:	2303      	movs	r3, #3
 80069b0:	e032      	b.n	8006a18 <SPI_EndRxTxTransaction+0x98>
 80069b2:	4b1b      	ldr	r3, [pc, #108]	@ (8006a20 <SPI_EndRxTxTransaction+0xa0>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a1b      	ldr	r2, [pc, #108]	@ (8006a24 <SPI_EndRxTxTransaction+0xa4>)
 80069b8:	fba2 2303 	umull	r2, r3, r2, r3
 80069bc:	0d5b      	lsrs	r3, r3, #21
 80069be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80069c2:	fb02 f303 	mul.w	r3, r2, r3
 80069c6:	617b      	str	r3, [r7, #20]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80069d0:	d112      	bne.n	80069f8 <SPI_EndRxTxTransaction+0x78>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	9300      	str	r3, [sp, #0]
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	2200      	movs	r2, #0
 80069da:	2180      	movs	r1, #128	@ 0x80
 80069dc:	68f8      	ldr	r0, [r7, #12]
 80069de:	f7ff ff47 	bl	8006870 <SPI_WaitFlagStateUntilTimeout>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d016      	beq.n	8006a16 <SPI_EndRxTxTransaction+0x96>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069ec:	f043 0220 	orr.w	r2, r3, #32
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	655a      	str	r2, [r3, #84]	@ 0x54
 80069f4:	2303      	movs	r3, #3
 80069f6:	e00f      	b.n	8006a18 <SPI_EndRxTxTransaction+0x98>
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00a      	beq.n	8006a14 <SPI_EndRxTxTransaction+0x94>
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	3b01      	subs	r3, #1
 8006a02:	617b      	str	r3, [r7, #20]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a0e:	2b80      	cmp	r3, #128	@ 0x80
 8006a10:	d0f2      	beq.n	80069f8 <SPI_EndRxTxTransaction+0x78>
 8006a12:	e000      	b.n	8006a16 <SPI_EndRxTxTransaction+0x96>
 8006a14:	bf00      	nop
 8006a16:	2300      	movs	r3, #0
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3718      	adds	r7, #24
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}
 8006a20:	20000018 	.word	0x20000018
 8006a24:	165e9f81 	.word	0x165e9f81

08006a28 <HAL_TIM_Base_Init>:
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d101      	bne.n	8006a3a <HAL_TIM_Base_Init+0x12>
 8006a36:	2301      	movs	r3, #1
 8006a38:	e041      	b.n	8006abe <HAL_TIM_Base_Init+0x96>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d106      	bne.n	8006a54 <HAL_TIM_Base_Init+0x2c>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f7fc f9ea 	bl	8002e28 <HAL_TIM_Base_MspInit>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2202      	movs	r2, #2
 8006a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	3304      	adds	r3, #4
 8006a64:	4619      	mov	r1, r3
 8006a66:	4610      	mov	r0, r2
 8006a68:	f000 f8f4 	bl	8006c54 <TIM_Base_SetConfig>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006abc:	2300      	movs	r3, #0
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3708      	adds	r7, #8
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}

08006ac6 <HAL_TIM_ConfigClockSource>:
 8006ac6:	b580      	push	{r7, lr}
 8006ac8:	b084      	sub	sp, #16
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
 8006ace:	6039      	str	r1, [r7, #0]
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	73fb      	strb	r3, [r7, #15]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d101      	bne.n	8006ae2 <HAL_TIM_ConfigClockSource+0x1c>
 8006ade:	2302      	movs	r3, #2
 8006ae0:	e0b4      	b.n	8006c4c <HAL_TIM_ConfigClockSource+0x186>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2202      	movs	r2, #2
 8006aee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	60bb      	str	r3, [r7, #8]
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006b00:	60bb      	str	r3, [r7, #8]
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b08:	60bb      	str	r3, [r7, #8]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68ba      	ldr	r2, [r7, #8]
 8006b10:	609a      	str	r2, [r3, #8]
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b1a:	d03e      	beq.n	8006b9a <HAL_TIM_ConfigClockSource+0xd4>
 8006b1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b20:	f200 8087 	bhi.w	8006c32 <HAL_TIM_ConfigClockSource+0x16c>
 8006b24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b28:	f000 8086 	beq.w	8006c38 <HAL_TIM_ConfigClockSource+0x172>
 8006b2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b30:	d87f      	bhi.n	8006c32 <HAL_TIM_ConfigClockSource+0x16c>
 8006b32:	2b70      	cmp	r3, #112	@ 0x70
 8006b34:	d01a      	beq.n	8006b6c <HAL_TIM_ConfigClockSource+0xa6>
 8006b36:	2b70      	cmp	r3, #112	@ 0x70
 8006b38:	d87b      	bhi.n	8006c32 <HAL_TIM_ConfigClockSource+0x16c>
 8006b3a:	2b60      	cmp	r3, #96	@ 0x60
 8006b3c:	d050      	beq.n	8006be0 <HAL_TIM_ConfigClockSource+0x11a>
 8006b3e:	2b60      	cmp	r3, #96	@ 0x60
 8006b40:	d877      	bhi.n	8006c32 <HAL_TIM_ConfigClockSource+0x16c>
 8006b42:	2b50      	cmp	r3, #80	@ 0x50
 8006b44:	d03c      	beq.n	8006bc0 <HAL_TIM_ConfigClockSource+0xfa>
 8006b46:	2b50      	cmp	r3, #80	@ 0x50
 8006b48:	d873      	bhi.n	8006c32 <HAL_TIM_ConfigClockSource+0x16c>
 8006b4a:	2b40      	cmp	r3, #64	@ 0x40
 8006b4c:	d058      	beq.n	8006c00 <HAL_TIM_ConfigClockSource+0x13a>
 8006b4e:	2b40      	cmp	r3, #64	@ 0x40
 8006b50:	d86f      	bhi.n	8006c32 <HAL_TIM_ConfigClockSource+0x16c>
 8006b52:	2b30      	cmp	r3, #48	@ 0x30
 8006b54:	d064      	beq.n	8006c20 <HAL_TIM_ConfigClockSource+0x15a>
 8006b56:	2b30      	cmp	r3, #48	@ 0x30
 8006b58:	d86b      	bhi.n	8006c32 <HAL_TIM_ConfigClockSource+0x16c>
 8006b5a:	2b20      	cmp	r3, #32
 8006b5c:	d060      	beq.n	8006c20 <HAL_TIM_ConfigClockSource+0x15a>
 8006b5e:	2b20      	cmp	r3, #32
 8006b60:	d867      	bhi.n	8006c32 <HAL_TIM_ConfigClockSource+0x16c>
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d05c      	beq.n	8006c20 <HAL_TIM_ConfigClockSource+0x15a>
 8006b66:	2b10      	cmp	r3, #16
 8006b68:	d05a      	beq.n	8006c20 <HAL_TIM_ConfigClockSource+0x15a>
 8006b6a:	e062      	b.n	8006c32 <HAL_TIM_ConfigClockSource+0x16c>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6818      	ldr	r0, [r3, #0]
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	6899      	ldr	r1, [r3, #8]
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	685a      	ldr	r2, [r3, #4]
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	f000 f990 	bl	8006ea0 <TIM_ETR_SetConfig>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	60bb      	str	r3, [r7, #8]
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006b8e:	60bb      	str	r3, [r7, #8]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	68ba      	ldr	r2, [r7, #8]
 8006b96:	609a      	str	r2, [r3, #8]
 8006b98:	e04f      	b.n	8006c3a <HAL_TIM_ConfigClockSource+0x174>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6818      	ldr	r0, [r3, #0]
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	6899      	ldr	r1, [r3, #8]
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	685a      	ldr	r2, [r3, #4]
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	f000 f979 	bl	8006ea0 <TIM_ETR_SetConfig>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	689a      	ldr	r2, [r3, #8]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006bbc:	609a      	str	r2, [r3, #8]
 8006bbe:	e03c      	b.n	8006c3a <HAL_TIM_ConfigClockSource+0x174>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6818      	ldr	r0, [r3, #0]
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	6859      	ldr	r1, [r3, #4]
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	461a      	mov	r2, r3
 8006bce:	f000 f8ed 	bl	8006dac <TIM_TI1_ConfigInputStage>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2150      	movs	r1, #80	@ 0x50
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f000 f946 	bl	8006e6a <TIM_ITRx_SetConfig>
 8006bde:	e02c      	b.n	8006c3a <HAL_TIM_ConfigClockSource+0x174>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6818      	ldr	r0, [r3, #0]
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	6859      	ldr	r1, [r3, #4]
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	461a      	mov	r2, r3
 8006bee:	f000 f90c 	bl	8006e0a <TIM_TI2_ConfigInputStage>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2160      	movs	r1, #96	@ 0x60
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f000 f936 	bl	8006e6a <TIM_ITRx_SetConfig>
 8006bfe:	e01c      	b.n	8006c3a <HAL_TIM_ConfigClockSource+0x174>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6818      	ldr	r0, [r3, #0]
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	6859      	ldr	r1, [r3, #4]
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	f000 f8cd 	bl	8006dac <TIM_TI1_ConfigInputStage>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2140      	movs	r1, #64	@ 0x40
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f000 f926 	bl	8006e6a <TIM_ITRx_SetConfig>
 8006c1e:	e00c      	b.n	8006c3a <HAL_TIM_ConfigClockSource+0x174>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4619      	mov	r1, r3
 8006c2a:	4610      	mov	r0, r2
 8006c2c:	f000 f91d 	bl	8006e6a <TIM_ITRx_SetConfig>
 8006c30:	e003      	b.n	8006c3a <HAL_TIM_ConfigClockSource+0x174>
 8006c32:	2301      	movs	r3, #1
 8006c34:	73fb      	strb	r3, [r7, #15]
 8006c36:	e000      	b.n	8006c3a <HAL_TIM_ConfigClockSource+0x174>
 8006c38:	bf00      	nop
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006c4a:	7bfb      	ldrb	r3, [r7, #15]
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3710      	adds	r7, #16
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <TIM_Base_SetConfig>:
 8006c54:	b480      	push	{r7}
 8006c56:	b085      	sub	sp, #20
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	60fb      	str	r3, [r7, #12]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a46      	ldr	r2, [pc, #280]	@ (8006d80 <TIM_Base_SetConfig+0x12c>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d013      	beq.n	8006c94 <TIM_Base_SetConfig+0x40>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c72:	d00f      	beq.n	8006c94 <TIM_Base_SetConfig+0x40>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a43      	ldr	r2, [pc, #268]	@ (8006d84 <TIM_Base_SetConfig+0x130>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d00b      	beq.n	8006c94 <TIM_Base_SetConfig+0x40>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a42      	ldr	r2, [pc, #264]	@ (8006d88 <TIM_Base_SetConfig+0x134>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d007      	beq.n	8006c94 <TIM_Base_SetConfig+0x40>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4a41      	ldr	r2, [pc, #260]	@ (8006d8c <TIM_Base_SetConfig+0x138>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d003      	beq.n	8006c94 <TIM_Base_SetConfig+0x40>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4a40      	ldr	r2, [pc, #256]	@ (8006d90 <TIM_Base_SetConfig+0x13c>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d108      	bne.n	8006ca6 <TIM_Base_SetConfig+0x52>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c9a:	60fb      	str	r3, [r7, #12]
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	60fb      	str	r3, [r7, #12]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	4a35      	ldr	r2, [pc, #212]	@ (8006d80 <TIM_Base_SetConfig+0x12c>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d02b      	beq.n	8006d06 <TIM_Base_SetConfig+0xb2>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cb4:	d027      	beq.n	8006d06 <TIM_Base_SetConfig+0xb2>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	4a32      	ldr	r2, [pc, #200]	@ (8006d84 <TIM_Base_SetConfig+0x130>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d023      	beq.n	8006d06 <TIM_Base_SetConfig+0xb2>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	4a31      	ldr	r2, [pc, #196]	@ (8006d88 <TIM_Base_SetConfig+0x134>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d01f      	beq.n	8006d06 <TIM_Base_SetConfig+0xb2>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4a30      	ldr	r2, [pc, #192]	@ (8006d8c <TIM_Base_SetConfig+0x138>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d01b      	beq.n	8006d06 <TIM_Base_SetConfig+0xb2>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4a2f      	ldr	r2, [pc, #188]	@ (8006d90 <TIM_Base_SetConfig+0x13c>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d017      	beq.n	8006d06 <TIM_Base_SetConfig+0xb2>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a2e      	ldr	r2, [pc, #184]	@ (8006d94 <TIM_Base_SetConfig+0x140>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d013      	beq.n	8006d06 <TIM_Base_SetConfig+0xb2>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a2d      	ldr	r2, [pc, #180]	@ (8006d98 <TIM_Base_SetConfig+0x144>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d00f      	beq.n	8006d06 <TIM_Base_SetConfig+0xb2>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4a2c      	ldr	r2, [pc, #176]	@ (8006d9c <TIM_Base_SetConfig+0x148>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d00b      	beq.n	8006d06 <TIM_Base_SetConfig+0xb2>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4a2b      	ldr	r2, [pc, #172]	@ (8006da0 <TIM_Base_SetConfig+0x14c>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d007      	beq.n	8006d06 <TIM_Base_SetConfig+0xb2>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4a2a      	ldr	r2, [pc, #168]	@ (8006da4 <TIM_Base_SetConfig+0x150>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d003      	beq.n	8006d06 <TIM_Base_SetConfig+0xb2>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4a29      	ldr	r2, [pc, #164]	@ (8006da8 <TIM_Base_SetConfig+0x154>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d108      	bne.n	8006d18 <TIM_Base_SetConfig+0xc4>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d0c:	60fb      	str	r3, [r7, #12]
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	68fa      	ldr	r2, [r7, #12]
 8006d14:	4313      	orrs	r3, r2
 8006d16:	60fb      	str	r3, [r7, #12]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	695b      	ldr	r3, [r3, #20]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	60fb      	str	r3, [r7, #12]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	601a      	str	r2, [r3, #0]
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	689a      	ldr	r2, [r3, #8]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	629a      	str	r2, [r3, #40]	@ 0x28
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a10      	ldr	r2, [pc, #64]	@ (8006d80 <TIM_Base_SetConfig+0x12c>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d003      	beq.n	8006d4c <TIM_Base_SetConfig+0xf8>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a12      	ldr	r2, [pc, #72]	@ (8006d90 <TIM_Base_SetConfig+0x13c>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d103      	bne.n	8006d54 <TIM_Base_SetConfig+0x100>
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	691a      	ldr	r2, [r3, #16]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	631a      	str	r2, [r3, #48]	@ 0x30
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	615a      	str	r2, [r3, #20]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	f003 0301 	and.w	r3, r3, #1
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d105      	bne.n	8006d72 <TIM_Base_SetConfig+0x11e>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	f023 0201 	bic.w	r2, r3, #1
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	611a      	str	r2, [r3, #16]
 8006d72:	bf00      	nop
 8006d74:	3714      	adds	r7, #20
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop
 8006d80:	40010000 	.word	0x40010000
 8006d84:	40000400 	.word	0x40000400
 8006d88:	40000800 	.word	0x40000800
 8006d8c:	40000c00 	.word	0x40000c00
 8006d90:	40010400 	.word	0x40010400
 8006d94:	40014000 	.word	0x40014000
 8006d98:	40014400 	.word	0x40014400
 8006d9c:	40014800 	.word	0x40014800
 8006da0:	40001800 	.word	0x40001800
 8006da4:	40001c00 	.word	0x40001c00
 8006da8:	40002000 	.word	0x40002000

08006dac <TIM_TI1_ConfigInputStage>:
 8006dac:	b480      	push	{r7}
 8006dae:	b087      	sub	sp, #28
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	60b9      	str	r1, [r7, #8]
 8006db6:	607a      	str	r2, [r7, #4]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	6a1b      	ldr	r3, [r3, #32]
 8006dbc:	617b      	str	r3, [r7, #20]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6a1b      	ldr	r3, [r3, #32]
 8006dc2:	f023 0201 	bic.w	r2, r3, #1
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	621a      	str	r2, [r3, #32]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	699b      	ldr	r3, [r3, #24]
 8006dce:	613b      	str	r3, [r7, #16]
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006dd6:	613b      	str	r3, [r7, #16]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	011b      	lsls	r3, r3, #4
 8006ddc:	693a      	ldr	r2, [r7, #16]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	613b      	str	r3, [r7, #16]
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	f023 030a 	bic.w	r3, r3, #10
 8006de8:	617b      	str	r3, [r7, #20]
 8006dea:	697a      	ldr	r2, [r7, #20]
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	617b      	str	r3, [r7, #20]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	693a      	ldr	r2, [r7, #16]
 8006df6:	619a      	str	r2, [r3, #24]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	697a      	ldr	r2, [r7, #20]
 8006dfc:	621a      	str	r2, [r3, #32]
 8006dfe:	bf00      	nop
 8006e00:	371c      	adds	r7, #28
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr

08006e0a <TIM_TI2_ConfigInputStage>:
 8006e0a:	b480      	push	{r7}
 8006e0c:	b087      	sub	sp, #28
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	60f8      	str	r0, [r7, #12]
 8006e12:	60b9      	str	r1, [r7, #8]
 8006e14:	607a      	str	r2, [r7, #4]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	6a1b      	ldr	r3, [r3, #32]
 8006e1a:	617b      	str	r3, [r7, #20]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6a1b      	ldr	r3, [r3, #32]
 8006e20:	f023 0210 	bic.w	r2, r3, #16
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	621a      	str	r2, [r3, #32]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	699b      	ldr	r3, [r3, #24]
 8006e2c:	613b      	str	r3, [r7, #16]
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006e34:	613b      	str	r3, [r7, #16]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	031b      	lsls	r3, r3, #12
 8006e3a:	693a      	ldr	r2, [r7, #16]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	613b      	str	r3, [r7, #16]
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006e46:	617b      	str	r3, [r7, #20]
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	011b      	lsls	r3, r3, #4
 8006e4c:	697a      	ldr	r2, [r7, #20]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	617b      	str	r3, [r7, #20]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	693a      	ldr	r2, [r7, #16]
 8006e56:	619a      	str	r2, [r3, #24]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	697a      	ldr	r2, [r7, #20]
 8006e5c:	621a      	str	r2, [r3, #32]
 8006e5e:	bf00      	nop
 8006e60:	371c      	adds	r7, #28
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr

08006e6a <TIM_ITRx_SetConfig>:
 8006e6a:	b480      	push	{r7}
 8006e6c:	b085      	sub	sp, #20
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
 8006e72:	6039      	str	r1, [r7, #0]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	60fb      	str	r3, [r7, #12]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e80:	60fb      	str	r3, [r7, #12]
 8006e82:	683a      	ldr	r2, [r7, #0]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	f043 0307 	orr.w	r3, r3, #7
 8006e8c:	60fb      	str	r3, [r7, #12]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	609a      	str	r2, [r3, #8]
 8006e94:	bf00      	nop
 8006e96:	3714      	adds	r7, #20
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <TIM_ETR_SetConfig>:
 8006ea0:	b480      	push	{r7}
 8006ea2:	b087      	sub	sp, #28
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	607a      	str	r2, [r7, #4]
 8006eac:	603b      	str	r3, [r7, #0]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	617b      	str	r3, [r7, #20]
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006eba:	617b      	str	r3, [r7, #20]
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	021a      	lsls	r2, r3, #8
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	431a      	orrs	r2, r3
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	697a      	ldr	r2, [r7, #20]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	617b      	str	r3, [r7, #20]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	697a      	ldr	r2, [r7, #20]
 8006ed2:	609a      	str	r2, [r3, #8]
 8006ed4:	bf00      	nop
 8006ed6:	371c      	adds	r7, #28
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <HAL_TIMEx_MasterConfigSynchronization>:
 8006ee0:	b480      	push	{r7}
 8006ee2:	b085      	sub	sp, #20
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d101      	bne.n	8006ef8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ef4:	2302      	movs	r3, #2
 8006ef6:	e05a      	b.n	8006fae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2202      	movs	r2, #2
 8006f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	60fb      	str	r3, [r7, #12]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	60bb      	str	r3, [r7, #8]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f1e:	60fb      	str	r3, [r7, #12]
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	68fa      	ldr	r2, [r7, #12]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	60fb      	str	r3, [r7, #12]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	68fa      	ldr	r2, [r7, #12]
 8006f30:	605a      	str	r2, [r3, #4]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a21      	ldr	r2, [pc, #132]	@ (8006fbc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d022      	beq.n	8006f82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f44:	d01d      	beq.n	8006f82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a1d      	ldr	r2, [pc, #116]	@ (8006fc0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d018      	beq.n	8006f82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a1b      	ldr	r2, [pc, #108]	@ (8006fc4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d013      	beq.n	8006f82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a1a      	ldr	r2, [pc, #104]	@ (8006fc8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d00e      	beq.n	8006f82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a18      	ldr	r2, [pc, #96]	@ (8006fcc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d009      	beq.n	8006f82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a17      	ldr	r2, [pc, #92]	@ (8006fd0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d004      	beq.n	8006f82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a15      	ldr	r2, [pc, #84]	@ (8006fd4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d10c      	bne.n	8006f9c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f88:	60bb      	str	r3, [r7, #8]
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	68ba      	ldr	r2, [r7, #8]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	60bb      	str	r3, [r7, #8]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	68ba      	ldr	r2, [r7, #8]
 8006f9a:	609a      	str	r2, [r3, #8]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006fac:	2300      	movs	r3, #0
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3714      	adds	r7, #20
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop
 8006fbc:	40010000 	.word	0x40010000
 8006fc0:	40000400 	.word	0x40000400
 8006fc4:	40000800 	.word	0x40000800
 8006fc8:	40000c00 	.word	0x40000c00
 8006fcc:	40010400 	.word	0x40010400
 8006fd0:	40014000 	.word	0x40014000
 8006fd4:	40001800 	.word	0x40001800

08006fd8 <siprintf>:
 8006fd8:	b40e      	push	{r1, r2, r3}
 8006fda:	b510      	push	{r4, lr}
 8006fdc:	b09d      	sub	sp, #116	@ 0x74
 8006fde:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006fe0:	9002      	str	r0, [sp, #8]
 8006fe2:	9006      	str	r0, [sp, #24]
 8006fe4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006fe8:	480a      	ldr	r0, [pc, #40]	@ (8007014 <siprintf+0x3c>)
 8006fea:	9107      	str	r1, [sp, #28]
 8006fec:	9104      	str	r1, [sp, #16]
 8006fee:	490a      	ldr	r1, [pc, #40]	@ (8007018 <siprintf+0x40>)
 8006ff0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ff4:	9105      	str	r1, [sp, #20]
 8006ff6:	2400      	movs	r4, #0
 8006ff8:	a902      	add	r1, sp, #8
 8006ffa:	6800      	ldr	r0, [r0, #0]
 8006ffc:	9301      	str	r3, [sp, #4]
 8006ffe:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007000:	f000 f9ce 	bl	80073a0 <_svfiprintf_r>
 8007004:	9b02      	ldr	r3, [sp, #8]
 8007006:	701c      	strb	r4, [r3, #0]
 8007008:	b01d      	add	sp, #116	@ 0x74
 800700a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800700e:	b003      	add	sp, #12
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop
 8007014:	20000030 	.word	0x20000030
 8007018:	ffff0208 	.word	0xffff0208

0800701c <std>:
 800701c:	2300      	movs	r3, #0
 800701e:	b510      	push	{r4, lr}
 8007020:	4604      	mov	r4, r0
 8007022:	e9c0 3300 	strd	r3, r3, [r0]
 8007026:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800702a:	6083      	str	r3, [r0, #8]
 800702c:	8181      	strh	r1, [r0, #12]
 800702e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007030:	81c2      	strh	r2, [r0, #14]
 8007032:	6183      	str	r3, [r0, #24]
 8007034:	4619      	mov	r1, r3
 8007036:	2208      	movs	r2, #8
 8007038:	305c      	adds	r0, #92	@ 0x5c
 800703a:	f000 f921 	bl	8007280 <memset>
 800703e:	4b0d      	ldr	r3, [pc, #52]	@ (8007074 <std+0x58>)
 8007040:	6263      	str	r3, [r4, #36]	@ 0x24
 8007042:	4b0d      	ldr	r3, [pc, #52]	@ (8007078 <std+0x5c>)
 8007044:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007046:	4b0d      	ldr	r3, [pc, #52]	@ (800707c <std+0x60>)
 8007048:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800704a:	4b0d      	ldr	r3, [pc, #52]	@ (8007080 <std+0x64>)
 800704c:	6323      	str	r3, [r4, #48]	@ 0x30
 800704e:	4b0d      	ldr	r3, [pc, #52]	@ (8007084 <std+0x68>)
 8007050:	6224      	str	r4, [r4, #32]
 8007052:	429c      	cmp	r4, r3
 8007054:	d006      	beq.n	8007064 <std+0x48>
 8007056:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800705a:	4294      	cmp	r4, r2
 800705c:	d002      	beq.n	8007064 <std+0x48>
 800705e:	33d0      	adds	r3, #208	@ 0xd0
 8007060:	429c      	cmp	r4, r3
 8007062:	d105      	bne.n	8007070 <std+0x54>
 8007064:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800706c:	f000 b93a 	b.w	80072e4 <__retarget_lock_init_recursive>
 8007070:	bd10      	pop	{r4, pc}
 8007072:	bf00      	nop
 8007074:	08007de9 	.word	0x08007de9
 8007078:	08007e0b 	.word	0x08007e0b
 800707c:	08007e43 	.word	0x08007e43
 8007080:	08007e67 	.word	0x08007e67
 8007084:	20025c44 	.word	0x20025c44

08007088 <stdio_exit_handler>:
 8007088:	4a02      	ldr	r2, [pc, #8]	@ (8007094 <stdio_exit_handler+0xc>)
 800708a:	4903      	ldr	r1, [pc, #12]	@ (8007098 <stdio_exit_handler+0x10>)
 800708c:	4803      	ldr	r0, [pc, #12]	@ (800709c <stdio_exit_handler+0x14>)
 800708e:	f000 b869 	b.w	8007164 <_fwalk_sglue>
 8007092:	bf00      	nop
 8007094:	20000024 	.word	0x20000024
 8007098:	08007d81 	.word	0x08007d81
 800709c:	20000034 	.word	0x20000034

080070a0 <cleanup_stdio>:
 80070a0:	6841      	ldr	r1, [r0, #4]
 80070a2:	4b0c      	ldr	r3, [pc, #48]	@ (80070d4 <cleanup_stdio+0x34>)
 80070a4:	4299      	cmp	r1, r3
 80070a6:	b510      	push	{r4, lr}
 80070a8:	4604      	mov	r4, r0
 80070aa:	d001      	beq.n	80070b0 <cleanup_stdio+0x10>
 80070ac:	f000 fe68 	bl	8007d80 <_fflush_r>
 80070b0:	68a1      	ldr	r1, [r4, #8]
 80070b2:	4b09      	ldr	r3, [pc, #36]	@ (80070d8 <cleanup_stdio+0x38>)
 80070b4:	4299      	cmp	r1, r3
 80070b6:	d002      	beq.n	80070be <cleanup_stdio+0x1e>
 80070b8:	4620      	mov	r0, r4
 80070ba:	f000 fe61 	bl	8007d80 <_fflush_r>
 80070be:	68e1      	ldr	r1, [r4, #12]
 80070c0:	4b06      	ldr	r3, [pc, #24]	@ (80070dc <cleanup_stdio+0x3c>)
 80070c2:	4299      	cmp	r1, r3
 80070c4:	d004      	beq.n	80070d0 <cleanup_stdio+0x30>
 80070c6:	4620      	mov	r0, r4
 80070c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070cc:	f000 be58 	b.w	8007d80 <_fflush_r>
 80070d0:	bd10      	pop	{r4, pc}
 80070d2:	bf00      	nop
 80070d4:	20025c44 	.word	0x20025c44
 80070d8:	20025cac 	.word	0x20025cac
 80070dc:	20025d14 	.word	0x20025d14

080070e0 <global_stdio_init.part.0>:
 80070e0:	b510      	push	{r4, lr}
 80070e2:	4b0b      	ldr	r3, [pc, #44]	@ (8007110 <global_stdio_init.part.0+0x30>)
 80070e4:	4c0b      	ldr	r4, [pc, #44]	@ (8007114 <global_stdio_init.part.0+0x34>)
 80070e6:	4a0c      	ldr	r2, [pc, #48]	@ (8007118 <global_stdio_init.part.0+0x38>)
 80070e8:	601a      	str	r2, [r3, #0]
 80070ea:	4620      	mov	r0, r4
 80070ec:	2200      	movs	r2, #0
 80070ee:	2104      	movs	r1, #4
 80070f0:	f7ff ff94 	bl	800701c <std>
 80070f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80070f8:	2201      	movs	r2, #1
 80070fa:	2109      	movs	r1, #9
 80070fc:	f7ff ff8e 	bl	800701c <std>
 8007100:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007104:	2202      	movs	r2, #2
 8007106:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800710a:	2112      	movs	r1, #18
 800710c:	f7ff bf86 	b.w	800701c <std>
 8007110:	20025d7c 	.word	0x20025d7c
 8007114:	20025c44 	.word	0x20025c44
 8007118:	08007089 	.word	0x08007089

0800711c <__sfp_lock_acquire>:
 800711c:	4801      	ldr	r0, [pc, #4]	@ (8007124 <__sfp_lock_acquire+0x8>)
 800711e:	f000 b8e2 	b.w	80072e6 <__retarget_lock_acquire_recursive>
 8007122:	bf00      	nop
 8007124:	20025d81 	.word	0x20025d81

08007128 <__sfp_lock_release>:
 8007128:	4801      	ldr	r0, [pc, #4]	@ (8007130 <__sfp_lock_release+0x8>)
 800712a:	f000 b8dd 	b.w	80072e8 <__retarget_lock_release_recursive>
 800712e:	bf00      	nop
 8007130:	20025d81 	.word	0x20025d81

08007134 <__sinit>:
 8007134:	b510      	push	{r4, lr}
 8007136:	4604      	mov	r4, r0
 8007138:	f7ff fff0 	bl	800711c <__sfp_lock_acquire>
 800713c:	6a23      	ldr	r3, [r4, #32]
 800713e:	b11b      	cbz	r3, 8007148 <__sinit+0x14>
 8007140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007144:	f7ff bff0 	b.w	8007128 <__sfp_lock_release>
 8007148:	4b04      	ldr	r3, [pc, #16]	@ (800715c <__sinit+0x28>)
 800714a:	6223      	str	r3, [r4, #32]
 800714c:	4b04      	ldr	r3, [pc, #16]	@ (8007160 <__sinit+0x2c>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1f5      	bne.n	8007140 <__sinit+0xc>
 8007154:	f7ff ffc4 	bl	80070e0 <global_stdio_init.part.0>
 8007158:	e7f2      	b.n	8007140 <__sinit+0xc>
 800715a:	bf00      	nop
 800715c:	080070a1 	.word	0x080070a1
 8007160:	20025d7c 	.word	0x20025d7c

08007164 <_fwalk_sglue>:
 8007164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007168:	4607      	mov	r7, r0
 800716a:	4688      	mov	r8, r1
 800716c:	4614      	mov	r4, r2
 800716e:	2600      	movs	r6, #0
 8007170:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007174:	f1b9 0901 	subs.w	r9, r9, #1
 8007178:	d505      	bpl.n	8007186 <_fwalk_sglue+0x22>
 800717a:	6824      	ldr	r4, [r4, #0]
 800717c:	2c00      	cmp	r4, #0
 800717e:	d1f7      	bne.n	8007170 <_fwalk_sglue+0xc>
 8007180:	4630      	mov	r0, r6
 8007182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007186:	89ab      	ldrh	r3, [r5, #12]
 8007188:	2b01      	cmp	r3, #1
 800718a:	d907      	bls.n	800719c <_fwalk_sglue+0x38>
 800718c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007190:	3301      	adds	r3, #1
 8007192:	d003      	beq.n	800719c <_fwalk_sglue+0x38>
 8007194:	4629      	mov	r1, r5
 8007196:	4638      	mov	r0, r7
 8007198:	47c0      	blx	r8
 800719a:	4306      	orrs	r6, r0
 800719c:	3568      	adds	r5, #104	@ 0x68
 800719e:	e7e9      	b.n	8007174 <_fwalk_sglue+0x10>

080071a0 <iprintf>:
 80071a0:	b40f      	push	{r0, r1, r2, r3}
 80071a2:	b507      	push	{r0, r1, r2, lr}
 80071a4:	4906      	ldr	r1, [pc, #24]	@ (80071c0 <iprintf+0x20>)
 80071a6:	ab04      	add	r3, sp, #16
 80071a8:	6808      	ldr	r0, [r1, #0]
 80071aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80071ae:	6881      	ldr	r1, [r0, #8]
 80071b0:	9301      	str	r3, [sp, #4]
 80071b2:	f000 fa1b 	bl	80075ec <_vfiprintf_r>
 80071b6:	b003      	add	sp, #12
 80071b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80071bc:	b004      	add	sp, #16
 80071be:	4770      	bx	lr
 80071c0:	20000030 	.word	0x20000030

080071c4 <_puts_r>:
 80071c4:	6a03      	ldr	r3, [r0, #32]
 80071c6:	b570      	push	{r4, r5, r6, lr}
 80071c8:	6884      	ldr	r4, [r0, #8]
 80071ca:	4605      	mov	r5, r0
 80071cc:	460e      	mov	r6, r1
 80071ce:	b90b      	cbnz	r3, 80071d4 <_puts_r+0x10>
 80071d0:	f7ff ffb0 	bl	8007134 <__sinit>
 80071d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80071d6:	07db      	lsls	r3, r3, #31
 80071d8:	d405      	bmi.n	80071e6 <_puts_r+0x22>
 80071da:	89a3      	ldrh	r3, [r4, #12]
 80071dc:	0598      	lsls	r0, r3, #22
 80071de:	d402      	bmi.n	80071e6 <_puts_r+0x22>
 80071e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80071e2:	f000 f880 	bl	80072e6 <__retarget_lock_acquire_recursive>
 80071e6:	89a3      	ldrh	r3, [r4, #12]
 80071e8:	0719      	lsls	r1, r3, #28
 80071ea:	d502      	bpl.n	80071f2 <_puts_r+0x2e>
 80071ec:	6923      	ldr	r3, [r4, #16]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d135      	bne.n	800725e <_puts_r+0x9a>
 80071f2:	4621      	mov	r1, r4
 80071f4:	4628      	mov	r0, r5
 80071f6:	f000 fea7 	bl	8007f48 <__swsetup_r>
 80071fa:	b380      	cbz	r0, 800725e <_puts_r+0x9a>
 80071fc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8007200:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007202:	07da      	lsls	r2, r3, #31
 8007204:	d405      	bmi.n	8007212 <_puts_r+0x4e>
 8007206:	89a3      	ldrh	r3, [r4, #12]
 8007208:	059b      	lsls	r3, r3, #22
 800720a:	d402      	bmi.n	8007212 <_puts_r+0x4e>
 800720c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800720e:	f000 f86b 	bl	80072e8 <__retarget_lock_release_recursive>
 8007212:	4628      	mov	r0, r5
 8007214:	bd70      	pop	{r4, r5, r6, pc}
 8007216:	2b00      	cmp	r3, #0
 8007218:	da04      	bge.n	8007224 <_puts_r+0x60>
 800721a:	69a2      	ldr	r2, [r4, #24]
 800721c:	429a      	cmp	r2, r3
 800721e:	dc17      	bgt.n	8007250 <_puts_r+0x8c>
 8007220:	290a      	cmp	r1, #10
 8007222:	d015      	beq.n	8007250 <_puts_r+0x8c>
 8007224:	6823      	ldr	r3, [r4, #0]
 8007226:	1c5a      	adds	r2, r3, #1
 8007228:	6022      	str	r2, [r4, #0]
 800722a:	7019      	strb	r1, [r3, #0]
 800722c:	68a3      	ldr	r3, [r4, #8]
 800722e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007232:	3b01      	subs	r3, #1
 8007234:	60a3      	str	r3, [r4, #8]
 8007236:	2900      	cmp	r1, #0
 8007238:	d1ed      	bne.n	8007216 <_puts_r+0x52>
 800723a:	2b00      	cmp	r3, #0
 800723c:	da11      	bge.n	8007262 <_puts_r+0x9e>
 800723e:	4622      	mov	r2, r4
 8007240:	210a      	movs	r1, #10
 8007242:	4628      	mov	r0, r5
 8007244:	f000 fe41 	bl	8007eca <__swbuf_r>
 8007248:	3001      	adds	r0, #1
 800724a:	d0d7      	beq.n	80071fc <_puts_r+0x38>
 800724c:	250a      	movs	r5, #10
 800724e:	e7d7      	b.n	8007200 <_puts_r+0x3c>
 8007250:	4622      	mov	r2, r4
 8007252:	4628      	mov	r0, r5
 8007254:	f000 fe39 	bl	8007eca <__swbuf_r>
 8007258:	3001      	adds	r0, #1
 800725a:	d1e7      	bne.n	800722c <_puts_r+0x68>
 800725c:	e7ce      	b.n	80071fc <_puts_r+0x38>
 800725e:	3e01      	subs	r6, #1
 8007260:	e7e4      	b.n	800722c <_puts_r+0x68>
 8007262:	6823      	ldr	r3, [r4, #0]
 8007264:	1c5a      	adds	r2, r3, #1
 8007266:	6022      	str	r2, [r4, #0]
 8007268:	220a      	movs	r2, #10
 800726a:	701a      	strb	r2, [r3, #0]
 800726c:	e7ee      	b.n	800724c <_puts_r+0x88>
	...

08007270 <puts>:
 8007270:	4b02      	ldr	r3, [pc, #8]	@ (800727c <puts+0xc>)
 8007272:	4601      	mov	r1, r0
 8007274:	6818      	ldr	r0, [r3, #0]
 8007276:	f7ff bfa5 	b.w	80071c4 <_puts_r>
 800727a:	bf00      	nop
 800727c:	20000030 	.word	0x20000030

08007280 <memset>:
 8007280:	4402      	add	r2, r0
 8007282:	4603      	mov	r3, r0
 8007284:	4293      	cmp	r3, r2
 8007286:	d100      	bne.n	800728a <memset+0xa>
 8007288:	4770      	bx	lr
 800728a:	f803 1b01 	strb.w	r1, [r3], #1
 800728e:	e7f9      	b.n	8007284 <memset+0x4>

08007290 <__errno>:
 8007290:	4b01      	ldr	r3, [pc, #4]	@ (8007298 <__errno+0x8>)
 8007292:	6818      	ldr	r0, [r3, #0]
 8007294:	4770      	bx	lr
 8007296:	bf00      	nop
 8007298:	20000030 	.word	0x20000030

0800729c <__libc_init_array>:
 800729c:	b570      	push	{r4, r5, r6, lr}
 800729e:	4d0d      	ldr	r5, [pc, #52]	@ (80072d4 <__libc_init_array+0x38>)
 80072a0:	4c0d      	ldr	r4, [pc, #52]	@ (80072d8 <__libc_init_array+0x3c>)
 80072a2:	1b64      	subs	r4, r4, r5
 80072a4:	10a4      	asrs	r4, r4, #2
 80072a6:	2600      	movs	r6, #0
 80072a8:	42a6      	cmp	r6, r4
 80072aa:	d109      	bne.n	80072c0 <__libc_init_array+0x24>
 80072ac:	4d0b      	ldr	r5, [pc, #44]	@ (80072dc <__libc_init_array+0x40>)
 80072ae:	4c0c      	ldr	r4, [pc, #48]	@ (80072e0 <__libc_init_array+0x44>)
 80072b0:	f000 fff4 	bl	800829c <_init>
 80072b4:	1b64      	subs	r4, r4, r5
 80072b6:	10a4      	asrs	r4, r4, #2
 80072b8:	2600      	movs	r6, #0
 80072ba:	42a6      	cmp	r6, r4
 80072bc:	d105      	bne.n	80072ca <__libc_init_array+0x2e>
 80072be:	bd70      	pop	{r4, r5, r6, pc}
 80072c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80072c4:	4798      	blx	r3
 80072c6:	3601      	adds	r6, #1
 80072c8:	e7ee      	b.n	80072a8 <__libc_init_array+0xc>
 80072ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80072ce:	4798      	blx	r3
 80072d0:	3601      	adds	r6, #1
 80072d2:	e7f2      	b.n	80072ba <__libc_init_array+0x1e>
 80072d4:	0800a018 	.word	0x0800a018
 80072d8:	0800a018 	.word	0x0800a018
 80072dc:	0800a018 	.word	0x0800a018
 80072e0:	0800a01c 	.word	0x0800a01c

080072e4 <__retarget_lock_init_recursive>:
 80072e4:	4770      	bx	lr

080072e6 <__retarget_lock_acquire_recursive>:
 80072e6:	4770      	bx	lr

080072e8 <__retarget_lock_release_recursive>:
 80072e8:	4770      	bx	lr

080072ea <__ssputs_r>:
 80072ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072ee:	688e      	ldr	r6, [r1, #8]
 80072f0:	461f      	mov	r7, r3
 80072f2:	42be      	cmp	r6, r7
 80072f4:	680b      	ldr	r3, [r1, #0]
 80072f6:	4682      	mov	sl, r0
 80072f8:	460c      	mov	r4, r1
 80072fa:	4690      	mov	r8, r2
 80072fc:	d82d      	bhi.n	800735a <__ssputs_r+0x70>
 80072fe:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007302:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007306:	d026      	beq.n	8007356 <__ssputs_r+0x6c>
 8007308:	6965      	ldr	r5, [r4, #20]
 800730a:	6909      	ldr	r1, [r1, #16]
 800730c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007310:	eba3 0901 	sub.w	r9, r3, r1
 8007314:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007318:	1c7b      	adds	r3, r7, #1
 800731a:	444b      	add	r3, r9
 800731c:	106d      	asrs	r5, r5, #1
 800731e:	429d      	cmp	r5, r3
 8007320:	bf38      	it	cc
 8007322:	461d      	movcc	r5, r3
 8007324:	0553      	lsls	r3, r2, #21
 8007326:	d527      	bpl.n	8007378 <__ssputs_r+0x8e>
 8007328:	4629      	mov	r1, r5
 800732a:	f000 fa99 	bl	8007860 <_malloc_r>
 800732e:	4606      	mov	r6, r0
 8007330:	b360      	cbz	r0, 800738c <__ssputs_r+0xa2>
 8007332:	6921      	ldr	r1, [r4, #16]
 8007334:	464a      	mov	r2, r9
 8007336:	f000 ff51 	bl	80081dc <memcpy>
 800733a:	89a3      	ldrh	r3, [r4, #12]
 800733c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007340:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007344:	81a3      	strh	r3, [r4, #12]
 8007346:	6126      	str	r6, [r4, #16]
 8007348:	6165      	str	r5, [r4, #20]
 800734a:	444e      	add	r6, r9
 800734c:	eba5 0509 	sub.w	r5, r5, r9
 8007350:	6026      	str	r6, [r4, #0]
 8007352:	60a5      	str	r5, [r4, #8]
 8007354:	463e      	mov	r6, r7
 8007356:	42be      	cmp	r6, r7
 8007358:	d900      	bls.n	800735c <__ssputs_r+0x72>
 800735a:	463e      	mov	r6, r7
 800735c:	6820      	ldr	r0, [r4, #0]
 800735e:	4632      	mov	r2, r6
 8007360:	4641      	mov	r1, r8
 8007362:	f000 fea9 	bl	80080b8 <memmove>
 8007366:	68a3      	ldr	r3, [r4, #8]
 8007368:	1b9b      	subs	r3, r3, r6
 800736a:	60a3      	str	r3, [r4, #8]
 800736c:	6823      	ldr	r3, [r4, #0]
 800736e:	4433      	add	r3, r6
 8007370:	6023      	str	r3, [r4, #0]
 8007372:	2000      	movs	r0, #0
 8007374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007378:	462a      	mov	r2, r5
 800737a:	f000 fd78 	bl	8007e6e <_realloc_r>
 800737e:	4606      	mov	r6, r0
 8007380:	2800      	cmp	r0, #0
 8007382:	d1e0      	bne.n	8007346 <__ssputs_r+0x5c>
 8007384:	6921      	ldr	r1, [r4, #16]
 8007386:	4650      	mov	r0, sl
 8007388:	f000 ff36 	bl	80081f8 <_free_r>
 800738c:	230c      	movs	r3, #12
 800738e:	f8ca 3000 	str.w	r3, [sl]
 8007392:	89a3      	ldrh	r3, [r4, #12]
 8007394:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007398:	81a3      	strh	r3, [r4, #12]
 800739a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800739e:	e7e9      	b.n	8007374 <__ssputs_r+0x8a>

080073a0 <_svfiprintf_r>:
 80073a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073a4:	4698      	mov	r8, r3
 80073a6:	898b      	ldrh	r3, [r1, #12]
 80073a8:	061b      	lsls	r3, r3, #24
 80073aa:	b09d      	sub	sp, #116	@ 0x74
 80073ac:	4607      	mov	r7, r0
 80073ae:	460d      	mov	r5, r1
 80073b0:	4614      	mov	r4, r2
 80073b2:	d510      	bpl.n	80073d6 <_svfiprintf_r+0x36>
 80073b4:	690b      	ldr	r3, [r1, #16]
 80073b6:	b973      	cbnz	r3, 80073d6 <_svfiprintf_r+0x36>
 80073b8:	2140      	movs	r1, #64	@ 0x40
 80073ba:	f000 fa51 	bl	8007860 <_malloc_r>
 80073be:	6028      	str	r0, [r5, #0]
 80073c0:	6128      	str	r0, [r5, #16]
 80073c2:	b930      	cbnz	r0, 80073d2 <_svfiprintf_r+0x32>
 80073c4:	230c      	movs	r3, #12
 80073c6:	603b      	str	r3, [r7, #0]
 80073c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80073cc:	b01d      	add	sp, #116	@ 0x74
 80073ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073d2:	2340      	movs	r3, #64	@ 0x40
 80073d4:	616b      	str	r3, [r5, #20]
 80073d6:	2300      	movs	r3, #0
 80073d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80073da:	2320      	movs	r3, #32
 80073dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80073e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80073e4:	2330      	movs	r3, #48	@ 0x30
 80073e6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007584 <_svfiprintf_r+0x1e4>
 80073ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80073ee:	f04f 0901 	mov.w	r9, #1
 80073f2:	4623      	mov	r3, r4
 80073f4:	469a      	mov	sl, r3
 80073f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073fa:	b10a      	cbz	r2, 8007400 <_svfiprintf_r+0x60>
 80073fc:	2a25      	cmp	r2, #37	@ 0x25
 80073fe:	d1f9      	bne.n	80073f4 <_svfiprintf_r+0x54>
 8007400:	ebba 0b04 	subs.w	fp, sl, r4
 8007404:	d00b      	beq.n	800741e <_svfiprintf_r+0x7e>
 8007406:	465b      	mov	r3, fp
 8007408:	4622      	mov	r2, r4
 800740a:	4629      	mov	r1, r5
 800740c:	4638      	mov	r0, r7
 800740e:	f7ff ff6c 	bl	80072ea <__ssputs_r>
 8007412:	3001      	adds	r0, #1
 8007414:	f000 80a7 	beq.w	8007566 <_svfiprintf_r+0x1c6>
 8007418:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800741a:	445a      	add	r2, fp
 800741c:	9209      	str	r2, [sp, #36]	@ 0x24
 800741e:	f89a 3000 	ldrb.w	r3, [sl]
 8007422:	2b00      	cmp	r3, #0
 8007424:	f000 809f 	beq.w	8007566 <_svfiprintf_r+0x1c6>
 8007428:	2300      	movs	r3, #0
 800742a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800742e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007432:	f10a 0a01 	add.w	sl, sl, #1
 8007436:	9304      	str	r3, [sp, #16]
 8007438:	9307      	str	r3, [sp, #28]
 800743a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800743e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007440:	4654      	mov	r4, sl
 8007442:	2205      	movs	r2, #5
 8007444:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007448:	484e      	ldr	r0, [pc, #312]	@ (8007584 <_svfiprintf_r+0x1e4>)
 800744a:	f7f8 fed9 	bl	8000200 <memchr>
 800744e:	9a04      	ldr	r2, [sp, #16]
 8007450:	b9d8      	cbnz	r0, 800748a <_svfiprintf_r+0xea>
 8007452:	06d0      	lsls	r0, r2, #27
 8007454:	bf44      	itt	mi
 8007456:	2320      	movmi	r3, #32
 8007458:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800745c:	0711      	lsls	r1, r2, #28
 800745e:	bf44      	itt	mi
 8007460:	232b      	movmi	r3, #43	@ 0x2b
 8007462:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007466:	f89a 3000 	ldrb.w	r3, [sl]
 800746a:	2b2a      	cmp	r3, #42	@ 0x2a
 800746c:	d015      	beq.n	800749a <_svfiprintf_r+0xfa>
 800746e:	9a07      	ldr	r2, [sp, #28]
 8007470:	4654      	mov	r4, sl
 8007472:	2000      	movs	r0, #0
 8007474:	f04f 0c0a 	mov.w	ip, #10
 8007478:	4621      	mov	r1, r4
 800747a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800747e:	3b30      	subs	r3, #48	@ 0x30
 8007480:	2b09      	cmp	r3, #9
 8007482:	d94b      	bls.n	800751c <_svfiprintf_r+0x17c>
 8007484:	b1b0      	cbz	r0, 80074b4 <_svfiprintf_r+0x114>
 8007486:	9207      	str	r2, [sp, #28]
 8007488:	e014      	b.n	80074b4 <_svfiprintf_r+0x114>
 800748a:	eba0 0308 	sub.w	r3, r0, r8
 800748e:	fa09 f303 	lsl.w	r3, r9, r3
 8007492:	4313      	orrs	r3, r2
 8007494:	9304      	str	r3, [sp, #16]
 8007496:	46a2      	mov	sl, r4
 8007498:	e7d2      	b.n	8007440 <_svfiprintf_r+0xa0>
 800749a:	9b03      	ldr	r3, [sp, #12]
 800749c:	1d19      	adds	r1, r3, #4
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	9103      	str	r1, [sp, #12]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	bfbb      	ittet	lt
 80074a6:	425b      	neglt	r3, r3
 80074a8:	f042 0202 	orrlt.w	r2, r2, #2
 80074ac:	9307      	strge	r3, [sp, #28]
 80074ae:	9307      	strlt	r3, [sp, #28]
 80074b0:	bfb8      	it	lt
 80074b2:	9204      	strlt	r2, [sp, #16]
 80074b4:	7823      	ldrb	r3, [r4, #0]
 80074b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80074b8:	d10a      	bne.n	80074d0 <_svfiprintf_r+0x130>
 80074ba:	7863      	ldrb	r3, [r4, #1]
 80074bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80074be:	d132      	bne.n	8007526 <_svfiprintf_r+0x186>
 80074c0:	9b03      	ldr	r3, [sp, #12]
 80074c2:	1d1a      	adds	r2, r3, #4
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	9203      	str	r2, [sp, #12]
 80074c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80074cc:	3402      	adds	r4, #2
 80074ce:	9305      	str	r3, [sp, #20]
 80074d0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007594 <_svfiprintf_r+0x1f4>
 80074d4:	7821      	ldrb	r1, [r4, #0]
 80074d6:	2203      	movs	r2, #3
 80074d8:	4650      	mov	r0, sl
 80074da:	f7f8 fe91 	bl	8000200 <memchr>
 80074de:	b138      	cbz	r0, 80074f0 <_svfiprintf_r+0x150>
 80074e0:	9b04      	ldr	r3, [sp, #16]
 80074e2:	eba0 000a 	sub.w	r0, r0, sl
 80074e6:	2240      	movs	r2, #64	@ 0x40
 80074e8:	4082      	lsls	r2, r0
 80074ea:	4313      	orrs	r3, r2
 80074ec:	3401      	adds	r4, #1
 80074ee:	9304      	str	r3, [sp, #16]
 80074f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074f4:	4824      	ldr	r0, [pc, #144]	@ (8007588 <_svfiprintf_r+0x1e8>)
 80074f6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80074fa:	2206      	movs	r2, #6
 80074fc:	f7f8 fe80 	bl	8000200 <memchr>
 8007500:	2800      	cmp	r0, #0
 8007502:	d036      	beq.n	8007572 <_svfiprintf_r+0x1d2>
 8007504:	4b21      	ldr	r3, [pc, #132]	@ (800758c <_svfiprintf_r+0x1ec>)
 8007506:	bb1b      	cbnz	r3, 8007550 <_svfiprintf_r+0x1b0>
 8007508:	9b03      	ldr	r3, [sp, #12]
 800750a:	3307      	adds	r3, #7
 800750c:	f023 0307 	bic.w	r3, r3, #7
 8007510:	3308      	adds	r3, #8
 8007512:	9303      	str	r3, [sp, #12]
 8007514:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007516:	4433      	add	r3, r6
 8007518:	9309      	str	r3, [sp, #36]	@ 0x24
 800751a:	e76a      	b.n	80073f2 <_svfiprintf_r+0x52>
 800751c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007520:	460c      	mov	r4, r1
 8007522:	2001      	movs	r0, #1
 8007524:	e7a8      	b.n	8007478 <_svfiprintf_r+0xd8>
 8007526:	2300      	movs	r3, #0
 8007528:	3401      	adds	r4, #1
 800752a:	9305      	str	r3, [sp, #20]
 800752c:	4619      	mov	r1, r3
 800752e:	f04f 0c0a 	mov.w	ip, #10
 8007532:	4620      	mov	r0, r4
 8007534:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007538:	3a30      	subs	r2, #48	@ 0x30
 800753a:	2a09      	cmp	r2, #9
 800753c:	d903      	bls.n	8007546 <_svfiprintf_r+0x1a6>
 800753e:	2b00      	cmp	r3, #0
 8007540:	d0c6      	beq.n	80074d0 <_svfiprintf_r+0x130>
 8007542:	9105      	str	r1, [sp, #20]
 8007544:	e7c4      	b.n	80074d0 <_svfiprintf_r+0x130>
 8007546:	fb0c 2101 	mla	r1, ip, r1, r2
 800754a:	4604      	mov	r4, r0
 800754c:	2301      	movs	r3, #1
 800754e:	e7f0      	b.n	8007532 <_svfiprintf_r+0x192>
 8007550:	ab03      	add	r3, sp, #12
 8007552:	9300      	str	r3, [sp, #0]
 8007554:	462a      	mov	r2, r5
 8007556:	4b0e      	ldr	r3, [pc, #56]	@ (8007590 <_svfiprintf_r+0x1f0>)
 8007558:	a904      	add	r1, sp, #16
 800755a:	4638      	mov	r0, r7
 800755c:	f3af 8000 	nop.w
 8007560:	1c42      	adds	r2, r0, #1
 8007562:	4606      	mov	r6, r0
 8007564:	d1d6      	bne.n	8007514 <_svfiprintf_r+0x174>
 8007566:	89ab      	ldrh	r3, [r5, #12]
 8007568:	065b      	lsls	r3, r3, #25
 800756a:	f53f af2d 	bmi.w	80073c8 <_svfiprintf_r+0x28>
 800756e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007570:	e72c      	b.n	80073cc <_svfiprintf_r+0x2c>
 8007572:	ab03      	add	r3, sp, #12
 8007574:	9300      	str	r3, [sp, #0]
 8007576:	462a      	mov	r2, r5
 8007578:	4b05      	ldr	r3, [pc, #20]	@ (8007590 <_svfiprintf_r+0x1f0>)
 800757a:	a904      	add	r1, sp, #16
 800757c:	4638      	mov	r0, r7
 800757e:	f000 fa5d 	bl	8007a3c <_printf_i>
 8007582:	e7ed      	b.n	8007560 <_svfiprintf_r+0x1c0>
 8007584:	08009fdc 	.word	0x08009fdc
 8007588:	08009fe6 	.word	0x08009fe6
 800758c:	00000000 	.word	0x00000000
 8007590:	080072eb 	.word	0x080072eb
 8007594:	08009fe2 	.word	0x08009fe2

08007598 <__sfputc_r>:
 8007598:	6893      	ldr	r3, [r2, #8]
 800759a:	3b01      	subs	r3, #1
 800759c:	2b00      	cmp	r3, #0
 800759e:	b410      	push	{r4}
 80075a0:	6093      	str	r3, [r2, #8]
 80075a2:	da08      	bge.n	80075b6 <__sfputc_r+0x1e>
 80075a4:	6994      	ldr	r4, [r2, #24]
 80075a6:	42a3      	cmp	r3, r4
 80075a8:	db01      	blt.n	80075ae <__sfputc_r+0x16>
 80075aa:	290a      	cmp	r1, #10
 80075ac:	d103      	bne.n	80075b6 <__sfputc_r+0x1e>
 80075ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075b2:	f000 bc8a 	b.w	8007eca <__swbuf_r>
 80075b6:	6813      	ldr	r3, [r2, #0]
 80075b8:	1c58      	adds	r0, r3, #1
 80075ba:	6010      	str	r0, [r2, #0]
 80075bc:	7019      	strb	r1, [r3, #0]
 80075be:	4608      	mov	r0, r1
 80075c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075c4:	4770      	bx	lr

080075c6 <__sfputs_r>:
 80075c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075c8:	4606      	mov	r6, r0
 80075ca:	460f      	mov	r7, r1
 80075cc:	4614      	mov	r4, r2
 80075ce:	18d5      	adds	r5, r2, r3
 80075d0:	42ac      	cmp	r4, r5
 80075d2:	d101      	bne.n	80075d8 <__sfputs_r+0x12>
 80075d4:	2000      	movs	r0, #0
 80075d6:	e007      	b.n	80075e8 <__sfputs_r+0x22>
 80075d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075dc:	463a      	mov	r2, r7
 80075de:	4630      	mov	r0, r6
 80075e0:	f7ff ffda 	bl	8007598 <__sfputc_r>
 80075e4:	1c43      	adds	r3, r0, #1
 80075e6:	d1f3      	bne.n	80075d0 <__sfputs_r+0xa>
 80075e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080075ec <_vfiprintf_r>:
 80075ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075f0:	460d      	mov	r5, r1
 80075f2:	b09d      	sub	sp, #116	@ 0x74
 80075f4:	4614      	mov	r4, r2
 80075f6:	4698      	mov	r8, r3
 80075f8:	4606      	mov	r6, r0
 80075fa:	b118      	cbz	r0, 8007604 <_vfiprintf_r+0x18>
 80075fc:	6a03      	ldr	r3, [r0, #32]
 80075fe:	b90b      	cbnz	r3, 8007604 <_vfiprintf_r+0x18>
 8007600:	f7ff fd98 	bl	8007134 <__sinit>
 8007604:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007606:	07d9      	lsls	r1, r3, #31
 8007608:	d405      	bmi.n	8007616 <_vfiprintf_r+0x2a>
 800760a:	89ab      	ldrh	r3, [r5, #12]
 800760c:	059a      	lsls	r2, r3, #22
 800760e:	d402      	bmi.n	8007616 <_vfiprintf_r+0x2a>
 8007610:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007612:	f7ff fe68 	bl	80072e6 <__retarget_lock_acquire_recursive>
 8007616:	89ab      	ldrh	r3, [r5, #12]
 8007618:	071b      	lsls	r3, r3, #28
 800761a:	d501      	bpl.n	8007620 <_vfiprintf_r+0x34>
 800761c:	692b      	ldr	r3, [r5, #16]
 800761e:	b99b      	cbnz	r3, 8007648 <_vfiprintf_r+0x5c>
 8007620:	4629      	mov	r1, r5
 8007622:	4630      	mov	r0, r6
 8007624:	f000 fc90 	bl	8007f48 <__swsetup_r>
 8007628:	b170      	cbz	r0, 8007648 <_vfiprintf_r+0x5c>
 800762a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800762c:	07dc      	lsls	r4, r3, #31
 800762e:	d504      	bpl.n	800763a <_vfiprintf_r+0x4e>
 8007630:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007634:	b01d      	add	sp, #116	@ 0x74
 8007636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800763a:	89ab      	ldrh	r3, [r5, #12]
 800763c:	0598      	lsls	r0, r3, #22
 800763e:	d4f7      	bmi.n	8007630 <_vfiprintf_r+0x44>
 8007640:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007642:	f7ff fe51 	bl	80072e8 <__retarget_lock_release_recursive>
 8007646:	e7f3      	b.n	8007630 <_vfiprintf_r+0x44>
 8007648:	2300      	movs	r3, #0
 800764a:	9309      	str	r3, [sp, #36]	@ 0x24
 800764c:	2320      	movs	r3, #32
 800764e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007652:	f8cd 800c 	str.w	r8, [sp, #12]
 8007656:	2330      	movs	r3, #48	@ 0x30
 8007658:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007808 <_vfiprintf_r+0x21c>
 800765c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007660:	f04f 0901 	mov.w	r9, #1
 8007664:	4623      	mov	r3, r4
 8007666:	469a      	mov	sl, r3
 8007668:	f813 2b01 	ldrb.w	r2, [r3], #1
 800766c:	b10a      	cbz	r2, 8007672 <_vfiprintf_r+0x86>
 800766e:	2a25      	cmp	r2, #37	@ 0x25
 8007670:	d1f9      	bne.n	8007666 <_vfiprintf_r+0x7a>
 8007672:	ebba 0b04 	subs.w	fp, sl, r4
 8007676:	d00b      	beq.n	8007690 <_vfiprintf_r+0xa4>
 8007678:	465b      	mov	r3, fp
 800767a:	4622      	mov	r2, r4
 800767c:	4629      	mov	r1, r5
 800767e:	4630      	mov	r0, r6
 8007680:	f7ff ffa1 	bl	80075c6 <__sfputs_r>
 8007684:	3001      	adds	r0, #1
 8007686:	f000 80a7 	beq.w	80077d8 <_vfiprintf_r+0x1ec>
 800768a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800768c:	445a      	add	r2, fp
 800768e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007690:	f89a 3000 	ldrb.w	r3, [sl]
 8007694:	2b00      	cmp	r3, #0
 8007696:	f000 809f 	beq.w	80077d8 <_vfiprintf_r+0x1ec>
 800769a:	2300      	movs	r3, #0
 800769c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80076a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076a4:	f10a 0a01 	add.w	sl, sl, #1
 80076a8:	9304      	str	r3, [sp, #16]
 80076aa:	9307      	str	r3, [sp, #28]
 80076ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80076b0:	931a      	str	r3, [sp, #104]	@ 0x68
 80076b2:	4654      	mov	r4, sl
 80076b4:	2205      	movs	r2, #5
 80076b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076ba:	4853      	ldr	r0, [pc, #332]	@ (8007808 <_vfiprintf_r+0x21c>)
 80076bc:	f7f8 fda0 	bl	8000200 <memchr>
 80076c0:	9a04      	ldr	r2, [sp, #16]
 80076c2:	b9d8      	cbnz	r0, 80076fc <_vfiprintf_r+0x110>
 80076c4:	06d1      	lsls	r1, r2, #27
 80076c6:	bf44      	itt	mi
 80076c8:	2320      	movmi	r3, #32
 80076ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076ce:	0713      	lsls	r3, r2, #28
 80076d0:	bf44      	itt	mi
 80076d2:	232b      	movmi	r3, #43	@ 0x2b
 80076d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076d8:	f89a 3000 	ldrb.w	r3, [sl]
 80076dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80076de:	d015      	beq.n	800770c <_vfiprintf_r+0x120>
 80076e0:	9a07      	ldr	r2, [sp, #28]
 80076e2:	4654      	mov	r4, sl
 80076e4:	2000      	movs	r0, #0
 80076e6:	f04f 0c0a 	mov.w	ip, #10
 80076ea:	4621      	mov	r1, r4
 80076ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076f0:	3b30      	subs	r3, #48	@ 0x30
 80076f2:	2b09      	cmp	r3, #9
 80076f4:	d94b      	bls.n	800778e <_vfiprintf_r+0x1a2>
 80076f6:	b1b0      	cbz	r0, 8007726 <_vfiprintf_r+0x13a>
 80076f8:	9207      	str	r2, [sp, #28]
 80076fa:	e014      	b.n	8007726 <_vfiprintf_r+0x13a>
 80076fc:	eba0 0308 	sub.w	r3, r0, r8
 8007700:	fa09 f303 	lsl.w	r3, r9, r3
 8007704:	4313      	orrs	r3, r2
 8007706:	9304      	str	r3, [sp, #16]
 8007708:	46a2      	mov	sl, r4
 800770a:	e7d2      	b.n	80076b2 <_vfiprintf_r+0xc6>
 800770c:	9b03      	ldr	r3, [sp, #12]
 800770e:	1d19      	adds	r1, r3, #4
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	9103      	str	r1, [sp, #12]
 8007714:	2b00      	cmp	r3, #0
 8007716:	bfbb      	ittet	lt
 8007718:	425b      	neglt	r3, r3
 800771a:	f042 0202 	orrlt.w	r2, r2, #2
 800771e:	9307      	strge	r3, [sp, #28]
 8007720:	9307      	strlt	r3, [sp, #28]
 8007722:	bfb8      	it	lt
 8007724:	9204      	strlt	r2, [sp, #16]
 8007726:	7823      	ldrb	r3, [r4, #0]
 8007728:	2b2e      	cmp	r3, #46	@ 0x2e
 800772a:	d10a      	bne.n	8007742 <_vfiprintf_r+0x156>
 800772c:	7863      	ldrb	r3, [r4, #1]
 800772e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007730:	d132      	bne.n	8007798 <_vfiprintf_r+0x1ac>
 8007732:	9b03      	ldr	r3, [sp, #12]
 8007734:	1d1a      	adds	r2, r3, #4
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	9203      	str	r2, [sp, #12]
 800773a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800773e:	3402      	adds	r4, #2
 8007740:	9305      	str	r3, [sp, #20]
 8007742:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007818 <_vfiprintf_r+0x22c>
 8007746:	7821      	ldrb	r1, [r4, #0]
 8007748:	2203      	movs	r2, #3
 800774a:	4650      	mov	r0, sl
 800774c:	f7f8 fd58 	bl	8000200 <memchr>
 8007750:	b138      	cbz	r0, 8007762 <_vfiprintf_r+0x176>
 8007752:	9b04      	ldr	r3, [sp, #16]
 8007754:	eba0 000a 	sub.w	r0, r0, sl
 8007758:	2240      	movs	r2, #64	@ 0x40
 800775a:	4082      	lsls	r2, r0
 800775c:	4313      	orrs	r3, r2
 800775e:	3401      	adds	r4, #1
 8007760:	9304      	str	r3, [sp, #16]
 8007762:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007766:	4829      	ldr	r0, [pc, #164]	@ (800780c <_vfiprintf_r+0x220>)
 8007768:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800776c:	2206      	movs	r2, #6
 800776e:	f7f8 fd47 	bl	8000200 <memchr>
 8007772:	2800      	cmp	r0, #0
 8007774:	d03f      	beq.n	80077f6 <_vfiprintf_r+0x20a>
 8007776:	4b26      	ldr	r3, [pc, #152]	@ (8007810 <_vfiprintf_r+0x224>)
 8007778:	bb1b      	cbnz	r3, 80077c2 <_vfiprintf_r+0x1d6>
 800777a:	9b03      	ldr	r3, [sp, #12]
 800777c:	3307      	adds	r3, #7
 800777e:	f023 0307 	bic.w	r3, r3, #7
 8007782:	3308      	adds	r3, #8
 8007784:	9303      	str	r3, [sp, #12]
 8007786:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007788:	443b      	add	r3, r7
 800778a:	9309      	str	r3, [sp, #36]	@ 0x24
 800778c:	e76a      	b.n	8007664 <_vfiprintf_r+0x78>
 800778e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007792:	460c      	mov	r4, r1
 8007794:	2001      	movs	r0, #1
 8007796:	e7a8      	b.n	80076ea <_vfiprintf_r+0xfe>
 8007798:	2300      	movs	r3, #0
 800779a:	3401      	adds	r4, #1
 800779c:	9305      	str	r3, [sp, #20]
 800779e:	4619      	mov	r1, r3
 80077a0:	f04f 0c0a 	mov.w	ip, #10
 80077a4:	4620      	mov	r0, r4
 80077a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077aa:	3a30      	subs	r2, #48	@ 0x30
 80077ac:	2a09      	cmp	r2, #9
 80077ae:	d903      	bls.n	80077b8 <_vfiprintf_r+0x1cc>
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d0c6      	beq.n	8007742 <_vfiprintf_r+0x156>
 80077b4:	9105      	str	r1, [sp, #20]
 80077b6:	e7c4      	b.n	8007742 <_vfiprintf_r+0x156>
 80077b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80077bc:	4604      	mov	r4, r0
 80077be:	2301      	movs	r3, #1
 80077c0:	e7f0      	b.n	80077a4 <_vfiprintf_r+0x1b8>
 80077c2:	ab03      	add	r3, sp, #12
 80077c4:	9300      	str	r3, [sp, #0]
 80077c6:	462a      	mov	r2, r5
 80077c8:	4b12      	ldr	r3, [pc, #72]	@ (8007814 <_vfiprintf_r+0x228>)
 80077ca:	a904      	add	r1, sp, #16
 80077cc:	4630      	mov	r0, r6
 80077ce:	f3af 8000 	nop.w
 80077d2:	4607      	mov	r7, r0
 80077d4:	1c78      	adds	r0, r7, #1
 80077d6:	d1d6      	bne.n	8007786 <_vfiprintf_r+0x19a>
 80077d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80077da:	07d9      	lsls	r1, r3, #31
 80077dc:	d405      	bmi.n	80077ea <_vfiprintf_r+0x1fe>
 80077de:	89ab      	ldrh	r3, [r5, #12]
 80077e0:	059a      	lsls	r2, r3, #22
 80077e2:	d402      	bmi.n	80077ea <_vfiprintf_r+0x1fe>
 80077e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80077e6:	f7ff fd7f 	bl	80072e8 <__retarget_lock_release_recursive>
 80077ea:	89ab      	ldrh	r3, [r5, #12]
 80077ec:	065b      	lsls	r3, r3, #25
 80077ee:	f53f af1f 	bmi.w	8007630 <_vfiprintf_r+0x44>
 80077f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80077f4:	e71e      	b.n	8007634 <_vfiprintf_r+0x48>
 80077f6:	ab03      	add	r3, sp, #12
 80077f8:	9300      	str	r3, [sp, #0]
 80077fa:	462a      	mov	r2, r5
 80077fc:	4b05      	ldr	r3, [pc, #20]	@ (8007814 <_vfiprintf_r+0x228>)
 80077fe:	a904      	add	r1, sp, #16
 8007800:	4630      	mov	r0, r6
 8007802:	f000 f91b 	bl	8007a3c <_printf_i>
 8007806:	e7e4      	b.n	80077d2 <_vfiprintf_r+0x1e6>
 8007808:	08009fdc 	.word	0x08009fdc
 800780c:	08009fe6 	.word	0x08009fe6
 8007810:	00000000 	.word	0x00000000
 8007814:	080075c7 	.word	0x080075c7
 8007818:	08009fe2 	.word	0x08009fe2

0800781c <sbrk_aligned>:
 800781c:	b570      	push	{r4, r5, r6, lr}
 800781e:	4e0f      	ldr	r6, [pc, #60]	@ (800785c <sbrk_aligned+0x40>)
 8007820:	460c      	mov	r4, r1
 8007822:	6831      	ldr	r1, [r6, #0]
 8007824:	4605      	mov	r5, r0
 8007826:	b911      	cbnz	r1, 800782e <sbrk_aligned+0x12>
 8007828:	f000 fc94 	bl	8008154 <_sbrk_r>
 800782c:	6030      	str	r0, [r6, #0]
 800782e:	4621      	mov	r1, r4
 8007830:	4628      	mov	r0, r5
 8007832:	f000 fc8f 	bl	8008154 <_sbrk_r>
 8007836:	1c43      	adds	r3, r0, #1
 8007838:	d103      	bne.n	8007842 <sbrk_aligned+0x26>
 800783a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800783e:	4620      	mov	r0, r4
 8007840:	bd70      	pop	{r4, r5, r6, pc}
 8007842:	1cc4      	adds	r4, r0, #3
 8007844:	f024 0403 	bic.w	r4, r4, #3
 8007848:	42a0      	cmp	r0, r4
 800784a:	d0f8      	beq.n	800783e <sbrk_aligned+0x22>
 800784c:	1a21      	subs	r1, r4, r0
 800784e:	4628      	mov	r0, r5
 8007850:	f000 fc80 	bl	8008154 <_sbrk_r>
 8007854:	3001      	adds	r0, #1
 8007856:	d1f2      	bne.n	800783e <sbrk_aligned+0x22>
 8007858:	e7ef      	b.n	800783a <sbrk_aligned+0x1e>
 800785a:	bf00      	nop
 800785c:	20025d84 	.word	0x20025d84

08007860 <_malloc_r>:
 8007860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007864:	1ccd      	adds	r5, r1, #3
 8007866:	f025 0503 	bic.w	r5, r5, #3
 800786a:	3508      	adds	r5, #8
 800786c:	2d0c      	cmp	r5, #12
 800786e:	bf38      	it	cc
 8007870:	250c      	movcc	r5, #12
 8007872:	2d00      	cmp	r5, #0
 8007874:	4606      	mov	r6, r0
 8007876:	db01      	blt.n	800787c <_malloc_r+0x1c>
 8007878:	42a9      	cmp	r1, r5
 800787a:	d904      	bls.n	8007886 <_malloc_r+0x26>
 800787c:	230c      	movs	r3, #12
 800787e:	6033      	str	r3, [r6, #0]
 8007880:	2000      	movs	r0, #0
 8007882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007886:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800795c <_malloc_r+0xfc>
 800788a:	f000 faa1 	bl	8007dd0 <__malloc_lock>
 800788e:	f8d8 3000 	ldr.w	r3, [r8]
 8007892:	461c      	mov	r4, r3
 8007894:	bb44      	cbnz	r4, 80078e8 <_malloc_r+0x88>
 8007896:	4629      	mov	r1, r5
 8007898:	4630      	mov	r0, r6
 800789a:	f7ff ffbf 	bl	800781c <sbrk_aligned>
 800789e:	1c43      	adds	r3, r0, #1
 80078a0:	4604      	mov	r4, r0
 80078a2:	d158      	bne.n	8007956 <_malloc_r+0xf6>
 80078a4:	f8d8 4000 	ldr.w	r4, [r8]
 80078a8:	4627      	mov	r7, r4
 80078aa:	2f00      	cmp	r7, #0
 80078ac:	d143      	bne.n	8007936 <_malloc_r+0xd6>
 80078ae:	2c00      	cmp	r4, #0
 80078b0:	d04b      	beq.n	800794a <_malloc_r+0xea>
 80078b2:	6823      	ldr	r3, [r4, #0]
 80078b4:	4639      	mov	r1, r7
 80078b6:	4630      	mov	r0, r6
 80078b8:	eb04 0903 	add.w	r9, r4, r3
 80078bc:	f000 fc4a 	bl	8008154 <_sbrk_r>
 80078c0:	4581      	cmp	r9, r0
 80078c2:	d142      	bne.n	800794a <_malloc_r+0xea>
 80078c4:	6821      	ldr	r1, [r4, #0]
 80078c6:	1a6d      	subs	r5, r5, r1
 80078c8:	4629      	mov	r1, r5
 80078ca:	4630      	mov	r0, r6
 80078cc:	f7ff ffa6 	bl	800781c <sbrk_aligned>
 80078d0:	3001      	adds	r0, #1
 80078d2:	d03a      	beq.n	800794a <_malloc_r+0xea>
 80078d4:	6823      	ldr	r3, [r4, #0]
 80078d6:	442b      	add	r3, r5
 80078d8:	6023      	str	r3, [r4, #0]
 80078da:	f8d8 3000 	ldr.w	r3, [r8]
 80078de:	685a      	ldr	r2, [r3, #4]
 80078e0:	bb62      	cbnz	r2, 800793c <_malloc_r+0xdc>
 80078e2:	f8c8 7000 	str.w	r7, [r8]
 80078e6:	e00f      	b.n	8007908 <_malloc_r+0xa8>
 80078e8:	6822      	ldr	r2, [r4, #0]
 80078ea:	1b52      	subs	r2, r2, r5
 80078ec:	d420      	bmi.n	8007930 <_malloc_r+0xd0>
 80078ee:	2a0b      	cmp	r2, #11
 80078f0:	d917      	bls.n	8007922 <_malloc_r+0xc2>
 80078f2:	1961      	adds	r1, r4, r5
 80078f4:	42a3      	cmp	r3, r4
 80078f6:	6025      	str	r5, [r4, #0]
 80078f8:	bf18      	it	ne
 80078fa:	6059      	strne	r1, [r3, #4]
 80078fc:	6863      	ldr	r3, [r4, #4]
 80078fe:	bf08      	it	eq
 8007900:	f8c8 1000 	streq.w	r1, [r8]
 8007904:	5162      	str	r2, [r4, r5]
 8007906:	604b      	str	r3, [r1, #4]
 8007908:	4630      	mov	r0, r6
 800790a:	f000 fa67 	bl	8007ddc <__malloc_unlock>
 800790e:	f104 000b 	add.w	r0, r4, #11
 8007912:	1d23      	adds	r3, r4, #4
 8007914:	f020 0007 	bic.w	r0, r0, #7
 8007918:	1ac2      	subs	r2, r0, r3
 800791a:	bf1c      	itt	ne
 800791c:	1a1b      	subne	r3, r3, r0
 800791e:	50a3      	strne	r3, [r4, r2]
 8007920:	e7af      	b.n	8007882 <_malloc_r+0x22>
 8007922:	6862      	ldr	r2, [r4, #4]
 8007924:	42a3      	cmp	r3, r4
 8007926:	bf0c      	ite	eq
 8007928:	f8c8 2000 	streq.w	r2, [r8]
 800792c:	605a      	strne	r2, [r3, #4]
 800792e:	e7eb      	b.n	8007908 <_malloc_r+0xa8>
 8007930:	4623      	mov	r3, r4
 8007932:	6864      	ldr	r4, [r4, #4]
 8007934:	e7ae      	b.n	8007894 <_malloc_r+0x34>
 8007936:	463c      	mov	r4, r7
 8007938:	687f      	ldr	r7, [r7, #4]
 800793a:	e7b6      	b.n	80078aa <_malloc_r+0x4a>
 800793c:	461a      	mov	r2, r3
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	42a3      	cmp	r3, r4
 8007942:	d1fb      	bne.n	800793c <_malloc_r+0xdc>
 8007944:	2300      	movs	r3, #0
 8007946:	6053      	str	r3, [r2, #4]
 8007948:	e7de      	b.n	8007908 <_malloc_r+0xa8>
 800794a:	230c      	movs	r3, #12
 800794c:	6033      	str	r3, [r6, #0]
 800794e:	4630      	mov	r0, r6
 8007950:	f000 fa44 	bl	8007ddc <__malloc_unlock>
 8007954:	e794      	b.n	8007880 <_malloc_r+0x20>
 8007956:	6005      	str	r5, [r0, #0]
 8007958:	e7d6      	b.n	8007908 <_malloc_r+0xa8>
 800795a:	bf00      	nop
 800795c:	20025d88 	.word	0x20025d88

08007960 <_printf_common>:
 8007960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007964:	4616      	mov	r6, r2
 8007966:	4698      	mov	r8, r3
 8007968:	688a      	ldr	r2, [r1, #8]
 800796a:	690b      	ldr	r3, [r1, #16]
 800796c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007970:	4293      	cmp	r3, r2
 8007972:	bfb8      	it	lt
 8007974:	4613      	movlt	r3, r2
 8007976:	6033      	str	r3, [r6, #0]
 8007978:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800797c:	4607      	mov	r7, r0
 800797e:	460c      	mov	r4, r1
 8007980:	b10a      	cbz	r2, 8007986 <_printf_common+0x26>
 8007982:	3301      	adds	r3, #1
 8007984:	6033      	str	r3, [r6, #0]
 8007986:	6823      	ldr	r3, [r4, #0]
 8007988:	0699      	lsls	r1, r3, #26
 800798a:	bf42      	ittt	mi
 800798c:	6833      	ldrmi	r3, [r6, #0]
 800798e:	3302      	addmi	r3, #2
 8007990:	6033      	strmi	r3, [r6, #0]
 8007992:	6825      	ldr	r5, [r4, #0]
 8007994:	f015 0506 	ands.w	r5, r5, #6
 8007998:	d106      	bne.n	80079a8 <_printf_common+0x48>
 800799a:	f104 0a19 	add.w	sl, r4, #25
 800799e:	68e3      	ldr	r3, [r4, #12]
 80079a0:	6832      	ldr	r2, [r6, #0]
 80079a2:	1a9b      	subs	r3, r3, r2
 80079a4:	42ab      	cmp	r3, r5
 80079a6:	dc26      	bgt.n	80079f6 <_printf_common+0x96>
 80079a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80079ac:	6822      	ldr	r2, [r4, #0]
 80079ae:	3b00      	subs	r3, #0
 80079b0:	bf18      	it	ne
 80079b2:	2301      	movne	r3, #1
 80079b4:	0692      	lsls	r2, r2, #26
 80079b6:	d42b      	bmi.n	8007a10 <_printf_common+0xb0>
 80079b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80079bc:	4641      	mov	r1, r8
 80079be:	4638      	mov	r0, r7
 80079c0:	47c8      	blx	r9
 80079c2:	3001      	adds	r0, #1
 80079c4:	d01e      	beq.n	8007a04 <_printf_common+0xa4>
 80079c6:	6823      	ldr	r3, [r4, #0]
 80079c8:	6922      	ldr	r2, [r4, #16]
 80079ca:	f003 0306 	and.w	r3, r3, #6
 80079ce:	2b04      	cmp	r3, #4
 80079d0:	bf02      	ittt	eq
 80079d2:	68e5      	ldreq	r5, [r4, #12]
 80079d4:	6833      	ldreq	r3, [r6, #0]
 80079d6:	1aed      	subeq	r5, r5, r3
 80079d8:	68a3      	ldr	r3, [r4, #8]
 80079da:	bf0c      	ite	eq
 80079dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079e0:	2500      	movne	r5, #0
 80079e2:	4293      	cmp	r3, r2
 80079e4:	bfc4      	itt	gt
 80079e6:	1a9b      	subgt	r3, r3, r2
 80079e8:	18ed      	addgt	r5, r5, r3
 80079ea:	2600      	movs	r6, #0
 80079ec:	341a      	adds	r4, #26
 80079ee:	42b5      	cmp	r5, r6
 80079f0:	d11a      	bne.n	8007a28 <_printf_common+0xc8>
 80079f2:	2000      	movs	r0, #0
 80079f4:	e008      	b.n	8007a08 <_printf_common+0xa8>
 80079f6:	2301      	movs	r3, #1
 80079f8:	4652      	mov	r2, sl
 80079fa:	4641      	mov	r1, r8
 80079fc:	4638      	mov	r0, r7
 80079fe:	47c8      	blx	r9
 8007a00:	3001      	adds	r0, #1
 8007a02:	d103      	bne.n	8007a0c <_printf_common+0xac>
 8007a04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a0c:	3501      	adds	r5, #1
 8007a0e:	e7c6      	b.n	800799e <_printf_common+0x3e>
 8007a10:	18e1      	adds	r1, r4, r3
 8007a12:	1c5a      	adds	r2, r3, #1
 8007a14:	2030      	movs	r0, #48	@ 0x30
 8007a16:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007a1a:	4422      	add	r2, r4
 8007a1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007a20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007a24:	3302      	adds	r3, #2
 8007a26:	e7c7      	b.n	80079b8 <_printf_common+0x58>
 8007a28:	2301      	movs	r3, #1
 8007a2a:	4622      	mov	r2, r4
 8007a2c:	4641      	mov	r1, r8
 8007a2e:	4638      	mov	r0, r7
 8007a30:	47c8      	blx	r9
 8007a32:	3001      	adds	r0, #1
 8007a34:	d0e6      	beq.n	8007a04 <_printf_common+0xa4>
 8007a36:	3601      	adds	r6, #1
 8007a38:	e7d9      	b.n	80079ee <_printf_common+0x8e>
	...

08007a3c <_printf_i>:
 8007a3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a40:	7e0f      	ldrb	r7, [r1, #24]
 8007a42:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007a44:	2f78      	cmp	r7, #120	@ 0x78
 8007a46:	4691      	mov	r9, r2
 8007a48:	4680      	mov	r8, r0
 8007a4a:	460c      	mov	r4, r1
 8007a4c:	469a      	mov	sl, r3
 8007a4e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007a52:	d807      	bhi.n	8007a64 <_printf_i+0x28>
 8007a54:	2f62      	cmp	r7, #98	@ 0x62
 8007a56:	d80a      	bhi.n	8007a6e <_printf_i+0x32>
 8007a58:	2f00      	cmp	r7, #0
 8007a5a:	f000 80d1 	beq.w	8007c00 <_printf_i+0x1c4>
 8007a5e:	2f58      	cmp	r7, #88	@ 0x58
 8007a60:	f000 80b8 	beq.w	8007bd4 <_printf_i+0x198>
 8007a64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a68:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007a6c:	e03a      	b.n	8007ae4 <_printf_i+0xa8>
 8007a6e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007a72:	2b15      	cmp	r3, #21
 8007a74:	d8f6      	bhi.n	8007a64 <_printf_i+0x28>
 8007a76:	a101      	add	r1, pc, #4	@ (adr r1, 8007a7c <_printf_i+0x40>)
 8007a78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a7c:	08007ad5 	.word	0x08007ad5
 8007a80:	08007ae9 	.word	0x08007ae9
 8007a84:	08007a65 	.word	0x08007a65
 8007a88:	08007a65 	.word	0x08007a65
 8007a8c:	08007a65 	.word	0x08007a65
 8007a90:	08007a65 	.word	0x08007a65
 8007a94:	08007ae9 	.word	0x08007ae9
 8007a98:	08007a65 	.word	0x08007a65
 8007a9c:	08007a65 	.word	0x08007a65
 8007aa0:	08007a65 	.word	0x08007a65
 8007aa4:	08007a65 	.word	0x08007a65
 8007aa8:	08007be7 	.word	0x08007be7
 8007aac:	08007b13 	.word	0x08007b13
 8007ab0:	08007ba1 	.word	0x08007ba1
 8007ab4:	08007a65 	.word	0x08007a65
 8007ab8:	08007a65 	.word	0x08007a65
 8007abc:	08007c09 	.word	0x08007c09
 8007ac0:	08007a65 	.word	0x08007a65
 8007ac4:	08007b13 	.word	0x08007b13
 8007ac8:	08007a65 	.word	0x08007a65
 8007acc:	08007a65 	.word	0x08007a65
 8007ad0:	08007ba9 	.word	0x08007ba9
 8007ad4:	6833      	ldr	r3, [r6, #0]
 8007ad6:	1d1a      	adds	r2, r3, #4
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	6032      	str	r2, [r6, #0]
 8007adc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ae0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	e09c      	b.n	8007c22 <_printf_i+0x1e6>
 8007ae8:	6833      	ldr	r3, [r6, #0]
 8007aea:	6820      	ldr	r0, [r4, #0]
 8007aec:	1d19      	adds	r1, r3, #4
 8007aee:	6031      	str	r1, [r6, #0]
 8007af0:	0606      	lsls	r6, r0, #24
 8007af2:	d501      	bpl.n	8007af8 <_printf_i+0xbc>
 8007af4:	681d      	ldr	r5, [r3, #0]
 8007af6:	e003      	b.n	8007b00 <_printf_i+0xc4>
 8007af8:	0645      	lsls	r5, r0, #25
 8007afa:	d5fb      	bpl.n	8007af4 <_printf_i+0xb8>
 8007afc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007b00:	2d00      	cmp	r5, #0
 8007b02:	da03      	bge.n	8007b0c <_printf_i+0xd0>
 8007b04:	232d      	movs	r3, #45	@ 0x2d
 8007b06:	426d      	negs	r5, r5
 8007b08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b0c:	4858      	ldr	r0, [pc, #352]	@ (8007c70 <_printf_i+0x234>)
 8007b0e:	230a      	movs	r3, #10
 8007b10:	e011      	b.n	8007b36 <_printf_i+0xfa>
 8007b12:	6821      	ldr	r1, [r4, #0]
 8007b14:	6833      	ldr	r3, [r6, #0]
 8007b16:	0608      	lsls	r0, r1, #24
 8007b18:	f853 5b04 	ldr.w	r5, [r3], #4
 8007b1c:	d402      	bmi.n	8007b24 <_printf_i+0xe8>
 8007b1e:	0649      	lsls	r1, r1, #25
 8007b20:	bf48      	it	mi
 8007b22:	b2ad      	uxthmi	r5, r5
 8007b24:	2f6f      	cmp	r7, #111	@ 0x6f
 8007b26:	4852      	ldr	r0, [pc, #328]	@ (8007c70 <_printf_i+0x234>)
 8007b28:	6033      	str	r3, [r6, #0]
 8007b2a:	bf14      	ite	ne
 8007b2c:	230a      	movne	r3, #10
 8007b2e:	2308      	moveq	r3, #8
 8007b30:	2100      	movs	r1, #0
 8007b32:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007b36:	6866      	ldr	r6, [r4, #4]
 8007b38:	60a6      	str	r6, [r4, #8]
 8007b3a:	2e00      	cmp	r6, #0
 8007b3c:	db05      	blt.n	8007b4a <_printf_i+0x10e>
 8007b3e:	6821      	ldr	r1, [r4, #0]
 8007b40:	432e      	orrs	r6, r5
 8007b42:	f021 0104 	bic.w	r1, r1, #4
 8007b46:	6021      	str	r1, [r4, #0]
 8007b48:	d04b      	beq.n	8007be2 <_printf_i+0x1a6>
 8007b4a:	4616      	mov	r6, r2
 8007b4c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007b50:	fb03 5711 	mls	r7, r3, r1, r5
 8007b54:	5dc7      	ldrb	r7, [r0, r7]
 8007b56:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007b5a:	462f      	mov	r7, r5
 8007b5c:	42bb      	cmp	r3, r7
 8007b5e:	460d      	mov	r5, r1
 8007b60:	d9f4      	bls.n	8007b4c <_printf_i+0x110>
 8007b62:	2b08      	cmp	r3, #8
 8007b64:	d10b      	bne.n	8007b7e <_printf_i+0x142>
 8007b66:	6823      	ldr	r3, [r4, #0]
 8007b68:	07df      	lsls	r7, r3, #31
 8007b6a:	d508      	bpl.n	8007b7e <_printf_i+0x142>
 8007b6c:	6923      	ldr	r3, [r4, #16]
 8007b6e:	6861      	ldr	r1, [r4, #4]
 8007b70:	4299      	cmp	r1, r3
 8007b72:	bfde      	ittt	le
 8007b74:	2330      	movle	r3, #48	@ 0x30
 8007b76:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007b7a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007b7e:	1b92      	subs	r2, r2, r6
 8007b80:	6122      	str	r2, [r4, #16]
 8007b82:	f8cd a000 	str.w	sl, [sp]
 8007b86:	464b      	mov	r3, r9
 8007b88:	aa03      	add	r2, sp, #12
 8007b8a:	4621      	mov	r1, r4
 8007b8c:	4640      	mov	r0, r8
 8007b8e:	f7ff fee7 	bl	8007960 <_printf_common>
 8007b92:	3001      	adds	r0, #1
 8007b94:	d14a      	bne.n	8007c2c <_printf_i+0x1f0>
 8007b96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007b9a:	b004      	add	sp, #16
 8007b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ba0:	6823      	ldr	r3, [r4, #0]
 8007ba2:	f043 0320 	orr.w	r3, r3, #32
 8007ba6:	6023      	str	r3, [r4, #0]
 8007ba8:	4832      	ldr	r0, [pc, #200]	@ (8007c74 <_printf_i+0x238>)
 8007baa:	2778      	movs	r7, #120	@ 0x78
 8007bac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007bb0:	6823      	ldr	r3, [r4, #0]
 8007bb2:	6831      	ldr	r1, [r6, #0]
 8007bb4:	061f      	lsls	r7, r3, #24
 8007bb6:	f851 5b04 	ldr.w	r5, [r1], #4
 8007bba:	d402      	bmi.n	8007bc2 <_printf_i+0x186>
 8007bbc:	065f      	lsls	r7, r3, #25
 8007bbe:	bf48      	it	mi
 8007bc0:	b2ad      	uxthmi	r5, r5
 8007bc2:	6031      	str	r1, [r6, #0]
 8007bc4:	07d9      	lsls	r1, r3, #31
 8007bc6:	bf44      	itt	mi
 8007bc8:	f043 0320 	orrmi.w	r3, r3, #32
 8007bcc:	6023      	strmi	r3, [r4, #0]
 8007bce:	b11d      	cbz	r5, 8007bd8 <_printf_i+0x19c>
 8007bd0:	2310      	movs	r3, #16
 8007bd2:	e7ad      	b.n	8007b30 <_printf_i+0xf4>
 8007bd4:	4826      	ldr	r0, [pc, #152]	@ (8007c70 <_printf_i+0x234>)
 8007bd6:	e7e9      	b.n	8007bac <_printf_i+0x170>
 8007bd8:	6823      	ldr	r3, [r4, #0]
 8007bda:	f023 0320 	bic.w	r3, r3, #32
 8007bde:	6023      	str	r3, [r4, #0]
 8007be0:	e7f6      	b.n	8007bd0 <_printf_i+0x194>
 8007be2:	4616      	mov	r6, r2
 8007be4:	e7bd      	b.n	8007b62 <_printf_i+0x126>
 8007be6:	6833      	ldr	r3, [r6, #0]
 8007be8:	6825      	ldr	r5, [r4, #0]
 8007bea:	6961      	ldr	r1, [r4, #20]
 8007bec:	1d18      	adds	r0, r3, #4
 8007bee:	6030      	str	r0, [r6, #0]
 8007bf0:	062e      	lsls	r6, r5, #24
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	d501      	bpl.n	8007bfa <_printf_i+0x1be>
 8007bf6:	6019      	str	r1, [r3, #0]
 8007bf8:	e002      	b.n	8007c00 <_printf_i+0x1c4>
 8007bfa:	0668      	lsls	r0, r5, #25
 8007bfc:	d5fb      	bpl.n	8007bf6 <_printf_i+0x1ba>
 8007bfe:	8019      	strh	r1, [r3, #0]
 8007c00:	2300      	movs	r3, #0
 8007c02:	6123      	str	r3, [r4, #16]
 8007c04:	4616      	mov	r6, r2
 8007c06:	e7bc      	b.n	8007b82 <_printf_i+0x146>
 8007c08:	6833      	ldr	r3, [r6, #0]
 8007c0a:	1d1a      	adds	r2, r3, #4
 8007c0c:	6032      	str	r2, [r6, #0]
 8007c0e:	681e      	ldr	r6, [r3, #0]
 8007c10:	6862      	ldr	r2, [r4, #4]
 8007c12:	2100      	movs	r1, #0
 8007c14:	4630      	mov	r0, r6
 8007c16:	f7f8 faf3 	bl	8000200 <memchr>
 8007c1a:	b108      	cbz	r0, 8007c20 <_printf_i+0x1e4>
 8007c1c:	1b80      	subs	r0, r0, r6
 8007c1e:	6060      	str	r0, [r4, #4]
 8007c20:	6863      	ldr	r3, [r4, #4]
 8007c22:	6123      	str	r3, [r4, #16]
 8007c24:	2300      	movs	r3, #0
 8007c26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c2a:	e7aa      	b.n	8007b82 <_printf_i+0x146>
 8007c2c:	6923      	ldr	r3, [r4, #16]
 8007c2e:	4632      	mov	r2, r6
 8007c30:	4649      	mov	r1, r9
 8007c32:	4640      	mov	r0, r8
 8007c34:	47d0      	blx	sl
 8007c36:	3001      	adds	r0, #1
 8007c38:	d0ad      	beq.n	8007b96 <_printf_i+0x15a>
 8007c3a:	6823      	ldr	r3, [r4, #0]
 8007c3c:	079b      	lsls	r3, r3, #30
 8007c3e:	d413      	bmi.n	8007c68 <_printf_i+0x22c>
 8007c40:	68e0      	ldr	r0, [r4, #12]
 8007c42:	9b03      	ldr	r3, [sp, #12]
 8007c44:	4298      	cmp	r0, r3
 8007c46:	bfb8      	it	lt
 8007c48:	4618      	movlt	r0, r3
 8007c4a:	e7a6      	b.n	8007b9a <_printf_i+0x15e>
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	4632      	mov	r2, r6
 8007c50:	4649      	mov	r1, r9
 8007c52:	4640      	mov	r0, r8
 8007c54:	47d0      	blx	sl
 8007c56:	3001      	adds	r0, #1
 8007c58:	d09d      	beq.n	8007b96 <_printf_i+0x15a>
 8007c5a:	3501      	adds	r5, #1
 8007c5c:	68e3      	ldr	r3, [r4, #12]
 8007c5e:	9903      	ldr	r1, [sp, #12]
 8007c60:	1a5b      	subs	r3, r3, r1
 8007c62:	42ab      	cmp	r3, r5
 8007c64:	dcf2      	bgt.n	8007c4c <_printf_i+0x210>
 8007c66:	e7eb      	b.n	8007c40 <_printf_i+0x204>
 8007c68:	2500      	movs	r5, #0
 8007c6a:	f104 0619 	add.w	r6, r4, #25
 8007c6e:	e7f5      	b.n	8007c5c <_printf_i+0x220>
 8007c70:	08009fed 	.word	0x08009fed
 8007c74:	08009ffe 	.word	0x08009ffe

08007c78 <__sflush_r>:
 8007c78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c80:	0716      	lsls	r6, r2, #28
 8007c82:	4605      	mov	r5, r0
 8007c84:	460c      	mov	r4, r1
 8007c86:	d454      	bmi.n	8007d32 <__sflush_r+0xba>
 8007c88:	684b      	ldr	r3, [r1, #4]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	dc02      	bgt.n	8007c94 <__sflush_r+0x1c>
 8007c8e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	dd48      	ble.n	8007d26 <__sflush_r+0xae>
 8007c94:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007c96:	2e00      	cmp	r6, #0
 8007c98:	d045      	beq.n	8007d26 <__sflush_r+0xae>
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007ca0:	682f      	ldr	r7, [r5, #0]
 8007ca2:	6a21      	ldr	r1, [r4, #32]
 8007ca4:	602b      	str	r3, [r5, #0]
 8007ca6:	d030      	beq.n	8007d0a <__sflush_r+0x92>
 8007ca8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007caa:	89a3      	ldrh	r3, [r4, #12]
 8007cac:	0759      	lsls	r1, r3, #29
 8007cae:	d505      	bpl.n	8007cbc <__sflush_r+0x44>
 8007cb0:	6863      	ldr	r3, [r4, #4]
 8007cb2:	1ad2      	subs	r2, r2, r3
 8007cb4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007cb6:	b10b      	cbz	r3, 8007cbc <__sflush_r+0x44>
 8007cb8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007cba:	1ad2      	subs	r2, r2, r3
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007cc0:	6a21      	ldr	r1, [r4, #32]
 8007cc2:	4628      	mov	r0, r5
 8007cc4:	47b0      	blx	r6
 8007cc6:	1c43      	adds	r3, r0, #1
 8007cc8:	89a3      	ldrh	r3, [r4, #12]
 8007cca:	d106      	bne.n	8007cda <__sflush_r+0x62>
 8007ccc:	6829      	ldr	r1, [r5, #0]
 8007cce:	291d      	cmp	r1, #29
 8007cd0:	d82b      	bhi.n	8007d2a <__sflush_r+0xb2>
 8007cd2:	4a2a      	ldr	r2, [pc, #168]	@ (8007d7c <__sflush_r+0x104>)
 8007cd4:	40ca      	lsrs	r2, r1
 8007cd6:	07d6      	lsls	r6, r2, #31
 8007cd8:	d527      	bpl.n	8007d2a <__sflush_r+0xb2>
 8007cda:	2200      	movs	r2, #0
 8007cdc:	6062      	str	r2, [r4, #4]
 8007cde:	04d9      	lsls	r1, r3, #19
 8007ce0:	6922      	ldr	r2, [r4, #16]
 8007ce2:	6022      	str	r2, [r4, #0]
 8007ce4:	d504      	bpl.n	8007cf0 <__sflush_r+0x78>
 8007ce6:	1c42      	adds	r2, r0, #1
 8007ce8:	d101      	bne.n	8007cee <__sflush_r+0x76>
 8007cea:	682b      	ldr	r3, [r5, #0]
 8007cec:	b903      	cbnz	r3, 8007cf0 <__sflush_r+0x78>
 8007cee:	6560      	str	r0, [r4, #84]	@ 0x54
 8007cf0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007cf2:	602f      	str	r7, [r5, #0]
 8007cf4:	b1b9      	cbz	r1, 8007d26 <__sflush_r+0xae>
 8007cf6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007cfa:	4299      	cmp	r1, r3
 8007cfc:	d002      	beq.n	8007d04 <__sflush_r+0x8c>
 8007cfe:	4628      	mov	r0, r5
 8007d00:	f000 fa7a 	bl	80081f8 <_free_r>
 8007d04:	2300      	movs	r3, #0
 8007d06:	6363      	str	r3, [r4, #52]	@ 0x34
 8007d08:	e00d      	b.n	8007d26 <__sflush_r+0xae>
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	4628      	mov	r0, r5
 8007d0e:	47b0      	blx	r6
 8007d10:	4602      	mov	r2, r0
 8007d12:	1c50      	adds	r0, r2, #1
 8007d14:	d1c9      	bne.n	8007caa <__sflush_r+0x32>
 8007d16:	682b      	ldr	r3, [r5, #0]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d0c6      	beq.n	8007caa <__sflush_r+0x32>
 8007d1c:	2b1d      	cmp	r3, #29
 8007d1e:	d001      	beq.n	8007d24 <__sflush_r+0xac>
 8007d20:	2b16      	cmp	r3, #22
 8007d22:	d11e      	bne.n	8007d62 <__sflush_r+0xea>
 8007d24:	602f      	str	r7, [r5, #0]
 8007d26:	2000      	movs	r0, #0
 8007d28:	e022      	b.n	8007d70 <__sflush_r+0xf8>
 8007d2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d2e:	b21b      	sxth	r3, r3
 8007d30:	e01b      	b.n	8007d6a <__sflush_r+0xf2>
 8007d32:	690f      	ldr	r7, [r1, #16]
 8007d34:	2f00      	cmp	r7, #0
 8007d36:	d0f6      	beq.n	8007d26 <__sflush_r+0xae>
 8007d38:	0793      	lsls	r3, r2, #30
 8007d3a:	680e      	ldr	r6, [r1, #0]
 8007d3c:	bf08      	it	eq
 8007d3e:	694b      	ldreq	r3, [r1, #20]
 8007d40:	600f      	str	r7, [r1, #0]
 8007d42:	bf18      	it	ne
 8007d44:	2300      	movne	r3, #0
 8007d46:	eba6 0807 	sub.w	r8, r6, r7
 8007d4a:	608b      	str	r3, [r1, #8]
 8007d4c:	f1b8 0f00 	cmp.w	r8, #0
 8007d50:	dde9      	ble.n	8007d26 <__sflush_r+0xae>
 8007d52:	6a21      	ldr	r1, [r4, #32]
 8007d54:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007d56:	4643      	mov	r3, r8
 8007d58:	463a      	mov	r2, r7
 8007d5a:	4628      	mov	r0, r5
 8007d5c:	47b0      	blx	r6
 8007d5e:	2800      	cmp	r0, #0
 8007d60:	dc08      	bgt.n	8007d74 <__sflush_r+0xfc>
 8007d62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d6a:	81a3      	strh	r3, [r4, #12]
 8007d6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d74:	4407      	add	r7, r0
 8007d76:	eba8 0800 	sub.w	r8, r8, r0
 8007d7a:	e7e7      	b.n	8007d4c <__sflush_r+0xd4>
 8007d7c:	20400001 	.word	0x20400001

08007d80 <_fflush_r>:
 8007d80:	b538      	push	{r3, r4, r5, lr}
 8007d82:	690b      	ldr	r3, [r1, #16]
 8007d84:	4605      	mov	r5, r0
 8007d86:	460c      	mov	r4, r1
 8007d88:	b913      	cbnz	r3, 8007d90 <_fflush_r+0x10>
 8007d8a:	2500      	movs	r5, #0
 8007d8c:	4628      	mov	r0, r5
 8007d8e:	bd38      	pop	{r3, r4, r5, pc}
 8007d90:	b118      	cbz	r0, 8007d9a <_fflush_r+0x1a>
 8007d92:	6a03      	ldr	r3, [r0, #32]
 8007d94:	b90b      	cbnz	r3, 8007d9a <_fflush_r+0x1a>
 8007d96:	f7ff f9cd 	bl	8007134 <__sinit>
 8007d9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d0f3      	beq.n	8007d8a <_fflush_r+0xa>
 8007da2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007da4:	07d0      	lsls	r0, r2, #31
 8007da6:	d404      	bmi.n	8007db2 <_fflush_r+0x32>
 8007da8:	0599      	lsls	r1, r3, #22
 8007daa:	d402      	bmi.n	8007db2 <_fflush_r+0x32>
 8007dac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007dae:	f7ff fa9a 	bl	80072e6 <__retarget_lock_acquire_recursive>
 8007db2:	4628      	mov	r0, r5
 8007db4:	4621      	mov	r1, r4
 8007db6:	f7ff ff5f 	bl	8007c78 <__sflush_r>
 8007dba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007dbc:	07da      	lsls	r2, r3, #31
 8007dbe:	4605      	mov	r5, r0
 8007dc0:	d4e4      	bmi.n	8007d8c <_fflush_r+0xc>
 8007dc2:	89a3      	ldrh	r3, [r4, #12]
 8007dc4:	059b      	lsls	r3, r3, #22
 8007dc6:	d4e1      	bmi.n	8007d8c <_fflush_r+0xc>
 8007dc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007dca:	f7ff fa8d 	bl	80072e8 <__retarget_lock_release_recursive>
 8007dce:	e7dd      	b.n	8007d8c <_fflush_r+0xc>

08007dd0 <__malloc_lock>:
 8007dd0:	4801      	ldr	r0, [pc, #4]	@ (8007dd8 <__malloc_lock+0x8>)
 8007dd2:	f7ff ba88 	b.w	80072e6 <__retarget_lock_acquire_recursive>
 8007dd6:	bf00      	nop
 8007dd8:	20025d80 	.word	0x20025d80

08007ddc <__malloc_unlock>:
 8007ddc:	4801      	ldr	r0, [pc, #4]	@ (8007de4 <__malloc_unlock+0x8>)
 8007dde:	f7ff ba83 	b.w	80072e8 <__retarget_lock_release_recursive>
 8007de2:	bf00      	nop
 8007de4:	20025d80 	.word	0x20025d80

08007de8 <__sread>:
 8007de8:	b510      	push	{r4, lr}
 8007dea:	460c      	mov	r4, r1
 8007dec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007df0:	f000 f99e 	bl	8008130 <_read_r>
 8007df4:	2800      	cmp	r0, #0
 8007df6:	bfab      	itete	ge
 8007df8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007dfa:	89a3      	ldrhlt	r3, [r4, #12]
 8007dfc:	181b      	addge	r3, r3, r0
 8007dfe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007e02:	bfac      	ite	ge
 8007e04:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007e06:	81a3      	strhlt	r3, [r4, #12]
 8007e08:	bd10      	pop	{r4, pc}

08007e0a <__swrite>:
 8007e0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e0e:	461f      	mov	r7, r3
 8007e10:	898b      	ldrh	r3, [r1, #12]
 8007e12:	05db      	lsls	r3, r3, #23
 8007e14:	4605      	mov	r5, r0
 8007e16:	460c      	mov	r4, r1
 8007e18:	4616      	mov	r6, r2
 8007e1a:	d505      	bpl.n	8007e28 <__swrite+0x1e>
 8007e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e20:	2302      	movs	r3, #2
 8007e22:	2200      	movs	r2, #0
 8007e24:	f000 f972 	bl	800810c <_lseek_r>
 8007e28:	89a3      	ldrh	r3, [r4, #12]
 8007e2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e2e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007e32:	81a3      	strh	r3, [r4, #12]
 8007e34:	4632      	mov	r2, r6
 8007e36:	463b      	mov	r3, r7
 8007e38:	4628      	mov	r0, r5
 8007e3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e3e:	f000 b999 	b.w	8008174 <_write_r>

08007e42 <__sseek>:
 8007e42:	b510      	push	{r4, lr}
 8007e44:	460c      	mov	r4, r1
 8007e46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e4a:	f000 f95f 	bl	800810c <_lseek_r>
 8007e4e:	1c43      	adds	r3, r0, #1
 8007e50:	89a3      	ldrh	r3, [r4, #12]
 8007e52:	bf15      	itete	ne
 8007e54:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007e56:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007e5a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007e5e:	81a3      	strheq	r3, [r4, #12]
 8007e60:	bf18      	it	ne
 8007e62:	81a3      	strhne	r3, [r4, #12]
 8007e64:	bd10      	pop	{r4, pc}

08007e66 <__sclose>:
 8007e66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e6a:	f000 b995 	b.w	8008198 <_close_r>

08007e6e <_realloc_r>:
 8007e6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e72:	4607      	mov	r7, r0
 8007e74:	4614      	mov	r4, r2
 8007e76:	460d      	mov	r5, r1
 8007e78:	b921      	cbnz	r1, 8007e84 <_realloc_r+0x16>
 8007e7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e7e:	4611      	mov	r1, r2
 8007e80:	f7ff bcee 	b.w	8007860 <_malloc_r>
 8007e84:	b92a      	cbnz	r2, 8007e92 <_realloc_r+0x24>
 8007e86:	f000 f9b7 	bl	80081f8 <_free_r>
 8007e8a:	4625      	mov	r5, r4
 8007e8c:	4628      	mov	r0, r5
 8007e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e92:	f000 f9fb 	bl	800828c <_malloc_usable_size_r>
 8007e96:	4284      	cmp	r4, r0
 8007e98:	4606      	mov	r6, r0
 8007e9a:	d802      	bhi.n	8007ea2 <_realloc_r+0x34>
 8007e9c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007ea0:	d8f4      	bhi.n	8007e8c <_realloc_r+0x1e>
 8007ea2:	4621      	mov	r1, r4
 8007ea4:	4638      	mov	r0, r7
 8007ea6:	f7ff fcdb 	bl	8007860 <_malloc_r>
 8007eaa:	4680      	mov	r8, r0
 8007eac:	b908      	cbnz	r0, 8007eb2 <_realloc_r+0x44>
 8007eae:	4645      	mov	r5, r8
 8007eb0:	e7ec      	b.n	8007e8c <_realloc_r+0x1e>
 8007eb2:	42b4      	cmp	r4, r6
 8007eb4:	4622      	mov	r2, r4
 8007eb6:	4629      	mov	r1, r5
 8007eb8:	bf28      	it	cs
 8007eba:	4632      	movcs	r2, r6
 8007ebc:	f000 f98e 	bl	80081dc <memcpy>
 8007ec0:	4629      	mov	r1, r5
 8007ec2:	4638      	mov	r0, r7
 8007ec4:	f000 f998 	bl	80081f8 <_free_r>
 8007ec8:	e7f1      	b.n	8007eae <_realloc_r+0x40>

08007eca <__swbuf_r>:
 8007eca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ecc:	460e      	mov	r6, r1
 8007ece:	4614      	mov	r4, r2
 8007ed0:	4605      	mov	r5, r0
 8007ed2:	b118      	cbz	r0, 8007edc <__swbuf_r+0x12>
 8007ed4:	6a03      	ldr	r3, [r0, #32]
 8007ed6:	b90b      	cbnz	r3, 8007edc <__swbuf_r+0x12>
 8007ed8:	f7ff f92c 	bl	8007134 <__sinit>
 8007edc:	69a3      	ldr	r3, [r4, #24]
 8007ede:	60a3      	str	r3, [r4, #8]
 8007ee0:	89a3      	ldrh	r3, [r4, #12]
 8007ee2:	071a      	lsls	r2, r3, #28
 8007ee4:	d501      	bpl.n	8007eea <__swbuf_r+0x20>
 8007ee6:	6923      	ldr	r3, [r4, #16]
 8007ee8:	b943      	cbnz	r3, 8007efc <__swbuf_r+0x32>
 8007eea:	4621      	mov	r1, r4
 8007eec:	4628      	mov	r0, r5
 8007eee:	f000 f82b 	bl	8007f48 <__swsetup_r>
 8007ef2:	b118      	cbz	r0, 8007efc <__swbuf_r+0x32>
 8007ef4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007ef8:	4638      	mov	r0, r7
 8007efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007efc:	6823      	ldr	r3, [r4, #0]
 8007efe:	6922      	ldr	r2, [r4, #16]
 8007f00:	1a98      	subs	r0, r3, r2
 8007f02:	6963      	ldr	r3, [r4, #20]
 8007f04:	b2f6      	uxtb	r6, r6
 8007f06:	4283      	cmp	r3, r0
 8007f08:	4637      	mov	r7, r6
 8007f0a:	dc05      	bgt.n	8007f18 <__swbuf_r+0x4e>
 8007f0c:	4621      	mov	r1, r4
 8007f0e:	4628      	mov	r0, r5
 8007f10:	f7ff ff36 	bl	8007d80 <_fflush_r>
 8007f14:	2800      	cmp	r0, #0
 8007f16:	d1ed      	bne.n	8007ef4 <__swbuf_r+0x2a>
 8007f18:	68a3      	ldr	r3, [r4, #8]
 8007f1a:	3b01      	subs	r3, #1
 8007f1c:	60a3      	str	r3, [r4, #8]
 8007f1e:	6823      	ldr	r3, [r4, #0]
 8007f20:	1c5a      	adds	r2, r3, #1
 8007f22:	6022      	str	r2, [r4, #0]
 8007f24:	701e      	strb	r6, [r3, #0]
 8007f26:	6962      	ldr	r2, [r4, #20]
 8007f28:	1c43      	adds	r3, r0, #1
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d004      	beq.n	8007f38 <__swbuf_r+0x6e>
 8007f2e:	89a3      	ldrh	r3, [r4, #12]
 8007f30:	07db      	lsls	r3, r3, #31
 8007f32:	d5e1      	bpl.n	8007ef8 <__swbuf_r+0x2e>
 8007f34:	2e0a      	cmp	r6, #10
 8007f36:	d1df      	bne.n	8007ef8 <__swbuf_r+0x2e>
 8007f38:	4621      	mov	r1, r4
 8007f3a:	4628      	mov	r0, r5
 8007f3c:	f7ff ff20 	bl	8007d80 <_fflush_r>
 8007f40:	2800      	cmp	r0, #0
 8007f42:	d0d9      	beq.n	8007ef8 <__swbuf_r+0x2e>
 8007f44:	e7d6      	b.n	8007ef4 <__swbuf_r+0x2a>
	...

08007f48 <__swsetup_r>:
 8007f48:	b538      	push	{r3, r4, r5, lr}
 8007f4a:	4b29      	ldr	r3, [pc, #164]	@ (8007ff0 <__swsetup_r+0xa8>)
 8007f4c:	4605      	mov	r5, r0
 8007f4e:	6818      	ldr	r0, [r3, #0]
 8007f50:	460c      	mov	r4, r1
 8007f52:	b118      	cbz	r0, 8007f5c <__swsetup_r+0x14>
 8007f54:	6a03      	ldr	r3, [r0, #32]
 8007f56:	b90b      	cbnz	r3, 8007f5c <__swsetup_r+0x14>
 8007f58:	f7ff f8ec 	bl	8007134 <__sinit>
 8007f5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f60:	0719      	lsls	r1, r3, #28
 8007f62:	d422      	bmi.n	8007faa <__swsetup_r+0x62>
 8007f64:	06da      	lsls	r2, r3, #27
 8007f66:	d407      	bmi.n	8007f78 <__swsetup_r+0x30>
 8007f68:	2209      	movs	r2, #9
 8007f6a:	602a      	str	r2, [r5, #0]
 8007f6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f70:	81a3      	strh	r3, [r4, #12]
 8007f72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007f76:	e033      	b.n	8007fe0 <__swsetup_r+0x98>
 8007f78:	0758      	lsls	r0, r3, #29
 8007f7a:	d512      	bpl.n	8007fa2 <__swsetup_r+0x5a>
 8007f7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f7e:	b141      	cbz	r1, 8007f92 <__swsetup_r+0x4a>
 8007f80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007f84:	4299      	cmp	r1, r3
 8007f86:	d002      	beq.n	8007f8e <__swsetup_r+0x46>
 8007f88:	4628      	mov	r0, r5
 8007f8a:	f000 f935 	bl	80081f8 <_free_r>
 8007f8e:	2300      	movs	r3, #0
 8007f90:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f92:	89a3      	ldrh	r3, [r4, #12]
 8007f94:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007f98:	81a3      	strh	r3, [r4, #12]
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	6063      	str	r3, [r4, #4]
 8007f9e:	6923      	ldr	r3, [r4, #16]
 8007fa0:	6023      	str	r3, [r4, #0]
 8007fa2:	89a3      	ldrh	r3, [r4, #12]
 8007fa4:	f043 0308 	orr.w	r3, r3, #8
 8007fa8:	81a3      	strh	r3, [r4, #12]
 8007faa:	6923      	ldr	r3, [r4, #16]
 8007fac:	b94b      	cbnz	r3, 8007fc2 <__swsetup_r+0x7a>
 8007fae:	89a3      	ldrh	r3, [r4, #12]
 8007fb0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007fb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fb8:	d003      	beq.n	8007fc2 <__swsetup_r+0x7a>
 8007fba:	4621      	mov	r1, r4
 8007fbc:	4628      	mov	r0, r5
 8007fbe:	f000 f83f 	bl	8008040 <__smakebuf_r>
 8007fc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fc6:	f013 0201 	ands.w	r2, r3, #1
 8007fca:	d00a      	beq.n	8007fe2 <__swsetup_r+0x9a>
 8007fcc:	2200      	movs	r2, #0
 8007fce:	60a2      	str	r2, [r4, #8]
 8007fd0:	6962      	ldr	r2, [r4, #20]
 8007fd2:	4252      	negs	r2, r2
 8007fd4:	61a2      	str	r2, [r4, #24]
 8007fd6:	6922      	ldr	r2, [r4, #16]
 8007fd8:	b942      	cbnz	r2, 8007fec <__swsetup_r+0xa4>
 8007fda:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007fde:	d1c5      	bne.n	8007f6c <__swsetup_r+0x24>
 8007fe0:	bd38      	pop	{r3, r4, r5, pc}
 8007fe2:	0799      	lsls	r1, r3, #30
 8007fe4:	bf58      	it	pl
 8007fe6:	6962      	ldrpl	r2, [r4, #20]
 8007fe8:	60a2      	str	r2, [r4, #8]
 8007fea:	e7f4      	b.n	8007fd6 <__swsetup_r+0x8e>
 8007fec:	2000      	movs	r0, #0
 8007fee:	e7f7      	b.n	8007fe0 <__swsetup_r+0x98>
 8007ff0:	20000030 	.word	0x20000030

08007ff4 <__swhatbuf_r>:
 8007ff4:	b570      	push	{r4, r5, r6, lr}
 8007ff6:	460c      	mov	r4, r1
 8007ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ffc:	2900      	cmp	r1, #0
 8007ffe:	b096      	sub	sp, #88	@ 0x58
 8008000:	4615      	mov	r5, r2
 8008002:	461e      	mov	r6, r3
 8008004:	da0d      	bge.n	8008022 <__swhatbuf_r+0x2e>
 8008006:	89a3      	ldrh	r3, [r4, #12]
 8008008:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800800c:	f04f 0100 	mov.w	r1, #0
 8008010:	bf14      	ite	ne
 8008012:	2340      	movne	r3, #64	@ 0x40
 8008014:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008018:	2000      	movs	r0, #0
 800801a:	6031      	str	r1, [r6, #0]
 800801c:	602b      	str	r3, [r5, #0]
 800801e:	b016      	add	sp, #88	@ 0x58
 8008020:	bd70      	pop	{r4, r5, r6, pc}
 8008022:	466a      	mov	r2, sp
 8008024:	f000 f8c8 	bl	80081b8 <_fstat_r>
 8008028:	2800      	cmp	r0, #0
 800802a:	dbec      	blt.n	8008006 <__swhatbuf_r+0x12>
 800802c:	9901      	ldr	r1, [sp, #4]
 800802e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008032:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008036:	4259      	negs	r1, r3
 8008038:	4159      	adcs	r1, r3
 800803a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800803e:	e7eb      	b.n	8008018 <__swhatbuf_r+0x24>

08008040 <__smakebuf_r>:
 8008040:	898b      	ldrh	r3, [r1, #12]
 8008042:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008044:	079d      	lsls	r5, r3, #30
 8008046:	4606      	mov	r6, r0
 8008048:	460c      	mov	r4, r1
 800804a:	d507      	bpl.n	800805c <__smakebuf_r+0x1c>
 800804c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008050:	6023      	str	r3, [r4, #0]
 8008052:	6123      	str	r3, [r4, #16]
 8008054:	2301      	movs	r3, #1
 8008056:	6163      	str	r3, [r4, #20]
 8008058:	b003      	add	sp, #12
 800805a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800805c:	ab01      	add	r3, sp, #4
 800805e:	466a      	mov	r2, sp
 8008060:	f7ff ffc8 	bl	8007ff4 <__swhatbuf_r>
 8008064:	9f00      	ldr	r7, [sp, #0]
 8008066:	4605      	mov	r5, r0
 8008068:	4639      	mov	r1, r7
 800806a:	4630      	mov	r0, r6
 800806c:	f7ff fbf8 	bl	8007860 <_malloc_r>
 8008070:	b948      	cbnz	r0, 8008086 <__smakebuf_r+0x46>
 8008072:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008076:	059a      	lsls	r2, r3, #22
 8008078:	d4ee      	bmi.n	8008058 <__smakebuf_r+0x18>
 800807a:	f023 0303 	bic.w	r3, r3, #3
 800807e:	f043 0302 	orr.w	r3, r3, #2
 8008082:	81a3      	strh	r3, [r4, #12]
 8008084:	e7e2      	b.n	800804c <__smakebuf_r+0xc>
 8008086:	89a3      	ldrh	r3, [r4, #12]
 8008088:	6020      	str	r0, [r4, #0]
 800808a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800808e:	81a3      	strh	r3, [r4, #12]
 8008090:	9b01      	ldr	r3, [sp, #4]
 8008092:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008096:	b15b      	cbz	r3, 80080b0 <__smakebuf_r+0x70>
 8008098:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800809c:	4630      	mov	r0, r6
 800809e:	f000 f825 	bl	80080ec <_isatty_r>
 80080a2:	b128      	cbz	r0, 80080b0 <__smakebuf_r+0x70>
 80080a4:	89a3      	ldrh	r3, [r4, #12]
 80080a6:	f023 0303 	bic.w	r3, r3, #3
 80080aa:	f043 0301 	orr.w	r3, r3, #1
 80080ae:	81a3      	strh	r3, [r4, #12]
 80080b0:	89a3      	ldrh	r3, [r4, #12]
 80080b2:	431d      	orrs	r5, r3
 80080b4:	81a5      	strh	r5, [r4, #12]
 80080b6:	e7cf      	b.n	8008058 <__smakebuf_r+0x18>

080080b8 <memmove>:
 80080b8:	4288      	cmp	r0, r1
 80080ba:	b510      	push	{r4, lr}
 80080bc:	eb01 0402 	add.w	r4, r1, r2
 80080c0:	d902      	bls.n	80080c8 <memmove+0x10>
 80080c2:	4284      	cmp	r4, r0
 80080c4:	4623      	mov	r3, r4
 80080c6:	d807      	bhi.n	80080d8 <memmove+0x20>
 80080c8:	1e43      	subs	r3, r0, #1
 80080ca:	42a1      	cmp	r1, r4
 80080cc:	d008      	beq.n	80080e0 <memmove+0x28>
 80080ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80080d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80080d6:	e7f8      	b.n	80080ca <memmove+0x12>
 80080d8:	4402      	add	r2, r0
 80080da:	4601      	mov	r1, r0
 80080dc:	428a      	cmp	r2, r1
 80080de:	d100      	bne.n	80080e2 <memmove+0x2a>
 80080e0:	bd10      	pop	{r4, pc}
 80080e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80080e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80080ea:	e7f7      	b.n	80080dc <memmove+0x24>

080080ec <_isatty_r>:
 80080ec:	b538      	push	{r3, r4, r5, lr}
 80080ee:	4d06      	ldr	r5, [pc, #24]	@ (8008108 <_isatty_r+0x1c>)
 80080f0:	2300      	movs	r3, #0
 80080f2:	4604      	mov	r4, r0
 80080f4:	4608      	mov	r0, r1
 80080f6:	602b      	str	r3, [r5, #0]
 80080f8:	f7fb fabc 	bl	8003674 <_isatty>
 80080fc:	1c43      	adds	r3, r0, #1
 80080fe:	d102      	bne.n	8008106 <_isatty_r+0x1a>
 8008100:	682b      	ldr	r3, [r5, #0]
 8008102:	b103      	cbz	r3, 8008106 <_isatty_r+0x1a>
 8008104:	6023      	str	r3, [r4, #0]
 8008106:	bd38      	pop	{r3, r4, r5, pc}
 8008108:	20025d8c 	.word	0x20025d8c

0800810c <_lseek_r>:
 800810c:	b538      	push	{r3, r4, r5, lr}
 800810e:	4d07      	ldr	r5, [pc, #28]	@ (800812c <_lseek_r+0x20>)
 8008110:	4604      	mov	r4, r0
 8008112:	4608      	mov	r0, r1
 8008114:	4611      	mov	r1, r2
 8008116:	2200      	movs	r2, #0
 8008118:	602a      	str	r2, [r5, #0]
 800811a:	461a      	mov	r2, r3
 800811c:	f7fb fab5 	bl	800368a <_lseek>
 8008120:	1c43      	adds	r3, r0, #1
 8008122:	d102      	bne.n	800812a <_lseek_r+0x1e>
 8008124:	682b      	ldr	r3, [r5, #0]
 8008126:	b103      	cbz	r3, 800812a <_lseek_r+0x1e>
 8008128:	6023      	str	r3, [r4, #0]
 800812a:	bd38      	pop	{r3, r4, r5, pc}
 800812c:	20025d8c 	.word	0x20025d8c

08008130 <_read_r>:
 8008130:	b538      	push	{r3, r4, r5, lr}
 8008132:	4d07      	ldr	r5, [pc, #28]	@ (8008150 <_read_r+0x20>)
 8008134:	4604      	mov	r4, r0
 8008136:	4608      	mov	r0, r1
 8008138:	4611      	mov	r1, r2
 800813a:	2200      	movs	r2, #0
 800813c:	602a      	str	r2, [r5, #0]
 800813e:	461a      	mov	r2, r3
 8008140:	f7fb fa43 	bl	80035ca <_read>
 8008144:	1c43      	adds	r3, r0, #1
 8008146:	d102      	bne.n	800814e <_read_r+0x1e>
 8008148:	682b      	ldr	r3, [r5, #0]
 800814a:	b103      	cbz	r3, 800814e <_read_r+0x1e>
 800814c:	6023      	str	r3, [r4, #0]
 800814e:	bd38      	pop	{r3, r4, r5, pc}
 8008150:	20025d8c 	.word	0x20025d8c

08008154 <_sbrk_r>:
 8008154:	b538      	push	{r3, r4, r5, lr}
 8008156:	4d06      	ldr	r5, [pc, #24]	@ (8008170 <_sbrk_r+0x1c>)
 8008158:	2300      	movs	r3, #0
 800815a:	4604      	mov	r4, r0
 800815c:	4608      	mov	r0, r1
 800815e:	602b      	str	r3, [r5, #0]
 8008160:	f7fb faa0 	bl	80036a4 <_sbrk>
 8008164:	1c43      	adds	r3, r0, #1
 8008166:	d102      	bne.n	800816e <_sbrk_r+0x1a>
 8008168:	682b      	ldr	r3, [r5, #0]
 800816a:	b103      	cbz	r3, 800816e <_sbrk_r+0x1a>
 800816c:	6023      	str	r3, [r4, #0]
 800816e:	bd38      	pop	{r3, r4, r5, pc}
 8008170:	20025d8c 	.word	0x20025d8c

08008174 <_write_r>:
 8008174:	b538      	push	{r3, r4, r5, lr}
 8008176:	4d07      	ldr	r5, [pc, #28]	@ (8008194 <_write_r+0x20>)
 8008178:	4604      	mov	r4, r0
 800817a:	4608      	mov	r0, r1
 800817c:	4611      	mov	r1, r2
 800817e:	2200      	movs	r2, #0
 8008180:	602a      	str	r2, [r5, #0]
 8008182:	461a      	mov	r2, r3
 8008184:	f7fb fa3e 	bl	8003604 <_write>
 8008188:	1c43      	adds	r3, r0, #1
 800818a:	d102      	bne.n	8008192 <_write_r+0x1e>
 800818c:	682b      	ldr	r3, [r5, #0]
 800818e:	b103      	cbz	r3, 8008192 <_write_r+0x1e>
 8008190:	6023      	str	r3, [r4, #0]
 8008192:	bd38      	pop	{r3, r4, r5, pc}
 8008194:	20025d8c 	.word	0x20025d8c

08008198 <_close_r>:
 8008198:	b538      	push	{r3, r4, r5, lr}
 800819a:	4d06      	ldr	r5, [pc, #24]	@ (80081b4 <_close_r+0x1c>)
 800819c:	2300      	movs	r3, #0
 800819e:	4604      	mov	r4, r0
 80081a0:	4608      	mov	r0, r1
 80081a2:	602b      	str	r3, [r5, #0]
 80081a4:	f7fb fa4a 	bl	800363c <_close>
 80081a8:	1c43      	adds	r3, r0, #1
 80081aa:	d102      	bne.n	80081b2 <_close_r+0x1a>
 80081ac:	682b      	ldr	r3, [r5, #0]
 80081ae:	b103      	cbz	r3, 80081b2 <_close_r+0x1a>
 80081b0:	6023      	str	r3, [r4, #0]
 80081b2:	bd38      	pop	{r3, r4, r5, pc}
 80081b4:	20025d8c 	.word	0x20025d8c

080081b8 <_fstat_r>:
 80081b8:	b538      	push	{r3, r4, r5, lr}
 80081ba:	4d07      	ldr	r5, [pc, #28]	@ (80081d8 <_fstat_r+0x20>)
 80081bc:	2300      	movs	r3, #0
 80081be:	4604      	mov	r4, r0
 80081c0:	4608      	mov	r0, r1
 80081c2:	4611      	mov	r1, r2
 80081c4:	602b      	str	r3, [r5, #0]
 80081c6:	f7fb fa45 	bl	8003654 <_fstat>
 80081ca:	1c43      	adds	r3, r0, #1
 80081cc:	d102      	bne.n	80081d4 <_fstat_r+0x1c>
 80081ce:	682b      	ldr	r3, [r5, #0]
 80081d0:	b103      	cbz	r3, 80081d4 <_fstat_r+0x1c>
 80081d2:	6023      	str	r3, [r4, #0]
 80081d4:	bd38      	pop	{r3, r4, r5, pc}
 80081d6:	bf00      	nop
 80081d8:	20025d8c 	.word	0x20025d8c

080081dc <memcpy>:
 80081dc:	440a      	add	r2, r1
 80081de:	4291      	cmp	r1, r2
 80081e0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80081e4:	d100      	bne.n	80081e8 <memcpy+0xc>
 80081e6:	4770      	bx	lr
 80081e8:	b510      	push	{r4, lr}
 80081ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081f2:	4291      	cmp	r1, r2
 80081f4:	d1f9      	bne.n	80081ea <memcpy+0xe>
 80081f6:	bd10      	pop	{r4, pc}

080081f8 <_free_r>:
 80081f8:	b538      	push	{r3, r4, r5, lr}
 80081fa:	4605      	mov	r5, r0
 80081fc:	2900      	cmp	r1, #0
 80081fe:	d041      	beq.n	8008284 <_free_r+0x8c>
 8008200:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008204:	1f0c      	subs	r4, r1, #4
 8008206:	2b00      	cmp	r3, #0
 8008208:	bfb8      	it	lt
 800820a:	18e4      	addlt	r4, r4, r3
 800820c:	f7ff fde0 	bl	8007dd0 <__malloc_lock>
 8008210:	4a1d      	ldr	r2, [pc, #116]	@ (8008288 <_free_r+0x90>)
 8008212:	6813      	ldr	r3, [r2, #0]
 8008214:	b933      	cbnz	r3, 8008224 <_free_r+0x2c>
 8008216:	6063      	str	r3, [r4, #4]
 8008218:	6014      	str	r4, [r2, #0]
 800821a:	4628      	mov	r0, r5
 800821c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008220:	f7ff bddc 	b.w	8007ddc <__malloc_unlock>
 8008224:	42a3      	cmp	r3, r4
 8008226:	d908      	bls.n	800823a <_free_r+0x42>
 8008228:	6820      	ldr	r0, [r4, #0]
 800822a:	1821      	adds	r1, r4, r0
 800822c:	428b      	cmp	r3, r1
 800822e:	bf01      	itttt	eq
 8008230:	6819      	ldreq	r1, [r3, #0]
 8008232:	685b      	ldreq	r3, [r3, #4]
 8008234:	1809      	addeq	r1, r1, r0
 8008236:	6021      	streq	r1, [r4, #0]
 8008238:	e7ed      	b.n	8008216 <_free_r+0x1e>
 800823a:	461a      	mov	r2, r3
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	b10b      	cbz	r3, 8008244 <_free_r+0x4c>
 8008240:	42a3      	cmp	r3, r4
 8008242:	d9fa      	bls.n	800823a <_free_r+0x42>
 8008244:	6811      	ldr	r1, [r2, #0]
 8008246:	1850      	adds	r0, r2, r1
 8008248:	42a0      	cmp	r0, r4
 800824a:	d10b      	bne.n	8008264 <_free_r+0x6c>
 800824c:	6820      	ldr	r0, [r4, #0]
 800824e:	4401      	add	r1, r0
 8008250:	1850      	adds	r0, r2, r1
 8008252:	4283      	cmp	r3, r0
 8008254:	6011      	str	r1, [r2, #0]
 8008256:	d1e0      	bne.n	800821a <_free_r+0x22>
 8008258:	6818      	ldr	r0, [r3, #0]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	6053      	str	r3, [r2, #4]
 800825e:	4408      	add	r0, r1
 8008260:	6010      	str	r0, [r2, #0]
 8008262:	e7da      	b.n	800821a <_free_r+0x22>
 8008264:	d902      	bls.n	800826c <_free_r+0x74>
 8008266:	230c      	movs	r3, #12
 8008268:	602b      	str	r3, [r5, #0]
 800826a:	e7d6      	b.n	800821a <_free_r+0x22>
 800826c:	6820      	ldr	r0, [r4, #0]
 800826e:	1821      	adds	r1, r4, r0
 8008270:	428b      	cmp	r3, r1
 8008272:	bf04      	itt	eq
 8008274:	6819      	ldreq	r1, [r3, #0]
 8008276:	685b      	ldreq	r3, [r3, #4]
 8008278:	6063      	str	r3, [r4, #4]
 800827a:	bf04      	itt	eq
 800827c:	1809      	addeq	r1, r1, r0
 800827e:	6021      	streq	r1, [r4, #0]
 8008280:	6054      	str	r4, [r2, #4]
 8008282:	e7ca      	b.n	800821a <_free_r+0x22>
 8008284:	bd38      	pop	{r3, r4, r5, pc}
 8008286:	bf00      	nop
 8008288:	20025d88 	.word	0x20025d88

0800828c <_malloc_usable_size_r>:
 800828c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008290:	1f18      	subs	r0, r3, #4
 8008292:	2b00      	cmp	r3, #0
 8008294:	bfbc      	itt	lt
 8008296:	580b      	ldrlt	r3, [r1, r0]
 8008298:	18c0      	addlt	r0, r0, r3
 800829a:	4770      	bx	lr

0800829c <_init>:
 800829c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800829e:	bf00      	nop
 80082a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082a2:	bc08      	pop	{r3}
 80082a4:	469e      	mov	lr, r3
 80082a6:	4770      	bx	lr

080082a8 <_fini>:
 80082a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082aa:	bf00      	nop
 80082ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ae:	bc08      	pop	{r3}
 80082b0:	469e      	mov	lr, r3
 80082b2:	4770      	bx	lr

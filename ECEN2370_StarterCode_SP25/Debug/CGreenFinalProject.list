
CGreenFinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080b0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ec0  08008260  08008260  00009260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a120  0800a120  0000c080  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a120  0800a120  0000b120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a128  0800a128  0000c080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a128  0800a128  0000b128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a12c  0800a12c  0000b12c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800a130  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c080  2**0
                  CONTENTS
 10 .bss          00025d10  20000080  20000080  0000c080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025d90  20025d90  0000c080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014039  00000000  00000000  0000c0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032ce  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001470  00000000  00000000  000233b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fbe  00000000  00000000  00024828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027355  00000000  00000000  000257e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001839a  00000000  00000000  0004cb3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e34fa  00000000  00000000  00064ed5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001483cf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005eb4  00000000  00000000  00148414  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008f  00000000  00000000  0014e2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008248 	.word	0x08008248

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	08008248 	.word	0x08008248

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <ApplicationInit>:

// External Handles
extern RNG_HandleTypeDef hrng; // Need RNG handle for AI

void ApplicationInit(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80005d0:	f002 ffca 	bl	8003568 <initialise_monitor_handles>
    LTCD__Init();
 80005d4:	f001 f8c2 	bl	800175c <LTCD__Init>
    LTCD_Layer_Init(0);
 80005d8:	2000      	movs	r0, #0
 80005da:	f001 f87f 	bl	80016dc <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 80005de:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80005e2:	2000      	movs	r0, #0
 80005e4:	f001 f9d2 	bl	800198c <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80005e8:	f001 faa8 	bl	8001b3c <InitializeLCDTouch>

	// This is the orientation for the board to be directly up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005ec:	4b08      	ldr	r3, [pc, #32]	@ (8000610 <ApplicationInit+0x44>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	719a      	strb	r2, [r3, #6]

	Button_Init();
 80005f2:	f000 ff6d 	bl	80014d0 <Button_Init>

    currentAppState = APP_STATE_MENU;
 80005f6:	4b07      	ldr	r3, [pc, #28]	@ (8000614 <ApplicationInit+0x48>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	701a      	strb	r2, [r3, #0]
    drawMenuScreen();
 80005fc:	f000 f89e 	bl	800073c <drawMenuScreen>
    printf("Initial Menu Drawn. Entering Scheduler Loop.\n");
 8000600:	4805      	ldr	r0, [pc, #20]	@ (8000618 <ApplicationInit+0x4c>)
 8000602:	f006 fe0b 	bl	800721c <puts>
    printf("----------------------\n");
 8000606:	4805      	ldr	r0, [pc, #20]	@ (800061c <ApplicationInit+0x50>)
 8000608:	f006 fe08 	bl	800721c <puts>

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	200000a0 	.word	0x200000a0
 8000614:	2000009c 	.word	0x2000009c
 8000618:	08008260 	.word	0x08008260
 800061c:	08008290 	.word	0x08008290

08000620 <LCD_Draw_Rect>:

// Simple rectangle drawing
void LCD_Draw_Rect(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color) {
 8000620:	b590      	push	{r4, r7, lr}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	4604      	mov	r4, r0
 8000628:	4608      	mov	r0, r1
 800062a:	4611      	mov	r1, r2
 800062c:	461a      	mov	r2, r3
 800062e:	4623      	mov	r3, r4
 8000630:	80fb      	strh	r3, [r7, #6]
 8000632:	4603      	mov	r3, r0
 8000634:	80bb      	strh	r3, [r7, #4]
 8000636:	460b      	mov	r3, r1
 8000638:	807b      	strh	r3, [r7, #2]
 800063a:	4613      	mov	r3, r2
 800063c:	803b      	strh	r3, [r7, #0]
    // Draw horizontal lines
    for (uint16_t i = 0; i < width; i++) {
 800063e:	2300      	movs	r3, #0
 8000640:	81fb      	strh	r3, [r7, #14]
 8000642:	e019      	b.n	8000678 <LCD_Draw_Rect+0x58>
        LCD_Draw_Pixel(x + i, y, color);
 8000644:	88fa      	ldrh	r2, [r7, #6]
 8000646:	89fb      	ldrh	r3, [r7, #14]
 8000648:	4413      	add	r3, r2
 800064a:	b29b      	uxth	r3, r3
 800064c:	8c3a      	ldrh	r2, [r7, #32]
 800064e:	88b9      	ldrh	r1, [r7, #4]
 8000650:	4618      	mov	r0, r3
 8000652:	f001 f8e1 	bl	8001818 <LCD_Draw_Pixel>
        LCD_Draw_Pixel(x + i, y + height - 1, color);
 8000656:	88fa      	ldrh	r2, [r7, #6]
 8000658:	89fb      	ldrh	r3, [r7, #14]
 800065a:	4413      	add	r3, r2
 800065c:	b298      	uxth	r0, r3
 800065e:	88ba      	ldrh	r2, [r7, #4]
 8000660:	883b      	ldrh	r3, [r7, #0]
 8000662:	4413      	add	r3, r2
 8000664:	b29b      	uxth	r3, r3
 8000666:	3b01      	subs	r3, #1
 8000668:	b29b      	uxth	r3, r3
 800066a:	8c3a      	ldrh	r2, [r7, #32]
 800066c:	4619      	mov	r1, r3
 800066e:	f001 f8d3 	bl	8001818 <LCD_Draw_Pixel>
    for (uint16_t i = 0; i < width; i++) {
 8000672:	89fb      	ldrh	r3, [r7, #14]
 8000674:	3301      	adds	r3, #1
 8000676:	81fb      	strh	r3, [r7, #14]
 8000678:	89fa      	ldrh	r2, [r7, #14]
 800067a:	887b      	ldrh	r3, [r7, #2]
 800067c:	429a      	cmp	r2, r3
 800067e:	d3e1      	bcc.n	8000644 <LCD_Draw_Rect+0x24>
    }
    // Draw vertical lines
    for (uint16_t i = 1; i < height - 1; i++) { // Avoid drawing corners twice
 8000680:	2301      	movs	r3, #1
 8000682:	81bb      	strh	r3, [r7, #12]
 8000684:	e019      	b.n	80006ba <LCD_Draw_Rect+0x9a>
        LCD_Draw_Pixel(x, y + i, color);
 8000686:	88ba      	ldrh	r2, [r7, #4]
 8000688:	89bb      	ldrh	r3, [r7, #12]
 800068a:	4413      	add	r3, r2
 800068c:	b299      	uxth	r1, r3
 800068e:	8c3a      	ldrh	r2, [r7, #32]
 8000690:	88fb      	ldrh	r3, [r7, #6]
 8000692:	4618      	mov	r0, r3
 8000694:	f001 f8c0 	bl	8001818 <LCD_Draw_Pixel>
        LCD_Draw_Pixel(x + width - 1, y + i, color);
 8000698:	88fa      	ldrh	r2, [r7, #6]
 800069a:	887b      	ldrh	r3, [r7, #2]
 800069c:	4413      	add	r3, r2
 800069e:	b29b      	uxth	r3, r3
 80006a0:	3b01      	subs	r3, #1
 80006a2:	b298      	uxth	r0, r3
 80006a4:	88ba      	ldrh	r2, [r7, #4]
 80006a6:	89bb      	ldrh	r3, [r7, #12]
 80006a8:	4413      	add	r3, r2
 80006aa:	b29b      	uxth	r3, r3
 80006ac:	8c3a      	ldrh	r2, [r7, #32]
 80006ae:	4619      	mov	r1, r3
 80006b0:	f001 f8b2 	bl	8001818 <LCD_Draw_Pixel>
    for (uint16_t i = 1; i < height - 1; i++) { // Avoid drawing corners twice
 80006b4:	89bb      	ldrh	r3, [r7, #12]
 80006b6:	3301      	adds	r3, #1
 80006b8:	81bb      	strh	r3, [r7, #12]
 80006ba:	89ba      	ldrh	r2, [r7, #12]
 80006bc:	883b      	ldrh	r3, [r7, #0]
 80006be:	3b01      	subs	r3, #1
 80006c0:	429a      	cmp	r2, r3
 80006c2:	dbe0      	blt.n	8000686 <LCD_Draw_Rect+0x66>
    }
}
 80006c4:	bf00      	nop
 80006c6:	bf00      	nop
 80006c8:	3714      	adds	r7, #20
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd90      	pop	{r4, r7, pc}

080006ce <LCD_DisplayString>:

// Simple string display
void LCD_DisplayString(uint16_t Xpos, uint16_t Ypos, uint8_t *ptr, FONT_t* font, uint16_t textColor, uint16_t bgColor, bool opaque) {
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b084      	sub	sp, #16
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	60ba      	str	r2, [r7, #8]
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	4603      	mov	r3, r0
 80006da:	81fb      	strh	r3, [r7, #14]
 80006dc:	460b      	mov	r3, r1
 80006de:	81bb      	strh	r3, [r7, #12]
    LCD_SetFont(font);
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	f001 f985 	bl	80019f0 <LCD_SetFont>
    LCD_SetTextColor(textColor);
 80006e6:	8b3b      	ldrh	r3, [r7, #24]
 80006e8:	4618      	mov	r0, r3
 80006ea:	f001 f971 	bl	80019d0 <LCD_SetTextColor>
    // Background color setting would go here if opaque is true
    // This requires a fill rectangle function or modifying LCD_DisplayChar

    while (*ptr != '\0') {
 80006ee:	e01c      	b.n	800072a <LCD_DisplayString+0x5c>
        // Add bounds checking
        if (Xpos >= LCD_PIXEL_WIDTH - font->Width || Ypos >= LCD_PIXEL_HEIGHT - font->Height) {
 80006f0:	89fa      	ldrh	r2, [r7, #14]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	889b      	ldrh	r3, [r3, #4]
 80006f6:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80006fa:	429a      	cmp	r2, r3
 80006fc:	da19      	bge.n	8000732 <LCD_DisplayString+0x64>
 80006fe:	89ba      	ldrh	r2, [r7, #12]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	88db      	ldrh	r3, [r3, #6]
 8000704:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8000708:	429a      	cmp	r2, r3
 800070a:	da12      	bge.n	8000732 <LCD_DisplayString+0x64>
            break;
        }
        LCD_DisplayChar(Xpos, Ypos, *ptr); // Assumes transparent background
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	781a      	ldrb	r2, [r3, #0]
 8000710:	89b9      	ldrh	r1, [r7, #12]
 8000712:	89fb      	ldrh	r3, [r7, #14]
 8000714:	4618      	mov	r0, r3
 8000716:	f001 f9e9 	bl	8001aec <LCD_DisplayChar>
        Xpos += font->Width;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	889a      	ldrh	r2, [r3, #4]
 800071e:	89fb      	ldrh	r3, [r7, #14]
 8000720:	4413      	add	r3, r2
 8000722:	81fb      	strh	r3, [r7, #14]
        ptr++;
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	3301      	adds	r3, #1
 8000728:	60bb      	str	r3, [r7, #8]
    while (*ptr != '\0') {
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d1de      	bne.n	80006f0 <LCD_DisplayString+0x22>
    }
}
 8000732:	bf00      	nop
 8000734:	3710      	adds	r7, #16
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
	...

0800073c <drawMenuScreen>:

void drawMenuScreen() {
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af04      	add	r7, sp, #16

		LCD_Clear(0, LCD_COLOR_BLUE); // Background
 8000742:	211f      	movs	r1, #31
 8000744:	2000      	movs	r0, #0
 8000746:	f001 f921 	bl	800198c <LCD_Clear>

		// --- Draw Button 1 (1 Player) ---
		LCD_Draw_Rect(BUTTON1_X, BUTTON1_Y, BUTTON_WIDTH, BUTTON_HEIGHT, LCD_COLOR_YELLOW); // Outline
 800074a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800074e:	9300      	str	r3, [sp, #0]
 8000750:	2332      	movs	r3, #50	@ 0x32
 8000752:	2264      	movs	r2, #100	@ 0x64
 8000754:	2169      	movs	r1, #105	@ 0x69
 8000756:	200a      	movs	r0, #10
 8000758:	f7ff ff62 	bl	8000620 <LCD_Draw_Rect>
		LCD_DisplayString(BUTTON1_X + 5, BUTTON1_Y + (BUTTON_HEIGHT - Font16x24.Height)/2, (uint8_t*)"1P", &Font16x24, LCD_COLOR_WHITE, LCD_COLOR_BLUE, false);
 800075c:	4b29      	ldr	r3, [pc, #164]	@ (8000804 <drawMenuScreen+0xc8>)
 800075e:	88db      	ldrh	r3, [r3, #6]
 8000760:	f1c3 0332 	rsb	r3, r3, #50	@ 0x32
 8000764:	0fda      	lsrs	r2, r3, #31
 8000766:	4413      	add	r3, r2
 8000768:	105b      	asrs	r3, r3, #1
 800076a:	b29b      	uxth	r3, r3
 800076c:	3369      	adds	r3, #105	@ 0x69
 800076e:	b299      	uxth	r1, r3
 8000770:	2300      	movs	r3, #0
 8000772:	9302      	str	r3, [sp, #8]
 8000774:	231f      	movs	r3, #31
 8000776:	9301      	str	r3, [sp, #4]
 8000778:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800077c:	9300      	str	r3, [sp, #0]
 800077e:	4b21      	ldr	r3, [pc, #132]	@ (8000804 <drawMenuScreen+0xc8>)
 8000780:	4a21      	ldr	r2, [pc, #132]	@ (8000808 <drawMenuScreen+0xcc>)
 8000782:	200f      	movs	r0, #15
 8000784:	f7ff ffa3 	bl	80006ce <LCD_DisplayString>

		// --- Draw Button 2 (2 Player) ---
		LCD_Draw_Rect(BUTTON2_X, BUTTON2_Y, BUTTON_WIDTH, BUTTON_HEIGHT, LCD_COLOR_YELLOW); // Outline
 8000788:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800078c:	9300      	str	r3, [sp, #0]
 800078e:	2332      	movs	r3, #50	@ 0x32
 8000790:	2264      	movs	r2, #100	@ 0x64
 8000792:	2169      	movs	r1, #105	@ 0x69
 8000794:	2082      	movs	r0, #130	@ 0x82
 8000796:	f7ff ff43 	bl	8000620 <LCD_Draw_Rect>
		LCD_DisplayString(BUTTON2_X + 5, BUTTON2_Y + (BUTTON_HEIGHT - Font16x24.Height)/2, (uint8_t*)"2P", &Font16x24, LCD_COLOR_WHITE, LCD_COLOR_BLUE, false);
 800079a:	4b1a      	ldr	r3, [pc, #104]	@ (8000804 <drawMenuScreen+0xc8>)
 800079c:	88db      	ldrh	r3, [r3, #6]
 800079e:	f1c3 0332 	rsb	r3, r3, #50	@ 0x32
 80007a2:	0fda      	lsrs	r2, r3, #31
 80007a4:	4413      	add	r3, r2
 80007a6:	105b      	asrs	r3, r3, #1
 80007a8:	b29b      	uxth	r3, r3
 80007aa:	3369      	adds	r3, #105	@ 0x69
 80007ac:	b299      	uxth	r1, r3
 80007ae:	2300      	movs	r3, #0
 80007b0:	9302      	str	r3, [sp, #8]
 80007b2:	231f      	movs	r3, #31
 80007b4:	9301      	str	r3, [sp, #4]
 80007b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007ba:	9300      	str	r3, [sp, #0]
 80007bc:	4b11      	ldr	r3, [pc, #68]	@ (8000804 <drawMenuScreen+0xc8>)
 80007be:	4a13      	ldr	r2, [pc, #76]	@ (800080c <drawMenuScreen+0xd0>)
 80007c0:	2087      	movs	r0, #135	@ 0x87
 80007c2:	f7ff ff84 	bl	80006ce <LCD_DisplayString>

		// --- Title ---
		LCD_DisplayString((LCD_PIXEL_WIDTH - 12*Font16x24.Width)/2, 30, (uint8_t*)"Connect Four", &Font16x24, LCD_COLOR_YELLOW, LCD_COLOR_BLUE, false); // Centered title
 80007c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000804 <drawMenuScreen+0xc8>)
 80007c8:	889b      	ldrh	r3, [r3, #4]
 80007ca:	461a      	mov	r2, r3
 80007cc:	4613      	mov	r3, r2
 80007ce:	0092      	lsls	r2, r2, #2
 80007d0:	1a9b      	subs	r3, r3, r2
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	33f0      	adds	r3, #240	@ 0xf0
 80007d6:	0fda      	lsrs	r2, r3, #31
 80007d8:	4413      	add	r3, r2
 80007da:	105b      	asrs	r3, r3, #1
 80007dc:	b298      	uxth	r0, r3
 80007de:	2300      	movs	r3, #0
 80007e0:	9302      	str	r3, [sp, #8]
 80007e2:	231f      	movs	r3, #31
 80007e4:	9301      	str	r3, [sp, #4]
 80007e6:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80007ea:	9300      	str	r3, [sp, #0]
 80007ec:	4b05      	ldr	r3, [pc, #20]	@ (8000804 <drawMenuScreen+0xc8>)
 80007ee:	4a08      	ldr	r2, [pc, #32]	@ (8000810 <drawMenuScreen+0xd4>)
 80007f0:	211e      	movs	r1, #30
 80007f2:	f7ff ff6c 	bl	80006ce <LCD_DisplayString>

		//handleTouchInput();
		addSchedulerEvent(TOUCH_POLLING_EVENT);
 80007f6:	2001      	movs	r0, #1
 80007f8:	f001 f9c4 	bl	8001b84 <addSchedulerEvent>
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000004 	.word	0x20000004
 8000808:	080082a8 	.word	0x080082a8
 800080c:	080082ac 	.word	0x080082ac
 8000810:	080082b0 	.word	0x080082b0

08000814 <getSlotColor>:


uint16_t getSlotColor(SlotState_t state) {
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
    switch(state) {
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d002      	beq.n	800082a <getSlotColor+0x16>
 8000824:	2b02      	cmp	r3, #2
 8000826:	d003      	beq.n	8000830 <getSlotColor+0x1c>
 8000828:	e005      	b.n	8000836 <getSlotColor+0x22>
        case SLOT_PLAYER1:
            return PLAYER1_COLOR;
 800082a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800082e:	e004      	b.n	800083a <getSlotColor+0x26>
        case SLOT_PLAYER2:
            return PLAYER2_COLOR;
 8000830:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000834:	e001      	b.n	800083a <getSlotColor+0x26>
        case SLOT_EMPTY:
        default:
            return EMPTY_SLOT_COLOR;
 8000836:	f64f 73ff 	movw	r3, #65535	@ 0xffff
    }
}
 800083a:	4618      	mov	r0, r3
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
	...

08000848 <initializeGameBoard>:

void initializeGameBoard() {
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
    printf("Initializing Game Board...\n");
 800084e:	4812      	ldr	r0, [pc, #72]	@ (8000898 <initializeGameBoard+0x50>)
 8000850:	f006 fce4 	bl	800721c <puts>
    for (int r = 0; r < BOARD_ROWS; r++) {
 8000854:	2300      	movs	r3, #0
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	e015      	b.n	8000886 <initializeGameBoard+0x3e>
        for (int c = 0; c < BOARD_COLS; c++) {
 800085a:	2300      	movs	r3, #0
 800085c:	603b      	str	r3, [r7, #0]
 800085e:	e00c      	b.n	800087a <initializeGameBoard+0x32>
            gameBoard[r][c] = SLOT_EMPTY;
 8000860:	490e      	ldr	r1, [pc, #56]	@ (800089c <initializeGameBoard+0x54>)
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	4613      	mov	r3, r2
 8000866:	00db      	lsls	r3, r3, #3
 8000868:	1a9b      	subs	r3, r3, r2
 800086a:	18ca      	adds	r2, r1, r3
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	4413      	add	r3, r2
 8000870:	2200      	movs	r2, #0
 8000872:	701a      	strb	r2, [r3, #0]
        for (int c = 0; c < BOARD_COLS; c++) {
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	3301      	adds	r3, #1
 8000878:	603b      	str	r3, [r7, #0]
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	2b06      	cmp	r3, #6
 800087e:	ddef      	ble.n	8000860 <initializeGameBoard+0x18>
    for (int r = 0; r < BOARD_ROWS; r++) {
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	3301      	adds	r3, #1
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2b05      	cmp	r3, #5
 800088a:	dde6      	ble.n	800085a <initializeGameBoard+0x12>
        }
    }
}
 800088c:	bf00      	nop
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	080082c0 	.word	0x080082c0
 800089c:	200000a8 	.word	0x200000a8

080008a0 <drawGameBoard>:

void drawGameBoard() {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af02      	add	r7, sp, #8
    printf("Drawing Game Board...\n");
 80008a6:	4824      	ldr	r0, [pc, #144]	@ (8000938 <drawGameBoard+0x98>)
 80008a8:	f006 fcb8 	bl	800721c <puts>
    // 1. Clear the screen or draw a background
    LCD_Clear(0, BACKGROUND_COLOR); // Or use LCD_Fill_Rect for just the screen area
 80008ac:	2100      	movs	r1, #0
 80008ae:	2000      	movs	r0, #0
 80008b0:	f001 f86c 	bl	800198c <LCD_Clear>

    // 2. Draw the main board structure (the blue rectangle)
    LCD_Fill_Rect(BOARD_X_OFFSET, BOARD_Y_OFFSET, BOARD_DRAW_WIDTH, BOARD_DRAW_HEIGHT, BOARD_COLOR);
 80008b4:	231f      	movs	r3, #31
 80008b6:	9300      	str	r3, [sp, #0]
 80008b8:	23c4      	movs	r3, #196	@ 0xc4
 80008ba:	22e4      	movs	r2, #228	@ 0xe4
 80008bc:	2132      	movs	r1, #50	@ 0x32
 80008be:	2006      	movs	r0, #6
 80008c0:	f001 f81b 	bl	80018fa <LCD_Fill_Rect>

    // 3. Draw the slots (circles) based on the gameBoard state
    for (int r = 0; r < BOARD_ROWS; r++) {
 80008c4:	2300      	movs	r3, #0
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	e02b      	b.n	8000922 <drawGameBoard+0x82>
        for (int c = 0; c < BOARD_COLS; c++) {
 80008ca:	2300      	movs	r3, #0
 80008cc:	60bb      	str	r3, [r7, #8]
 80008ce:	e022      	b.n	8000916 <drawGameBoard+0x76>
            // Calculate the center coordinates of the circle for slot (r, c)
            uint16_t centerX = BOARD_X_OFFSET + BOARD_SPACING + CIRCLE_RADIUS + c * (CIRCLE_DIAMETER + BOARD_SPACING);
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	015b      	lsls	r3, r3, #5
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	3318      	adds	r3, #24
 80008da:	80fb      	strh	r3, [r7, #6]
            uint16_t centerY = BOARD_Y_OFFSET + BOARD_SPACING + CIRCLE_RADIUS + r * (CIRCLE_DIAMETER + BOARD_SPACING);
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	b29b      	uxth	r3, r3
 80008e0:	015b      	lsls	r3, r3, #5
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	3344      	adds	r3, #68	@ 0x44
 80008e6:	80bb      	strh	r3, [r7, #4]

            // Get the color for the current slot state
            uint16_t slotColor = getSlotColor(gameBoard[r][c]);
 80008e8:	4914      	ldr	r1, [pc, #80]	@ (800093c <drawGameBoard+0x9c>)
 80008ea:	68fa      	ldr	r2, [r7, #12]
 80008ec:	4613      	mov	r3, r2
 80008ee:	00db      	lsls	r3, r3, #3
 80008f0:	1a9b      	subs	r3, r3, r2
 80008f2:	18ca      	adds	r2, r1, r3
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	4413      	add	r3, r2
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff ff8a 	bl	8000814 <getSlotColor>
 8000900:	4603      	mov	r3, r0
 8000902:	807b      	strh	r3, [r7, #2]

            // Draw the filled circle representing the slot/coin
            // Make sure LCD_Draw_Circle_Fill exists and works!
            LCD_Draw_Circle_Fill(centerX, centerY, CIRCLE_RADIUS, slotColor);
 8000904:	887b      	ldrh	r3, [r7, #2]
 8000906:	88b9      	ldrh	r1, [r7, #4]
 8000908:	88f8      	ldrh	r0, [r7, #6]
 800090a:	220e      	movs	r2, #14
 800090c:	f000 ffa2 	bl	8001854 <LCD_Draw_Circle_Fill>
        for (int c = 0; c < BOARD_COLS; c++) {
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	3301      	adds	r3, #1
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	2b06      	cmp	r3, #6
 800091a:	ddd9      	ble.n	80008d0 <drawGameBoard+0x30>
    for (int r = 0; r < BOARD_ROWS; r++) {
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	3301      	adds	r3, #1
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	2b05      	cmp	r3, #5
 8000926:	ddd0      	ble.n	80008ca <drawGameBoard+0x2a>
        }
    }
     printf("Game Board Drawn.\n");
 8000928:	4805      	ldr	r0, [pc, #20]	@ (8000940 <drawGameBoard+0xa0>)
 800092a:	f006 fc77 	bl	800721c <puts>
}
 800092e:	bf00      	nop
 8000930:	3710      	adds	r7, #16
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	080082dc 	.word	0x080082dc
 800093c:	200000a8 	.word	0x200000a8
 8000940:	080082f4 	.word	0x080082f4

08000944 <drawGameOverScreen>:

void drawGameOverScreen() {
 8000944:	b580      	push	{r7, lr}
 8000946:	b092      	sub	sp, #72	@ 0x48
 8000948:	af04      	add	r7, sp, #16
    LCD_Clear(0, BACKGROUND_COLOR); // Background (Black)
 800094a:	2100      	movs	r1, #0
 800094c:	2000      	movs	r0, #0
 800094e:	f001 f81d 	bl	800198c <LCD_Clear>
    char message[40];
    uint16_t text_color;
    uint16_t text_x, text_y; // Variables for calculated positions

    // --- Display Winner/Tie Message ---
    LCD_SetFont(&Font16x24);
 8000952:	487b      	ldr	r0, [pc, #492]	@ (8000b40 <drawGameOverScreen+0x1fc>)
 8000954:	f001 f84c 	bl	80019f0 <LCD_SetFont>
    if (roundWinner == SLOT_PLAYER1) {
 8000958:	4b7a      	ldr	r3, [pc, #488]	@ (8000b44 <drawGameOverScreen+0x200>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	2b01      	cmp	r3, #1
 800095e:	d108      	bne.n	8000972 <drawGameOverScreen+0x2e>
        text_color = PLAYER1_COLOR; // Red
 8000960:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000964:	86fb      	strh	r3, [r7, #54]	@ 0x36
        sprintf(message, "Player 1 Wins!");
 8000966:	463b      	mov	r3, r7
 8000968:	4977      	ldr	r1, [pc, #476]	@ (8000b48 <drawGameOverScreen+0x204>)
 800096a:	4618      	mov	r0, r3
 800096c:	f006 fb0a 	bl	8006f84 <siprintf>
 8000970:	e01b      	b.n	80009aa <drawGameOverScreen+0x66>
    } else if (roundWinner == SLOT_PLAYER2) {
 8000972:	4b74      	ldr	r3, [pc, #464]	@ (8000b44 <drawGameOverScreen+0x200>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	2b02      	cmp	r3, #2
 8000978:	d10f      	bne.n	800099a <drawGameOverScreen+0x56>
        text_color = PLAYER2_COLOR; // Yellow
 800097a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800097e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        sprintf(message, "%s Wins!", isOnePlayerMode ? "AI" : "Player 2");
 8000980:	4b72      	ldr	r3, [pc, #456]	@ (8000b4c <drawGameOverScreen+0x208>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <drawGameOverScreen+0x48>
 8000988:	4a71      	ldr	r2, [pc, #452]	@ (8000b50 <drawGameOverScreen+0x20c>)
 800098a:	e000      	b.n	800098e <drawGameOverScreen+0x4a>
 800098c:	4a71      	ldr	r2, [pc, #452]	@ (8000b54 <drawGameOverScreen+0x210>)
 800098e:	463b      	mov	r3, r7
 8000990:	4971      	ldr	r1, [pc, #452]	@ (8000b58 <drawGameOverScreen+0x214>)
 8000992:	4618      	mov	r0, r3
 8000994:	f006 faf6 	bl	8006f84 <siprintf>
 8000998:	e007      	b.n	80009aa <drawGameOverScreen+0x66>
    } else {
        text_color = LCD_COLOR_WHITE; // White for Tie
 800099a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800099e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        sprintf(message, "It's a Tie!");
 80009a0:	463b      	mov	r3, r7
 80009a2:	496e      	ldr	r1, [pc, #440]	@ (8000b5c <drawGameOverScreen+0x218>)
 80009a4:	4618      	mov	r0, r3
 80009a6:	f006 faed 	bl	8006f84 <siprintf>
    }
    LCD_DisplayString((LCD_PIXEL_WIDTH - strlen(message) * Font16x24.Width) / 2, 60, (uint8_t*)message, &Font16x24, text_color, BACKGROUND_COLOR, false);
 80009aa:	463b      	mov	r3, r7
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff fc1f 	bl	80001f0 <strlen>
 80009b2:	4603      	mov	r3, r0
 80009b4:	4a62      	ldr	r2, [pc, #392]	@ (8000b40 <drawGameOverScreen+0x1fc>)
 80009b6:	8892      	ldrh	r2, [r2, #4]
 80009b8:	fb02 f303 	mul.w	r3, r2, r3
 80009bc:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	b298      	uxth	r0, r3
 80009c4:	463a      	mov	r2, r7
 80009c6:	2300      	movs	r3, #0
 80009c8:	9302      	str	r3, [sp, #8]
 80009ca:	2300      	movs	r3, #0
 80009cc:	9301      	str	r3, [sp, #4]
 80009ce:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80009d0:	9300      	str	r3, [sp, #0]
 80009d2:	4b5b      	ldr	r3, [pc, #364]	@ (8000b40 <drawGameOverScreen+0x1fc>)
 80009d4:	213c      	movs	r1, #60	@ 0x3c
 80009d6:	f7ff fe7a 	bl	80006ce <LCD_DisplayString>



    // --- Display Scores ---
    LCD_SetFont(&Font12x12);
 80009da:	4861      	ldr	r0, [pc, #388]	@ (8000b60 <drawGameOverScreen+0x21c>)
 80009dc:	f001 f808 	bl	80019f0 <LCD_SetFont>
    text_color = LCD_COLOR_WHITE; // Explicitly use WHITE
 80009e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80009e4:	86fb      	strh	r3, [r7, #54]	@ 0x36

    sprintf(message, "Score: P1 (%lu) - %s (%lu)", player1Score, isOnePlayerMode ? "AI" : "P2", player2Score);
 80009e6:	4b5f      	ldr	r3, [pc, #380]	@ (8000b64 <drawGameOverScreen+0x220>)
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	4b58      	ldr	r3, [pc, #352]	@ (8000b4c <drawGameOverScreen+0x208>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <drawGameOverScreen+0xb2>
 80009f2:	4957      	ldr	r1, [pc, #348]	@ (8000b50 <drawGameOverScreen+0x20c>)
 80009f4:	e000      	b.n	80009f8 <drawGameOverScreen+0xb4>
 80009f6:	495c      	ldr	r1, [pc, #368]	@ (8000b68 <drawGameOverScreen+0x224>)
 80009f8:	4b5c      	ldr	r3, [pc, #368]	@ (8000b6c <drawGameOverScreen+0x228>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4638      	mov	r0, r7
 80009fe:	9300      	str	r3, [sp, #0]
 8000a00:	460b      	mov	r3, r1
 8000a02:	495b      	ldr	r1, [pc, #364]	@ (8000b70 <drawGameOverScreen+0x22c>)
 8000a04:	f006 fabe 	bl	8006f84 <siprintf>
    text_x = (LCD_PIXEL_WIDTH - strlen(message) * Font12x12.Width) / 2; // Center horizontally
 8000a08:	463b      	mov	r3, r7
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff fbf0 	bl	80001f0 <strlen>
 8000a10:	4603      	mov	r3, r0
 8000a12:	4a53      	ldr	r2, [pc, #332]	@ (8000b60 <drawGameOverScreen+0x21c>)
 8000a14:	8892      	ldrh	r2, [r2, #4]
 8000a16:	fb02 f303 	mul.w	r3, r2, r3
 8000a1a:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000a1e:	085b      	lsrs	r3, r3, #1
 8000a20:	86bb      	strh	r3, [r7, #52]	@ 0x34
    text_y = 120; // Vertical position
 8000a22:	2378      	movs	r3, #120	@ 0x78
 8000a24:	867b      	strh	r3, [r7, #50]	@ 0x32

    printf("Drawing Score at X=%d, Y=%d: %s\n", text_x, text_y, message); // Add debug print
 8000a26:	8eb9      	ldrh	r1, [r7, #52]	@ 0x34
 8000a28:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8000a2a:	463b      	mov	r3, r7
 8000a2c:	4851      	ldr	r0, [pc, #324]	@ (8000b74 <drawGameOverScreen+0x230>)
 8000a2e:	f006 fb8d 	bl	800714c <iprintf>
    LCD_DisplayString(text_x, text_y, (uint8_t*)message, &Font12x12, text_color, BACKGROUND_COLOR, false);
 8000a32:	463a      	mov	r2, r7
 8000a34:	8e79      	ldrh	r1, [r7, #50]	@ 0x32
 8000a36:	8eb8      	ldrh	r0, [r7, #52]	@ 0x34
 8000a38:	2300      	movs	r3, #0
 8000a3a:	9302      	str	r3, [sp, #8]
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	9301      	str	r3, [sp, #4]
 8000a40:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000a42:	9300      	str	r3, [sp, #0]
 8000a44:	4b46      	ldr	r3, [pc, #280]	@ (8000b60 <drawGameOverScreen+0x21c>)
 8000a46:	f7ff fe42 	bl	80006ce <LCD_DisplayString>


    // --- Display Round Time ---
    // (Font is already Font12x12, Color is already White)
    uint32_t duration_ms = roundEndTime - roundStartTime;
 8000a4a:	4b4b      	ldr	r3, [pc, #300]	@ (8000b78 <drawGameOverScreen+0x234>)
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	4b4b      	ldr	r3, [pc, #300]	@ (8000b7c <drawGameOverScreen+0x238>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	1ad3      	subs	r3, r2, r3
 8000a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t duration_s = duration_ms / 1000;
 8000a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a58:	4a49      	ldr	r2, [pc, #292]	@ (8000b80 <drawGameOverScreen+0x23c>)
 8000a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a5e:	099b      	lsrs	r3, r3, #6
 8000a60:	62bb      	str	r3, [r7, #40]	@ 0x28
    sprintf(message, "Round Time: %lu seconds", duration_s);
 8000a62:	463b      	mov	r3, r7
 8000a64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000a66:	4947      	ldr	r1, [pc, #284]	@ (8000b84 <drawGameOverScreen+0x240>)
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f006 fa8b 	bl	8006f84 <siprintf>
    text_x = (LCD_PIXEL_WIDTH - strlen(message) * Font12x12.Width) / 2; // Center horizontally
 8000a6e:	463b      	mov	r3, r7
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff fbbd 	bl	80001f0 <strlen>
 8000a76:	4603      	mov	r3, r0
 8000a78:	4a39      	ldr	r2, [pc, #228]	@ (8000b60 <drawGameOverScreen+0x21c>)
 8000a7a:	8892      	ldrh	r2, [r2, #4]
 8000a7c:	fb02 f303 	mul.w	r3, r2, r3
 8000a80:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000a84:	085b      	lsrs	r3, r3, #1
 8000a86:	86bb      	strh	r3, [r7, #52]	@ 0x34
    text_y = 150; // Vertical position
 8000a88:	2396      	movs	r3, #150	@ 0x96
 8000a8a:	867b      	strh	r3, [r7, #50]	@ 0x32

    printf("Drawing Time at X=%d, Y=%d: %s\n", text_x, text_y, message); // Add debug print
 8000a8c:	8eb9      	ldrh	r1, [r7, #52]	@ 0x34
 8000a8e:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8000a90:	463b      	mov	r3, r7
 8000a92:	483d      	ldr	r0, [pc, #244]	@ (8000b88 <drawGameOverScreen+0x244>)
 8000a94:	f006 fb5a 	bl	800714c <iprintf>
    LCD_DisplayString(text_x, text_y, (uint8_t*)message, &Font12x12, text_color, BACKGROUND_COLOR, false);
 8000a98:	463a      	mov	r2, r7
 8000a9a:	8e79      	ldrh	r1, [r7, #50]	@ 0x32
 8000a9c:	8eb8      	ldrh	r0, [r7, #52]	@ 0x34
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	9302      	str	r3, [sp, #8]
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	9301      	str	r3, [sp, #4]
 8000aa6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000aa8:	9300      	str	r3, [sp, #0]
 8000aaa:	4b2d      	ldr	r3, [pc, #180]	@ (8000b60 <drawGameOverScreen+0x21c>)
 8000aac:	f7ff fe0f 	bl	80006ce <LCD_DisplayString>


    // --- Draw Restart Button ---
    // (Keep this code as is)
    LCD_Fill_Rect(RESTART_BUTTON_X, RESTART_BUTTON_Y, RESTART_BUTTON_WIDTH, RESTART_BUTTON_HEIGHT, LCD_COLOR_GREY);
 8000ab0:	f24f 73de 	movw	r3, #63454	@ 0xf7de
 8000ab4:	9300      	str	r3, [sp, #0]
 8000ab6:	2328      	movs	r3, #40	@ 0x28
 8000ab8:	2278      	movs	r2, #120	@ 0x78
 8000aba:	21fa      	movs	r1, #250	@ 0xfa
 8000abc:	203c      	movs	r0, #60	@ 0x3c
 8000abe:	f000 ff1c 	bl	80018fa <LCD_Fill_Rect>
    LCD_Draw_Rect(RESTART_BUTTON_X, RESTART_BUTTON_Y, RESTART_BUTTON_WIDTH, RESTART_BUTTON_HEIGHT, LCD_COLOR_WHITE); // Outline
 8000ac2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ac6:	9300      	str	r3, [sp, #0]
 8000ac8:	2328      	movs	r3, #40	@ 0x28
 8000aca:	2278      	movs	r2, #120	@ 0x78
 8000acc:	21fa      	movs	r1, #250	@ 0xfa
 8000ace:	203c      	movs	r0, #60	@ 0x3c
 8000ad0:	f7ff fda6 	bl	8000620 <LCD_Draw_Rect>
    LCD_SetFont(&Font16x24);
 8000ad4:	481a      	ldr	r0, [pc, #104]	@ (8000b40 <drawGameOverScreen+0x1fc>)
 8000ad6:	f000 ff8b 	bl	80019f0 <LCD_SetFont>
    text_color = LCD_COLOR_WHITE; // White text for button
 8000ada:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ade:	86fb      	strh	r3, [r7, #54]	@ 0x36
    sprintf(message, "Restart");
 8000ae0:	463b      	mov	r3, r7
 8000ae2:	492a      	ldr	r1, [pc, #168]	@ (8000b8c <drawGameOverScreen+0x248>)
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f006 fa4d 	bl	8006f84 <siprintf>
    text_x = RESTART_BUTTON_X + (RESTART_BUTTON_WIDTH - strlen(message) * Font16x24.Width) / 2;
 8000aea:	463b      	mov	r3, r7
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fb7f 	bl	80001f0 <strlen>
 8000af2:	4603      	mov	r3, r0
 8000af4:	4a12      	ldr	r2, [pc, #72]	@ (8000b40 <drawGameOverScreen+0x1fc>)
 8000af6:	8892      	ldrh	r2, [r2, #4]
 8000af8:	fb02 f303 	mul.w	r3, r2, r3
 8000afc:	f1c3 0378 	rsb	r3, r3, #120	@ 0x78
 8000b00:	085b      	lsrs	r3, r3, #1
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	333c      	adds	r3, #60	@ 0x3c
 8000b06:	86bb      	strh	r3, [r7, #52]	@ 0x34
    text_y = RESTART_BUTTON_Y + (RESTART_BUTTON_HEIGHT - Font16x24.Height) / 2;
 8000b08:	4b0d      	ldr	r3, [pc, #52]	@ (8000b40 <drawGameOverScreen+0x1fc>)
 8000b0a:	88db      	ldrh	r3, [r3, #6]
 8000b0c:	f1c3 0328 	rsb	r3, r3, #40	@ 0x28
 8000b10:	0fda      	lsrs	r2, r3, #31
 8000b12:	4413      	add	r3, r2
 8000b14:	105b      	asrs	r3, r3, #1
 8000b16:	b29b      	uxth	r3, r3
 8000b18:	33fa      	adds	r3, #250	@ 0xfa
 8000b1a:	867b      	strh	r3, [r7, #50]	@ 0x32
    LCD_DisplayString(text_x, text_y, (uint8_t*)message, &Font16x24, text_color, LCD_COLOR_GREY, true); // Use opaque=true here since we filled bg
 8000b1c:	463a      	mov	r2, r7
 8000b1e:	8e79      	ldrh	r1, [r7, #50]	@ 0x32
 8000b20:	8eb8      	ldrh	r0, [r7, #52]	@ 0x34
 8000b22:	2301      	movs	r3, #1
 8000b24:	9302      	str	r3, [sp, #8]
 8000b26:	f24f 73de 	movw	r3, #63454	@ 0xf7de
 8000b2a:	9301      	str	r3, [sp, #4]
 8000b2c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000b2e:	9300      	str	r3, [sp, #0]
 8000b30:	4b03      	ldr	r3, [pc, #12]	@ (8000b40 <drawGameOverScreen+0x1fc>)
 8000b32:	f7ff fdcc 	bl	80006ce <LCD_DisplayString>
}
 8000b36:	bf00      	nop
 8000b38:	3738      	adds	r7, #56	@ 0x38
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000004 	.word	0x20000004
 8000b44:	200000e8 	.word	0x200000e8
 8000b48:	08008308 	.word	0x08008308
 8000b4c:	200000e9 	.word	0x200000e9
 8000b50:	08008318 	.word	0x08008318
 8000b54:	0800831c 	.word	0x0800831c
 8000b58:	08008328 	.word	0x08008328
 8000b5c:	08008334 	.word	0x08008334
 8000b60:	2000000c 	.word	0x2000000c
 8000b64:	200000d8 	.word	0x200000d8
 8000b68:	08008340 	.word	0x08008340
 8000b6c:	200000dc 	.word	0x200000dc
 8000b70:	08008344 	.word	0x08008344
 8000b74:	08008360 	.word	0x08008360
 8000b78:	200000e4 	.word	0x200000e4
 8000b7c:	200000e0 	.word	0x200000e0
 8000b80:	10624dd3 	.word	0x10624dd3
 8000b84:	08008384 	.word	0x08008384
 8000b88:	0800839c 	.word	0x0800839c
 8000b8c:	080083bc 	.word	0x080083bc

08000b90 <drawPreviewCoin>:

void drawPreviewCoin() {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
    // 1. Calculate Y position (fixed, above the board)
    uint16_t previewCoinY = BOARD_Y_PREVIEW_OFFSET - BOARD_SPACING - CIRCLE_RADIUS;
 8000b96:	2320      	movs	r3, #32
 8000b98:	80fb      	strh	r3, [r7, #6]

    // 2. Calculate X position based on currentColumn
    uint16_t previewCoinX = BOARD_X_OFFSET + BOARD_SPACING + CIRCLE_RADIUS + currentColumn * (CIRCLE_DIAMETER + BOARD_SPACING);
 8000b9a:	4b16      	ldr	r3, [pc, #88]	@ (8000bf4 <drawPreviewCoin+0x64>)
 8000b9c:	f993 3000 	ldrsb.w	r3, [r3]
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	015b      	lsls	r3, r3, #5
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	3318      	adds	r3, #24
 8000ba8:	80bb      	strh	r3, [r7, #4]

    // 3. Erase previous coin position (draw background color circle)
    //    Only erase if the position actually changed
    if (previousPreviewCoinX != 0 && previousPreviewCoinX != previewCoinX) {
 8000baa:	4b13      	ldr	r3, [pc, #76]	@ (8000bf8 <drawPreviewCoin+0x68>)
 8000bac:	881b      	ldrh	r3, [r3, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d00b      	beq.n	8000bca <drawPreviewCoin+0x3a>
 8000bb2:	4b11      	ldr	r3, [pc, #68]	@ (8000bf8 <drawPreviewCoin+0x68>)
 8000bb4:	881b      	ldrh	r3, [r3, #0]
 8000bb6:	88ba      	ldrh	r2, [r7, #4]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d006      	beq.n	8000bca <drawPreviewCoin+0x3a>
         LCD_Draw_Circle_Fill(previousPreviewCoinX, previewCoinY, CIRCLE_RADIUS + 1, BACKGROUND_COLOR); // +1 to cover edges
 8000bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf8 <drawPreviewCoin+0x68>)
 8000bbe:	8818      	ldrh	r0, [r3, #0]
 8000bc0:	88f9      	ldrh	r1, [r7, #6]
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	220f      	movs	r2, #15
 8000bc6:	f000 fe45 	bl	8001854 <LCD_Draw_Circle_Fill>
    }

    // 4. Draw the new coin with the current player's color
    uint16_t playerColor = getSlotColor(currentPlayer);
 8000bca:	4b0c      	ldr	r3, [pc, #48]	@ (8000bfc <drawPreviewCoin+0x6c>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff fe20 	bl	8000814 <getSlotColor>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	807b      	strh	r3, [r7, #2]
    LCD_Draw_Circle_Fill(previewCoinX, previewCoinY, CIRCLE_RADIUS, playerColor);
 8000bd8:	887b      	ldrh	r3, [r7, #2]
 8000bda:	88f9      	ldrh	r1, [r7, #6]
 8000bdc:	88b8      	ldrh	r0, [r7, #4]
 8000bde:	220e      	movs	r2, #14
 8000be0:	f000 fe38 	bl	8001854 <LCD_Draw_Circle_Fill>

    // 5. Store current position for next erase
    previousPreviewCoinX = previewCoinX;
 8000be4:	4a04      	ldr	r2, [pc, #16]	@ (8000bf8 <drawPreviewCoin+0x68>)
 8000be6:	88bb      	ldrh	r3, [r7, #4]
 8000be8:	8013      	strh	r3, [r2, #0]
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000000 	.word	0x20000000
 8000bf8:	200000d4 	.word	0x200000d4
 8000bfc:	200000d2 	.word	0x200000d2

08000c00 <findLowestEmptyRow>:

int findLowestEmptyRow(int col) {
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
    if (col < 0 || col >= BOARD_COLS) {
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	db02      	blt.n	8000c14 <findLowestEmptyRow+0x14>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2b06      	cmp	r3, #6
 8000c12:	dd02      	ble.n	8000c1a <findLowestEmptyRow+0x1a>
        return -1; // Invalid column
 8000c14:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c18:	e017      	b.n	8000c4a <findLowestEmptyRow+0x4a>
    }
    // Start from the bottom row and go up
    for (int r = BOARD_ROWS - 1; r >= 0; r--) {
 8000c1a:	2305      	movs	r3, #5
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	e00f      	b.n	8000c40 <findLowestEmptyRow+0x40>
        if (gameBoard[r][col] == SLOT_EMPTY) {
 8000c20:	490d      	ldr	r1, [pc, #52]	@ (8000c58 <findLowestEmptyRow+0x58>)
 8000c22:	68fa      	ldr	r2, [r7, #12]
 8000c24:	4613      	mov	r3, r2
 8000c26:	00db      	lsls	r3, r3, #3
 8000c28:	1a9b      	subs	r3, r3, r2
 8000c2a:	18ca      	adds	r2, r1, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4413      	add	r3, r2
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d101      	bne.n	8000c3a <findLowestEmptyRow+0x3a>
            return r; // Found an empty slot
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	e007      	b.n	8000c4a <findLowestEmptyRow+0x4a>
    for (int r = BOARD_ROWS - 1; r >= 0; r--) {
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	3b01      	subs	r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	daec      	bge.n	8000c20 <findLowestEmptyRow+0x20>
        }
    }
    return -1; // Column is full
 8000c46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3714      	adds	r7, #20
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	200000a8 	.word	0x200000a8

08000c5c <dropCoin>:

void dropCoin() {
 8000c5c:	b590      	push	{r4, r7, lr}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
    printf("Attempting to drop coin in column %d for player %d\n", currentColumn, currentPlayer);
 8000c62:	4b68      	ldr	r3, [pc, #416]	@ (8000e04 <dropCoin+0x1a8>)
 8000c64:	f993 3000 	ldrsb.w	r3, [r3]
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4b67      	ldr	r3, [pc, #412]	@ (8000e08 <dropCoin+0x1ac>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	461a      	mov	r2, r3
 8000c70:	4866      	ldr	r0, [pc, #408]	@ (8000e0c <dropCoin+0x1b0>)
 8000c72:	f006 fa6b 	bl	800714c <iprintf>

    int row = findLowestEmptyRow(currentColumn);
 8000c76:	4b63      	ldr	r3, [pc, #396]	@ (8000e04 <dropCoin+0x1a8>)
 8000c78:	f993 3000 	ldrsb.w	r3, [r3]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ffbf 	bl	8000c00 <findLowestEmptyRow>
 8000c82:	6078      	str	r0, [r7, #4]

    if (row != -1) { // Column has space
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000c8a:	f000 80b0 	beq.w	8000dee <dropCoin+0x192>
        printf("Placing coin at (%d, %d)\n", row, currentColumn);
 8000c8e:	4b5d      	ldr	r3, [pc, #372]	@ (8000e04 <dropCoin+0x1a8>)
 8000c90:	f993 3000 	ldrsb.w	r3, [r3]
 8000c94:	461a      	mov	r2, r3
 8000c96:	6879      	ldr	r1, [r7, #4]
 8000c98:	485d      	ldr	r0, [pc, #372]	@ (8000e10 <dropCoin+0x1b4>)
 8000c9a:	f006 fa57 	bl	800714c <iprintf>
        gameBoard[row][currentColumn] = currentPlayer;
 8000c9e:	4b59      	ldr	r3, [pc, #356]	@ (8000e04 <dropCoin+0x1a8>)
 8000ca0:	f993 3000 	ldrsb.w	r3, [r3]
 8000ca4:	461c      	mov	r4, r3
 8000ca6:	4b58      	ldr	r3, [pc, #352]	@ (8000e08 <dropCoin+0x1ac>)
 8000ca8:	7818      	ldrb	r0, [r3, #0]
 8000caa:	495a      	ldr	r1, [pc, #360]	@ (8000e14 <dropCoin+0x1b8>)
 8000cac:	687a      	ldr	r2, [r7, #4]
 8000cae:	4613      	mov	r3, r2
 8000cb0:	00db      	lsls	r3, r3, #3
 8000cb2:	1a9b      	subs	r3, r3, r2
 8000cb4:	440b      	add	r3, r1
 8000cb6:	4423      	add	r3, r4
 8000cb8:	4602      	mov	r2, r0
 8000cba:	701a      	strb	r2, [r3, #0]
        drawGameBoard(); // Redraw board with the new piece
 8000cbc:	f7ff fdf0 	bl	80008a0 <drawGameBoard>

        // --- Check for Win ---
        if (checkWin(currentPlayer)) {
 8000cc0:	4b51      	ldr	r3, [pc, #324]	@ (8000e08 <dropCoin+0x1ac>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f000 fab5 	bl	8001234 <checkWin>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d028      	beq.n	8000d22 <dropCoin+0xc6>
            printf("Player %d Wins!\n", (currentPlayer == SLOT_PLAYER1) ? 1 : 2);
 8000cd0:	4b4d      	ldr	r3, [pc, #308]	@ (8000e08 <dropCoin+0x1ac>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d101      	bne.n	8000cdc <dropCoin+0x80>
 8000cd8:	2301      	movs	r3, #1
 8000cda:	e000      	b.n	8000cde <dropCoin+0x82>
 8000cdc:	2302      	movs	r3, #2
 8000cde:	4619      	mov	r1, r3
 8000ce0:	484d      	ldr	r0, [pc, #308]	@ (8000e18 <dropCoin+0x1bc>)
 8000ce2:	f006 fa33 	bl	800714c <iprintf>
            roundWinner = currentPlayer;
 8000ce6:	4b48      	ldr	r3, [pc, #288]	@ (8000e08 <dropCoin+0x1ac>)
 8000ce8:	781a      	ldrb	r2, [r3, #0]
 8000cea:	4b4c      	ldr	r3, [pc, #304]	@ (8000e1c <dropCoin+0x1c0>)
 8000cec:	701a      	strb	r2, [r3, #0]
            roundEndTime = HAL_GetTick(); // Record end time
 8000cee:	f002 fd87 	bl	8003800 <HAL_GetTick>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	4a4a      	ldr	r2, [pc, #296]	@ (8000e20 <dropCoin+0x1c4>)
 8000cf6:	6013      	str	r3, [r2, #0]
            if (currentPlayer == SLOT_PLAYER1) player1Score++;
 8000cf8:	4b43      	ldr	r3, [pc, #268]	@ (8000e08 <dropCoin+0x1ac>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d105      	bne.n	8000d0c <dropCoin+0xb0>
 8000d00:	4b48      	ldr	r3, [pc, #288]	@ (8000e24 <dropCoin+0x1c8>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	3301      	adds	r3, #1
 8000d06:	4a47      	ldr	r2, [pc, #284]	@ (8000e24 <dropCoin+0x1c8>)
 8000d08:	6013      	str	r3, [r2, #0]
 8000d0a:	e004      	b.n	8000d16 <dropCoin+0xba>
            else player2Score++;
 8000d0c:	4b46      	ldr	r3, [pc, #280]	@ (8000e28 <dropCoin+0x1cc>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	3301      	adds	r3, #1
 8000d12:	4a45      	ldr	r2, [pc, #276]	@ (8000e28 <dropCoin+0x1cc>)
 8000d14:	6013      	str	r3, [r2, #0]
            currentAppState = APP_STATE_GAME_OVER;
 8000d16:	4b45      	ldr	r3, [pc, #276]	@ (8000e2c <dropCoin+0x1d0>)
 8000d18:	2206      	movs	r2, #6
 8000d1a:	701a      	strb	r2, [r3, #0]
            drawGameOverScreen(); // Draw the game over screen immediately
 8000d1c:	f7ff fe12 	bl	8000944 <drawGameOverScreen>
            return; // End the turn sequence
 8000d20:	e06c      	b.n	8000dfc <dropCoin+0x1a0>
        }

        // --- Check for Tie ---
        if (checkTie()) {
 8000d22:	f000 fbb7 	bl	8001494 <checkTie>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d010      	beq.n	8000d4e <dropCoin+0xf2>
            printf("Game is a Tie!\n");
 8000d2c:	4840      	ldr	r0, [pc, #256]	@ (8000e30 <dropCoin+0x1d4>)
 8000d2e:	f006 fa75 	bl	800721c <puts>
            roundWinner = SLOT_EMPTY; // Indicate a tie
 8000d32:	4b3a      	ldr	r3, [pc, #232]	@ (8000e1c <dropCoin+0x1c0>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	701a      	strb	r2, [r3, #0]
            roundEndTime = HAL_GetTick(); // Record end time
 8000d38:	f002 fd62 	bl	8003800 <HAL_GetTick>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	4a38      	ldr	r2, [pc, #224]	@ (8000e20 <dropCoin+0x1c4>)
 8000d40:	6013      	str	r3, [r2, #0]
            // No score update for a tie
            currentAppState = APP_STATE_GAME_OVER;
 8000d42:	4b3a      	ldr	r3, [pc, #232]	@ (8000e2c <dropCoin+0x1d0>)
 8000d44:	2206      	movs	r2, #6
 8000d46:	701a      	strb	r2, [r3, #0]
            drawGameOverScreen();
 8000d48:	f7ff fdfc 	bl	8000944 <drawGameOverScreen>
            return; // End the turn sequence
 8000d4c:	e056      	b.n	8000dfc <dropCoin+0x1a0>
        }

        // --- No Win, No Tie -> Switch Player ---
        //SlotState_t previousPlayer = currentPlayer;
        if (isOnePlayerMode) {
 8000d4e:	4b39      	ldr	r3, [pc, #228]	@ (8000e34 <dropCoin+0x1d8>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d01a      	beq.n	8000d8c <dropCoin+0x130>
            // Human just played (must be P1), switch to AI
            if (currentPlayer == SLOT_PLAYER1) {
 8000d56:	4b2c      	ldr	r3, [pc, #176]	@ (8000e08 <dropCoin+0x1ac>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d10c      	bne.n	8000d78 <dropCoin+0x11c>
                 currentPlayer = SLOT_PLAYER2; // AI is Player 2
 8000d5e:	4b2a      	ldr	r3, [pc, #168]	@ (8000e08 <dropCoin+0x1ac>)
 8000d60:	2202      	movs	r2, #2
 8000d62:	701a      	strb	r2, [r3, #0]
                 currentAppState = APP_STATE_GAME_AI_TURN;
 8000d64:	4b31      	ldr	r3, [pc, #196]	@ (8000e2c <dropCoin+0x1d0>)
 8000d66:	2204      	movs	r2, #4
 8000d68:	701a      	strb	r2, [r3, #0]
                 printf("Switched to AI turn.\n");
 8000d6a:	4833      	ldr	r0, [pc, #204]	@ (8000e38 <dropCoin+0x1dc>)
 8000d6c:	f006 fa56 	bl	800721c <puts>
                 addSchedulerEvent(GAME_UPDATE_EVENT); // Trigger AI move
 8000d70:	2004      	movs	r0, #4
 8000d72:	f000 ff07 	bl	8001b84 <addSchedulerEvent>
 8000d76:	e020      	b.n	8000dba <dropCoin+0x15e>
            } else { // AI just played (P2), switch to Human (P1)
                 currentPlayer = SLOT_PLAYER1;
 8000d78:	4b23      	ldr	r3, [pc, #140]	@ (8000e08 <dropCoin+0x1ac>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	701a      	strb	r2, [r3, #0]
                 currentAppState = APP_STATE_GAME_P1_TURN;
 8000d7e:	4b2b      	ldr	r3, [pc, #172]	@ (8000e2c <dropCoin+0x1d0>)
 8000d80:	2202      	movs	r2, #2
 8000d82:	701a      	strb	r2, [r3, #0]
                 printf("Switched to Player 1 turn.\n");
 8000d84:	482d      	ldr	r0, [pc, #180]	@ (8000e3c <dropCoin+0x1e0>)
 8000d86:	f006 fa49 	bl	800721c <puts>
 8000d8a:	e016      	b.n	8000dba <dropCoin+0x15e>
            }
        } else { // Two Player Mode
             if (currentPlayer == SLOT_PLAYER1) {
 8000d8c:	4b1e      	ldr	r3, [pc, #120]	@ (8000e08 <dropCoin+0x1ac>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d109      	bne.n	8000da8 <dropCoin+0x14c>
                 currentPlayer = SLOT_PLAYER2;
 8000d94:	4b1c      	ldr	r3, [pc, #112]	@ (8000e08 <dropCoin+0x1ac>)
 8000d96:	2202      	movs	r2, #2
 8000d98:	701a      	strb	r2, [r3, #0]
                 currentAppState = APP_STATE_GAME_P2_TURN;
 8000d9a:	4b24      	ldr	r3, [pc, #144]	@ (8000e2c <dropCoin+0x1d0>)
 8000d9c:	2203      	movs	r2, #3
 8000d9e:	701a      	strb	r2, [r3, #0]
                 printf("Switched to Player 2 turn.\n");
 8000da0:	4827      	ldr	r0, [pc, #156]	@ (8000e40 <dropCoin+0x1e4>)
 8000da2:	f006 fa3b 	bl	800721c <puts>
 8000da6:	e008      	b.n	8000dba <dropCoin+0x15e>
             } else {
                 currentPlayer = SLOT_PLAYER1;
 8000da8:	4b17      	ldr	r3, [pc, #92]	@ (8000e08 <dropCoin+0x1ac>)
 8000daa:	2201      	movs	r2, #1
 8000dac:	701a      	strb	r2, [r3, #0]
                 currentAppState = APP_STATE_GAME_P1_TURN;
 8000dae:	4b1f      	ldr	r3, [pc, #124]	@ (8000e2c <dropCoin+0x1d0>)
 8000db0:	2202      	movs	r2, #2
 8000db2:	701a      	strb	r2, [r3, #0]
                 printf("Switched to Player 1 turn.\n");
 8000db4:	4821      	ldr	r0, [pc, #132]	@ (8000e3c <dropCoin+0x1e0>)
 8000db6:	f006 fa31 	bl	800721c <puts>
             }
        }

        // Erase the dropped preview coin and draw the new player's preview coin
        uint16_t previewCoinY = BOARD_Y_OFFSET - BOARD_SPACING - CIRCLE_RADIUS;
 8000dba:	2320      	movs	r3, #32
 8000dbc:	807b      	strh	r3, [r7, #2]
        // Use previous player's color to erase the spot where the coin *was*
        uint16_t eraseX = BOARD_X_OFFSET + BOARD_SPACING + CIRCLE_RADIUS + currentColumn * (CIRCLE_DIAMETER + BOARD_SPACING);
 8000dbe:	4b11      	ldr	r3, [pc, #68]	@ (8000e04 <dropCoin+0x1a8>)
 8000dc0:	f993 3000 	ldrsb.w	r3, [r3]
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	015b      	lsls	r3, r3, #5
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	3318      	adds	r3, #24
 8000dcc:	803b      	strh	r3, [r7, #0]
        LCD_Draw_Circle_Fill(eraseX, previewCoinY, CIRCLE_RADIUS + 1, BACKGROUND_COLOR);
 8000dce:	8879      	ldrh	r1, [r7, #2]
 8000dd0:	8838      	ldrh	r0, [r7, #0]
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	220f      	movs	r2, #15
 8000dd6:	f000 fd3d 	bl	8001854 <LCD_Draw_Circle_Fill>
        previousPreviewCoinX = 0; // Reset previous X
 8000dda:	4b1a      	ldr	r3, [pc, #104]	@ (8000e44 <dropCoin+0x1e8>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	801a      	strh	r2, [r3, #0]
        if (currentAppState != APP_STATE_GAME_AI_TURN) { // Don't draw preview if AI is thinking immediately
 8000de0:	4b12      	ldr	r3, [pc, #72]	@ (8000e2c <dropCoin+0x1d0>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b04      	cmp	r3, #4
 8000de6:	d009      	beq.n	8000dfc <dropCoin+0x1a0>
             drawPreviewCoin();
 8000de8:	f7ff fed2 	bl	8000b90 <drawPreviewCoin>
 8000dec:	e006      	b.n	8000dfc <dropCoin+0x1a0>
        }

    } else {
        printf("Column %d is full!\n", currentColumn);
 8000dee:	4b05      	ldr	r3, [pc, #20]	@ (8000e04 <dropCoin+0x1a8>)
 8000df0:	f993 3000 	ldrsb.w	r3, [r3]
 8000df4:	4619      	mov	r1, r3
 8000df6:	4814      	ldr	r0, [pc, #80]	@ (8000e48 <dropCoin+0x1ec>)
 8000df8:	f006 f9a8 	bl	800714c <iprintf>
        // Optional feedback
    }
}
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd90      	pop	{r4, r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000000 	.word	0x20000000
 8000e08:	200000d2 	.word	0x200000d2
 8000e0c:	080083c4 	.word	0x080083c4
 8000e10:	080083f8 	.word	0x080083f8
 8000e14:	200000a8 	.word	0x200000a8
 8000e18:	08008414 	.word	0x08008414
 8000e1c:	200000e8 	.word	0x200000e8
 8000e20:	200000e4 	.word	0x200000e4
 8000e24:	200000d8 	.word	0x200000d8
 8000e28:	200000dc 	.word	0x200000dc
 8000e2c:	2000009c 	.word	0x2000009c
 8000e30:	08008428 	.word	0x08008428
 8000e34:	200000e9 	.word	0x200000e9
 8000e38:	08008438 	.word	0x08008438
 8000e3c:	08008450 	.word	0x08008450
 8000e40:	0800846c 	.word	0x0800846c
 8000e44:	200000d4 	.word	0x200000d4
 8000e48:	08008488 	.word	0x08008488

08000e4c <handleTouchInput>:


void handleTouchInput() {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af02      	add	r7, sp, #8
	STMPE811_TouchData touchData;
    STMPE811_State_t touchState = returnTouchStateAndLocation(&touchData);
 8000e52:	463b      	mov	r3, r7
 8000e54:	4618      	mov	r0, r3
 8000e56:	f000 fe7c 	bl	8001b52 <returnTouchStateAndLocation>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	73fb      	strb	r3, [r7, #15]
    if (touchState != STMPE811_State_Pressed) return;
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	f040 8094 	bne.w	8000f8e <handleTouchInput+0x142>
    uint32_t currentTime = HAL_GetTick();
 8000e66:	f002 fccb 	bl	8003800 <HAL_GetTick>
 8000e6a:	60b8      	str	r0, [r7, #8]
    if (currentTime - lastTouchMoveTime < TOUCH_MOVE_DEBOUNCE) return;
 8000e6c:	4b4f      	ldr	r3, [pc, #316]	@ (8000fac <handleTouchInput+0x160>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	68ba      	ldr	r2, [r7, #8]
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	2b63      	cmp	r3, #99	@ 0x63
 8000e76:	f240 808c 	bls.w	8000f92 <handleTouchInput+0x146>
    lastTouchMoveTime = currentTime;
 8000e7a:	4a4c      	ldr	r2, [pc, #304]	@ (8000fac <handleTouchInput+0x160>)
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	6013      	str	r3, [r2, #0]

	// --- State Machine for Touch ---
    switch(currentAppState) {
 8000e80:	4b4b      	ldr	r3, [pc, #300]	@ (8000fb0 <handleTouchInput+0x164>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2b06      	cmp	r3, #6
 8000e86:	d06c      	beq.n	8000f62 <handleTouchInput+0x116>
 8000e88:	2b06      	cmp	r3, #6
 8000e8a:	f300 8084 	bgt.w	8000f96 <handleTouchInput+0x14a>
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d005      	beq.n	8000e9e <handleTouchInput+0x52>
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	dd7f      	ble.n	8000f96 <handleTouchInput+0x14a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d87c      	bhi.n	8000f96 <handleTouchInput+0x14a>
 8000e9c:	e04f      	b.n	8000f3e <handleTouchInput+0xf2>
    	case APP_STATE_MENU:
			// --- Start Timer on Game Start ---
			// Check Button 1 (Left Button - Should be 1 Player)
			if (isTouchInside(touchData.x, touchData.y, BUTTON1_X, BUTTON1_Y, BUTTON_WIDTH, BUTTON_HEIGHT)) {
 8000e9e:	8838      	ldrh	r0, [r7, #0]
 8000ea0:	8879      	ldrh	r1, [r7, #2]
 8000ea2:	2332      	movs	r3, #50	@ 0x32
 8000ea4:	9301      	str	r3, [sp, #4]
 8000ea6:	2364      	movs	r3, #100	@ 0x64
 8000ea8:	9300      	str	r3, [sp, #0]
 8000eaa:	2369      	movs	r3, #105	@ 0x69
 8000eac:	220a      	movs	r2, #10
 8000eae:	f000 f88f 	bl	8000fd0 <isTouchInside>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d01a      	beq.n	8000eee <handleTouchInput+0xa2>
				printf("Button 1 (1 Player) Selected!\n");
 8000eb8:	483e      	ldr	r0, [pc, #248]	@ (8000fb4 <handleTouchInput+0x168>)
 8000eba:	f006 f9af 	bl	800721c <puts>
				isOnePlayerMode = true;
 8000ebe:	4b3e      	ldr	r3, [pc, #248]	@ (8000fb8 <handleTouchInput+0x16c>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	701a      	strb	r2, [r3, #0]
				initializeGameBoard();
 8000ec4:	f7ff fcc0 	bl	8000848 <initializeGameBoard>
				currentPlayer = SLOT_PLAYER1;
 8000ec8:	4b3c      	ldr	r3, [pc, #240]	@ (8000fbc <handleTouchInput+0x170>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	701a      	strb	r2, [r3, #0]
				currentColumn = BOARD_COLS / 2;
 8000ece:	4b3c      	ldr	r3, [pc, #240]	@ (8000fc0 <handleTouchInput+0x174>)
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	701a      	strb	r2, [r3, #0]
				roundStartTime = HAL_GetTick();
 8000ed4:	f002 fc94 	bl	8003800 <HAL_GetTick>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	4a3a      	ldr	r2, [pc, #232]	@ (8000fc4 <handleTouchInput+0x178>)
 8000edc:	6013      	str	r3, [r2, #0]
				currentAppState = APP_STATE_GAME_P1_TURN; // Start P1 turn (Human)
 8000ede:	4b34      	ldr	r3, [pc, #208]	@ (8000fb0 <handleTouchInput+0x164>)
 8000ee0:	2202      	movs	r2, #2
 8000ee2:	701a      	strb	r2, [r3, #0]
				drawGameBoard();
 8000ee4:	f7ff fcdc 	bl	80008a0 <drawGameBoard>
				drawPreviewCoin();
 8000ee8:	f7ff fe52 	bl	8000b90 <drawPreviewCoin>
				roundStartTime = HAL_GetTick();
				currentAppState = APP_STATE_GAME_P1_TURN; // Start P1 turn
				drawGameBoard();
				drawPreviewCoin();
			}
			break; // End of APP_STATE_MENU case
 8000eec:	e055      	b.n	8000f9a <handleTouchInput+0x14e>
			else if (isTouchInside(touchData.x, touchData.y, BUTTON2_X, BUTTON2_Y, BUTTON_WIDTH, BUTTON_HEIGHT)) {
 8000eee:	8838      	ldrh	r0, [r7, #0]
 8000ef0:	8879      	ldrh	r1, [r7, #2]
 8000ef2:	2332      	movs	r3, #50	@ 0x32
 8000ef4:	9301      	str	r3, [sp, #4]
 8000ef6:	2364      	movs	r3, #100	@ 0x64
 8000ef8:	9300      	str	r3, [sp, #0]
 8000efa:	2369      	movs	r3, #105	@ 0x69
 8000efc:	2282      	movs	r2, #130	@ 0x82
 8000efe:	f000 f867 	bl	8000fd0 <isTouchInside>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d048      	beq.n	8000f9a <handleTouchInput+0x14e>
				printf("Button 2 (2 Player) Selected!\n");
 8000f08:	482f      	ldr	r0, [pc, #188]	@ (8000fc8 <handleTouchInput+0x17c>)
 8000f0a:	f006 f987 	bl	800721c <puts>
				isOnePlayerMode = false;
 8000f0e:	4b2a      	ldr	r3, [pc, #168]	@ (8000fb8 <handleTouchInput+0x16c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	701a      	strb	r2, [r3, #0]
				initializeGameBoard();
 8000f14:	f7ff fc98 	bl	8000848 <initializeGameBoard>
				currentPlayer = SLOT_PLAYER1;
 8000f18:	4b28      	ldr	r3, [pc, #160]	@ (8000fbc <handleTouchInput+0x170>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	701a      	strb	r2, [r3, #0]
				currentColumn = BOARD_COLS / 2;
 8000f1e:	4b28      	ldr	r3, [pc, #160]	@ (8000fc0 <handleTouchInput+0x174>)
 8000f20:	2203      	movs	r2, #3
 8000f22:	701a      	strb	r2, [r3, #0]
				roundStartTime = HAL_GetTick();
 8000f24:	f002 fc6c 	bl	8003800 <HAL_GetTick>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	4a26      	ldr	r2, [pc, #152]	@ (8000fc4 <handleTouchInput+0x178>)
 8000f2c:	6013      	str	r3, [r2, #0]
				currentAppState = APP_STATE_GAME_P1_TURN; // Start P1 turn
 8000f2e:	4b20      	ldr	r3, [pc, #128]	@ (8000fb0 <handleTouchInput+0x164>)
 8000f30:	2202      	movs	r2, #2
 8000f32:	701a      	strb	r2, [r3, #0]
				drawGameBoard();
 8000f34:	f7ff fcb4 	bl	80008a0 <drawGameBoard>
				drawPreviewCoin();
 8000f38:	f7ff fe2a 	bl	8000b90 <drawPreviewCoin>
			break; // End of APP_STATE_MENU case
 8000f3c:	e02d      	b.n	8000f9a <handleTouchInput+0x14e>

        case APP_STATE_GAME_P1_TURN:
        case APP_STATE_GAME_P2_TURN:
             // Only handle touch for moving the preview coin in 2P mode
             // or if it's P1's turn in 1P mode
             if (!isOnePlayerMode || currentPlayer == SLOT_PLAYER1) {
 8000f3e:	4b1e      	ldr	r3, [pc, #120]	@ (8000fb8 <handleTouchInput+0x16c>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	f083 0301 	eor.w	r3, r3, #1
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d103      	bne.n	8000f54 <handleTouchInput+0x108>
 8000f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fbc <handleTouchInput+0x170>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d124      	bne.n	8000f9e <handleTouchInput+0x152>
                  handleGameTouchInput(touchData.x, touchData.y);
 8000f54:	883b      	ldrh	r3, [r7, #0]
 8000f56:	887a      	ldrh	r2, [r7, #2]
 8000f58:	4611      	mov	r1, r2
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 f866 	bl	800102c <handleGameTouchInput>
             }
             break;
 8000f60:	e01d      	b.n	8000f9e <handleTouchInput+0x152>

        case APP_STATE_GAME_OVER:
             // --- Handle Restart Button ---
             if (isTouchInside(touchData.x, touchData.y, RESTART_BUTTON_X, RESTART_BUTTON_Y, RESTART_BUTTON_WIDTH, RESTART_BUTTON_HEIGHT)) {
 8000f62:	8838      	ldrh	r0, [r7, #0]
 8000f64:	8879      	ldrh	r1, [r7, #2]
 8000f66:	2328      	movs	r3, #40	@ 0x28
 8000f68:	9301      	str	r3, [sp, #4]
 8000f6a:	2378      	movs	r3, #120	@ 0x78
 8000f6c:	9300      	str	r3, [sp, #0]
 8000f6e:	23fa      	movs	r3, #250	@ 0xfa
 8000f70:	223c      	movs	r2, #60	@ 0x3c
 8000f72:	f000 f82d 	bl	8000fd0 <isTouchInside>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d012      	beq.n	8000fa2 <handleTouchInput+0x156>
                  printf("Restart Button Pressed.\n");
 8000f7c:	4813      	ldr	r0, [pc, #76]	@ (8000fcc <handleTouchInput+0x180>)
 8000f7e:	f006 f94d 	bl	800721c <puts>
                  currentAppState = APP_STATE_MENU;
 8000f82:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb0 <handleTouchInput+0x164>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	701a      	strb	r2, [r3, #0]
                  // No need to reset scores here, they persist
                  drawMenuScreen(); // Go back to main menu
 8000f88:	f7ff fbd8 	bl	800073c <drawMenuScreen>
             }
             break;
 8000f8c:	e009      	b.n	8000fa2 <handleTouchInput+0x156>
    if (touchState != STMPE811_State_Pressed) return;
 8000f8e:	bf00      	nop
 8000f90:	e008      	b.n	8000fa4 <handleTouchInput+0x158>
    if (currentTime - lastTouchMoveTime < TOUCH_MOVE_DEBOUNCE) return;
 8000f92:	bf00      	nop
 8000f94:	e006      	b.n	8000fa4 <handleTouchInput+0x158>

        default:
            break;
 8000f96:	bf00      	nop
 8000f98:	e004      	b.n	8000fa4 <handleTouchInput+0x158>
			break; // End of APP_STATE_MENU case
 8000f9a:	bf00      	nop
 8000f9c:	e002      	b.n	8000fa4 <handleTouchInput+0x158>
             break;
 8000f9e:	bf00      	nop
 8000fa0:	e000      	b.n	8000fa4 <handleTouchInput+0x158>
             break;
 8000fa2:	bf00      	nop
    }
	    //addSchedulerEvent(TOUCH_POLLING_EVENT);
	     // Clear FIFO after processing a press that was acted upon
	     //I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
	     //I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
}
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200000ec 	.word	0x200000ec
 8000fb0:	2000009c 	.word	0x2000009c
 8000fb4:	0800849c 	.word	0x0800849c
 8000fb8:	200000e9 	.word	0x200000e9
 8000fbc:	200000d2 	.word	0x200000d2
 8000fc0:	20000000 	.word	0x20000000
 8000fc4:	200000e0 	.word	0x200000e0
 8000fc8:	080084bc 	.word	0x080084bc
 8000fcc:	080084dc 	.word	0x080084dc

08000fd0 <isTouchInside>:



// Check if touch coordinates are within a button's bounds
bool isTouchInside(uint16_t touchX, uint16_t touchY, uint16_t btnX, uint16_t btnY, uint16_t btnW, uint16_t btnH) {
 8000fd0:	b490      	push	{r4, r7}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4604      	mov	r4, r0
 8000fd8:	4608      	mov	r0, r1
 8000fda:	4611      	mov	r1, r2
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4623      	mov	r3, r4
 8000fe0:	80fb      	strh	r3, [r7, #6]
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	80bb      	strh	r3, [r7, #4]
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	807b      	strh	r3, [r7, #2]
 8000fea:	4613      	mov	r3, r2
 8000fec:	803b      	strh	r3, [r7, #0]
    return (touchX >= btnX && touchX < (btnX + btnW) &&
            touchY >= btnY && touchY < (btnY + btnH));
 8000fee:	88fa      	ldrh	r2, [r7, #6]
 8000ff0:	887b      	ldrh	r3, [r7, #2]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d311      	bcc.n	800101a <isTouchInside+0x4a>
    return (touchX >= btnX && touchX < (btnX + btnW) &&
 8000ff6:	88fa      	ldrh	r2, [r7, #6]
 8000ff8:	8879      	ldrh	r1, [r7, #2]
 8000ffa:	8a3b      	ldrh	r3, [r7, #16]
 8000ffc:	440b      	add	r3, r1
 8000ffe:	429a      	cmp	r2, r3
 8001000:	da0b      	bge.n	800101a <isTouchInside+0x4a>
 8001002:	88ba      	ldrh	r2, [r7, #4]
 8001004:	883b      	ldrh	r3, [r7, #0]
 8001006:	429a      	cmp	r2, r3
 8001008:	d307      	bcc.n	800101a <isTouchInside+0x4a>
            touchY >= btnY && touchY < (btnY + btnH));
 800100a:	88ba      	ldrh	r2, [r7, #4]
 800100c:	8839      	ldrh	r1, [r7, #0]
 800100e:	8abb      	ldrh	r3, [r7, #20]
 8001010:	440b      	add	r3, r1
 8001012:	429a      	cmp	r2, r3
 8001014:	da01      	bge.n	800101a <isTouchInside+0x4a>
 8001016:	2301      	movs	r3, #1
 8001018:	e000      	b.n	800101c <isTouchInside+0x4c>
 800101a:	2300      	movs	r3, #0
 800101c:	f003 0301 	and.w	r3, r3, #1
 8001020:	b2db      	uxtb	r3, r3
}
 8001022:	4618      	mov	r0, r3
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bc90      	pop	{r4, r7}
 800102a:	4770      	bx	lr

0800102c <handleGameTouchInput>:

void handleGameTouchInput(uint16_t touchX, uint16_t touchY) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	460a      	mov	r2, r1
 8001036:	80fb      	strh	r3, [r7, #6]
 8001038:	4613      	mov	r3, r2
 800103a:	80bb      	strh	r3, [r7, #4]
     // Check if touch is on the left half of the screen
     if (touchX < LCD_PIXEL_WIDTH / 2) {
 800103c:	88fb      	ldrh	r3, [r7, #6]
 800103e:	2b77      	cmp	r3, #119	@ 0x77
 8001040:	d817      	bhi.n	8001072 <handleGameTouchInput+0x46>
          // Move Left
          if (currentColumn > 0) {
 8001042:	4b19      	ldr	r3, [pc, #100]	@ (80010a8 <handleGameTouchInput+0x7c>)
 8001044:	f993 3000 	ldrsb.w	r3, [r3]
 8001048:	2b00      	cmp	r3, #0
 800104a:	dd29      	ble.n	80010a0 <handleGameTouchInput+0x74>
                currentColumn--;
 800104c:	4b16      	ldr	r3, [pc, #88]	@ (80010a8 <handleGameTouchInput+0x7c>)
 800104e:	f993 3000 	ldrsb.w	r3, [r3]
 8001052:	b2db      	uxtb	r3, r3
 8001054:	3b01      	subs	r3, #1
 8001056:	b2db      	uxtb	r3, r3
 8001058:	b25a      	sxtb	r2, r3
 800105a:	4b13      	ldr	r3, [pc, #76]	@ (80010a8 <handleGameTouchInput+0x7c>)
 800105c:	701a      	strb	r2, [r3, #0]
                printf("Preview Coin Moved Left to Column %d\n", currentColumn);
 800105e:	4b12      	ldr	r3, [pc, #72]	@ (80010a8 <handleGameTouchInput+0x7c>)
 8001060:	f993 3000 	ldrsb.w	r3, [r3]
 8001064:	4619      	mov	r1, r3
 8001066:	4811      	ldr	r0, [pc, #68]	@ (80010ac <handleGameTouchInput+0x80>)
 8001068:	f006 f870 	bl	800714c <iprintf>
                drawPreviewCoin(); // Redraw preview coin in new position
 800106c:	f7ff fd90 	bl	8000b90 <drawPreviewCoin>
                currentColumn++;
                 printf("Preview Coin Moved Right to Column %d\n", currentColumn);
                drawPreviewCoin(); // Redraw preview coin in new position
          }
     }
}
 8001070:	e016      	b.n	80010a0 <handleGameTouchInput+0x74>
          if (currentColumn < BOARD_COLS - 1) {
 8001072:	4b0d      	ldr	r3, [pc, #52]	@ (80010a8 <handleGameTouchInput+0x7c>)
 8001074:	f993 3000 	ldrsb.w	r3, [r3]
 8001078:	2b05      	cmp	r3, #5
 800107a:	dc11      	bgt.n	80010a0 <handleGameTouchInput+0x74>
                currentColumn++;
 800107c:	4b0a      	ldr	r3, [pc, #40]	@ (80010a8 <handleGameTouchInput+0x7c>)
 800107e:	f993 3000 	ldrsb.w	r3, [r3]
 8001082:	b2db      	uxtb	r3, r3
 8001084:	3301      	adds	r3, #1
 8001086:	b2db      	uxtb	r3, r3
 8001088:	b25a      	sxtb	r2, r3
 800108a:	4b07      	ldr	r3, [pc, #28]	@ (80010a8 <handleGameTouchInput+0x7c>)
 800108c:	701a      	strb	r2, [r3, #0]
                 printf("Preview Coin Moved Right to Column %d\n", currentColumn);
 800108e:	4b06      	ldr	r3, [pc, #24]	@ (80010a8 <handleGameTouchInput+0x7c>)
 8001090:	f993 3000 	ldrsb.w	r3, [r3]
 8001094:	4619      	mov	r1, r3
 8001096:	4806      	ldr	r0, [pc, #24]	@ (80010b0 <handleGameTouchInput+0x84>)
 8001098:	f006 f858 	bl	800714c <iprintf>
                drawPreviewCoin(); // Redraw preview coin in new position
 800109c:	f7ff fd78 	bl	8000b90 <drawPreviewCoin>
}
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000000 	.word	0x20000000
 80010ac:	080084f4 	.word	0x080084f4
 80010b0:	0800851c 	.word	0x0800851c

080010b4 <pollHardwareButton>:

void pollHardwareButton() {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
    // Check if it's a player's turn state
    if (currentAppState != APP_STATE_GAME_P1_TURN && currentAppState != APP_STATE_GAME_P2_TURN) {
 80010ba:	4b12      	ldr	r3, [pc, #72]	@ (8001104 <pollHardwareButton+0x50>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d003      	beq.n	80010ca <pollHardwareButton+0x16>
 80010c2:	4b10      	ldr	r3, [pc, #64]	@ (8001104 <pollHardwareButton+0x50>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b03      	cmp	r3, #3
 80010c8:	d117      	bne.n	80010fa <pollHardwareButton+0x46>
        return; // Only handle button presses during game turns
    }

    uint32_t currentTime = HAL_GetTick();
 80010ca:	f002 fb99 	bl	8003800 <HAL_GetTick>
 80010ce:	6078      	str	r0, [r7, #4]

    // Read the button state (Assumes Button_IsPressed() uses HAL_GPIO_ReadPin)
    // Assumes button press pulls LOW (requires internal/external pull-up on PA0)
    if (Button_IsPressed()) { // Or directly: HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET
 80010d0:	f000 fa26 	bl	8001520 <Button_IsPressed>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d010      	beq.n	80010fc <pollHardwareButton+0x48>
    //if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET) { // Check for LOW signal

        // Debounce check
        if (currentTime - lastButtonPressTime > BUTTON_PRESS_DEBOUNCE) {
 80010da:	4b0b      	ldr	r3, [pc, #44]	@ (8001108 <pollHardwareButton+0x54>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80010e6:	d909      	bls.n	80010fc <pollHardwareButton+0x48>
            lastButtonPressTime = currentTime; // Update time of valid press
 80010e8:	4a07      	ldr	r2, [pc, #28]	@ (8001108 <pollHardwareButton+0x54>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6013      	str	r3, [r2, #0]
            printf("HW Button Pressed during game turn.\n");
 80010ee:	4807      	ldr	r0, [pc, #28]	@ (800110c <pollHardwareButton+0x58>)
 80010f0:	f006 f894 	bl	800721c <puts>
            dropCoin(); // Trigger the coin drop logic
 80010f4:	f7ff fdb2 	bl	8000c5c <dropCoin>
 80010f8:	e000      	b.n	80010fc <pollHardwareButton+0x48>
        return; // Only handle button presses during game turns
 80010fa:	bf00      	nop
    } else {
         // Button is not pressed (HIGH signal due to pull-up)
         // Can optionally reset debounce timer here if needed, but usually not necessary
         // lastButtonPressTime = 0; // Allow immediate press after release
    }
}
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	2000009c 	.word	0x2000009c
 8001108:	200000f0 	.word	0x200000f0
 800110c:	08008544 	.word	0x08008544

08001110 <handleAITurn>:

void handleAITurn() {
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
    if (currentAppState != APP_STATE_GAME_AI_TURN) {
 8001116:	4b3c      	ldr	r3, [pc, #240]	@ (8001208 <handleAITurn+0xf8>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b04      	cmp	r3, #4
 800111c:	d16f      	bne.n	80011fe <handleAITurn+0xee>
        return; // Should not happen, but safety check
    }

    printf("AI Thinking...\n");
 800111e:	483b      	ldr	r0, [pc, #236]	@ (800120c <handleAITurn+0xfc>)
 8001120:	f006 f87c 	bl	800721c <puts>
    // Add a small delay for realism?
    HAL_Delay(500); // Example: 500ms thinking time
 8001124:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001128:	f002 fb76 	bl	8003818 <HAL_Delay>

    uint32_t random_val;
    int random_col;
    int available_row;
    int attempts = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	60fb      	str	r3, [r7, #12]
    const int max_attempts = 50; // Safety limit
 8001130:	2332      	movs	r3, #50	@ 0x32
 8001132:	60bb      	str	r3, [r7, #8]

    do {
        // Generate random number
        if (HAL_RNG_GenerateRandomNumber(&hrng, &random_val) != HAL_OK) {
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	4619      	mov	r1, r3
 8001138:	4835      	ldr	r0, [pc, #212]	@ (8001210 <handleAITurn+0x100>)
 800113a:	f005 f915 	bl	8006368 <HAL_RNG_GenerateRandomNumber>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d005      	beq.n	8001150 <handleAITurn+0x40>
             printf("RNG Error!\n");
 8001144:	4833      	ldr	r0, [pc, #204]	@ (8001214 <handleAITurn+0x104>)
 8001146:	f006 f869 	bl	800721c <puts>
             // Default to a safe move? (e.g., first available column)
             random_col = 0; // Fallback, find first valid column below
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
             break;
 800114e:	e048      	b.n	80011e2 <handleAITurn+0xd2>
        }
        random_col = random_val % BOARD_COLS; // Get column 0-6
 8001150:	6879      	ldr	r1, [r7, #4]
 8001152:	4b31      	ldr	r3, [pc, #196]	@ (8001218 <handleAITurn+0x108>)
 8001154:	fba3 2301 	umull	r2, r3, r3, r1
 8001158:	1aca      	subs	r2, r1, r3
 800115a:	0852      	lsrs	r2, r2, #1
 800115c:	4413      	add	r3, r2
 800115e:	089a      	lsrs	r2, r3, #2
 8001160:	4613      	mov	r3, r2
 8001162:	00db      	lsls	r3, r3, #3
 8001164:	1a9b      	subs	r3, r3, r2
 8001166:	1aca      	subs	r2, r1, r3
 8001168:	617a      	str	r2, [r7, #20]

        // Check if this column is valid
        available_row = findLowestEmptyRow(random_col);
 800116a:	6978      	ldr	r0, [r7, #20]
 800116c:	f7ff fd48 	bl	8000c00 <findLowestEmptyRow>
 8001170:	6138      	str	r0, [r7, #16]

        attempts++;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	3301      	adds	r3, #1
 8001176:	60fb      	str	r3, [r7, #12]
        if (attempts > max_attempts) {
 8001178:	68fa      	ldr	r2, [r7, #12]
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	429a      	cmp	r2, r3
 800117e:	dd2a      	ble.n	80011d6 <handleAITurn+0xc6>
             printf("AI Timeout finding random move, trying linear scan.\n");
 8001180:	4826      	ldr	r0, [pc, #152]	@ (800121c <handleAITurn+0x10c>)
 8001182:	f006 f84b 	bl	800721c <puts>
             // Fallback: Find the first available column linearly
             for (random_col = 0; random_col < BOARD_COLS; random_col++) {
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
 800118a:	e00a      	b.n	80011a2 <handleAITurn+0x92>
                  available_row = findLowestEmptyRow(random_col);
 800118c:	6978      	ldr	r0, [r7, #20]
 800118e:	f7ff fd37 	bl	8000c00 <findLowestEmptyRow>
 8001192:	6138      	str	r0, [r7, #16]
                  if (available_row != -1) break; // Found one
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800119a:	d106      	bne.n	80011aa <handleAITurn+0x9a>
             for (random_col = 0; random_col < BOARD_COLS; random_col++) {
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	3301      	adds	r3, #1
 80011a0:	617b      	str	r3, [r7, #20]
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	2b06      	cmp	r3, #6
 80011a6:	ddf1      	ble.n	800118c <handleAITurn+0x7c>
 80011a8:	e000      	b.n	80011ac <handleAITurn+0x9c>
                  if (available_row != -1) break; // Found one
 80011aa:	bf00      	nop
             }
             // If still no valid column, something is wrong (should have tied)
             if (available_row == -1) {
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80011b2:	d115      	bne.n	80011e0 <handleAITurn+0xd0>
                  printf("AI Error: No valid moves found on full(?) board.\n");
 80011b4:	481a      	ldr	r0, [pc, #104]	@ (8001220 <handleAITurn+0x110>)
 80011b6:	f006 f831 	bl	800721c <puts>
                  // Maybe force a tie state?
                  currentAppState = APP_STATE_GAME_OVER;
 80011ba:	4b13      	ldr	r3, [pc, #76]	@ (8001208 <handleAITurn+0xf8>)
 80011bc:	2206      	movs	r2, #6
 80011be:	701a      	strb	r2, [r3, #0]
                  roundWinner = SLOT_EMPTY;
 80011c0:	4b18      	ldr	r3, [pc, #96]	@ (8001224 <handleAITurn+0x114>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]
                  roundEndTime = HAL_GetTick();
 80011c6:	f002 fb1b 	bl	8003800 <HAL_GetTick>
 80011ca:	4603      	mov	r3, r0
 80011cc:	4a16      	ldr	r2, [pc, #88]	@ (8001228 <handleAITurn+0x118>)
 80011ce:	6013      	str	r3, [r2, #0]
                  drawGameOverScreen();
 80011d0:	f7ff fbb8 	bl	8000944 <drawGameOverScreen>
                  return;
 80011d4:	e014      	b.n	8001200 <handleAITurn+0xf0>
             }
             break; // Exit loop with linearly found column
        }

    } while (available_row == -1); // Keep trying if random column was full
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80011dc:	d0aa      	beq.n	8001134 <handleAITurn+0x24>
 80011de:	e000      	b.n	80011e2 <handleAITurn+0xd2>
             break; // Exit loop with linearly found column
 80011e0:	bf00      	nop

    // We have a valid column (random_col)
    currentColumn = random_col; // Set the column the AI will drop into
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	b25a      	sxtb	r2, r3
 80011e6:	4b11      	ldr	r3, [pc, #68]	@ (800122c <handleAITurn+0x11c>)
 80011e8:	701a      	strb	r2, [r3, #0]
    printf("AI chooses column %d\n", currentColumn);
 80011ea:	4b10      	ldr	r3, [pc, #64]	@ (800122c <handleAITurn+0x11c>)
 80011ec:	f993 3000 	ldrsb.w	r3, [r3]
 80011f0:	4619      	mov	r1, r3
 80011f2:	480f      	ldr	r0, [pc, #60]	@ (8001230 <handleAITurn+0x120>)
 80011f4:	f005 ffaa 	bl	800714c <iprintf>
    dropCoin(); // Execute the drop
 80011f8:	f7ff fd30 	bl	8000c5c <dropCoin>
 80011fc:	e000      	b.n	8001200 <handleAITurn+0xf0>
        return; // Should not happen, but safety check
 80011fe:	bf00      	nop
}
 8001200:	3718      	adds	r7, #24
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	2000009c 	.word	0x2000009c
 800120c:	08008568 	.word	0x08008568
 8001210:	20025b2c 	.word	0x20025b2c
 8001214:	08008578 	.word	0x08008578
 8001218:	24924925 	.word	0x24924925
 800121c:	08008584 	.word	0x08008584
 8001220:	080085b8 	.word	0x080085b8
 8001224:	200000e8 	.word	0x200000e8
 8001228:	200000e4 	.word	0x200000e4
 800122c:	20000000 	.word	0x20000000
 8001230:	080085ec 	.word	0x080085ec

08001234 <checkWin>:

bool checkWin(SlotState_t player) {
 8001234:	b480      	push	{r7}
 8001236:	b08b      	sub	sp, #44	@ 0x2c
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
    // Check horizontal win
    for (int r = 0; r < BOARD_ROWS; r++) {
 800123e:	2300      	movs	r3, #0
 8001240:	627b      	str	r3, [r7, #36]	@ 0x24
 8001242:	e040      	b.n	80012c6 <checkWin+0x92>
        for (int c = 0; c <= BOARD_COLS - 4; c++) {
 8001244:	2300      	movs	r3, #0
 8001246:	623b      	str	r3, [r7, #32]
 8001248:	e037      	b.n	80012ba <checkWin+0x86>
            if (gameBoard[r][c] == player &&
 800124a:	4991      	ldr	r1, [pc, #580]	@ (8001490 <checkWin+0x25c>)
 800124c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800124e:	4613      	mov	r3, r2
 8001250:	00db      	lsls	r3, r3, #3
 8001252:	1a9b      	subs	r3, r3, r2
 8001254:	18ca      	adds	r2, r1, r3
 8001256:	6a3b      	ldr	r3, [r7, #32]
 8001258:	4413      	add	r3, r2
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	79fa      	ldrb	r2, [r7, #7]
 800125e:	429a      	cmp	r2, r3
 8001260:	d128      	bne.n	80012b4 <checkWin+0x80>
                gameBoard[r][c+1] == player &&
 8001262:	6a3b      	ldr	r3, [r7, #32]
 8001264:	1c59      	adds	r1, r3, #1
 8001266:	488a      	ldr	r0, [pc, #552]	@ (8001490 <checkWin+0x25c>)
 8001268:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800126a:	4613      	mov	r3, r2
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	1a9b      	subs	r3, r3, r2
 8001270:	4403      	add	r3, r0
 8001272:	440b      	add	r3, r1
 8001274:	781b      	ldrb	r3, [r3, #0]
            if (gameBoard[r][c] == player &&
 8001276:	79fa      	ldrb	r2, [r7, #7]
 8001278:	429a      	cmp	r2, r3
 800127a:	d11b      	bne.n	80012b4 <checkWin+0x80>
                gameBoard[r][c+2] == player &&
 800127c:	6a3b      	ldr	r3, [r7, #32]
 800127e:	1c99      	adds	r1, r3, #2
 8001280:	4883      	ldr	r0, [pc, #524]	@ (8001490 <checkWin+0x25c>)
 8001282:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001284:	4613      	mov	r3, r2
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	1a9b      	subs	r3, r3, r2
 800128a:	4403      	add	r3, r0
 800128c:	440b      	add	r3, r1
 800128e:	781b      	ldrb	r3, [r3, #0]
                gameBoard[r][c+1] == player &&
 8001290:	79fa      	ldrb	r2, [r7, #7]
 8001292:	429a      	cmp	r2, r3
 8001294:	d10e      	bne.n	80012b4 <checkWin+0x80>
                gameBoard[r][c+3] == player) {
 8001296:	6a3b      	ldr	r3, [r7, #32]
 8001298:	1cd9      	adds	r1, r3, #3
 800129a:	487d      	ldr	r0, [pc, #500]	@ (8001490 <checkWin+0x25c>)
 800129c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800129e:	4613      	mov	r3, r2
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	1a9b      	subs	r3, r3, r2
 80012a4:	4403      	add	r3, r0
 80012a6:	440b      	add	r3, r1
 80012a8:	781b      	ldrb	r3, [r3, #0]
                gameBoard[r][c+2] == player &&
 80012aa:	79fa      	ldrb	r2, [r7, #7]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d101      	bne.n	80012b4 <checkWin+0x80>
                return true;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e0e7      	b.n	8001484 <checkWin+0x250>
        for (int c = 0; c <= BOARD_COLS - 4; c++) {
 80012b4:	6a3b      	ldr	r3, [r7, #32]
 80012b6:	3301      	adds	r3, #1
 80012b8:	623b      	str	r3, [r7, #32]
 80012ba:	6a3b      	ldr	r3, [r7, #32]
 80012bc:	2b03      	cmp	r3, #3
 80012be:	ddc4      	ble.n	800124a <checkWin+0x16>
    for (int r = 0; r < BOARD_ROWS; r++) {
 80012c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c2:	3301      	adds	r3, #1
 80012c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80012c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c8:	2b05      	cmp	r3, #5
 80012ca:	ddbb      	ble.n	8001244 <checkWin+0x10>
            }
        }
    }

    // Check vertical win
    for (int r = 0; r <= BOARD_ROWS - 4; r++) {
 80012cc:	2300      	movs	r3, #0
 80012ce:	61fb      	str	r3, [r7, #28]
 80012d0:	e040      	b.n	8001354 <checkWin+0x120>
        for (int c = 0; c < BOARD_COLS; c++) {
 80012d2:	2300      	movs	r3, #0
 80012d4:	61bb      	str	r3, [r7, #24]
 80012d6:	e037      	b.n	8001348 <checkWin+0x114>
            if (gameBoard[r][c] == player &&
 80012d8:	496d      	ldr	r1, [pc, #436]	@ (8001490 <checkWin+0x25c>)
 80012da:	69fa      	ldr	r2, [r7, #28]
 80012dc:	4613      	mov	r3, r2
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	1a9b      	subs	r3, r3, r2
 80012e2:	18ca      	adds	r2, r1, r3
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	4413      	add	r3, r2
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	79fa      	ldrb	r2, [r7, #7]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d128      	bne.n	8001342 <checkWin+0x10e>
                gameBoard[r+1][c] == player &&
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	1c5a      	adds	r2, r3, #1
 80012f4:	4966      	ldr	r1, [pc, #408]	@ (8001490 <checkWin+0x25c>)
 80012f6:	4613      	mov	r3, r2
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	1a9b      	subs	r3, r3, r2
 80012fc:	18ca      	adds	r2, r1, r3
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	4413      	add	r3, r2
 8001302:	781b      	ldrb	r3, [r3, #0]
            if (gameBoard[r][c] == player &&
 8001304:	79fa      	ldrb	r2, [r7, #7]
 8001306:	429a      	cmp	r2, r3
 8001308:	d11b      	bne.n	8001342 <checkWin+0x10e>
                gameBoard[r+2][c] == player &&
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	1c9a      	adds	r2, r3, #2
 800130e:	4960      	ldr	r1, [pc, #384]	@ (8001490 <checkWin+0x25c>)
 8001310:	4613      	mov	r3, r2
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	1a9b      	subs	r3, r3, r2
 8001316:	18ca      	adds	r2, r1, r3
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	4413      	add	r3, r2
 800131c:	781b      	ldrb	r3, [r3, #0]
                gameBoard[r+1][c] == player &&
 800131e:	79fa      	ldrb	r2, [r7, #7]
 8001320:	429a      	cmp	r2, r3
 8001322:	d10e      	bne.n	8001342 <checkWin+0x10e>
                gameBoard[r+3][c] == player) {
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	1cda      	adds	r2, r3, #3
 8001328:	4959      	ldr	r1, [pc, #356]	@ (8001490 <checkWin+0x25c>)
 800132a:	4613      	mov	r3, r2
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	1a9b      	subs	r3, r3, r2
 8001330:	18ca      	adds	r2, r1, r3
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	4413      	add	r3, r2
 8001336:	781b      	ldrb	r3, [r3, #0]
                gameBoard[r+2][c] == player &&
 8001338:	79fa      	ldrb	r2, [r7, #7]
 800133a:	429a      	cmp	r2, r3
 800133c:	d101      	bne.n	8001342 <checkWin+0x10e>
                return true;
 800133e:	2301      	movs	r3, #1
 8001340:	e0a0      	b.n	8001484 <checkWin+0x250>
        for (int c = 0; c < BOARD_COLS; c++) {
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	3301      	adds	r3, #1
 8001346:	61bb      	str	r3, [r7, #24]
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	2b06      	cmp	r3, #6
 800134c:	ddc4      	ble.n	80012d8 <checkWin+0xa4>
    for (int r = 0; r <= BOARD_ROWS - 4; r++) {
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3301      	adds	r3, #1
 8001352:	61fb      	str	r3, [r7, #28]
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	2b02      	cmp	r3, #2
 8001358:	ddbb      	ble.n	80012d2 <checkWin+0x9e>
            }
        }
    }

    // Check diagonal win (down-right)
    for (int r = 0; r <= BOARD_ROWS - 4; r++) {
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
 800135e:	e043      	b.n	80013e8 <checkWin+0x1b4>
        for (int c = 0; c <= BOARD_COLS - 4; c++) {
 8001360:	2300      	movs	r3, #0
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	e03a      	b.n	80013dc <checkWin+0x1a8>
            if (gameBoard[r][c] == player &&
 8001366:	494a      	ldr	r1, [pc, #296]	@ (8001490 <checkWin+0x25c>)
 8001368:	697a      	ldr	r2, [r7, #20]
 800136a:	4613      	mov	r3, r2
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	1a9b      	subs	r3, r3, r2
 8001370:	18ca      	adds	r2, r1, r3
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	4413      	add	r3, r2
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	79fa      	ldrb	r2, [r7, #7]
 800137a:	429a      	cmp	r2, r3
 800137c:	d12b      	bne.n	80013d6 <checkWin+0x1a2>
                gameBoard[r+1][c+1] == player &&
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	1c5a      	adds	r2, r3, #1
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1c59      	adds	r1, r3, #1
 8001386:	4842      	ldr	r0, [pc, #264]	@ (8001490 <checkWin+0x25c>)
 8001388:	4613      	mov	r3, r2
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	1a9b      	subs	r3, r3, r2
 800138e:	4403      	add	r3, r0
 8001390:	440b      	add	r3, r1
 8001392:	781b      	ldrb	r3, [r3, #0]
            if (gameBoard[r][c] == player &&
 8001394:	79fa      	ldrb	r2, [r7, #7]
 8001396:	429a      	cmp	r2, r3
 8001398:	d11d      	bne.n	80013d6 <checkWin+0x1a2>
                gameBoard[r+2][c+2] == player &&
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	1c9a      	adds	r2, r3, #2
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1c99      	adds	r1, r3, #2
 80013a2:	483b      	ldr	r0, [pc, #236]	@ (8001490 <checkWin+0x25c>)
 80013a4:	4613      	mov	r3, r2
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	1a9b      	subs	r3, r3, r2
 80013aa:	4403      	add	r3, r0
 80013ac:	440b      	add	r3, r1
 80013ae:	781b      	ldrb	r3, [r3, #0]
                gameBoard[r+1][c+1] == player &&
 80013b0:	79fa      	ldrb	r2, [r7, #7]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d10f      	bne.n	80013d6 <checkWin+0x1a2>
                gameBoard[r+3][c+3] == player) {
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	1cda      	adds	r2, r3, #3
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1cd9      	adds	r1, r3, #3
 80013be:	4834      	ldr	r0, [pc, #208]	@ (8001490 <checkWin+0x25c>)
 80013c0:	4613      	mov	r3, r2
 80013c2:	00db      	lsls	r3, r3, #3
 80013c4:	1a9b      	subs	r3, r3, r2
 80013c6:	4403      	add	r3, r0
 80013c8:	440b      	add	r3, r1
 80013ca:	781b      	ldrb	r3, [r3, #0]
                gameBoard[r+2][c+2] == player &&
 80013cc:	79fa      	ldrb	r2, [r7, #7]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d101      	bne.n	80013d6 <checkWin+0x1a2>
                return true;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e056      	b.n	8001484 <checkWin+0x250>
        for (int c = 0; c <= BOARD_COLS - 4; c++) {
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	3301      	adds	r3, #1
 80013da:	613b      	str	r3, [r7, #16]
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	2b03      	cmp	r3, #3
 80013e0:	ddc1      	ble.n	8001366 <checkWin+0x132>
    for (int r = 0; r <= BOARD_ROWS - 4; r++) {
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	3301      	adds	r3, #1
 80013e6:	617b      	str	r3, [r7, #20]
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	ddb8      	ble.n	8001360 <checkWin+0x12c>
            }
        }
    }

    // Check diagonal win (up-right)
    for (int r = 3; r < BOARD_ROWS; r++) {
 80013ee:	2303      	movs	r3, #3
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	e043      	b.n	800147c <checkWin+0x248>
        for (int c = 0; c <= BOARD_COLS - 4; c++) {
 80013f4:	2300      	movs	r3, #0
 80013f6:	60bb      	str	r3, [r7, #8]
 80013f8:	e03a      	b.n	8001470 <checkWin+0x23c>
            if (gameBoard[r][c] == player &&
 80013fa:	4925      	ldr	r1, [pc, #148]	@ (8001490 <checkWin+0x25c>)
 80013fc:	68fa      	ldr	r2, [r7, #12]
 80013fe:	4613      	mov	r3, r2
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	1a9b      	subs	r3, r3, r2
 8001404:	18ca      	adds	r2, r1, r3
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	4413      	add	r3, r2
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	79fa      	ldrb	r2, [r7, #7]
 800140e:	429a      	cmp	r2, r3
 8001410:	d12b      	bne.n	800146a <checkWin+0x236>
                gameBoard[r-1][c+1] == player &&
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	1e5a      	subs	r2, r3, #1
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	1c59      	adds	r1, r3, #1
 800141a:	481d      	ldr	r0, [pc, #116]	@ (8001490 <checkWin+0x25c>)
 800141c:	4613      	mov	r3, r2
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	1a9b      	subs	r3, r3, r2
 8001422:	4403      	add	r3, r0
 8001424:	440b      	add	r3, r1
 8001426:	781b      	ldrb	r3, [r3, #0]
            if (gameBoard[r][c] == player &&
 8001428:	79fa      	ldrb	r2, [r7, #7]
 800142a:	429a      	cmp	r2, r3
 800142c:	d11d      	bne.n	800146a <checkWin+0x236>
                gameBoard[r-2][c+2] == player &&
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	1e9a      	subs	r2, r3, #2
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	1c99      	adds	r1, r3, #2
 8001436:	4816      	ldr	r0, [pc, #88]	@ (8001490 <checkWin+0x25c>)
 8001438:	4613      	mov	r3, r2
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	1a9b      	subs	r3, r3, r2
 800143e:	4403      	add	r3, r0
 8001440:	440b      	add	r3, r1
 8001442:	781b      	ldrb	r3, [r3, #0]
                gameBoard[r-1][c+1] == player &&
 8001444:	79fa      	ldrb	r2, [r7, #7]
 8001446:	429a      	cmp	r2, r3
 8001448:	d10f      	bne.n	800146a <checkWin+0x236>
                gameBoard[r-3][c+3] == player) {
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	1eda      	subs	r2, r3, #3
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	1cd9      	adds	r1, r3, #3
 8001452:	480f      	ldr	r0, [pc, #60]	@ (8001490 <checkWin+0x25c>)
 8001454:	4613      	mov	r3, r2
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	1a9b      	subs	r3, r3, r2
 800145a:	4403      	add	r3, r0
 800145c:	440b      	add	r3, r1
 800145e:	781b      	ldrb	r3, [r3, #0]
                gameBoard[r-2][c+2] == player &&
 8001460:	79fa      	ldrb	r2, [r7, #7]
 8001462:	429a      	cmp	r2, r3
 8001464:	d101      	bne.n	800146a <checkWin+0x236>
                return true;
 8001466:	2301      	movs	r3, #1
 8001468:	e00c      	b.n	8001484 <checkWin+0x250>
        for (int c = 0; c <= BOARD_COLS - 4; c++) {
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	3301      	adds	r3, #1
 800146e:	60bb      	str	r3, [r7, #8]
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	2b03      	cmp	r3, #3
 8001474:	ddc1      	ble.n	80013fa <checkWin+0x1c6>
    for (int r = 3; r < BOARD_ROWS; r++) {
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	3301      	adds	r3, #1
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2b05      	cmp	r3, #5
 8001480:	ddb8      	ble.n	80013f4 <checkWin+0x1c0>
            }
        }
    }

    return false; // No win condition found
 8001482:	2300      	movs	r3, #0
}
 8001484:	4618      	mov	r0, r3
 8001486:	372c      	adds	r7, #44	@ 0x2c
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	200000a8 	.word	0x200000a8

08001494 <checkTie>:

bool checkTie(void) {
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
    // If any slot in the top row is empty, the board isn't full
    for (int c = 0; c < BOARD_COLS; c++) {
 800149a:	2300      	movs	r3, #0
 800149c:	607b      	str	r3, [r7, #4]
 800149e:	e00a      	b.n	80014b6 <checkTie+0x22>
        if (gameBoard[0][c] == SLOT_EMPTY) {
 80014a0:	4a0a      	ldr	r2, [pc, #40]	@ (80014cc <checkTie+0x38>)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d101      	bne.n	80014b0 <checkTie+0x1c>
            return false;
 80014ac:	2300      	movs	r3, #0
 80014ae:	e006      	b.n	80014be <checkTie+0x2a>
    for (int c = 0; c < BOARD_COLS; c++) {
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3301      	adds	r3, #1
 80014b4:	607b      	str	r3, [r7, #4]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2b06      	cmp	r3, #6
 80014ba:	ddf1      	ble.n	80014a0 <checkTie+0xc>
        }
    }
    // If we get here, the top row is full, so the board is full
    return true;
 80014bc:	2301      	movs	r3, #1
}
 80014be:	4618      	mov	r0, r3
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	200000a8 	.word	0x200000a8

080014d0 <Button_Init>:

#include "Button_Driver.h"



void Button_Init(void) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	603b      	str	r3, [r7, #0]
 80014da:	4b0f      	ldr	r3, [pc, #60]	@ (8001518 <Button_Init+0x48>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	4a0e      	ldr	r2, [pc, #56]	@ (8001518 <Button_Init+0x48>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001518 <Button_Init+0x48>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	603b      	str	r3, [r7, #0]
 80014f0:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef buttonConfig;

    // Configure the button pin as input
    buttonConfig.Pin = GPIO_PIN_0;
 80014f2:	2301      	movs	r3, #1
 80014f4:	607b      	str	r3, [r7, #4]
    buttonConfig.Mode = GPIO_MODE_INPUT;
 80014f6:	2300      	movs	r3, #0
 80014f8:	60bb      	str	r3, [r7, #8]
    buttonConfig.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
    buttonConfig.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	2300      	movs	r3, #0
 8001500:	613b      	str	r3, [r7, #16]
    buttonConfig.Alternate = GPIO_MODE_OUTPUT_OD;
 8001502:	2311      	movs	r3, #17
 8001504:	617b      	str	r3, [r7, #20]
    // Enable the clock for the button's GPIO port
    //GPIO_ClockControl(BUTTON_GPIO_PORT, ENABLE);

    // Initialize the GPIO pin
    //GPIO_Init(BUTTON_GPIO_PORT, &buttonConfig);
    HAL_GPIO_Init(GPIOA, &buttonConfig);
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	4619      	mov	r1, r3
 800150a:	4804      	ldr	r0, [pc, #16]	@ (800151c <Button_Init+0x4c>)
 800150c:	f002 fa8e 	bl	8003a2c <HAL_GPIO_Init>
}
 8001510:	bf00      	nop
 8001512:	3718      	adds	r7, #24
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40023800 	.word	0x40023800
 800151c:	40020000 	.word	0x40020000

08001520 <Button_IsPressed>:

bool Button_IsPressed(void) {
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
    // Read the button's state using the GPIO driver
    //uint8_t pinState = GPIO_ReadInputPin(BUTTON_GPIO_PORT, BUTTON_PIN_NUMBER);
    //return (pinState == BUTTON_PRESSED);
	uint32_t pressed = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8001526:	2101      	movs	r1, #1
 8001528:	4807      	ldr	r0, [pc, #28]	@ (8001548 <Button_IsPressed+0x28>)
 800152a:	f002 fd37 	bl	8003f9c <HAL_GPIO_ReadPin>
 800152e:	4603      	mov	r3, r0
 8001530:	607b      	str	r3, [r7, #4]
	if (pressed) {
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <Button_IsPressed+0x1c>
		return BUTTON_PRESSED;
 8001538:	2301      	movs	r3, #1
 800153a:	e000      	b.n	800153e <Button_IsPressed+0x1e>
	} else {
		return BUTTON_NOT_PRESSED;
 800153c:	2300      	movs	r3, #0
	}
}
 800153e:	4618      	mov	r0, r3
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40020000 	.word	0x40020000

0800154c <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08c      	sub	sp, #48	@ 0x30
 8001550:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	61bb      	str	r3, [r7, #24]
 8001556:	4b5a      	ldr	r3, [pc, #360]	@ (80016c0 <LCD_GPIO_Init+0x174>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800155a:	4a59      	ldr	r2, [pc, #356]	@ (80016c0 <LCD_GPIO_Init+0x174>)
 800155c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001560:	6453      	str	r3, [r2, #68]	@ 0x44
 8001562:	4b57      	ldr	r3, [pc, #348]	@ (80016c0 <LCD_GPIO_Init+0x174>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001566:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800156a:	61bb      	str	r3, [r7, #24]
 800156c:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
 8001572:	4b53      	ldr	r3, [pc, #332]	@ (80016c0 <LCD_GPIO_Init+0x174>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001576:	4a52      	ldr	r2, [pc, #328]	@ (80016c0 <LCD_GPIO_Init+0x174>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6313      	str	r3, [r2, #48]	@ 0x30
 800157e:	4b50      	ldr	r3, [pc, #320]	@ (80016c0 <LCD_GPIO_Init+0x174>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	617b      	str	r3, [r7, #20]
 8001588:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	613b      	str	r3, [r7, #16]
 800158e:	4b4c      	ldr	r3, [pc, #304]	@ (80016c0 <LCD_GPIO_Init+0x174>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	4a4b      	ldr	r2, [pc, #300]	@ (80016c0 <LCD_GPIO_Init+0x174>)
 8001594:	f043 0302 	orr.w	r3, r3, #2
 8001598:	6313      	str	r3, [r2, #48]	@ 0x30
 800159a:	4b49      	ldr	r3, [pc, #292]	@ (80016c0 <LCD_GPIO_Init+0x174>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	613b      	str	r3, [r7, #16]
 80015a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	4b45      	ldr	r3, [pc, #276]	@ (80016c0 <LCD_GPIO_Init+0x174>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	4a44      	ldr	r2, [pc, #272]	@ (80016c0 <LCD_GPIO_Init+0x174>)
 80015b0:	f043 0304 	orr.w	r3, r3, #4
 80015b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b6:	4b42      	ldr	r3, [pc, #264]	@ (80016c0 <LCD_GPIO_Init+0x174>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ba:	f003 0304 	and.w	r3, r3, #4
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	4b3e      	ldr	r3, [pc, #248]	@ (80016c0 <LCD_GPIO_Init+0x174>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ca:	4a3d      	ldr	r2, [pc, #244]	@ (80016c0 <LCD_GPIO_Init+0x174>)
 80015cc:	f043 0308 	orr.w	r3, r3, #8
 80015d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015d2:	4b3b      	ldr	r3, [pc, #236]	@ (80016c0 <LCD_GPIO_Init+0x174>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d6:	f003 0308 	and.w	r3, r3, #8
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	607b      	str	r3, [r7, #4]
 80015e2:	4b37      	ldr	r3, [pc, #220]	@ (80016c0 <LCD_GPIO_Init+0x174>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	4a36      	ldr	r2, [pc, #216]	@ (80016c0 <LCD_GPIO_Init+0x174>)
 80015e8:	f043 0320 	orr.w	r3, r3, #32
 80015ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ee:	4b34      	ldr	r3, [pc, #208]	@ (80016c0 <LCD_GPIO_Init+0x174>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f2:	f003 0320 	and.w	r3, r3, #32
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	603b      	str	r3, [r7, #0]
 80015fe:	4b30      	ldr	r3, [pc, #192]	@ (80016c0 <LCD_GPIO_Init+0x174>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	4a2f      	ldr	r2, [pc, #188]	@ (80016c0 <LCD_GPIO_Init+0x174>)
 8001604:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001608:	6313      	str	r3, [r2, #48]	@ 0x30
 800160a:	4b2d      	ldr	r3, [pc, #180]	@ (80016c0 <LCD_GPIO_Init+0x174>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001612:	603b      	str	r3, [r7, #0]
 8001614:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8001616:	f641 0358 	movw	r3, #6232	@ 0x1858
 800161a:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001624:	2302      	movs	r3, #2
 8001626:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8001628:	230e      	movs	r3, #14
 800162a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800162c:	f107 031c 	add.w	r3, r7, #28
 8001630:	4619      	mov	r1, r3
 8001632:	4824      	ldr	r0, [pc, #144]	@ (80016c4 <LCD_GPIO_Init+0x178>)
 8001634:	f002 f9fa 	bl	8003a2c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8001638:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800163c:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800163e:	f107 031c 	add.w	r3, r7, #28
 8001642:	4619      	mov	r1, r3
 8001644:	4820      	ldr	r0, [pc, #128]	@ (80016c8 <LCD_GPIO_Init+0x17c>)
 8001646:	f002 f9f1 	bl	8003a2c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800164a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800164e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001650:	f107 031c 	add.w	r3, r7, #28
 8001654:	4619      	mov	r1, r3
 8001656:	481d      	ldr	r0, [pc, #116]	@ (80016cc <LCD_GPIO_Init+0x180>)
 8001658:	f002 f9e8 	bl	8003a2c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 800165c:	2348      	movs	r3, #72	@ 0x48
 800165e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001660:	f107 031c 	add.w	r3, r7, #28
 8001664:	4619      	mov	r1, r3
 8001666:	481a      	ldr	r0, [pc, #104]	@ (80016d0 <LCD_GPIO_Init+0x184>)
 8001668:	f002 f9e0 	bl	8003a2c <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 800166c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001670:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8001672:	f107 031c 	add.w	r3, r7, #28
 8001676:	4619      	mov	r1, r3
 8001678:	4816      	ldr	r0, [pc, #88]	@ (80016d4 <LCD_GPIO_Init+0x188>)
 800167a:	f002 f9d7 	bl	8003a2c <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800167e:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001682:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001684:	f107 031c 	add.w	r3, r7, #28
 8001688:	4619      	mov	r1, r3
 800168a:	4813      	ldr	r0, [pc, #76]	@ (80016d8 <LCD_GPIO_Init+0x18c>)
 800168c:	f002 f9ce 	bl	8003a2c <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001690:	2303      	movs	r3, #3
 8001692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8001694:	2309      	movs	r3, #9
 8001696:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001698:	f107 031c 	add.w	r3, r7, #28
 800169c:	4619      	mov	r1, r3
 800169e:	480a      	ldr	r0, [pc, #40]	@ (80016c8 <LCD_GPIO_Init+0x17c>)
 80016a0:	f002 f9c4 	bl	8003a2c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80016a4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80016a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80016aa:	f107 031c 	add.w	r3, r7, #28
 80016ae:	4619      	mov	r1, r3
 80016b0:	4809      	ldr	r0, [pc, #36]	@ (80016d8 <LCD_GPIO_Init+0x18c>)
 80016b2:	f002 f9bb 	bl	8003a2c <HAL_GPIO_Init>
}
 80016b6:	bf00      	nop
 80016b8:	3730      	adds	r7, #48	@ 0x30
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40020000 	.word	0x40020000
 80016c8:	40020400 	.word	0x40020400
 80016cc:	40020800 	.word	0x40020800
 80016d0:	40020c00 	.word	0x40020c00
 80016d4:	40021400 	.word	0x40021400
 80016d8:	40021800 	.word	0x40021800

080016dc <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b090      	sub	sp, #64	@ 0x40
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 80016ea:	23f0      	movs	r3, #240	@ 0xf0
 80016ec:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 80016f2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80016f6:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 80016f8:	2302      	movs	r3, #2
 80016fa:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 80016fc:	23ff      	movs	r3, #255	@ 0xff
 80016fe:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8001700:	2300      	movs	r3, #0
 8001702:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001704:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001708:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800170a:	2305      	movs	r3, #5
 800170c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d101      	bne.n	8001718 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8001714:	4b0f      	ldr	r3, [pc, #60]	@ (8001754 <LTCD_Layer_Init+0x78>)
 8001716:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8001718:	23f0      	movs	r3, #240	@ 0xf0
 800171a:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 800171c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001720:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8001734:	79fa      	ldrb	r2, [r7, #7]
 8001736:	f107 030c 	add.w	r3, r7, #12
 800173a:	4619      	mov	r1, r3
 800173c:	4806      	ldr	r0, [pc, #24]	@ (8001758 <LTCD_Layer_Init+0x7c>)
 800173e:	f003 fdcf 	bl	80052e0 <HAL_LTDC_ConfigLayer>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8001748:	f000 f9f2 	bl	8001b30 <LCD_Error_Handler>
	}
}
 800174c:	bf00      	nop
 800174e:	3740      	adds	r7, #64	@ 0x40
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	200001d0 	.word	0x200001d0
 8001758:	200000f4 	.word	0x200000f4

0800175c <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8001760:	4b2a      	ldr	r3, [pc, #168]	@ (800180c <LTCD__Init+0xb0>)
 8001762:	4a2b      	ldr	r2, [pc, #172]	@ (8001810 <LTCD__Init+0xb4>)
 8001764:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8001766:	4b29      	ldr	r3, [pc, #164]	@ (800180c <LTCD__Init+0xb0>)
 8001768:	2209      	movs	r2, #9
 800176a:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 800176c:	4b27      	ldr	r3, [pc, #156]	@ (800180c <LTCD__Init+0xb0>)
 800176e:	2201      	movs	r2, #1
 8001770:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8001772:	4b26      	ldr	r3, [pc, #152]	@ (800180c <LTCD__Init+0xb0>)
 8001774:	221d      	movs	r2, #29
 8001776:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8001778:	4b24      	ldr	r3, [pc, #144]	@ (800180c <LTCD__Init+0xb0>)
 800177a:	2203      	movs	r2, #3
 800177c:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 800177e:	4b23      	ldr	r3, [pc, #140]	@ (800180c <LTCD__Init+0xb0>)
 8001780:	f240 120d 	movw	r2, #269	@ 0x10d
 8001784:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8001786:	4b21      	ldr	r3, [pc, #132]	@ (800180c <LTCD__Init+0xb0>)
 8001788:	f240 1243 	movw	r2, #323	@ 0x143
 800178c:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 800178e:	4b1f      	ldr	r3, [pc, #124]	@ (800180c <LTCD__Init+0xb0>)
 8001790:	f240 1217 	movw	r2, #279	@ 0x117
 8001794:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8001796:	4b1d      	ldr	r3, [pc, #116]	@ (800180c <LTCD__Init+0xb0>)
 8001798:	f240 1247 	movw	r2, #327	@ 0x147
 800179c:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 800179e:	4b1b      	ldr	r3, [pc, #108]	@ (800180c <LTCD__Init+0xb0>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 80017a6:	4b19      	ldr	r3, [pc, #100]	@ (800180c <LTCD__Init+0xb0>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 80017ae:	4b17      	ldr	r3, [pc, #92]	@ (800180c <LTCD__Init+0xb0>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80017b6:	4b17      	ldr	r3, [pc, #92]	@ (8001814 <LTCD__Init+0xb8>)
 80017b8:	2208      	movs	r2, #8
 80017ba:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80017bc:	4b15      	ldr	r3, [pc, #84]	@ (8001814 <LTCD__Init+0xb8>)
 80017be:	22c0      	movs	r2, #192	@ 0xc0
 80017c0:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80017c2:	4b14      	ldr	r3, [pc, #80]	@ (8001814 <LTCD__Init+0xb8>)
 80017c4:	2204      	movs	r2, #4
 80017c6:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80017c8:	4b12      	ldr	r3, [pc, #72]	@ (8001814 <LTCD__Init+0xb8>)
 80017ca:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80017ce:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80017d0:	4810      	ldr	r0, [pc, #64]	@ (8001814 <LTCD__Init+0xb8>)
 80017d2:	f004 fbdf 	bl	8005f94 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80017d6:	4b0d      	ldr	r3, [pc, #52]	@ (800180c <LTCD__Init+0xb0>)
 80017d8:	2200      	movs	r2, #0
 80017da:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80017dc:	4b0b      	ldr	r3, [pc, #44]	@ (800180c <LTCD__Init+0xb0>)
 80017de:	2200      	movs	r2, #0
 80017e0:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80017e2:	4b0a      	ldr	r3, [pc, #40]	@ (800180c <LTCD__Init+0xb0>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80017e8:	4b08      	ldr	r3, [pc, #32]	@ (800180c <LTCD__Init+0xb0>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 80017ee:	f7ff fead 	bl	800154c <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80017f2:	4806      	ldr	r0, [pc, #24]	@ (800180c <LTCD__Init+0xb0>)
 80017f4:	f003 fca4 	bl	8005140 <HAL_LTDC_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 80017fe:	f000 f997 	bl	8001b30 <LCD_Error_Handler>
	 }

	ili9341_Init();
 8001802:	f000 f9e5 	bl	8001bd0 <ili9341_Init>
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200000f4 	.word	0x200000f4
 8001810:	40016800 	.word	0x40016800
 8001814:	2000019c 	.word	0x2000019c

08001818 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	80fb      	strh	r3, [r7, #6]
 8001822:	460b      	mov	r3, r1
 8001824:	80bb      	strh	r3, [r7, #4]
 8001826:	4613      	mov	r3, r2
 8001828:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 800182a:	88ba      	ldrh	r2, [r7, #4]
 800182c:	4613      	mov	r3, r2
 800182e:	011b      	lsls	r3, r3, #4
 8001830:	1a9b      	subs	r3, r3, r2
 8001832:	011b      	lsls	r3, r3, #4
 8001834:	461a      	mov	r2, r3
 8001836:	88fb      	ldrh	r3, [r7, #6]
 8001838:	4413      	add	r3, r2
 800183a:	4905      	ldr	r1, [pc, #20]	@ (8001850 <LCD_Draw_Pixel+0x38>)
 800183c:	887a      	ldrh	r2, [r7, #2]
 800183e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	200001d0 	.word	0x200001d0

08001854 <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 8001854:	b590      	push	{r4, r7, lr}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	4604      	mov	r4, r0
 800185c:	4608      	mov	r0, r1
 800185e:	4611      	mov	r1, r2
 8001860:	461a      	mov	r2, r3
 8001862:	4623      	mov	r3, r4
 8001864:	80fb      	strh	r3, [r7, #6]
 8001866:	4603      	mov	r3, r0
 8001868:	80bb      	strh	r3, [r7, #4]
 800186a:	460b      	mov	r3, r1
 800186c:	807b      	strh	r3, [r7, #2]
 800186e:	4613      	mov	r3, r2
 8001870:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 8001872:	887b      	ldrh	r3, [r7, #2]
 8001874:	425b      	negs	r3, r3
 8001876:	b29b      	uxth	r3, r3
 8001878:	81fb      	strh	r3, [r7, #14]
 800187a:	e034      	b.n	80018e6 <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 800187c:	887b      	ldrh	r3, [r7, #2]
 800187e:	425b      	negs	r3, r3
 8001880:	b29b      	uxth	r3, r3
 8001882:	81bb      	strh	r3, [r7, #12]
 8001884:	e024      	b.n	80018d0 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 8001886:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800188a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800188e:	fb03 f202 	mul.w	r2, r3, r2
 8001892:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001896:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800189a:	fb01 f303 	mul.w	r3, r1, r3
 800189e:	441a      	add	r2, r3
 80018a0:	887b      	ldrh	r3, [r7, #2]
 80018a2:	8879      	ldrh	r1, [r7, #2]
 80018a4:	fb01 f303 	mul.w	r3, r1, r3
 80018a8:	429a      	cmp	r2, r3
 80018aa:	dc0b      	bgt.n	80018c4 <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 80018ac:	89ba      	ldrh	r2, [r7, #12]
 80018ae:	88fb      	ldrh	r3, [r7, #6]
 80018b0:	4413      	add	r3, r2
 80018b2:	b298      	uxth	r0, r3
 80018b4:	89fa      	ldrh	r2, [r7, #14]
 80018b6:	88bb      	ldrh	r3, [r7, #4]
 80018b8:	4413      	add	r3, r2
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	883a      	ldrh	r2, [r7, #0]
 80018be:	4619      	mov	r1, r3
 80018c0:	f7ff ffaa 	bl	8001818 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 80018c4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	3301      	adds	r3, #1
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	81bb      	strh	r3, [r7, #12]
 80018d0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80018d4:	887b      	ldrh	r3, [r7, #2]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	ddd5      	ble.n	8001886 <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 80018da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018de:	b29b      	uxth	r3, r3
 80018e0:	3301      	adds	r3, #1
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	81fb      	strh	r3, [r7, #14]
 80018e6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80018ea:	887b      	ldrh	r3, [r7, #2]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	ddc5      	ble.n	800187c <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 80018f0:	bf00      	nop
 80018f2:	bf00      	nop
 80018f4:	3714      	adds	r7, #20
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd90      	pop	{r4, r7, pc}

080018fa <LCD_Fill_Rect>:

void LCD_Fill_Rect(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color) {
 80018fa:	b590      	push	{r4, r7, lr}
 80018fc:	b085      	sub	sp, #20
 80018fe:	af00      	add	r7, sp, #0
 8001900:	4604      	mov	r4, r0
 8001902:	4608      	mov	r0, r1
 8001904:	4611      	mov	r1, r2
 8001906:	461a      	mov	r2, r3
 8001908:	4623      	mov	r3, r4
 800190a:	80fb      	strh	r3, [r7, #6]
 800190c:	4603      	mov	r3, r0
 800190e:	80bb      	strh	r3, [r7, #4]
 8001910:	460b      	mov	r3, r1
 8001912:	807b      	strh	r3, [r7, #2]
 8001914:	4613      	mov	r3, r2
 8001916:	803b      	strh	r3, [r7, #0]
    // Basic bounds check (optional but good practice)
    if (x >= LCD_PIXEL_WIDTH || y >= LCD_PIXEL_HEIGHT) return;
 8001918:	88fb      	ldrh	r3, [r7, #6]
 800191a:	2bef      	cmp	r3, #239	@ 0xef
 800191c:	d832      	bhi.n	8001984 <LCD_Fill_Rect+0x8a>
 800191e:	88bb      	ldrh	r3, [r7, #4]
 8001920:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001924:	d22e      	bcs.n	8001984 <LCD_Fill_Rect+0x8a>
    uint16_t endX = x + width;
 8001926:	88fa      	ldrh	r2, [r7, #6]
 8001928:	887b      	ldrh	r3, [r7, #2]
 800192a:	4413      	add	r3, r2
 800192c:	81fb      	strh	r3, [r7, #14]
    uint16_t endY = y + height;
 800192e:	88ba      	ldrh	r2, [r7, #4]
 8001930:	883b      	ldrh	r3, [r7, #0]
 8001932:	4413      	add	r3, r2
 8001934:	81bb      	strh	r3, [r7, #12]
    if (endX > LCD_PIXEL_WIDTH) endX = LCD_PIXEL_WIDTH;
 8001936:	89fb      	ldrh	r3, [r7, #14]
 8001938:	2bf0      	cmp	r3, #240	@ 0xf0
 800193a:	d901      	bls.n	8001940 <LCD_Fill_Rect+0x46>
 800193c:	23f0      	movs	r3, #240	@ 0xf0
 800193e:	81fb      	strh	r3, [r7, #14]
    if (endY > LCD_PIXEL_HEIGHT) endY = LCD_PIXEL_HEIGHT;
 8001940:	89bb      	ldrh	r3, [r7, #12]
 8001942:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001946:	d902      	bls.n	800194e <LCD_Fill_Rect+0x54>
 8001948:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800194c:	81bb      	strh	r3, [r7, #12]

    for (uint16_t row = y; row < endY; row++) {
 800194e:	88bb      	ldrh	r3, [r7, #4]
 8001950:	817b      	strh	r3, [r7, #10]
 8001952:	e012      	b.n	800197a <LCD_Fill_Rect+0x80>
        for (uint16_t col = x; col < endX; col++) {
 8001954:	88fb      	ldrh	r3, [r7, #6]
 8001956:	813b      	strh	r3, [r7, #8]
 8001958:	e008      	b.n	800196c <LCD_Fill_Rect+0x72>
            LCD_Draw_Pixel(col, row, color);
 800195a:	8c3a      	ldrh	r2, [r7, #32]
 800195c:	8979      	ldrh	r1, [r7, #10]
 800195e:	893b      	ldrh	r3, [r7, #8]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff ff59 	bl	8001818 <LCD_Draw_Pixel>
        for (uint16_t col = x; col < endX; col++) {
 8001966:	893b      	ldrh	r3, [r7, #8]
 8001968:	3301      	adds	r3, #1
 800196a:	813b      	strh	r3, [r7, #8]
 800196c:	893a      	ldrh	r2, [r7, #8]
 800196e:	89fb      	ldrh	r3, [r7, #14]
 8001970:	429a      	cmp	r2, r3
 8001972:	d3f2      	bcc.n	800195a <LCD_Fill_Rect+0x60>
    for (uint16_t row = y; row < endY; row++) {
 8001974:	897b      	ldrh	r3, [r7, #10]
 8001976:	3301      	adds	r3, #1
 8001978:	817b      	strh	r3, [r7, #10]
 800197a:	897a      	ldrh	r2, [r7, #10]
 800197c:	89bb      	ldrh	r3, [r7, #12]
 800197e:	429a      	cmp	r2, r3
 8001980:	d3e8      	bcc.n	8001954 <LCD_Fill_Rect+0x5a>
 8001982:	e000      	b.n	8001986 <LCD_Fill_Rect+0x8c>
    if (x >= LCD_PIXEL_WIDTH || y >= LCD_PIXEL_HEIGHT) return;
 8001984:	bf00      	nop
        }
    }
}
 8001986:	3714      	adds	r7, #20
 8001988:	46bd      	mov	sp, r7
 800198a:	bd90      	pop	{r4, r7, pc}

0800198c <LCD_Clear>:
	  LCD_Draw_Pixel(x, i+y, color);
  }
}

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	460a      	mov	r2, r1
 8001996:	71fb      	strb	r3, [r7, #7]
 8001998:	4613      	mov	r3, r2
 800199a:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d10e      	bne.n	80019c0 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	e007      	b.n	80019b8 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 80019a8:	4908      	ldr	r1, [pc, #32]	@ (80019cc <LCD_Clear+0x40>)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	88ba      	ldrh	r2, [r7, #4]
 80019ae:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	3301      	adds	r3, #1
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 80019be:	d3f3      	bcc.n	80019a8 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 80019c0:	bf00      	nop
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	200001d0 	.word	0x200001d0

080019d0 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 80019da:	4a04      	ldr	r2, [pc, #16]	@ (80019ec <LCD_SetTextColor+0x1c>)
 80019dc:	88fb      	ldrh	r3, [r7, #6]
 80019de:	8013      	strh	r3, [r2, #0]
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	20000002 	.word	0x20000002

080019f0 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 80019f8:	4a04      	ldr	r2, [pc, #16]	@ (8001a0c <LCD_SetFont+0x1c>)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6013      	str	r3, [r2, #0]
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	200001cc 	.word	0x200001cc

08001a10 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	603a      	str	r2, [r7, #0]
 8001a1a:	80fb      	strh	r3, [r7, #6]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	2300      	movs	r3, #0
 8001a26:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	e04c      	b.n	8001ac8 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	e03f      	b.n	8001ab4 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	881b      	ldrh	r3, [r3, #0]
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4b27      	ldr	r3, [pc, #156]	@ (8001ae0 <LCD_Draw_Char+0xd0>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	889b      	ldrh	r3, [r3, #4]
 8001a46:	4a27      	ldr	r2, [pc, #156]	@ (8001ae4 <LCD_Draw_Char+0xd4>)
 8001a48:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4c:	08db      	lsrs	r3, r3, #3
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	2280      	movs	r2, #128	@ 0x80
 8001a54:	409a      	lsls	r2, r3
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	fa42 f303 	asr.w	r3, r2, r3
 8001a5c:	400b      	ands	r3, r1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d104      	bne.n	8001a6c <LCD_Draw_Char+0x5c>
 8001a62:	4b1f      	ldr	r3, [pc, #124]	@ (8001ae0 <LCD_Draw_Char+0xd0>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	889b      	ldrh	r3, [r3, #4]
 8001a68:	2b0c      	cmp	r3, #12
 8001a6a:	d920      	bls.n	8001aae <LCD_Draw_Char+0x9e>
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	4413      	add	r3, r2
 8001a74:	881b      	ldrh	r3, [r3, #0]
 8001a76:	461a      	mov	r2, r3
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	fa42 f303 	asr.w	r3, r2, r3
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d104      	bne.n	8001a90 <LCD_Draw_Char+0x80>
 8001a86:	4b16      	ldr	r3, [pc, #88]	@ (8001ae0 <LCD_Draw_Char+0xd0>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	889b      	ldrh	r3, [r3, #4]
 8001a8c:	2b0c      	cmp	r3, #12
 8001a8e:	d80e      	bhi.n	8001aae <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	88fb      	ldrh	r3, [r7, #6]
 8001a96:	4413      	add	r3, r2
 8001a98:	b298      	uxth	r0, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	88bb      	ldrh	r3, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	4a10      	ldr	r2, [pc, #64]	@ (8001ae8 <LCD_Draw_Char+0xd8>)
 8001aa6:	8812      	ldrh	r2, [r2, #0]
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f7ff feb5 	bl	8001818 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae0 <LCD_Draw_Char+0xd0>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	889b      	ldrh	r3, [r3, #4]
 8001aba:	461a      	mov	r2, r3
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d3b8      	bcc.n	8001a34 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	4b05      	ldr	r3, [pc, #20]	@ (8001ae0 <LCD_Draw_Char+0xd0>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	88db      	ldrh	r3, [r3, #6]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d3ab      	bcc.n	8001a2e <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8001ad6:	bf00      	nop
 8001ad8:	bf00      	nop
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	200001cc 	.word	0x200001cc
 8001ae4:	aaaaaaab 	.word	0xaaaaaaab
 8001ae8:	20000002 	.word	0x20000002

08001aec <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	80fb      	strh	r3, [r7, #6]
 8001af6:	460b      	mov	r3, r1
 8001af8:	80bb      	strh	r3, [r7, #4]
 8001afa:	4613      	mov	r3, r2
 8001afc:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8001afe:	78fb      	ldrb	r3, [r7, #3]
 8001b00:	3b20      	subs	r3, #32
 8001b02:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8001b04:	4b09      	ldr	r3, [pc, #36]	@ (8001b2c <LCD_DisplayChar+0x40>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	78fb      	ldrb	r3, [r7, #3]
 8001b0c:	4907      	ldr	r1, [pc, #28]	@ (8001b2c <LCD_DisplayChar+0x40>)
 8001b0e:	6809      	ldr	r1, [r1, #0]
 8001b10:	88c9      	ldrh	r1, [r1, #6]
 8001b12:	fb01 f303 	mul.w	r3, r1, r3
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	441a      	add	r2, r3
 8001b1a:	88b9      	ldrh	r1, [r7, #4]
 8001b1c:	88fb      	ldrh	r3, [r7, #6]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff ff76 	bl	8001a10 <LCD_Draw_Char>
}
 8001b24:	bf00      	nop
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	200001cc 	.word	0x200001cc

08001b30 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b34:	b672      	cpsid	i
}
 8001b36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b38:	bf00      	nop
 8001b3a:	e7fd      	b.n	8001b38 <LCD_Error_Handler+0x8>

08001b3c <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8001b40:	f001 f9c8 	bl	8002ed4 <STMPE811_Init>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d001      	beq.n	8001b4e <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8001b4a:	bf00      	nop
 8001b4c:	e7fd      	b.n	8001b4a <InitializeLCDTouch+0xe>
  }
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f001 fa72 	bl	8003044 <STMPE811_ReadTouch>
 8001b60:	4603      	mov	r3, r0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
	...

08001b6c <getScheduledEvents>:

#include "Scheduler.h"

static uint32_t scheduledEvents = 0;

uint32_t getScheduledEvents() {
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
	return scheduledEvents;
 8001b70:	4b03      	ldr	r3, [pc, #12]	@ (8001b80 <getScheduledEvents+0x14>)
 8001b72:	681b      	ldr	r3, [r3, #0]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	200259d0 	.word	0x200259d0

08001b84 <addSchedulerEvent>:

void addSchedulerEvent(uint32_t event) {
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
	scheduledEvents |= event;
 8001b8c:	4b05      	ldr	r3, [pc, #20]	@ (8001ba4 <addSchedulerEvent+0x20>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	4a03      	ldr	r2, [pc, #12]	@ (8001ba4 <addSchedulerEvent+0x20>)
 8001b96:	6013      	str	r3, [r2, #0]
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	200259d0 	.word	0x200259d0

08001ba8 <removeSchedulerEvent>:

void removeSchedulerEvent(uint32_t event) {
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
	scheduledEvents &= ~event;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	43da      	mvns	r2, r3
 8001bb4:	4b05      	ldr	r3, [pc, #20]	@ (8001bcc <removeSchedulerEvent+0x24>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	4a04      	ldr	r2, [pc, #16]	@ (8001bcc <removeSchedulerEvent+0x24>)
 8001bbc:	6013      	str	r3, [r2, #0]
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	200259d0 	.word	0x200259d0

08001bd0 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001bd4:	f000 f9fe 	bl	8001fd4 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8001bd8:	20ca      	movs	r0, #202	@ 0xca
 8001bda:	f000 f943 	bl	8001e64 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8001bde:	20c3      	movs	r0, #195	@ 0xc3
 8001be0:	f000 f94d 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8001be4:	2008      	movs	r0, #8
 8001be6:	f000 f94a 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8001bea:	2050      	movs	r0, #80	@ 0x50
 8001bec:	f000 f947 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001bf0:	20cf      	movs	r0, #207	@ 0xcf
 8001bf2:	f000 f937 	bl	8001e64 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8001bf6:	2000      	movs	r0, #0
 8001bf8:	f000 f941 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8001bfc:	20c1      	movs	r0, #193	@ 0xc1
 8001bfe:	f000 f93e 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8001c02:	2030      	movs	r0, #48	@ 0x30
 8001c04:	f000 f93b 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8001c08:	20ed      	movs	r0, #237	@ 0xed
 8001c0a:	f000 f92b 	bl	8001e64 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001c0e:	2064      	movs	r0, #100	@ 0x64
 8001c10:	f000 f935 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8001c14:	2003      	movs	r0, #3
 8001c16:	f000 f932 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8001c1a:	2012      	movs	r0, #18
 8001c1c:	f000 f92f 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001c20:	2081      	movs	r0, #129	@ 0x81
 8001c22:	f000 f92c 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8001c26:	20e8      	movs	r0, #232	@ 0xe8
 8001c28:	f000 f91c 	bl	8001e64 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001c2c:	2085      	movs	r0, #133	@ 0x85
 8001c2e:	f000 f926 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001c32:	2000      	movs	r0, #0
 8001c34:	f000 f923 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001c38:	2078      	movs	r0, #120	@ 0x78
 8001c3a:	f000 f920 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001c3e:	20cb      	movs	r0, #203	@ 0xcb
 8001c40:	f000 f910 	bl	8001e64 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8001c44:	2039      	movs	r0, #57	@ 0x39
 8001c46:	f000 f91a 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8001c4a:	202c      	movs	r0, #44	@ 0x2c
 8001c4c:	f000 f917 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001c50:	2000      	movs	r0, #0
 8001c52:	f000 f914 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8001c56:	2034      	movs	r0, #52	@ 0x34
 8001c58:	f000 f911 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001c5c:	2002      	movs	r0, #2
 8001c5e:	f000 f90e 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8001c62:	20f7      	movs	r0, #247	@ 0xf7
 8001c64:	f000 f8fe 	bl	8001e64 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8001c68:	2020      	movs	r0, #32
 8001c6a:	f000 f908 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8001c6e:	20ea      	movs	r0, #234	@ 0xea
 8001c70:	f000 f8f8 	bl	8001e64 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001c74:	2000      	movs	r0, #0
 8001c76:	f000 f902 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	f000 f8ff 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8001c80:	20b1      	movs	r0, #177	@ 0xb1
 8001c82:	f000 f8ef 	bl	8001e64 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001c86:	2000      	movs	r0, #0
 8001c88:	f000 f8f9 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001c8c:	201b      	movs	r0, #27
 8001c8e:	f000 f8f6 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001c92:	20b6      	movs	r0, #182	@ 0xb6
 8001c94:	f000 f8e6 	bl	8001e64 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001c98:	200a      	movs	r0, #10
 8001c9a:	f000 f8f0 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8001c9e:	20a2      	movs	r0, #162	@ 0xa2
 8001ca0:	f000 f8ed 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8001ca4:	20c0      	movs	r0, #192	@ 0xc0
 8001ca6:	f000 f8dd 	bl	8001e64 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001caa:	2010      	movs	r0, #16
 8001cac:	f000 f8e7 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8001cb0:	20c1      	movs	r0, #193	@ 0xc1
 8001cb2:	f000 f8d7 	bl	8001e64 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001cb6:	2010      	movs	r0, #16
 8001cb8:	f000 f8e1 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001cbc:	20c5      	movs	r0, #197	@ 0xc5
 8001cbe:	f000 f8d1 	bl	8001e64 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8001cc2:	2045      	movs	r0, #69	@ 0x45
 8001cc4:	f000 f8db 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001cc8:	2015      	movs	r0, #21
 8001cca:	f000 f8d8 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8001cce:	20c7      	movs	r0, #199	@ 0xc7
 8001cd0:	f000 f8c8 	bl	8001e64 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8001cd4:	2090      	movs	r0, #144	@ 0x90
 8001cd6:	f000 f8d2 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8001cda:	2036      	movs	r0, #54	@ 0x36
 8001cdc:	f000 f8c2 	bl	8001e64 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8001ce0:	20c8      	movs	r0, #200	@ 0xc8
 8001ce2:	f000 f8cc 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8001ce6:	20f2      	movs	r0, #242	@ 0xf2
 8001ce8:	f000 f8bc 	bl	8001e64 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001cec:	2000      	movs	r0, #0
 8001cee:	f000 f8c6 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8001cf2:	20b0      	movs	r0, #176	@ 0xb0
 8001cf4:	f000 f8b6 	bl	8001e64 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8001cf8:	20c2      	movs	r0, #194	@ 0xc2
 8001cfa:	f000 f8c0 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001cfe:	20b6      	movs	r0, #182	@ 0xb6
 8001d00:	f000 f8b0 	bl	8001e64 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001d04:	200a      	movs	r0, #10
 8001d06:	f000 f8ba 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8001d0a:	20a7      	movs	r0, #167	@ 0xa7
 8001d0c:	f000 f8b7 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8001d10:	2027      	movs	r0, #39	@ 0x27
 8001d12:	f000 f8b4 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001d16:	2004      	movs	r0, #4
 8001d18:	f000 f8b1 	bl	8001e7e <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8001d1c:	202a      	movs	r0, #42	@ 0x2a
 8001d1e:	f000 f8a1 	bl	8001e64 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001d22:	2000      	movs	r0, #0
 8001d24:	f000 f8ab 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001d28:	2000      	movs	r0, #0
 8001d2a:	f000 f8a8 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001d2e:	2000      	movs	r0, #0
 8001d30:	f000 f8a5 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8001d34:	20ef      	movs	r0, #239	@ 0xef
 8001d36:	f000 f8a2 	bl	8001e7e <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8001d3a:	202b      	movs	r0, #43	@ 0x2b
 8001d3c:	f000 f892 	bl	8001e64 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001d40:	2000      	movs	r0, #0
 8001d42:	f000 f89c 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001d46:	2000      	movs	r0, #0
 8001d48:	f000 f899 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	f000 f896 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8001d52:	203f      	movs	r0, #63	@ 0x3f
 8001d54:	f000 f893 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8001d58:	20f6      	movs	r0, #246	@ 0xf6
 8001d5a:	f000 f883 	bl	8001e64 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001d5e:	2001      	movs	r0, #1
 8001d60:	f000 f88d 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001d64:	2000      	movs	r0, #0
 8001d66:	f000 f88a 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8001d6a:	2006      	movs	r0, #6
 8001d6c:	f000 f887 	bl	8001e7e <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8001d70:	202c      	movs	r0, #44	@ 0x2c
 8001d72:	f000 f877 	bl	8001e64 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001d76:	20c8      	movs	r0, #200	@ 0xc8
 8001d78:	f000 f9e8 	bl	800214c <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8001d7c:	2026      	movs	r0, #38	@ 0x26
 8001d7e:	f000 f871 	bl	8001e64 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001d82:	2001      	movs	r0, #1
 8001d84:	f000 f87b 	bl	8001e7e <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8001d88:	20e0      	movs	r0, #224	@ 0xe0
 8001d8a:	f000 f86b 	bl	8001e64 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8001d8e:	200f      	movs	r0, #15
 8001d90:	f000 f875 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8001d94:	2029      	movs	r0, #41	@ 0x29
 8001d96:	f000 f872 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8001d9a:	2024      	movs	r0, #36	@ 0x24
 8001d9c:	f000 f86f 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001da0:	200c      	movs	r0, #12
 8001da2:	f000 f86c 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8001da6:	200e      	movs	r0, #14
 8001da8:	f000 f869 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001dac:	2009      	movs	r0, #9
 8001dae:	f000 f866 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8001db2:	204e      	movs	r0, #78	@ 0x4e
 8001db4:	f000 f863 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001db8:	2078      	movs	r0, #120	@ 0x78
 8001dba:	f000 f860 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8001dbe:	203c      	movs	r0, #60	@ 0x3c
 8001dc0:	f000 f85d 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001dc4:	2009      	movs	r0, #9
 8001dc6:	f000 f85a 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8001dca:	2013      	movs	r0, #19
 8001dcc:	f000 f857 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001dd0:	2005      	movs	r0, #5
 8001dd2:	f000 f854 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8001dd6:	2017      	movs	r0, #23
 8001dd8:	f000 f851 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001ddc:	2011      	movs	r0, #17
 8001dde:	f000 f84e 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001de2:	2000      	movs	r0, #0
 8001de4:	f000 f84b 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8001de8:	20e1      	movs	r0, #225	@ 0xe1
 8001dea:	f000 f83b 	bl	8001e64 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001dee:	2000      	movs	r0, #0
 8001df0:	f000 f845 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8001df4:	2016      	movs	r0, #22
 8001df6:	f000 f842 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001dfa:	201b      	movs	r0, #27
 8001dfc:	f000 f83f 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001e00:	2004      	movs	r0, #4
 8001e02:	f000 f83c 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001e06:	2011      	movs	r0, #17
 8001e08:	f000 f839 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8001e0c:	2007      	movs	r0, #7
 8001e0e:	f000 f836 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8001e12:	2031      	movs	r0, #49	@ 0x31
 8001e14:	f000 f833 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8001e18:	2033      	movs	r0, #51	@ 0x33
 8001e1a:	f000 f830 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8001e1e:	2042      	movs	r0, #66	@ 0x42
 8001e20:	f000 f82d 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001e24:	2005      	movs	r0, #5
 8001e26:	f000 f82a 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001e2a:	200c      	movs	r0, #12
 8001e2c:	f000 f827 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8001e30:	200a      	movs	r0, #10
 8001e32:	f000 f824 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8001e36:	2028      	movs	r0, #40	@ 0x28
 8001e38:	f000 f821 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8001e3c:	202f      	movs	r0, #47	@ 0x2f
 8001e3e:	f000 f81e 	bl	8001e7e <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8001e42:	200f      	movs	r0, #15
 8001e44:	f000 f81b 	bl	8001e7e <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8001e48:	2011      	movs	r0, #17
 8001e4a:	f000 f80b 	bl	8001e64 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001e4e:	20c8      	movs	r0, #200	@ 0xc8
 8001e50:	f000 f97c 	bl	800214c <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8001e54:	2029      	movs	r0, #41	@ 0x29
 8001e56:	f000 f805 	bl	8001e64 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8001e5a:	202c      	movs	r0, #44	@ 0x2c
 8001e5c:	f000 f802 	bl	8001e64 <ili9341_Write_Reg>
}
 8001e60:	bf00      	nop
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f000 f949 	bl	8002108 <LCD_IO_WriteReg>
}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b082      	sub	sp, #8
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	4603      	mov	r3, r0
 8001e86:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001e88:	88fb      	ldrh	r3, [r7, #6]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f000 f91a 	bl	80020c4 <LCD_IO_WriteData>
}
 8001e90:	bf00      	nop
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001e9c:	4819      	ldr	r0, [pc, #100]	@ (8001f04 <SPI_Init+0x6c>)
 8001e9e:	f004 fcae 	bl	80067fe <HAL_SPI_GetState>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d12b      	bne.n	8001f00 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8001ea8:	4b16      	ldr	r3, [pc, #88]	@ (8001f04 <SPI_Init+0x6c>)
 8001eaa:	4a17      	ldr	r2, [pc, #92]	@ (8001f08 <SPI_Init+0x70>)
 8001eac:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001eae:	4b15      	ldr	r3, [pc, #84]	@ (8001f04 <SPI_Init+0x6c>)
 8001eb0:	2218      	movs	r2, #24
 8001eb2:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001eb4:	4b13      	ldr	r3, [pc, #76]	@ (8001f04 <SPI_Init+0x6c>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001eba:	4b12      	ldr	r3, [pc, #72]	@ (8001f04 <SPI_Init+0x6c>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001ec0:	4b10      	ldr	r3, [pc, #64]	@ (8001f04 <SPI_Init+0x6c>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8001f04 <SPI_Init+0x6c>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001ecc:	4b0d      	ldr	r3, [pc, #52]	@ (8001f04 <SPI_Init+0x6c>)
 8001ece:	2207      	movs	r2, #7
 8001ed0:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8001f04 <SPI_Init+0x6c>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8001f04 <SPI_Init+0x6c>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001ede:	4b09      	ldr	r3, [pc, #36]	@ (8001f04 <SPI_Init+0x6c>)
 8001ee0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ee4:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001ee6:	4b07      	ldr	r3, [pc, #28]	@ (8001f04 <SPI_Init+0x6c>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001eec:	4b05      	ldr	r3, [pc, #20]	@ (8001f04 <SPI_Init+0x6c>)
 8001eee:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001ef2:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8001ef4:	4803      	ldr	r0, [pc, #12]	@ (8001f04 <SPI_Init+0x6c>)
 8001ef6:	f000 f833 	bl	8001f60 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001efa:	4802      	ldr	r0, [pc, #8]	@ (8001f04 <SPI_Init+0x6c>)
 8001efc:	f004 fa8a 	bl	8006414 <HAL_SPI_Init>
  }
}
 8001f00:	bf00      	nop
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	200259d4 	.word	0x200259d4
 8001f08:	40015000 	.word	0x40015000

08001f0c <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001f16:	2300      	movs	r3, #0
 8001f18:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8001f1a:	4b09      	ldr	r3, [pc, #36]	@ (8001f40 <SPI_Write+0x34>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	1db9      	adds	r1, r7, #6
 8001f20:	2201      	movs	r2, #1
 8001f22:	4808      	ldr	r0, [pc, #32]	@ (8001f44 <SPI_Write+0x38>)
 8001f24:	f004 fb27 	bl	8006576 <HAL_SPI_Transmit>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001f2c:	7bfb      	ldrb	r3, [r7, #15]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8001f32:	f000 f809 	bl	8001f48 <SPI_Error>
  }
}
 8001f36:	bf00      	nop
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	20000014 	.word	0x20000014
 8001f44:	200259d4 	.word	0x200259d4

08001f48 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001f4c:	4803      	ldr	r0, [pc, #12]	@ (8001f5c <SPI_Error+0x14>)
 8001f4e:	f004 faea 	bl	8006526 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8001f52:	f7ff ffa1 	bl	8001e98 <SPI_Init>
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	200259d4 	.word	0x200259d4

08001f60 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08a      	sub	sp, #40	@ 0x28
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8001f68:	2300      	movs	r3, #0
 8001f6a:	613b      	str	r3, [r7, #16]
 8001f6c:	4b17      	ldr	r3, [pc, #92]	@ (8001fcc <SPI_MspInit+0x6c>)
 8001f6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f70:	4a16      	ldr	r2, [pc, #88]	@ (8001fcc <SPI_MspInit+0x6c>)
 8001f72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f76:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f78:	4b14      	ldr	r3, [pc, #80]	@ (8001fcc <SPI_MspInit+0x6c>)
 8001f7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f80:	613b      	str	r3, [r7, #16]
 8001f82:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8001f84:	2300      	movs	r3, #0
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	4b10      	ldr	r3, [pc, #64]	@ (8001fcc <SPI_MspInit+0x6c>)
 8001f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8c:	4a0f      	ldr	r2, [pc, #60]	@ (8001fcc <SPI_MspInit+0x6c>)
 8001f8e:	f043 0320 	orr.w	r3, r3, #32
 8001f92:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f94:	4b0d      	ldr	r3, [pc, #52]	@ (8001fcc <SPI_MspInit+0x6c>)
 8001f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f98:	f003 0320 	and.w	r3, r3, #32
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8001fa0:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001faa:	2302      	movs	r3, #2
 8001fac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8001fb2:	2305      	movs	r3, #5
 8001fb4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8001fb6:	f107 0314 	add.w	r3, r7, #20
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4804      	ldr	r0, [pc, #16]	@ (8001fd0 <SPI_MspInit+0x70>)
 8001fbe:	f001 fd35 	bl	8003a2c <HAL_GPIO_Init>
}
 8001fc2:	bf00      	nop
 8001fc4:	3728      	adds	r7, #40	@ 0x28
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	40021400 	.word	0x40021400

08001fd4 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b088      	sub	sp, #32
 8001fd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8001fda:	4b36      	ldr	r3, [pc, #216]	@ (80020b4 <LCD_IO_Init+0xe0>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d164      	bne.n	80020ac <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001fe2:	4b34      	ldr	r3, [pc, #208]	@ (80020b4 <LCD_IO_Init+0xe0>)
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60bb      	str	r3, [r7, #8]
 8001fec:	4b32      	ldr	r3, [pc, #200]	@ (80020b8 <LCD_IO_Init+0xe4>)
 8001fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff0:	4a31      	ldr	r2, [pc, #196]	@ (80020b8 <LCD_IO_Init+0xe4>)
 8001ff2:	f043 0308 	orr.w	r3, r3, #8
 8001ff6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ff8:	4b2f      	ldr	r3, [pc, #188]	@ (80020b8 <LCD_IO_Init+0xe4>)
 8001ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffc:	f003 0308 	and.w	r3, r3, #8
 8002000:	60bb      	str	r3, [r7, #8]
 8002002:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002004:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002008:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800200a:	2301      	movs	r3, #1
 800200c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800200e:	2300      	movs	r3, #0
 8002010:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002012:	2302      	movs	r3, #2
 8002014:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002016:	f107 030c 	add.w	r3, r7, #12
 800201a:	4619      	mov	r1, r3
 800201c:	4827      	ldr	r0, [pc, #156]	@ (80020bc <LCD_IO_Init+0xe8>)
 800201e:	f001 fd05 	bl	8003a2c <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	607b      	str	r3, [r7, #4]
 8002026:	4b24      	ldr	r3, [pc, #144]	@ (80020b8 <LCD_IO_Init+0xe4>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202a:	4a23      	ldr	r2, [pc, #140]	@ (80020b8 <LCD_IO_Init+0xe4>)
 800202c:	f043 0308 	orr.w	r3, r3, #8
 8002030:	6313      	str	r3, [r2, #48]	@ 0x30
 8002032:	4b21      	ldr	r3, [pc, #132]	@ (80020b8 <LCD_IO_Init+0xe4>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002036:	f003 0308 	and.w	r3, r3, #8
 800203a:	607b      	str	r3, [r7, #4]
 800203c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800203e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002042:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002044:	2301      	movs	r3, #1
 8002046:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800204c:	2302      	movs	r3, #2
 800204e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002050:	f107 030c 	add.w	r3, r7, #12
 8002054:	4619      	mov	r1, r3
 8002056:	4819      	ldr	r0, [pc, #100]	@ (80020bc <LCD_IO_Init+0xe8>)
 8002058:	f001 fce8 	bl	8003a2c <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 800205c:	2300      	movs	r3, #0
 800205e:	603b      	str	r3, [r7, #0]
 8002060:	4b15      	ldr	r3, [pc, #84]	@ (80020b8 <LCD_IO_Init+0xe4>)
 8002062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002064:	4a14      	ldr	r2, [pc, #80]	@ (80020b8 <LCD_IO_Init+0xe4>)
 8002066:	f043 0304 	orr.w	r3, r3, #4
 800206a:	6313      	str	r3, [r2, #48]	@ 0x30
 800206c:	4b12      	ldr	r3, [pc, #72]	@ (80020b8 <LCD_IO_Init+0xe4>)
 800206e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002070:	f003 0304 	and.w	r3, r3, #4
 8002074:	603b      	str	r3, [r7, #0]
 8002076:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002078:	2304      	movs	r3, #4
 800207a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800207c:	2301      	movs	r3, #1
 800207e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002084:	2302      	movs	r3, #2
 8002086:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002088:	f107 030c 	add.w	r3, r7, #12
 800208c:	4619      	mov	r1, r3
 800208e:	480c      	ldr	r0, [pc, #48]	@ (80020c0 <LCD_IO_Init+0xec>)
 8002090:	f001 fccc 	bl	8003a2c <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002094:	2200      	movs	r2, #0
 8002096:	2104      	movs	r1, #4
 8002098:	4809      	ldr	r0, [pc, #36]	@ (80020c0 <LCD_IO_Init+0xec>)
 800209a:	f001 ff97 	bl	8003fcc <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800209e:	2201      	movs	r2, #1
 80020a0:	2104      	movs	r1, #4
 80020a2:	4807      	ldr	r0, [pc, #28]	@ (80020c0 <LCD_IO_Init+0xec>)
 80020a4:	f001 ff92 	bl	8003fcc <HAL_GPIO_WritePin>

    SPI_Init();
 80020a8:	f7ff fef6 	bl	8001e98 <SPI_Init>
  }
}
 80020ac:	bf00      	nop
 80020ae:	3720      	adds	r7, #32
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20025a2c 	.word	0x20025a2c
 80020b8:	40023800 	.word	0x40023800
 80020bc:	40020c00 	.word	0x40020c00
 80020c0:	40020800 	.word	0x40020800

080020c4 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80020ce:	2201      	movs	r2, #1
 80020d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80020d4:	480a      	ldr	r0, [pc, #40]	@ (8002100 <LCD_IO_WriteData+0x3c>)
 80020d6:	f001 ff79 	bl	8003fcc <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 80020da:	2200      	movs	r2, #0
 80020dc:	2104      	movs	r1, #4
 80020de:	4809      	ldr	r0, [pc, #36]	@ (8002104 <LCD_IO_WriteData+0x40>)
 80020e0:	f001 ff74 	bl	8003fcc <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 80020e4:	88fb      	ldrh	r3, [r7, #6]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff ff10 	bl	8001f0c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80020ec:	2201      	movs	r2, #1
 80020ee:	2104      	movs	r1, #4
 80020f0:	4804      	ldr	r0, [pc, #16]	@ (8002104 <LCD_IO_WriteData+0x40>)
 80020f2:	f001 ff6b 	bl	8003fcc <HAL_GPIO_WritePin>
}
 80020f6:	bf00      	nop
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40020c00 	.word	0x40020c00
 8002104:	40020800 	.word	0x40020800

08002108 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002112:	2200      	movs	r2, #0
 8002114:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002118:	480a      	ldr	r0, [pc, #40]	@ (8002144 <LCD_IO_WriteReg+0x3c>)
 800211a:	f001 ff57 	bl	8003fcc <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800211e:	2200      	movs	r2, #0
 8002120:	2104      	movs	r1, #4
 8002122:	4809      	ldr	r0, [pc, #36]	@ (8002148 <LCD_IO_WriteReg+0x40>)
 8002124:	f001 ff52 	bl	8003fcc <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8002128:	79fb      	ldrb	r3, [r7, #7]
 800212a:	b29b      	uxth	r3, r3
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff feed 	bl	8001f0c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002132:	2201      	movs	r2, #1
 8002134:	2104      	movs	r1, #4
 8002136:	4804      	ldr	r0, [pc, #16]	@ (8002148 <LCD_IO_WriteReg+0x40>)
 8002138:	f001 ff48 	bl	8003fcc <HAL_GPIO_WritePin>
}
 800213c:	bf00      	nop
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40020c00 	.word	0x40020c00
 8002148:	40020800 	.word	0x40020800

0800214c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f001 fb5f 	bl	8003818 <HAL_Delay>
}
 800215a:	bf00      	nop
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002166:	f001 fae5 	bl	8003734 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800216a:	f000 f84b 	bl	8002204 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800216e:	f000 fa3b 	bl	80025e8 <MX_GPIO_Init>
  MX_LTDC_Init();
 8002172:	f000 f8f1 	bl	8002358 <MX_LTDC_Init>
  MX_RNG_Init();
 8002176:	f000 f9a1 	bl	80024bc <MX_RNG_Init>
  MX_TIM2_Init();
 800217a:	f000 f9e9 	bl	8002550 <MX_TIM2_Init>
  MX_SPI5_Init();
 800217e:	f000 f9b1 	bl	80024e4 <MX_SPI5_Init>
  MX_I2C3_Init();
 8002182:	f000 f8a9 	bl	80022d8 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit(); // Initializes the LCD functionality
 8002186:	f7fe fa21 	bl	80005cc <ApplicationInit>


  while (1)
  {
    /* USER CODE END WHILE */
	Scheduler_Run(); // Run the scheduler checks
 800218a:	f000 f801 	bl	8002190 <Scheduler_Run>
 800218e:	e7fc      	b.n	800218a <main+0x28>

08002190 <Scheduler_Run>:
  }
  /* USER CODE END 3 */
}

// --- Scheduler Execution ---
void Scheduler_Run(void) {
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
    // Wait for SysTick to signal a check interval
    while(scheduler_ticks == 0) { } // Wait for SysTick
 8002196:	bf00      	nop
 8002198:	4b19      	ldr	r3, [pc, #100]	@ (8002200 <Scheduler_Run+0x70>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0fb      	beq.n	8002198 <Scheduler_Run+0x8>
    scheduler_ticks = 0;
 80021a0:	4b17      	ldr	r3, [pc, #92]	@ (8002200 <Scheduler_Run+0x70>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	601a      	str	r2, [r3, #0]

    uint32_t events = getScheduledEvents();
 80021a6:	f7ff fce1 	bl	8001b6c <getScheduledEvents>
 80021aa:	6078      	str	r0, [r7, #4]

    if (events & TOUCH_POLLING_EVENT) {
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d004      	beq.n	80021c0 <Scheduler_Run+0x30>
        handleTouchInput(); // Handles touch based on internal state
 80021b6:	f7fe fe49 	bl	8000e4c <handleTouchInput>
        removeSchedulerEvent(TOUCH_POLLING_EVENT);
 80021ba:	2001      	movs	r0, #1
 80021bc:	f7ff fcf4 	bl	8001ba8 <removeSchedulerEvent>
    }

    if (events & HW_BUTTON_POLLING_EVENT) {
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d004      	beq.n	80021d4 <Scheduler_Run+0x44>
        pollHardwareButton(); // Checks button based on internal state
 80021ca:	f7fe ff73 	bl	80010b4 <pollHardwareButton>
        removeSchedulerEvent(HW_BUTTON_POLLING_EVENT);
 80021ce:	2002      	movs	r0, #2
 80021d0:	f7ff fcea 	bl	8001ba8 <removeSchedulerEvent>
    }

    if (events & GAME_UPDATE_EVENT) {
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f003 0304 	and.w	r3, r3, #4
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d004      	beq.n	80021e8 <Scheduler_Run+0x58>
        // Simply call the handler. It will check the state internally.
        handleAITurn(); // Call the AI handler function
 80021de:	f7fe ff97 	bl	8001110 <handleAITurn>
        // Add other game updates here if GAME_UPDATE_EVENT is used for more things
        removeSchedulerEvent(GAME_UPDATE_EVENT);
 80021e2:	2004      	movs	r0, #4
 80021e4:	f7ff fce0 	bl	8001ba8 <removeSchedulerEvent>
    }

    if (events & RENDER_SCREEN_EVENT) {
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f003 0310 	and.w	r3, r3, #16
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d002      	beq.n	80021f8 <Scheduler_Run+0x68>
         // If drawing is event-driven, call the relevant draw function
         // Example: could call a generic drawUpdate() function
         removeSchedulerEvent(RENDER_SCREEN_EVENT);
 80021f2:	2010      	movs	r0, #16
 80021f4:	f7ff fcd8 	bl	8001ba8 <removeSchedulerEvent>
    }
}
 80021f8:	bf00      	nop
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	20025bdc 	.word	0x20025bdc

08002204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b094      	sub	sp, #80	@ 0x50
 8002208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800220a:	f107 0320 	add.w	r3, r7, #32
 800220e:	2230      	movs	r2, #48	@ 0x30
 8002210:	2100      	movs	r1, #0
 8002212:	4618      	mov	r0, r3
 8002214:	f005 f80a 	bl	800722c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002218:	f107 030c 	add.w	r3, r7, #12
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	60da      	str	r2, [r3, #12]
 8002226:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002228:	2300      	movs	r3, #0
 800222a:	60bb      	str	r3, [r7, #8]
 800222c:	4b28      	ldr	r3, [pc, #160]	@ (80022d0 <SystemClock_Config+0xcc>)
 800222e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002230:	4a27      	ldr	r2, [pc, #156]	@ (80022d0 <SystemClock_Config+0xcc>)
 8002232:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002236:	6413      	str	r3, [r2, #64]	@ 0x40
 8002238:	4b25      	ldr	r3, [pc, #148]	@ (80022d0 <SystemClock_Config+0xcc>)
 800223a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002240:	60bb      	str	r3, [r7, #8]
 8002242:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002244:	2300      	movs	r3, #0
 8002246:	607b      	str	r3, [r7, #4]
 8002248:	4b22      	ldr	r3, [pc, #136]	@ (80022d4 <SystemClock_Config+0xd0>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a21      	ldr	r2, [pc, #132]	@ (80022d4 <SystemClock_Config+0xd0>)
 800224e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002252:	6013      	str	r3, [r2, #0]
 8002254:	4b1f      	ldr	r3, [pc, #124]	@ (80022d4 <SystemClock_Config+0xd0>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800225c:	607b      	str	r3, [r7, #4]
 800225e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002260:	2301      	movs	r3, #1
 8002262:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002264:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002268:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800226a:	2302      	movs	r3, #2
 800226c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800226e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002272:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002274:	2308      	movs	r3, #8
 8002276:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002278:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800227c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800227e:	2302      	movs	r3, #2
 8002280:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002282:	2307      	movs	r3, #7
 8002284:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002286:	f107 0320 	add.w	r3, r7, #32
 800228a:	4618      	mov	r0, r3
 800228c:	f003 f9fe 	bl	800568c <HAL_RCC_OscConfig>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002296:	f000 fb55 	bl	8002944 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800229a:	230f      	movs	r3, #15
 800229c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800229e:	2302      	movs	r3, #2
 80022a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022a2:	2300      	movs	r3, #0
 80022a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80022a6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80022aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80022ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80022b2:	f107 030c 	add.w	r3, r7, #12
 80022b6:	2105      	movs	r1, #5
 80022b8:	4618      	mov	r0, r3
 80022ba:	f003 fc5f 	bl	8005b7c <HAL_RCC_ClockConfig>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80022c4:	f000 fb3e 	bl	8002944 <Error_Handler>
  }
}
 80022c8:	bf00      	nop
 80022ca:	3750      	adds	r7, #80	@ 0x50
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40023800 	.word	0x40023800
 80022d4:	40007000 	.word	0x40007000

080022d8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80022dc:	4b1b      	ldr	r3, [pc, #108]	@ (800234c <MX_I2C3_Init+0x74>)
 80022de:	4a1c      	ldr	r2, [pc, #112]	@ (8002350 <MX_I2C3_Init+0x78>)
 80022e0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80022e2:	4b1a      	ldr	r3, [pc, #104]	@ (800234c <MX_I2C3_Init+0x74>)
 80022e4:	4a1b      	ldr	r2, [pc, #108]	@ (8002354 <MX_I2C3_Init+0x7c>)
 80022e6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80022e8:	4b18      	ldr	r3, [pc, #96]	@ (800234c <MX_I2C3_Init+0x74>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80022ee:	4b17      	ldr	r3, [pc, #92]	@ (800234c <MX_I2C3_Init+0x74>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022f4:	4b15      	ldr	r3, [pc, #84]	@ (800234c <MX_I2C3_Init+0x74>)
 80022f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80022fa:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022fc:	4b13      	ldr	r3, [pc, #76]	@ (800234c <MX_I2C3_Init+0x74>)
 80022fe:	2200      	movs	r2, #0
 8002300:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002302:	4b12      	ldr	r3, [pc, #72]	@ (800234c <MX_I2C3_Init+0x74>)
 8002304:	2200      	movs	r2, #0
 8002306:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002308:	4b10      	ldr	r3, [pc, #64]	@ (800234c <MX_I2C3_Init+0x74>)
 800230a:	2200      	movs	r2, #0
 800230c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800230e:	4b0f      	ldr	r3, [pc, #60]	@ (800234c <MX_I2C3_Init+0x74>)
 8002310:	2200      	movs	r2, #0
 8002312:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002314:	480d      	ldr	r0, [pc, #52]	@ (800234c <MX_I2C3_Init+0x74>)
 8002316:	f001 fe73 	bl	8004000 <HAL_I2C_Init>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002320:	f000 fb10 	bl	8002944 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002324:	2100      	movs	r1, #0
 8002326:	4809      	ldr	r0, [pc, #36]	@ (800234c <MX_I2C3_Init+0x74>)
 8002328:	f002 fe8e 	bl	8005048 <HAL_I2CEx_ConfigAnalogFilter>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8002332:	f000 fb07 	bl	8002944 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002336:	2100      	movs	r1, #0
 8002338:	4804      	ldr	r0, [pc, #16]	@ (800234c <MX_I2C3_Init+0x74>)
 800233a:	f002 fec1 	bl	80050c0 <HAL_I2CEx_ConfigDigitalFilter>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8002344:	f000 fafe 	bl	8002944 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002348:	bf00      	nop
 800234a:	bd80      	pop	{r7, pc}
 800234c:	20025a30 	.word	0x20025a30
 8002350:	40005c00 	.word	0x40005c00
 8002354:	000186a0 	.word	0x000186a0

08002358 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b09a      	sub	sp, #104	@ 0x68
 800235c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800235e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002362:	2234      	movs	r2, #52	@ 0x34
 8002364:	2100      	movs	r1, #0
 8002366:	4618      	mov	r0, r3
 8002368:	f004 ff60 	bl	800722c <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 800236c:	463b      	mov	r3, r7
 800236e:	2234      	movs	r2, #52	@ 0x34
 8002370:	2100      	movs	r1, #0
 8002372:	4618      	mov	r0, r3
 8002374:	f004 ff5a 	bl	800722c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8002378:	4b4e      	ldr	r3, [pc, #312]	@ (80024b4 <MX_LTDC_Init+0x15c>)
 800237a:	4a4f      	ldr	r2, [pc, #316]	@ (80024b8 <MX_LTDC_Init+0x160>)
 800237c:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800237e:	4b4d      	ldr	r3, [pc, #308]	@ (80024b4 <MX_LTDC_Init+0x15c>)
 8002380:	2200      	movs	r2, #0
 8002382:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002384:	4b4b      	ldr	r3, [pc, #300]	@ (80024b4 <MX_LTDC_Init+0x15c>)
 8002386:	2200      	movs	r2, #0
 8002388:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800238a:	4b4a      	ldr	r3, [pc, #296]	@ (80024b4 <MX_LTDC_Init+0x15c>)
 800238c:	2200      	movs	r2, #0
 800238e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002390:	4b48      	ldr	r3, [pc, #288]	@ (80024b4 <MX_LTDC_Init+0x15c>)
 8002392:	2200      	movs	r2, #0
 8002394:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8002396:	4b47      	ldr	r3, [pc, #284]	@ (80024b4 <MX_LTDC_Init+0x15c>)
 8002398:	2207      	movs	r2, #7
 800239a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 800239c:	4b45      	ldr	r3, [pc, #276]	@ (80024b4 <MX_LTDC_Init+0x15c>)
 800239e:	2203      	movs	r2, #3
 80023a0:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80023a2:	4b44      	ldr	r3, [pc, #272]	@ (80024b4 <MX_LTDC_Init+0x15c>)
 80023a4:	220e      	movs	r2, #14
 80023a6:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80023a8:	4b42      	ldr	r3, [pc, #264]	@ (80024b4 <MX_LTDC_Init+0x15c>)
 80023aa:	2205      	movs	r2, #5
 80023ac:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80023ae:	4b41      	ldr	r3, [pc, #260]	@ (80024b4 <MX_LTDC_Init+0x15c>)
 80023b0:	f240 228e 	movw	r2, #654	@ 0x28e
 80023b4:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80023b6:	4b3f      	ldr	r3, [pc, #252]	@ (80024b4 <MX_LTDC_Init+0x15c>)
 80023b8:	f240 12e5 	movw	r2, #485	@ 0x1e5
 80023bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 80023be:	4b3d      	ldr	r3, [pc, #244]	@ (80024b4 <MX_LTDC_Init+0x15c>)
 80023c0:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80023c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 80023c6:	4b3b      	ldr	r3, [pc, #236]	@ (80024b4 <MX_LTDC_Init+0x15c>)
 80023c8:	f240 12e7 	movw	r2, #487	@ 0x1e7
 80023cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80023ce:	4b39      	ldr	r3, [pc, #228]	@ (80024b4 <MX_LTDC_Init+0x15c>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80023d6:	4b37      	ldr	r3, [pc, #220]	@ (80024b4 <MX_LTDC_Init+0x15c>)
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80023de:	4b35      	ldr	r3, [pc, #212]	@ (80024b4 <MX_LTDC_Init+0x15c>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80023e6:	4833      	ldr	r0, [pc, #204]	@ (80024b4 <MX_LTDC_Init+0x15c>)
 80023e8:	f002 feaa 	bl	8005140 <HAL_LTDC_Init>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80023f2:	f000 faa7 	bl	8002944 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80023f6:	2300      	movs	r3, #0
 80023f8:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 80023fa:	2300      	movs	r3, #0
 80023fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 80023fe:	2300      	movs	r3, #0
 8002400:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8002402:	2300      	movs	r3, #0
 8002404:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002406:	2300      	movs	r3, #0
 8002408:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 800240a:	2300      	movs	r3, #0
 800240c:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 800240e:	2300      	movs	r3, #0
 8002410:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002412:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002416:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002418:	2305      	movs	r3, #5
 800241a:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 800241c:	2300      	movs	r3, #0
 800241e:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8002420:	2300      	movs	r3, #0
 8002422:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8002424:	2300      	movs	r3, #0
 8002426:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8002428:	2300      	movs	r3, #0
 800242a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 800242e:	2300      	movs	r3, #0
 8002430:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8002434:	2300      	movs	r3, #0
 8002436:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800243a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800243e:	2200      	movs	r2, #0
 8002440:	4619      	mov	r1, r3
 8002442:	481c      	ldr	r0, [pc, #112]	@ (80024b4 <MX_LTDC_Init+0x15c>)
 8002444:	f002 ff4c 	bl	80052e0 <HAL_LTDC_ConfigLayer>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 800244e:	f000 fa79 	bl	8002944 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8002452:	2300      	movs	r3, #0
 8002454:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8002456:	2300      	movs	r3, #0
 8002458:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800245a:	2300      	movs	r3, #0
 800245c:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800245e:	2300      	movs	r3, #0
 8002460:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002462:	2300      	movs	r3, #0
 8002464:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8002466:	2300      	movs	r3, #0
 8002468:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800246a:	2300      	movs	r3, #0
 800246c:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800246e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002472:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002474:	2305      	movs	r3, #5
 8002476:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8002478:	2300      	movs	r3, #0
 800247a:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 800247c:	2300      	movs	r3, #0
 800247e:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8002480:	2300      	movs	r3, #0
 8002482:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8002484:	2300      	movs	r3, #0
 8002486:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800248a:	2300      	movs	r3, #0
 800248c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8002490:	2300      	movs	r3, #0
 8002492:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8002496:	463b      	mov	r3, r7
 8002498:	2201      	movs	r2, #1
 800249a:	4619      	mov	r1, r3
 800249c:	4805      	ldr	r0, [pc, #20]	@ (80024b4 <MX_LTDC_Init+0x15c>)
 800249e:	f002 ff1f 	bl	80052e0 <HAL_LTDC_ConfigLayer>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80024a8:	f000 fa4c 	bl	8002944 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80024ac:	bf00      	nop
 80024ae:	3768      	adds	r7, #104	@ 0x68
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	20025a84 	.word	0x20025a84
 80024b8:	40016800 	.word	0x40016800

080024bc <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80024c0:	4b06      	ldr	r3, [pc, #24]	@ (80024dc <MX_RNG_Init+0x20>)
 80024c2:	4a07      	ldr	r2, [pc, #28]	@ (80024e0 <MX_RNG_Init+0x24>)
 80024c4:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80024c6:	4805      	ldr	r0, [pc, #20]	@ (80024dc <MX_RNG_Init+0x20>)
 80024c8:	f003 ff24 	bl	8006314 <HAL_RNG_Init>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80024d2:	f000 fa37 	bl	8002944 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	20025b2c 	.word	0x20025b2c
 80024e0:	50060800 	.word	0x50060800

080024e4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80024e8:	4b17      	ldr	r3, [pc, #92]	@ (8002548 <MX_SPI5_Init+0x64>)
 80024ea:	4a18      	ldr	r2, [pc, #96]	@ (800254c <MX_SPI5_Init+0x68>)
 80024ec:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80024ee:	4b16      	ldr	r3, [pc, #88]	@ (8002548 <MX_SPI5_Init+0x64>)
 80024f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80024f4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80024f6:	4b14      	ldr	r3, [pc, #80]	@ (8002548 <MX_SPI5_Init+0x64>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80024fc:	4b12      	ldr	r3, [pc, #72]	@ (8002548 <MX_SPI5_Init+0x64>)
 80024fe:	2200      	movs	r2, #0
 8002500:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002502:	4b11      	ldr	r3, [pc, #68]	@ (8002548 <MX_SPI5_Init+0x64>)
 8002504:	2200      	movs	r2, #0
 8002506:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002508:	4b0f      	ldr	r3, [pc, #60]	@ (8002548 <MX_SPI5_Init+0x64>)
 800250a:	2200      	movs	r2, #0
 800250c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800250e:	4b0e      	ldr	r3, [pc, #56]	@ (8002548 <MX_SPI5_Init+0x64>)
 8002510:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002514:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002516:	4b0c      	ldr	r3, [pc, #48]	@ (8002548 <MX_SPI5_Init+0x64>)
 8002518:	2200      	movs	r2, #0
 800251a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800251c:	4b0a      	ldr	r3, [pc, #40]	@ (8002548 <MX_SPI5_Init+0x64>)
 800251e:	2200      	movs	r2, #0
 8002520:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002522:	4b09      	ldr	r3, [pc, #36]	@ (8002548 <MX_SPI5_Init+0x64>)
 8002524:	2200      	movs	r2, #0
 8002526:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002528:	4b07      	ldr	r3, [pc, #28]	@ (8002548 <MX_SPI5_Init+0x64>)
 800252a:	2200      	movs	r2, #0
 800252c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 800252e:	4b06      	ldr	r3, [pc, #24]	@ (8002548 <MX_SPI5_Init+0x64>)
 8002530:	220a      	movs	r2, #10
 8002532:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002534:	4804      	ldr	r0, [pc, #16]	@ (8002548 <MX_SPI5_Init+0x64>)
 8002536:	f003 ff6d 	bl	8006414 <HAL_SPI_Init>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8002540:	f000 fa00 	bl	8002944 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002544:	bf00      	nop
 8002546:	bd80      	pop	{r7, pc}
 8002548:	20025b3c 	.word	0x20025b3c
 800254c:	40015000 	.word	0x40015000

08002550 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002556:	f107 0308 	add.w	r3, r7, #8
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	605a      	str	r2, [r3, #4]
 8002560:	609a      	str	r2, [r3, #8]
 8002562:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002564:	463b      	mov	r3, r7
 8002566:	2200      	movs	r2, #0
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800256c:	4b1d      	ldr	r3, [pc, #116]	@ (80025e4 <MX_TIM2_Init+0x94>)
 800256e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002572:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002574:	4b1b      	ldr	r3, [pc, #108]	@ (80025e4 <MX_TIM2_Init+0x94>)
 8002576:	2200      	movs	r2, #0
 8002578:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800257a:	4b1a      	ldr	r3, [pc, #104]	@ (80025e4 <MX_TIM2_Init+0x94>)
 800257c:	2200      	movs	r2, #0
 800257e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002580:	4b18      	ldr	r3, [pc, #96]	@ (80025e4 <MX_TIM2_Init+0x94>)
 8002582:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002586:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002588:	4b16      	ldr	r3, [pc, #88]	@ (80025e4 <MX_TIM2_Init+0x94>)
 800258a:	2200      	movs	r2, #0
 800258c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800258e:	4b15      	ldr	r3, [pc, #84]	@ (80025e4 <MX_TIM2_Init+0x94>)
 8002590:	2200      	movs	r2, #0
 8002592:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002594:	4813      	ldr	r0, [pc, #76]	@ (80025e4 <MX_TIM2_Init+0x94>)
 8002596:	f004 fa1d 	bl	80069d4 <HAL_TIM_Base_Init>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80025a0:	f000 f9d0 	bl	8002944 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025aa:	f107 0308 	add.w	r3, r7, #8
 80025ae:	4619      	mov	r1, r3
 80025b0:	480c      	ldr	r0, [pc, #48]	@ (80025e4 <MX_TIM2_Init+0x94>)
 80025b2:	f004 fa5e 	bl	8006a72 <HAL_TIM_ConfigClockSource>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80025bc:	f000 f9c2 	bl	8002944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025c0:	2300      	movs	r3, #0
 80025c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025c4:	2300      	movs	r3, #0
 80025c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025c8:	463b      	mov	r3, r7
 80025ca:	4619      	mov	r1, r3
 80025cc:	4805      	ldr	r0, [pc, #20]	@ (80025e4 <MX_TIM2_Init+0x94>)
 80025ce:	f004 fc5d 	bl	8006e8c <HAL_TIMEx_MasterConfigSynchronization>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80025d8:	f000 f9b4 	bl	8002944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80025dc:	bf00      	nop
 80025de:	3718      	adds	r7, #24
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	20025b94 	.word	0x20025b94

080025e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b08e      	sub	sp, #56	@ 0x38
 80025ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025f2:	2200      	movs	r2, #0
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	605a      	str	r2, [r3, #4]
 80025f8:	609a      	str	r2, [r3, #8]
 80025fa:	60da      	str	r2, [r3, #12]
 80025fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025fe:	2300      	movs	r3, #0
 8002600:	623b      	str	r3, [r7, #32]
 8002602:	4bb2      	ldr	r3, [pc, #712]	@ (80028cc <MX_GPIO_Init+0x2e4>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002606:	4ab1      	ldr	r2, [pc, #708]	@ (80028cc <MX_GPIO_Init+0x2e4>)
 8002608:	f043 0304 	orr.w	r3, r3, #4
 800260c:	6313      	str	r3, [r2, #48]	@ 0x30
 800260e:	4baf      	ldr	r3, [pc, #700]	@ (80028cc <MX_GPIO_Init+0x2e4>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002612:	f003 0304 	and.w	r3, r3, #4
 8002616:	623b      	str	r3, [r7, #32]
 8002618:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800261a:	2300      	movs	r3, #0
 800261c:	61fb      	str	r3, [r7, #28]
 800261e:	4bab      	ldr	r3, [pc, #684]	@ (80028cc <MX_GPIO_Init+0x2e4>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002622:	4aaa      	ldr	r2, [pc, #680]	@ (80028cc <MX_GPIO_Init+0x2e4>)
 8002624:	f043 0320 	orr.w	r3, r3, #32
 8002628:	6313      	str	r3, [r2, #48]	@ 0x30
 800262a:	4ba8      	ldr	r3, [pc, #672]	@ (80028cc <MX_GPIO_Init+0x2e4>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262e:	f003 0320 	and.w	r3, r3, #32
 8002632:	61fb      	str	r3, [r7, #28]
 8002634:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002636:	2300      	movs	r3, #0
 8002638:	61bb      	str	r3, [r7, #24]
 800263a:	4ba4      	ldr	r3, [pc, #656]	@ (80028cc <MX_GPIO_Init+0x2e4>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263e:	4aa3      	ldr	r2, [pc, #652]	@ (80028cc <MX_GPIO_Init+0x2e4>)
 8002640:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002644:	6313      	str	r3, [r2, #48]	@ 0x30
 8002646:	4ba1      	ldr	r3, [pc, #644]	@ (80028cc <MX_GPIO_Init+0x2e4>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800264e:	61bb      	str	r3, [r7, #24]
 8002650:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002652:	2300      	movs	r3, #0
 8002654:	617b      	str	r3, [r7, #20]
 8002656:	4b9d      	ldr	r3, [pc, #628]	@ (80028cc <MX_GPIO_Init+0x2e4>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265a:	4a9c      	ldr	r2, [pc, #624]	@ (80028cc <MX_GPIO_Init+0x2e4>)
 800265c:	f043 0301 	orr.w	r3, r3, #1
 8002660:	6313      	str	r3, [r2, #48]	@ 0x30
 8002662:	4b9a      	ldr	r3, [pc, #616]	@ (80028cc <MX_GPIO_Init+0x2e4>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	617b      	str	r3, [r7, #20]
 800266c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	613b      	str	r3, [r7, #16]
 8002672:	4b96      	ldr	r3, [pc, #600]	@ (80028cc <MX_GPIO_Init+0x2e4>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002676:	4a95      	ldr	r2, [pc, #596]	@ (80028cc <MX_GPIO_Init+0x2e4>)
 8002678:	f043 0302 	orr.w	r3, r3, #2
 800267c:	6313      	str	r3, [r2, #48]	@ 0x30
 800267e:	4b93      	ldr	r3, [pc, #588]	@ (80028cc <MX_GPIO_Init+0x2e4>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	613b      	str	r3, [r7, #16]
 8002688:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800268a:	2300      	movs	r3, #0
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	4b8f      	ldr	r3, [pc, #572]	@ (80028cc <MX_GPIO_Init+0x2e4>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002692:	4a8e      	ldr	r2, [pc, #568]	@ (80028cc <MX_GPIO_Init+0x2e4>)
 8002694:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002698:	6313      	str	r3, [r2, #48]	@ 0x30
 800269a:	4b8c      	ldr	r3, [pc, #560]	@ (80028cc <MX_GPIO_Init+0x2e4>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	60bb      	str	r3, [r7, #8]
 80026aa:	4b88      	ldr	r3, [pc, #544]	@ (80028cc <MX_GPIO_Init+0x2e4>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ae:	4a87      	ldr	r2, [pc, #540]	@ (80028cc <MX_GPIO_Init+0x2e4>)
 80026b0:	f043 0310 	orr.w	r3, r3, #16
 80026b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026b6:	4b85      	ldr	r3, [pc, #532]	@ (80028cc <MX_GPIO_Init+0x2e4>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ba:	f003 0310 	and.w	r3, r3, #16
 80026be:	60bb      	str	r3, [r7, #8]
 80026c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026c2:	2300      	movs	r3, #0
 80026c4:	607b      	str	r3, [r7, #4]
 80026c6:	4b81      	ldr	r3, [pc, #516]	@ (80028cc <MX_GPIO_Init+0x2e4>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ca:	4a80      	ldr	r2, [pc, #512]	@ (80028cc <MX_GPIO_Init+0x2e4>)
 80026cc:	f043 0308 	orr.w	r3, r3, #8
 80026d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026d2:	4b7e      	ldr	r3, [pc, #504]	@ (80028cc <MX_GPIO_Init+0x2e4>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d6:	f003 0308 	and.w	r3, r3, #8
 80026da:	607b      	str	r3, [r7, #4]
 80026dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80026de:	2200      	movs	r2, #0
 80026e0:	2116      	movs	r1, #22
 80026e2:	487b      	ldr	r0, [pc, #492]	@ (80028d0 <MX_GPIO_Init+0x2e8>)
 80026e4:	f001 fc72 	bl	8003fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80026e8:	2200      	movs	r2, #0
 80026ea:	2180      	movs	r1, #128	@ 0x80
 80026ec:	4879      	ldr	r0, [pc, #484]	@ (80028d4 <MX_GPIO_Init+0x2ec>)
 80026ee:	f001 fc6d 	bl	8003fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80026f2:	2200      	movs	r2, #0
 80026f4:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80026f8:	4877      	ldr	r0, [pc, #476]	@ (80028d8 <MX_GPIO_Init+0x2f0>)
 80026fa:	f001 fc67 	bl	8003fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80026fe:	2200      	movs	r2, #0
 8002700:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8002704:	4875      	ldr	r0, [pc, #468]	@ (80028dc <MX_GPIO_Init+0x2f4>)
 8002706:	f001 fc61 	bl	8003fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800270a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800270e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002710:	2302      	movs	r3, #2
 8002712:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002714:	2300      	movs	r3, #0
 8002716:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002718:	2303      	movs	r3, #3
 800271a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800271c:	230c      	movs	r3, #12
 800271e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002720:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002724:	4619      	mov	r1, r3
 8002726:	486e      	ldr	r0, [pc, #440]	@ (80028e0 <MX_GPIO_Init+0x2f8>)
 8002728:	f001 f980 	bl	8003a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 800272c:	2301      	movs	r3, #1
 800272e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002730:	2302      	movs	r3, #2
 8002732:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002734:	2300      	movs	r3, #0
 8002736:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002738:	2303      	movs	r3, #3
 800273a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800273c:	230c      	movs	r3, #12
 800273e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002740:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002744:	4619      	mov	r1, r3
 8002746:	4862      	ldr	r0, [pc, #392]	@ (80028d0 <MX_GPIO_Init+0x2e8>)
 8002748:	f001 f970 	bl	8003a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800274c:	2316      	movs	r3, #22
 800274e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002750:	2301      	movs	r3, #1
 8002752:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002754:	2300      	movs	r3, #0
 8002756:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002758:	2300      	movs	r3, #0
 800275a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800275c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002760:	4619      	mov	r1, r3
 8002762:	485b      	ldr	r0, [pc, #364]	@ (80028d0 <MX_GPIO_Init+0x2e8>)
 8002764:	f001 f962 	bl	8003a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8002768:	f248 0307 	movw	r3, #32775	@ 0x8007
 800276c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800276e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002772:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002774:	2300      	movs	r3, #0
 8002776:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002778:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800277c:	4619      	mov	r1, r3
 800277e:	4855      	ldr	r0, [pc, #340]	@ (80028d4 <MX_GPIO_Init+0x2ec>)
 8002780:	f001 f954 	bl	8003a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8002784:	2380      	movs	r3, #128	@ 0x80
 8002786:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002788:	2301      	movs	r3, #1
 800278a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278c:	2300      	movs	r3, #0
 800278e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002790:	2300      	movs	r3, #0
 8002792:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8002794:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002798:	4619      	mov	r1, r3
 800279a:	484e      	ldr	r0, [pc, #312]	@ (80028d4 <MX_GPIO_Init+0x2ec>)
 800279c:	f001 f946 	bl	8003a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80027a0:	2320      	movs	r3, #32
 80027a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80027a4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80027a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027aa:	2300      	movs	r3, #0
 80027ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80027ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027b2:	4619      	mov	r1, r3
 80027b4:	4846      	ldr	r0, [pc, #280]	@ (80028d0 <MX_GPIO_Init+0x2e8>)
 80027b6:	f001 f939 	bl	8003a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80027ba:	2304      	movs	r3, #4
 80027bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027be:	2300      	movs	r3, #0
 80027c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c2:	2300      	movs	r3, #0
 80027c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80027c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027ca:	4619      	mov	r1, r3
 80027cc:	4845      	ldr	r0, [pc, #276]	@ (80028e4 <MX_GPIO_Init+0x2fc>)
 80027ce:	f001 f92d 	bl	8003a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80027d2:	f248 1333 	movw	r3, #33075	@ 0x8133
 80027d6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d8:	2302      	movs	r3, #2
 80027da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027dc:	2300      	movs	r3, #0
 80027de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e0:	2303      	movs	r3, #3
 80027e2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80027e4:	230c      	movs	r3, #12
 80027e6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80027e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027ec:	4619      	mov	r1, r3
 80027ee:	483b      	ldr	r0, [pc, #236]	@ (80028dc <MX_GPIO_Init+0x2f4>)
 80027f0:	f001 f91c 	bl	8003a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80027f4:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80027f8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fa:	2302      	movs	r3, #2
 80027fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fe:	2300      	movs	r3, #0
 8002800:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002802:	2303      	movs	r3, #3
 8002804:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002806:	230c      	movs	r3, #12
 8002808:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800280a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800280e:	4619      	mov	r1, r3
 8002810:	4835      	ldr	r0, [pc, #212]	@ (80028e8 <MX_GPIO_Init+0x300>)
 8002812:	f001 f90b 	bl	8003a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8002816:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 800281a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281c:	2302      	movs	r3, #2
 800281e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002820:	2300      	movs	r3, #0
 8002822:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002824:	2300      	movs	r3, #0
 8002826:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8002828:	230c      	movs	r3, #12
 800282a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800282c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002830:	4619      	mov	r1, r3
 8002832:	482c      	ldr	r0, [pc, #176]	@ (80028e4 <MX_GPIO_Init+0x2fc>)
 8002834:	f001 f8fa 	bl	8003a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8002838:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800283c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800283e:	2300      	movs	r3, #0
 8002840:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002842:	2300      	movs	r3, #0
 8002844:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8002846:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800284a:	4619      	mov	r1, r3
 800284c:	4825      	ldr	r0, [pc, #148]	@ (80028e4 <MX_GPIO_Init+0x2fc>)
 800284e:	f001 f8ed 	bl	8003a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002852:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002856:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002858:	2302      	movs	r3, #2
 800285a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285c:	2300      	movs	r3, #0
 800285e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002860:	2303      	movs	r3, #3
 8002862:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002864:	230c      	movs	r3, #12
 8002866:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002868:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800286c:	4619      	mov	r1, r3
 800286e:	481a      	ldr	r0, [pc, #104]	@ (80028d8 <MX_GPIO_Init+0x2f0>)
 8002870:	f001 f8dc 	bl	8003a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8002874:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002878:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800287a:	2300      	movs	r3, #0
 800287c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287e:	2300      	movs	r3, #0
 8002880:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8002882:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002886:	4619      	mov	r1, r3
 8002888:	4813      	ldr	r0, [pc, #76]	@ (80028d8 <MX_GPIO_Init+0x2f0>)
 800288a:	f001 f8cf 	bl	8003a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800288e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002892:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002894:	2301      	movs	r3, #1
 8002896:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002898:	2300      	movs	r3, #0
 800289a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289c:	2300      	movs	r3, #0
 800289e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028a4:	4619      	mov	r1, r3
 80028a6:	480c      	ldr	r0, [pc, #48]	@ (80028d8 <MX_GPIO_Init+0x2f0>)
 80028a8:	f001 f8c0 	bl	8003a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80028ac:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80028b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b2:	2302      	movs	r3, #2
 80028b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b6:	2300      	movs	r3, #0
 80028b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ba:	2303      	movs	r3, #3
 80028bc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028be:	2307      	movs	r3, #7
 80028c0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028c6:	4619      	mov	r1, r3
 80028c8:	e010      	b.n	80028ec <MX_GPIO_Init+0x304>
 80028ca:	bf00      	nop
 80028cc:	40023800 	.word	0x40023800
 80028d0:	40020800 	.word	0x40020800
 80028d4:	40020000 	.word	0x40020000
 80028d8:	40020c00 	.word	0x40020c00
 80028dc:	40021800 	.word	0x40021800
 80028e0:	40021400 	.word	0x40021400
 80028e4:	40020400 	.word	0x40020400
 80028e8:	40021000 	.word	0x40021000
 80028ec:	4812      	ldr	r0, [pc, #72]	@ (8002938 <MX_GPIO_Init+0x350>)
 80028ee:	f001 f89d 	bl	8003a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80028f2:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80028f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028f8:	2301      	movs	r3, #1
 80028fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fc:	2300      	movs	r3, #0
 80028fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002900:	2300      	movs	r3, #0
 8002902:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002904:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002908:	4619      	mov	r1, r3
 800290a:	480c      	ldr	r0, [pc, #48]	@ (800293c <MX_GPIO_Init+0x354>)
 800290c:	f001 f88e 	bl	8003a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002910:	2360      	movs	r3, #96	@ 0x60
 8002912:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002914:	2302      	movs	r3, #2
 8002916:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002918:	2300      	movs	r3, #0
 800291a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800291c:	2303      	movs	r3, #3
 800291e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002920:	230c      	movs	r3, #12
 8002922:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002924:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002928:	4619      	mov	r1, r3
 800292a:	4805      	ldr	r0, [pc, #20]	@ (8002940 <MX_GPIO_Init+0x358>)
 800292c:	f001 f87e 	bl	8003a2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002930:	bf00      	nop
 8002932:	3738      	adds	r7, #56	@ 0x38
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40020000 	.word	0x40020000
 800293c:	40021800 	.word	0x40021800
 8002940:	40020400 	.word	0x40020400

08002944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002948:	b672      	cpsid	i
}
 800294a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800294c:	bf00      	nop
 800294e:	e7fd      	b.n	800294c <Error_Handler+0x8>

08002950 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002956:	2300      	movs	r3, #0
 8002958:	607b      	str	r3, [r7, #4]
 800295a:	4b10      	ldr	r3, [pc, #64]	@ (800299c <HAL_MspInit+0x4c>)
 800295c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800295e:	4a0f      	ldr	r2, [pc, #60]	@ (800299c <HAL_MspInit+0x4c>)
 8002960:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002964:	6453      	str	r3, [r2, #68]	@ 0x44
 8002966:	4b0d      	ldr	r3, [pc, #52]	@ (800299c <HAL_MspInit+0x4c>)
 8002968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800296a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800296e:	607b      	str	r3, [r7, #4]
 8002970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002972:	2300      	movs	r3, #0
 8002974:	603b      	str	r3, [r7, #0]
 8002976:	4b09      	ldr	r3, [pc, #36]	@ (800299c <HAL_MspInit+0x4c>)
 8002978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297a:	4a08      	ldr	r2, [pc, #32]	@ (800299c <HAL_MspInit+0x4c>)
 800297c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002980:	6413      	str	r3, [r2, #64]	@ 0x40
 8002982:	4b06      	ldr	r3, [pc, #24]	@ (800299c <HAL_MspInit+0x4c>)
 8002984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002986:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800298a:	603b      	str	r3, [r7, #0]
 800298c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800298e:	2007      	movs	r0, #7
 8002990:	f001 f818 	bl	80039c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002994:	bf00      	nop
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40023800 	.word	0x40023800

080029a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b08a      	sub	sp, #40	@ 0x28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a8:	f107 0314 	add.w	r3, r7, #20
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	605a      	str	r2, [r3, #4]
 80029b2:	609a      	str	r2, [r3, #8]
 80029b4:	60da      	str	r2, [r3, #12]
 80029b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a29      	ldr	r2, [pc, #164]	@ (8002a64 <HAL_I2C_MspInit+0xc4>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d14b      	bne.n	8002a5a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029c2:	2300      	movs	r3, #0
 80029c4:	613b      	str	r3, [r7, #16]
 80029c6:	4b28      	ldr	r3, [pc, #160]	@ (8002a68 <HAL_I2C_MspInit+0xc8>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ca:	4a27      	ldr	r2, [pc, #156]	@ (8002a68 <HAL_I2C_MspInit+0xc8>)
 80029cc:	f043 0304 	orr.w	r3, r3, #4
 80029d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80029d2:	4b25      	ldr	r3, [pc, #148]	@ (8002a68 <HAL_I2C_MspInit+0xc8>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d6:	f003 0304 	and.w	r3, r3, #4
 80029da:	613b      	str	r3, [r7, #16]
 80029dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	60fb      	str	r3, [r7, #12]
 80029e2:	4b21      	ldr	r3, [pc, #132]	@ (8002a68 <HAL_I2C_MspInit+0xc8>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e6:	4a20      	ldr	r2, [pc, #128]	@ (8002a68 <HAL_I2C_MspInit+0xc8>)
 80029e8:	f043 0301 	orr.w	r3, r3, #1
 80029ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002a68 <HAL_I2C_MspInit+0xc8>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80029fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80029fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a00:	2312      	movs	r3, #18
 8002a02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002a0c:	2304      	movs	r3, #4
 8002a0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002a10:	f107 0314 	add.w	r3, r7, #20
 8002a14:	4619      	mov	r1, r3
 8002a16:	4815      	ldr	r0, [pc, #84]	@ (8002a6c <HAL_I2C_MspInit+0xcc>)
 8002a18:	f001 f808 	bl	8003a2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002a1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a22:	2312      	movs	r3, #18
 8002a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a26:	2300      	movs	r3, #0
 8002a28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002a2e:	2304      	movs	r3, #4
 8002a30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002a32:	f107 0314 	add.w	r3, r7, #20
 8002a36:	4619      	mov	r1, r3
 8002a38:	480d      	ldr	r0, [pc, #52]	@ (8002a70 <HAL_I2C_MspInit+0xd0>)
 8002a3a:	f000 fff7 	bl	8003a2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60bb      	str	r3, [r7, #8]
 8002a42:	4b09      	ldr	r3, [pc, #36]	@ (8002a68 <HAL_I2C_MspInit+0xc8>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a46:	4a08      	ldr	r2, [pc, #32]	@ (8002a68 <HAL_I2C_MspInit+0xc8>)
 8002a48:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a4e:	4b06      	ldr	r3, [pc, #24]	@ (8002a68 <HAL_I2C_MspInit+0xc8>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a56:	60bb      	str	r3, [r7, #8]
 8002a58:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8002a5a:	bf00      	nop
 8002a5c:	3728      	adds	r7, #40	@ 0x28
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40005c00 	.word	0x40005c00
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	40020800 	.word	0x40020800
 8002a70:	40020000 	.word	0x40020000

08002a74 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b09a      	sub	sp, #104	@ 0x68
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a7c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	605a      	str	r2, [r3, #4]
 8002a86:	609a      	str	r2, [r3, #8]
 8002a88:	60da      	str	r2, [r3, #12]
 8002a8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a90:	2230      	movs	r2, #48	@ 0x30
 8002a92:	2100      	movs	r1, #0
 8002a94:	4618      	mov	r0, r3
 8002a96:	f004 fbc9 	bl	800722c <memset>
  if(hltdc->Instance==LTDC)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a81      	ldr	r2, [pc, #516]	@ (8002ca4 <HAL_LTDC_MspInit+0x230>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	f040 80fb 	bne.w	8002c9c <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002aa6:	2308      	movs	r3, #8
 8002aa8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
 8002aaa:	23c8      	movs	r3, #200	@ 0xc8
 8002aac:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 8002ab2:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8002ab6:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ab8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002abc:	4618      	mov	r0, r3
 8002abe:	f003 fa69 	bl	8005f94 <HAL_RCCEx_PeriphCLKConfig>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8002ac8:	f7ff ff3c 	bl	8002944 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002acc:	2300      	movs	r3, #0
 8002ace:	623b      	str	r3, [r7, #32]
 8002ad0:	4b75      	ldr	r3, [pc, #468]	@ (8002ca8 <HAL_LTDC_MspInit+0x234>)
 8002ad2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad4:	4a74      	ldr	r2, [pc, #464]	@ (8002ca8 <HAL_LTDC_MspInit+0x234>)
 8002ad6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002ada:	6453      	str	r3, [r2, #68]	@ 0x44
 8002adc:	4b72      	ldr	r3, [pc, #456]	@ (8002ca8 <HAL_LTDC_MspInit+0x234>)
 8002ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ae0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ae4:	623b      	str	r3, [r7, #32]
 8002ae6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ae8:	2300      	movs	r3, #0
 8002aea:	61fb      	str	r3, [r7, #28]
 8002aec:	4b6e      	ldr	r3, [pc, #440]	@ (8002ca8 <HAL_LTDC_MspInit+0x234>)
 8002aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af0:	4a6d      	ldr	r2, [pc, #436]	@ (8002ca8 <HAL_LTDC_MspInit+0x234>)
 8002af2:	f043 0320 	orr.w	r3, r3, #32
 8002af6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002af8:	4b6b      	ldr	r3, [pc, #428]	@ (8002ca8 <HAL_LTDC_MspInit+0x234>)
 8002afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afc:	f003 0320 	and.w	r3, r3, #32
 8002b00:	61fb      	str	r3, [r7, #28]
 8002b02:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b04:	2300      	movs	r3, #0
 8002b06:	61bb      	str	r3, [r7, #24]
 8002b08:	4b67      	ldr	r3, [pc, #412]	@ (8002ca8 <HAL_LTDC_MspInit+0x234>)
 8002b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0c:	4a66      	ldr	r2, [pc, #408]	@ (8002ca8 <HAL_LTDC_MspInit+0x234>)
 8002b0e:	f043 0301 	orr.w	r3, r3, #1
 8002b12:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b14:	4b64      	ldr	r3, [pc, #400]	@ (8002ca8 <HAL_LTDC_MspInit+0x234>)
 8002b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	61bb      	str	r3, [r7, #24]
 8002b1e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b20:	2300      	movs	r3, #0
 8002b22:	617b      	str	r3, [r7, #20]
 8002b24:	4b60      	ldr	r3, [pc, #384]	@ (8002ca8 <HAL_LTDC_MspInit+0x234>)
 8002b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b28:	4a5f      	ldr	r2, [pc, #380]	@ (8002ca8 <HAL_LTDC_MspInit+0x234>)
 8002b2a:	f043 0302 	orr.w	r3, r3, #2
 8002b2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b30:	4b5d      	ldr	r3, [pc, #372]	@ (8002ca8 <HAL_LTDC_MspInit+0x234>)
 8002b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b34:	f003 0302 	and.w	r3, r3, #2
 8002b38:	617b      	str	r3, [r7, #20]
 8002b3a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	613b      	str	r3, [r7, #16]
 8002b40:	4b59      	ldr	r3, [pc, #356]	@ (8002ca8 <HAL_LTDC_MspInit+0x234>)
 8002b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b44:	4a58      	ldr	r2, [pc, #352]	@ (8002ca8 <HAL_LTDC_MspInit+0x234>)
 8002b46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b4c:	4b56      	ldr	r3, [pc, #344]	@ (8002ca8 <HAL_LTDC_MspInit+0x234>)
 8002b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b54:	613b      	str	r3, [r7, #16]
 8002b56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b58:	2300      	movs	r3, #0
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	4b52      	ldr	r3, [pc, #328]	@ (8002ca8 <HAL_LTDC_MspInit+0x234>)
 8002b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b60:	4a51      	ldr	r2, [pc, #324]	@ (8002ca8 <HAL_LTDC_MspInit+0x234>)
 8002b62:	f043 0304 	orr.w	r3, r3, #4
 8002b66:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b68:	4b4f      	ldr	r3, [pc, #316]	@ (8002ca8 <HAL_LTDC_MspInit+0x234>)
 8002b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6c:	f003 0304 	and.w	r3, r3, #4
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b74:	2300      	movs	r3, #0
 8002b76:	60bb      	str	r3, [r7, #8]
 8002b78:	4b4b      	ldr	r3, [pc, #300]	@ (8002ca8 <HAL_LTDC_MspInit+0x234>)
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7c:	4a4a      	ldr	r2, [pc, #296]	@ (8002ca8 <HAL_LTDC_MspInit+0x234>)
 8002b7e:	f043 0308 	orr.w	r3, r3, #8
 8002b82:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b84:	4b48      	ldr	r3, [pc, #288]	@ (8002ca8 <HAL_LTDC_MspInit+0x234>)
 8002b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b88:	f003 0308 	and.w	r3, r3, #8
 8002b8c:	60bb      	str	r3, [r7, #8]
 8002b8e:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002b90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b94:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b96:	2302      	movs	r3, #2
 8002b98:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ba2:	230e      	movs	r3, #14
 8002ba4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002ba6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002baa:	4619      	mov	r1, r3
 8002bac:	483f      	ldr	r0, [pc, #252]	@ (8002cac <HAL_LTDC_MspInit+0x238>)
 8002bae:	f000 ff3d 	bl	8003a2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002bb2:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002bb6:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb8:	2302      	movs	r3, #2
 8002bba:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002bc4:	230e      	movs	r3, #14
 8002bc6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bc8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4838      	ldr	r0, [pc, #224]	@ (8002cb0 <HAL_LTDC_MspInit+0x23c>)
 8002bd0:	f000 ff2c 	bl	8003a2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd8:	2302      	movs	r3, #2
 8002bda:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be0:	2300      	movs	r3, #0
 8002be2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002be4:	2309      	movs	r3, #9
 8002be6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002be8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002bec:	4619      	mov	r1, r3
 8002bee:	4831      	ldr	r0, [pc, #196]	@ (8002cb4 <HAL_LTDC_MspInit+0x240>)
 8002bf0:	f000 ff1c 	bl	8003a2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002bf4:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002bf8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c02:	2300      	movs	r3, #0
 8002c04:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002c06:	230e      	movs	r3, #14
 8002c08:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c0a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002c0e:	4619      	mov	r1, r3
 8002c10:	4828      	ldr	r0, [pc, #160]	@ (8002cb4 <HAL_LTDC_MspInit+0x240>)
 8002c12:	f000 ff0b 	bl	8003a2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002c16:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002c1a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c20:	2300      	movs	r3, #0
 8002c22:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c24:	2300      	movs	r3, #0
 8002c26:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002c28:	230e      	movs	r3, #14
 8002c2a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c2c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002c30:	4619      	mov	r1, r3
 8002c32:	4821      	ldr	r0, [pc, #132]	@ (8002cb8 <HAL_LTDC_MspInit+0x244>)
 8002c34:	f000 fefa 	bl	8003a2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002c38:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002c3c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c3e:	2302      	movs	r3, #2
 8002c40:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c42:	2300      	movs	r3, #0
 8002c44:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c46:	2300      	movs	r3, #0
 8002c48:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002c4a:	230e      	movs	r3, #14
 8002c4c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c4e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002c52:	4619      	mov	r1, r3
 8002c54:	4819      	ldr	r0, [pc, #100]	@ (8002cbc <HAL_LTDC_MspInit+0x248>)
 8002c56:	f000 fee9 	bl	8003a2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002c5a:	2348      	movs	r3, #72	@ 0x48
 8002c5c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5e:	2302      	movs	r3, #2
 8002c60:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c66:	2300      	movs	r3, #0
 8002c68:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002c6a:	230e      	movs	r3, #14
 8002c6c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c6e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002c72:	4619      	mov	r1, r3
 8002c74:	4812      	ldr	r0, [pc, #72]	@ (8002cc0 <HAL_LTDC_MspInit+0x24c>)
 8002c76:	f000 fed9 	bl	8003a2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002c7a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002c7e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c80:	2302      	movs	r3, #2
 8002c82:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c84:	2300      	movs	r3, #0
 8002c86:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002c8c:	2309      	movs	r3, #9
 8002c8e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c90:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002c94:	4619      	mov	r1, r3
 8002c96:	4808      	ldr	r0, [pc, #32]	@ (8002cb8 <HAL_LTDC_MspInit+0x244>)
 8002c98:	f000 fec8 	bl	8003a2c <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002c9c:	bf00      	nop
 8002c9e:	3768      	adds	r7, #104	@ 0x68
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40016800 	.word	0x40016800
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	40021400 	.word	0x40021400
 8002cb0:	40020000 	.word	0x40020000
 8002cb4:	40020400 	.word	0x40020400
 8002cb8:	40021800 	.word	0x40021800
 8002cbc:	40020800 	.word	0x40020800
 8002cc0:	40020c00 	.word	0x40020c00

08002cc4 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a0b      	ldr	r2, [pc, #44]	@ (8002d00 <HAL_RNG_MspInit+0x3c>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d10d      	bne.n	8002cf2 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	4b0a      	ldr	r3, [pc, #40]	@ (8002d04 <HAL_RNG_MspInit+0x40>)
 8002cdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cde:	4a09      	ldr	r2, [pc, #36]	@ (8002d04 <HAL_RNG_MspInit+0x40>)
 8002ce0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ce4:	6353      	str	r3, [r2, #52]	@ 0x34
 8002ce6:	4b07      	ldr	r3, [pc, #28]	@ (8002d04 <HAL_RNG_MspInit+0x40>)
 8002ce8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8002cf2:	bf00      	nop
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	50060800 	.word	0x50060800
 8002d04:	40023800 	.word	0x40023800

08002d08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b08a      	sub	sp, #40	@ 0x28
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d10:	f107 0314 	add.w	r3, r7, #20
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	605a      	str	r2, [r3, #4]
 8002d1a:	609a      	str	r2, [r3, #8]
 8002d1c:	60da      	str	r2, [r3, #12]
 8002d1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a19      	ldr	r2, [pc, #100]	@ (8002d8c <HAL_SPI_MspInit+0x84>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d12c      	bne.n	8002d84 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	613b      	str	r3, [r7, #16]
 8002d2e:	4b18      	ldr	r3, [pc, #96]	@ (8002d90 <HAL_SPI_MspInit+0x88>)
 8002d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d32:	4a17      	ldr	r2, [pc, #92]	@ (8002d90 <HAL_SPI_MspInit+0x88>)
 8002d34:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d38:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d3a:	4b15      	ldr	r3, [pc, #84]	@ (8002d90 <HAL_SPI_MspInit+0x88>)
 8002d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d42:	613b      	str	r3, [r7, #16]
 8002d44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d46:	2300      	movs	r3, #0
 8002d48:	60fb      	str	r3, [r7, #12]
 8002d4a:	4b11      	ldr	r3, [pc, #68]	@ (8002d90 <HAL_SPI_MspInit+0x88>)
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d4e:	4a10      	ldr	r2, [pc, #64]	@ (8002d90 <HAL_SPI_MspInit+0x88>)
 8002d50:	f043 0320 	orr.w	r3, r3, #32
 8002d54:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d56:	4b0e      	ldr	r3, [pc, #56]	@ (8002d90 <HAL_SPI_MspInit+0x88>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d5a:	f003 0320 	and.w	r3, r3, #32
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002d62:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d68:	2302      	movs	r3, #2
 8002d6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d70:	2300      	movs	r3, #0
 8002d72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002d74:	2305      	movs	r3, #5
 8002d76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002d78:	f107 0314 	add.w	r3, r7, #20
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	4805      	ldr	r0, [pc, #20]	@ (8002d94 <HAL_SPI_MspInit+0x8c>)
 8002d80:	f000 fe54 	bl	8003a2c <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8002d84:	bf00      	nop
 8002d86:	3728      	adds	r7, #40	@ 0x28
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	40015000 	.word	0x40015000
 8002d90:	40023800 	.word	0x40023800
 8002d94:	40021400 	.word	0x40021400

08002d98 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a08      	ldr	r2, [pc, #32]	@ (8002dc8 <HAL_SPI_MspDeInit+0x30>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d10a      	bne.n	8002dc0 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002daa:	4b08      	ldr	r3, [pc, #32]	@ (8002dcc <HAL_SPI_MspDeInit+0x34>)
 8002dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dae:	4a07      	ldr	r2, [pc, #28]	@ (8002dcc <HAL_SPI_MspDeInit+0x34>)
 8002db0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002db4:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002db6:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8002dba:	4805      	ldr	r0, [pc, #20]	@ (8002dd0 <HAL_SPI_MspDeInit+0x38>)
 8002dbc:	f000 ffe2 	bl	8003d84 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002dc0:	bf00      	nop
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40015000 	.word	0x40015000
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	40021400 	.word	0x40021400

08002dd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002de4:	d10d      	bne.n	8002e02 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002de6:	2300      	movs	r3, #0
 8002de8:	60fb      	str	r3, [r7, #12]
 8002dea:	4b09      	ldr	r3, [pc, #36]	@ (8002e10 <HAL_TIM_Base_MspInit+0x3c>)
 8002dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dee:	4a08      	ldr	r2, [pc, #32]	@ (8002e10 <HAL_TIM_Base_MspInit+0x3c>)
 8002df0:	f043 0301 	orr.w	r3, r3, #1
 8002df4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002df6:	4b06      	ldr	r3, [pc, #24]	@ (8002e10 <HAL_TIM_Base_MspInit+0x3c>)
 8002df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002e02:	bf00      	nop
 8002e04:	3714      	adds	r7, #20
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	40023800 	.word	0x40023800

08002e14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e18:	bf00      	nop
 8002e1a:	e7fd      	b.n	8002e18 <NMI_Handler+0x4>

08002e1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e20:	bf00      	nop
 8002e22:	e7fd      	b.n	8002e20 <HardFault_Handler+0x4>

08002e24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e28:	bf00      	nop
 8002e2a:	e7fd      	b.n	8002e28 <MemManage_Handler+0x4>

08002e2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e30:	bf00      	nop
 8002e32:	e7fd      	b.n	8002e30 <BusFault_Handler+0x4>

08002e34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e38:	bf00      	nop
 8002e3a:	e7fd      	b.n	8002e38 <UsageFault_Handler+0x4>

08002e3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e40:	bf00      	nop
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr

08002e4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e4e:	bf00      	nop
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e5c:	bf00      	nop
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
	...

08002e68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void) {
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8002e6c:	f000 fcb4 	bl	80037d8 <HAL_IncTick>

  static uint32_t tick_count = 0;
  tick_count++;
 8002e70:	4b14      	ldr	r3, [pc, #80]	@ (8002ec4 <SysTick_Handler+0x5c>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	3301      	adds	r3, #1
 8002e76:	4a13      	ldr	r2, [pc, #76]	@ (8002ec4 <SysTick_Handler+0x5c>)
 8002e78:	6013      	str	r3, [r2, #0]

  // Add events periodically
  if ((tick_count % SCHEDULER_TICK_MS) == 0) {
 8002e7a:	4b12      	ldr	r3, [pc, #72]	@ (8002ec4 <SysTick_Handler+0x5c>)
 8002e7c:	6819      	ldr	r1, [r3, #0]
 8002e7e:	4b12      	ldr	r3, [pc, #72]	@ (8002ec8 <SysTick_Handler+0x60>)
 8002e80:	fba3 2301 	umull	r2, r3, r3, r1
 8002e84:	08da      	lsrs	r2, r3, #3
 8002e86:	4613      	mov	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	4413      	add	r3, r2
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	1aca      	subs	r2, r1, r3
 8002e90:	2a00      	cmp	r2, #0
 8002e92:	d105      	bne.n	8002ea0 <SysTick_Handler+0x38>
     scheduler_ticks = 1;
 8002e94:	4b0d      	ldr	r3, [pc, #52]	@ (8002ecc <SysTick_Handler+0x64>)
 8002e96:	2201      	movs	r2, #1
 8002e98:	601a      	str	r2, [r3, #0]
     addSchedulerEvent(HW_BUTTON_POLLING_EVENT);
 8002e9a:	2002      	movs	r0, #2
 8002e9c:	f7fe fe72 	bl	8001b84 <addSchedulerEvent>
  }
  if ((tick_count % 50) == 0) { // Touch poll rate
 8002ea0:	4b08      	ldr	r3, [pc, #32]	@ (8002ec4 <SysTick_Handler+0x5c>)
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed0 <SysTick_Handler+0x68>)
 8002ea6:	fba3 1302 	umull	r1, r3, r3, r2
 8002eaa:	091b      	lsrs	r3, r3, #4
 8002eac:	2132      	movs	r1, #50	@ 0x32
 8002eae:	fb01 f303 	mul.w	r3, r1, r3
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d102      	bne.n	8002ebe <SysTick_Handler+0x56>
      addSchedulerEvent(TOUCH_POLLING_EVENT);
 8002eb8:	2001      	movs	r0, #1
 8002eba:	f7fe fe63 	bl	8001b84 <addSchedulerEvent>
  }

}
 8002ebe:	bf00      	nop
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	20025be0 	.word	0x20025be0
 8002ec8:	cccccccd 	.word	0xcccccccd
 8002ecc:	20025bdc 	.word	0x20025bdc
 8002ed0:	51eb851f 	.word	0x51eb851f

08002ed4 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8002eda:	f000 f9cd 	bl	8003278 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8002ede:	f000 f98d 	bl	80031fc <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	2103      	movs	r1, #3
 8002ee6:	2082      	movs	r0, #130	@ 0x82
 8002ee8:	f000 fa1a 	bl	8003320 <I2C3_Write>
    HAL_Delay(5);
 8002eec:	2005      	movs	r0, #5
 8002eee:	f000 fc93 	bl	8003818 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	2103      	movs	r1, #3
 8002ef6:	2082      	movs	r0, #130	@ 0x82
 8002ef8:	f000 fa12 	bl	8003320 <I2C3_Write>
    HAL_Delay(2);
 8002efc:	2002      	movs	r0, #2
 8002efe:	f000 fc8b 	bl	8003818 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8002f02:	1cba      	adds	r2, r7, #2
 8002f04:	2302      	movs	r3, #2
 8002f06:	2100      	movs	r1, #0
 8002f08:	2082      	movs	r0, #130	@ 0x82
 8002f0a:	f000 fa59 	bl	80033c0 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8002f0e:	887b      	ldrh	r3, [r7, #2]
 8002f10:	021b      	lsls	r3, r3, #8
 8002f12:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8002f14:	887b      	ldrh	r3, [r7, #2]
 8002f16:	0a1b      	lsrs	r3, r3, #8
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	88fb      	ldrh	r3, [r7, #6]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8002f20:	88fb      	ldrh	r3, [r7, #6]
 8002f22:	f640 0211 	movw	r2, #2065	@ 0x811
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d001      	beq.n	8002f2e <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e075      	b.n	800301a <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002f2e:	2202      	movs	r2, #2
 8002f30:	2103      	movs	r1, #3
 8002f32:	2082      	movs	r0, #130	@ 0x82
 8002f34:	f000 f9f4 	bl	8003320 <I2C3_Write>
    HAL_Delay(5);
 8002f38:	2005      	movs	r0, #5
 8002f3a:	f000 fc6d 	bl	8003818 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002f3e:	2200      	movs	r2, #0
 8002f40:	2103      	movs	r1, #3
 8002f42:	2082      	movs	r0, #130	@ 0x82
 8002f44:	f000 f9ec 	bl	8003320 <I2C3_Write>
    HAL_Delay(2);
 8002f48:	2002      	movs	r0, #2
 8002f4a:	f000 fc65 	bl	8003818 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002f4e:	2004      	movs	r0, #4
 8002f50:	f000 f867 	bl	8003022 <STMPE811_Read>
 8002f54:	4603      	mov	r3, r0
 8002f56:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8002f58:	797b      	ldrb	r3, [r7, #5]
 8002f5a:	f023 0301 	bic.w	r3, r3, #1
 8002f5e:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002f60:	797b      	ldrb	r3, [r7, #5]
 8002f62:	461a      	mov	r2, r3
 8002f64:	2104      	movs	r1, #4
 8002f66:	2082      	movs	r0, #130	@ 0x82
 8002f68:	f000 f9da 	bl	8003320 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002f6c:	2004      	movs	r0, #4
 8002f6e:	f000 f858 	bl	8003022 <STMPE811_Read>
 8002f72:	4603      	mov	r3, r0
 8002f74:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8002f76:	797b      	ldrb	r3, [r7, #5]
 8002f78:	f023 0302 	bic.w	r3, r3, #2
 8002f7c:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002f7e:	797b      	ldrb	r3, [r7, #5]
 8002f80:	461a      	mov	r2, r3
 8002f82:	2104      	movs	r1, #4
 8002f84:	2082      	movs	r0, #130	@ 0x82
 8002f86:	f000 f9cb 	bl	8003320 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8002f8a:	2249      	movs	r2, #73	@ 0x49
 8002f8c:	2120      	movs	r1, #32
 8002f8e:	2082      	movs	r0, #130	@ 0x82
 8002f90:	f000 f9c6 	bl	8003320 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8002f94:	2002      	movs	r0, #2
 8002f96:	f000 fc3f 	bl	8003818 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	2121      	movs	r1, #33	@ 0x21
 8002f9e:	2082      	movs	r0, #130	@ 0x82
 8002fa0:	f000 f9be 	bl	8003320 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8002fa4:	2017      	movs	r0, #23
 8002fa6:	f000 f83c 	bl	8003022 <STMPE811_Read>
 8002faa:	4603      	mov	r3, r0
 8002fac:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8002fae:	797b      	ldrb	r3, [r7, #5]
 8002fb0:	f043 031e 	orr.w	r3, r3, #30
 8002fb4:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8002fb6:	797b      	ldrb	r3, [r7, #5]
 8002fb8:	461a      	mov	r2, r3
 8002fba:	2117      	movs	r1, #23
 8002fbc:	2082      	movs	r0, #130	@ 0x82
 8002fbe:	f000 f9af 	bl	8003320 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8002fc2:	229a      	movs	r2, #154	@ 0x9a
 8002fc4:	2141      	movs	r1, #65	@ 0x41
 8002fc6:	2082      	movs	r0, #130	@ 0x82
 8002fc8:	f000 f9aa 	bl	8003320 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8002fcc:	2201      	movs	r2, #1
 8002fce:	214a      	movs	r1, #74	@ 0x4a
 8002fd0:	2082      	movs	r0, #130	@ 0x82
 8002fd2:	f000 f9a5 	bl	8003320 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	214b      	movs	r1, #75	@ 0x4b
 8002fda:	2082      	movs	r0, #130	@ 0x82
 8002fdc:	f000 f9a0 	bl	8003320 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	214b      	movs	r1, #75	@ 0x4b
 8002fe4:	2082      	movs	r0, #130	@ 0x82
 8002fe6:	f000 f99b 	bl	8003320 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8002fea:	2201      	movs	r2, #1
 8002fec:	2156      	movs	r1, #86	@ 0x56
 8002fee:	2082      	movs	r0, #130	@ 0x82
 8002ff0:	f000 f996 	bl	8003320 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	2158      	movs	r1, #88	@ 0x58
 8002ff8:	2082      	movs	r0, #130	@ 0x82
 8002ffa:	f000 f991 	bl	8003320 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8002ffe:	2203      	movs	r2, #3
 8003000:	2140      	movs	r1, #64	@ 0x40
 8003002:	2082      	movs	r0, #130	@ 0x82
 8003004:	f000 f98c 	bl	8003320 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8003008:	22ff      	movs	r2, #255	@ 0xff
 800300a:	210b      	movs	r1, #11
 800300c:	2082      	movs	r0, #130	@ 0x82
 800300e:	f000 f987 	bl	8003320 <I2C3_Write>
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8003012:	20c8      	movs	r0, #200	@ 0xc8
 8003014:	f000 fc00 	bl	8003818 <HAL_Delay>

    return STMPE811_State_Ok;
 8003018:	2302      	movs	r3, #2

}
 800301a:	4618      	mov	r0, r3
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b084      	sub	sp, #16
 8003026:	af00      	add	r7, sp, #0
 8003028:	4603      	mov	r3, r0
 800302a:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 800302c:	f107 020f 	add.w	r2, r7, #15
 8003030:	79fb      	ldrb	r3, [r7, #7]
 8003032:	4619      	mov	r1, r3
 8003034:	2082      	movs	r0, #130	@ 0x82
 8003036:	f000 f99d 	bl	8003374 <I2C3_Read>

    return readData;
 800303a:	7bfb      	ldrb	r3, [r7, #15]
}
 800303c:	4618      	mov	r0, r3
 800303e:	3710      	adds	r7, #16
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	791a      	ldrb	r2, [r3, #4]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 8003054:	2040      	movs	r0, #64	@ 0x40
 8003056:	f7ff ffe4 	bl	8003022 <STMPE811_Read>
 800305a:	4603      	mov	r3, r0
 800305c:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 800305e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003062:	2b00      	cmp	r3, #0
 8003064:	db0e      	blt.n	8003084 <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2201      	movs	r2, #1
 800306a:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 800306c:	2201      	movs	r2, #1
 800306e:	214b      	movs	r1, #75	@ 0x4b
 8003070:	2082      	movs	r0, #130	@ 0x82
 8003072:	f000 f955 	bl	8003320 <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8003076:	2200      	movs	r2, #0
 8003078:	214b      	movs	r1, #75	@ 0x4b
 800307a:	2082      	movs	r0, #130	@ 0x82
 800307c:	f000 f950 	bl	8003320 <I2C3_Write>

        return STMPE811_State_Released;
 8003080:	2301      	movs	r3, #1
 8003082:	e0a7      	b.n	80031d4 <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	799b      	ldrb	r3, [r3, #6]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d117      	bne.n	80030bc <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	881b      	ldrh	r3, [r3, #0]
 8003090:	4618      	mov	r0, r3
 8003092:	f000 f9b7 	bl	8003404 <TM_STMPE811_ReadX>
 8003096:	4603      	mov	r3, r0
 8003098:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 800309c:	b29a      	uxth	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	885b      	ldrh	r3, [r3, #2]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 fa0c 	bl	80034c4 <TM_STMPE811_ReadY>
 80030ac:	4603      	mov	r3, r0
 80030ae:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80030b2:	3301      	adds	r3, #1
 80030b4:	b29a      	uxth	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	805a      	strh	r2, [r3, #2]
 80030ba:	e048      	b.n	800314e <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	799b      	ldrb	r3, [r3, #6]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d112      	bne.n	80030ea <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	881b      	ldrh	r3, [r3, #0]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f000 f99b 	bl	8003404 <TM_STMPE811_ReadX>
 80030ce:	4603      	mov	r3, r0
 80030d0:	461a      	mov	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	885b      	ldrh	r3, [r3, #2]
 80030da:	4618      	mov	r0, r3
 80030dc:	f000 f9f2 	bl	80034c4 <TM_STMPE811_ReadY>
 80030e0:	4603      	mov	r3, r0
 80030e2:	461a      	mov	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	805a      	strh	r2, [r3, #2]
 80030e8:	e031      	b.n	800314e <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	799b      	ldrb	r3, [r3, #6]
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d115      	bne.n	800311e <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	885b      	ldrh	r3, [r3, #2]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f000 f984 	bl	8003404 <TM_STMPE811_ReadX>
 80030fc:	4603      	mov	r3, r0
 80030fe:	461a      	mov	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	881b      	ldrh	r3, [r3, #0]
 8003108:	4618      	mov	r0, r3
 800310a:	f000 f9db 	bl	80034c4 <TM_STMPE811_ReadY>
 800310e:	4603      	mov	r3, r0
 8003110:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8003114:	3301      	adds	r3, #1
 8003116:	b29a      	uxth	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	801a      	strh	r2, [r3, #0]
 800311c:	e017      	b.n	800314e <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	799b      	ldrb	r3, [r3, #6]
 8003122:	2b03      	cmp	r3, #3
 8003124:	d113      	bne.n	800314e <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	881b      	ldrh	r3, [r3, #0]
 800312a:	4618      	mov	r0, r3
 800312c:	f000 f96a 	bl	8003404 <TM_STMPE811_ReadX>
 8003130:	4603      	mov	r3, r0
 8003132:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8003136:	b29a      	uxth	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	881b      	ldrh	r3, [r3, #0]
 8003140:	4618      	mov	r0, r3
 8003142:	f000 f9bf 	bl	80034c4 <TM_STMPE811_ReadY>
 8003146:	4603      	mov	r3, r0
 8003148:	461a      	mov	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 800314e:	2201      	movs	r2, #1
 8003150:	214b      	movs	r1, #75	@ 0x4b
 8003152:	2082      	movs	r0, #130	@ 0x82
 8003154:	f000 f8e4 	bl	8003320 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8003158:	2200      	movs	r2, #0
 800315a:	214b      	movs	r1, #75	@ 0x4b
 800315c:	2082      	movs	r0, #130	@ 0x82
 800315e:	f000 f8df 	bl	8003320 <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	799b      	ldrb	r3, [r3, #6]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <STMPE811_ReadTouch+0x12e>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	799b      	ldrb	r3, [r3, #6]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d115      	bne.n	800319e <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	881b      	ldrh	r3, [r3, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d027      	beq.n	80031ca <STMPE811_ReadTouch+0x186>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	881b      	ldrh	r3, [r3, #0]
 800317e:	2bee      	cmp	r3, #238	@ 0xee
 8003180:	d823      	bhi.n	80031ca <STMPE811_ReadTouch+0x186>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	885b      	ldrh	r3, [r3, #2]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d01f      	beq.n	80031ca <STMPE811_ReadTouch+0x186>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	885b      	ldrh	r3, [r3, #2]
 800318e:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8003192:	d81a      	bhi.n	80031ca <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 800319a:	2300      	movs	r3, #0
 800319c:	e01a      	b.n	80031d4 <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	881b      	ldrh	r3, [r3, #0]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d012      	beq.n	80031cc <STMPE811_ReadTouch+0x188>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	881b      	ldrh	r3, [r3, #0]
 80031aa:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 80031ae:	d80d      	bhi.n	80031cc <STMPE811_ReadTouch+0x188>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	885b      	ldrh	r3, [r3, #2]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d009      	beq.n	80031cc <STMPE811_ReadTouch+0x188>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	885b      	ldrh	r3, [r3, #2]
 80031bc:	2bee      	cmp	r3, #238	@ 0xee
 80031be:	d805      	bhi.n	80031cc <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 80031c6:	2300      	movs	r3, #0
 80031c8:	e004      	b.n	80031d4 <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 80031ca:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 80031d2:	2301      	movs	r3, #1
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <verifyHAL_I2C_IS_OKAY>:
    }
    return true;
}

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 80031e0:	4b05      	ldr	r3, [pc, #20]	@ (80031f8 <verifyHAL_I2C_IS_OKAY+0x1c>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 80031e8:	bf00      	nop
 80031ea:	e7fd      	b.n	80031e8 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 80031ec:	bf00      	nop
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	20025c38 	.word	0x20025c38

080031fc <I2C3_Init>:

static void I2C3_Init()
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8003202:	2300      	movs	r3, #0
 8003204:	603b      	str	r3, [r7, #0]
 8003206:	4b18      	ldr	r3, [pc, #96]	@ (8003268 <I2C3_Init+0x6c>)
 8003208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320a:	4a17      	ldr	r2, [pc, #92]	@ (8003268 <I2C3_Init+0x6c>)
 800320c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003210:	6413      	str	r3, [r2, #64]	@ 0x40
 8003212:	4b15      	ldr	r3, [pc, #84]	@ (8003268 <I2C3_Init+0x6c>)
 8003214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003216:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800321a:	603b      	str	r3, [r7, #0]
 800321c:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 800321e:	4b13      	ldr	r3, [pc, #76]	@ (800326c <I2C3_Init+0x70>)
 8003220:	4a13      	ldr	r2, [pc, #76]	@ (8003270 <I2C3_Init+0x74>)
 8003222:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8003224:	4b11      	ldr	r3, [pc, #68]	@ (800326c <I2C3_Init+0x70>)
 8003226:	4a13      	ldr	r2, [pc, #76]	@ (8003274 <I2C3_Init+0x78>)
 8003228:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800322a:	4b10      	ldr	r3, [pc, #64]	@ (800326c <I2C3_Init+0x70>)
 800322c:	2200      	movs	r2, #0
 800322e:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8003230:	4b0e      	ldr	r3, [pc, #56]	@ (800326c <I2C3_Init+0x70>)
 8003232:	2200      	movs	r2, #0
 8003234:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003236:	4b0d      	ldr	r3, [pc, #52]	@ (800326c <I2C3_Init+0x70>)
 8003238:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800323c:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 800323e:	4b0b      	ldr	r3, [pc, #44]	@ (800326c <I2C3_Init+0x70>)
 8003240:	2200      	movs	r2, #0
 8003242:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003244:	4b09      	ldr	r3, [pc, #36]	@ (800326c <I2C3_Init+0x70>)
 8003246:	2200      	movs	r2, #0
 8003248:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 800324a:	4808      	ldr	r0, [pc, #32]	@ (800326c <I2C3_Init+0x70>)
 800324c:	f000 fed8 	bl	8004000 <HAL_I2C_Init>
 8003250:	4603      	mov	r3, r0
 8003252:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8003254:	79fb      	ldrb	r3, [r7, #7]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 800325a:	bf00      	nop
 800325c:	e7fd      	b.n	800325a <I2C3_Init+0x5e>
    }
    return;
 800325e:	bf00      	nop
}
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	40023800 	.word	0x40023800
 800326c:	20025be4 	.word	0x20025be4
 8003270:	40005c00 	.word	0x40005c00
 8003274:	000186a0 	.word	0x000186a0

08003278 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b088      	sub	sp, #32
 800327c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800327e:	f107 030c 	add.w	r3, r7, #12
 8003282:	2200      	movs	r2, #0
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	605a      	str	r2, [r3, #4]
 8003288:	609a      	str	r2, [r3, #8]
 800328a:	60da      	str	r2, [r3, #12]
 800328c:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800328e:	2300      	movs	r3, #0
 8003290:	60bb      	str	r3, [r7, #8]
 8003292:	4b20      	ldr	r3, [pc, #128]	@ (8003314 <I2C3_MspInit+0x9c>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003296:	4a1f      	ldr	r2, [pc, #124]	@ (8003314 <I2C3_MspInit+0x9c>)
 8003298:	f043 0304 	orr.w	r3, r3, #4
 800329c:	6313      	str	r3, [r2, #48]	@ 0x30
 800329e:	4b1d      	ldr	r3, [pc, #116]	@ (8003314 <I2C3_MspInit+0x9c>)
 80032a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a2:	f003 0304 	and.w	r3, r3, #4
 80032a6:	60bb      	str	r3, [r7, #8]
 80032a8:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032aa:	2300      	movs	r3, #0
 80032ac:	607b      	str	r3, [r7, #4]
 80032ae:	4b19      	ldr	r3, [pc, #100]	@ (8003314 <I2C3_MspInit+0x9c>)
 80032b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b2:	4a18      	ldr	r2, [pc, #96]	@ (8003314 <I2C3_MspInit+0x9c>)
 80032b4:	f043 0301 	orr.w	r3, r3, #1
 80032b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80032ba:	4b16      	ldr	r3, [pc, #88]	@ (8003314 <I2C3_MspInit+0x9c>)
 80032bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	607b      	str	r3, [r7, #4]
 80032c4:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80032c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80032ca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032cc:	2312      	movs	r3, #18
 80032ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d0:	2300      	movs	r3, #0
 80032d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d4:	2300      	movs	r3, #0
 80032d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80032d8:	2304      	movs	r3, #4
 80032da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80032dc:	f107 030c 	add.w	r3, r7, #12
 80032e0:	4619      	mov	r1, r3
 80032e2:	480d      	ldr	r0, [pc, #52]	@ (8003318 <I2C3_MspInit+0xa0>)
 80032e4:	f000 fba2 	bl	8003a2c <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80032e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80032ec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032ee:	2312      	movs	r3, #18
 80032f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f2:	2300      	movs	r3, #0
 80032f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032f6:	2300      	movs	r3, #0
 80032f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80032fa:	2304      	movs	r3, #4
 80032fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80032fe:	f107 030c 	add.w	r3, r7, #12
 8003302:	4619      	mov	r1, r3
 8003304:	4805      	ldr	r0, [pc, #20]	@ (800331c <I2C3_MspInit+0xa4>)
 8003306:	f000 fb91 	bl	8003a2c <HAL_GPIO_Init>
    
}
 800330a:	bf00      	nop
 800330c:	3720      	adds	r7, #32
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	40023800 	.word	0x40023800
 8003318:	40020800 	.word	0x40020800
 800331c:	40020000 	.word	0x40020000

08003320 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b088      	sub	sp, #32
 8003324:	af04      	add	r7, sp, #16
 8003326:	4603      	mov	r3, r0
 8003328:	80fb      	strh	r3, [r7, #6]
 800332a:	460b      	mov	r3, r1
 800332c:	717b      	strb	r3, [r7, #5]
 800332e:	4613      	mov	r3, r2
 8003330:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8003332:	793b      	ldrb	r3, [r7, #4]
 8003334:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8003336:	797b      	ldrb	r3, [r7, #5]
 8003338:	b29a      	uxth	r2, r3
 800333a:	88f9      	ldrh	r1, [r7, #6]
 800333c:	4b0a      	ldr	r3, [pc, #40]	@ (8003368 <I2C3_Write+0x48>)
 800333e:	9302      	str	r3, [sp, #8]
 8003340:	2301      	movs	r3, #1
 8003342:	9301      	str	r3, [sp, #4]
 8003344:	f107 030f 	add.w	r3, r7, #15
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	2301      	movs	r3, #1
 800334c:	4807      	ldr	r0, [pc, #28]	@ (800336c <I2C3_Write+0x4c>)
 800334e:	f000 ff9b 	bl	8004288 <HAL_I2C_Mem_Write>
 8003352:	4603      	mov	r3, r0
 8003354:	461a      	mov	r2, r3
 8003356:	4b06      	ldr	r3, [pc, #24]	@ (8003370 <I2C3_Write+0x50>)
 8003358:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 800335a:	f7ff ff3f 	bl	80031dc <verifyHAL_I2C_IS_OKAY>
}
 800335e:	bf00      	nop
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	0003d090 	.word	0x0003d090
 800336c:	20025be4 	.word	0x20025be4
 8003370:	20025c38 	.word	0x20025c38

08003374 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af04      	add	r7, sp, #16
 800337a:	4603      	mov	r3, r0
 800337c:	603a      	str	r2, [r7, #0]
 800337e:	71fb      	strb	r3, [r7, #7]
 8003380:	460b      	mov	r3, r1
 8003382:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8003384:	79fb      	ldrb	r3, [r7, #7]
 8003386:	b299      	uxth	r1, r3
 8003388:	79bb      	ldrb	r3, [r7, #6]
 800338a:	b29a      	uxth	r2, r3
 800338c:	4b09      	ldr	r3, [pc, #36]	@ (80033b4 <I2C3_Read+0x40>)
 800338e:	9302      	str	r3, [sp, #8]
 8003390:	2301      	movs	r3, #1
 8003392:	9301      	str	r3, [sp, #4]
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	9300      	str	r3, [sp, #0]
 8003398:	2301      	movs	r3, #1
 800339a:	4807      	ldr	r0, [pc, #28]	@ (80033b8 <I2C3_Read+0x44>)
 800339c:	f001 f86e 	bl	800447c <HAL_I2C_Mem_Read>
 80033a0:	4603      	mov	r3, r0
 80033a2:	461a      	mov	r2, r3
 80033a4:	4b05      	ldr	r3, [pc, #20]	@ (80033bc <I2C3_Read+0x48>)
 80033a6:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 80033a8:	f7ff ff18 	bl	80031dc <verifyHAL_I2C_IS_OKAY>
}
 80033ac:	bf00      	nop
 80033ae:	3708      	adds	r7, #8
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	0003d090 	.word	0x0003d090
 80033b8:	20025be4 	.word	0x20025be4
 80033bc:	20025c38 	.word	0x20025c38

080033c0 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af04      	add	r7, sp, #16
 80033c6:	603a      	str	r2, [r7, #0]
 80033c8:	461a      	mov	r2, r3
 80033ca:	4603      	mov	r3, r0
 80033cc:	71fb      	strb	r3, [r7, #7]
 80033ce:	460b      	mov	r3, r1
 80033d0:	71bb      	strb	r3, [r7, #6]
 80033d2:	4613      	mov	r3, r2
 80033d4:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 80033d6:	79fb      	ldrb	r3, [r7, #7]
 80033d8:	b299      	uxth	r1, r3
 80033da:	79bb      	ldrb	r3, [r7, #6]
 80033dc:	b29a      	uxth	r2, r3
 80033de:	4b07      	ldr	r3, [pc, #28]	@ (80033fc <I2C3_MulitByteRead+0x3c>)
 80033e0:	9302      	str	r3, [sp, #8]
 80033e2:	88bb      	ldrh	r3, [r7, #4]
 80033e4:	9301      	str	r3, [sp, #4]
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	2301      	movs	r3, #1
 80033ec:	4804      	ldr	r0, [pc, #16]	@ (8003400 <I2C3_MulitByteRead+0x40>)
 80033ee:	f001 f845 	bl	800447c <HAL_I2C_Mem_Read>
}
 80033f2:	bf00      	nop
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	0003d090 	.word	0x0003d090
 8003400:	20025be4 	.word	0x20025be4

08003404 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	4603      	mov	r3, r0
 800340c:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 800340e:	204d      	movs	r0, #77	@ 0x4d
 8003410:	f7ff fe07 	bl	8003022 <STMPE811_Read>
 8003414:	4603      	mov	r3, r0
 8003416:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8003418:	204e      	movs	r0, #78	@ 0x4e
 800341a:	f7ff fe02 	bl	8003022 <STMPE811_Read>
 800341e:	4603      	mov	r3, r0
 8003420:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8003422:	7a7b      	ldrb	r3, [r7, #9]
 8003424:	b21b      	sxth	r3, r3
 8003426:	021b      	lsls	r3, r3, #8
 8003428:	b21a      	sxth	r2, r3
 800342a:	7a3b      	ldrb	r3, [r7, #8]
 800342c:	b21b      	sxth	r3, r3
 800342e:	4313      	orrs	r3, r2
 8003430:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8003432:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003436:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800343a:	4293      	cmp	r3, r2
 800343c:	dc06      	bgt.n	800344c <TM_STMPE811_ReadX+0x48>
        val = 3900 - val;
 800343e:	89fb      	ldrh	r3, [r7, #14]
 8003440:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8003444:	330c      	adds	r3, #12
 8003446:	b29b      	uxth	r3, r3
 8003448:	81fb      	strh	r3, [r7, #14]
 800344a:	e005      	b.n	8003458 <TM_STMPE811_ReadX+0x54>
    } else {
        val = 3800 - val;
 800344c:	89fb      	ldrh	r3, [r7, #14]
 800344e:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8003452:	3308      	adds	r3, #8
 8003454:	b29b      	uxth	r3, r3
 8003456:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8003458:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800345c:	4a18      	ldr	r2, [pc, #96]	@ (80034c0 <TM_STMPE811_ReadX+0xbc>)
 800345e:	fb82 1203 	smull	r1, r2, r2, r3
 8003462:	441a      	add	r2, r3
 8003464:	10d2      	asrs	r2, r2, #3
 8003466:	17db      	asrs	r3, r3, #31
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 800346c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003470:	2bef      	cmp	r3, #239	@ 0xef
 8003472:	dd02      	ble.n	800347a <TM_STMPE811_ReadX+0x76>
        val = 239;
 8003474:	23ef      	movs	r3, #239	@ 0xef
 8003476:	81fb      	strh	r3, [r7, #14]
 8003478:	e005      	b.n	8003486 <TM_STMPE811_ReadX+0x82>
    } else if (val < 0) {
 800347a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800347e:	2b00      	cmp	r3, #0
 8003480:	da01      	bge.n	8003486 <TM_STMPE811_ReadX+0x82>
        val = 0;
 8003482:	2300      	movs	r3, #0
 8003484:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8003486:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800348a:	88fb      	ldrh	r3, [r7, #6]
 800348c:	429a      	cmp	r2, r3
 800348e:	dd05      	ble.n	800349c <TM_STMPE811_ReadX+0x98>
 8003490:	89fa      	ldrh	r2, [r7, #14]
 8003492:	88fb      	ldrh	r3, [r7, #6]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	b29b      	uxth	r3, r3
 8003498:	b21b      	sxth	r3, r3
 800349a:	e004      	b.n	80034a6 <TM_STMPE811_ReadX+0xa2>
 800349c:	89fb      	ldrh	r3, [r7, #14]
 800349e:	88fa      	ldrh	r2, [r7, #6]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	b21b      	sxth	r3, r3
 80034a6:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 80034a8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80034ac:	2b04      	cmp	r3, #4
 80034ae:	dd01      	ble.n	80034b4 <TM_STMPE811_ReadX+0xb0>
        return val;
 80034b0:	89fb      	ldrh	r3, [r7, #14]
 80034b2:	e000      	b.n	80034b6 <TM_STMPE811_ReadX+0xb2>
    }
    return x;
 80034b4:	88fb      	ldrh	r3, [r7, #6]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	88888889 	.word	0x88888889

080034c4 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	4603      	mov	r3, r0
 80034cc:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 80034ce:	204f      	movs	r0, #79	@ 0x4f
 80034d0:	f7ff fda7 	bl	8003022 <STMPE811_Read>
 80034d4:	4603      	mov	r3, r0
 80034d6:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 80034d8:	2050      	movs	r0, #80	@ 0x50
 80034da:	f7ff fda2 	bl	8003022 <STMPE811_Read>
 80034de:	4603      	mov	r3, r0
 80034e0:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 80034e2:	7a7b      	ldrb	r3, [r7, #9]
 80034e4:	b21b      	sxth	r3, r3
 80034e6:	021b      	lsls	r3, r3, #8
 80034e8:	b21a      	sxth	r2, r3
 80034ea:	7a3b      	ldrb	r3, [r7, #8]
 80034ec:	b21b      	sxth	r3, r3
 80034ee:	4313      	orrs	r3, r2
 80034f0:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 80034f2:	89fb      	ldrh	r3, [r7, #14]
 80034f4:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 80034fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003500:	4a18      	ldr	r2, [pc, #96]	@ (8003564 <TM_STMPE811_ReadY+0xa0>)
 8003502:	fb82 1203 	smull	r1, r2, r2, r3
 8003506:	1052      	asrs	r2, r2, #1
 8003508:	17db      	asrs	r3, r3, #31
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 800350e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003512:	2b00      	cmp	r3, #0
 8003514:	dc02      	bgt.n	800351c <TM_STMPE811_ReadY+0x58>
        val = 0;
 8003516:	2300      	movs	r3, #0
 8003518:	81fb      	strh	r3, [r7, #14]
 800351a:	e007      	b.n	800352c <TM_STMPE811_ReadY+0x68>
    } else if (val >= 320) {
 800351c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003520:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003524:	db02      	blt.n	800352c <TM_STMPE811_ReadY+0x68>
        val = 319;
 8003526:	f240 133f 	movw	r3, #319	@ 0x13f
 800352a:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 800352c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003530:	88fb      	ldrh	r3, [r7, #6]
 8003532:	429a      	cmp	r2, r3
 8003534:	dd05      	ble.n	8003542 <TM_STMPE811_ReadY+0x7e>
 8003536:	89fa      	ldrh	r2, [r7, #14]
 8003538:	88fb      	ldrh	r3, [r7, #6]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	b29b      	uxth	r3, r3
 800353e:	b21b      	sxth	r3, r3
 8003540:	e004      	b.n	800354c <TM_STMPE811_ReadY+0x88>
 8003542:	89fb      	ldrh	r3, [r7, #14]
 8003544:	88fa      	ldrh	r2, [r7, #6]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	b29b      	uxth	r3, r3
 800354a:	b21b      	sxth	r3, r3
 800354c:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 800354e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003552:	2b04      	cmp	r3, #4
 8003554:	dd01      	ble.n	800355a <TM_STMPE811_ReadY+0x96>
        return val;
 8003556:	89fb      	ldrh	r3, [r7, #14]
 8003558:	e000      	b.n	800355c <TM_STMPE811_ReadY+0x98>
    }
    return y;
 800355a:	88fb      	ldrh	r3, [r7, #6]
}
 800355c:	4618      	mov	r0, r3
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	2e8ba2e9 	.word	0x2e8ba2e9

08003568 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
}
 800356c:	bf00      	nop
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b086      	sub	sp, #24
 800357a:	af00      	add	r7, sp, #0
 800357c:	60f8      	str	r0, [r7, #12]
 800357e:	60b9      	str	r1, [r7, #8]
 8003580:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003582:	2300      	movs	r3, #0
 8003584:	617b      	str	r3, [r7, #20]
 8003586:	e00a      	b.n	800359e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003588:	f3af 8000 	nop.w
 800358c:	4601      	mov	r1, r0
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	1c5a      	adds	r2, r3, #1
 8003592:	60ba      	str	r2, [r7, #8]
 8003594:	b2ca      	uxtb	r2, r1
 8003596:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	3301      	adds	r3, #1
 800359c:	617b      	str	r3, [r7, #20]
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	dbf0      	blt.n	8003588 <_read+0x12>
  }

  return len;
 80035a6:	687b      	ldr	r3, [r7, #4]
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3718      	adds	r7, #24
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035bc:	2300      	movs	r3, #0
 80035be:	617b      	str	r3, [r7, #20]
 80035c0:	e009      	b.n	80035d6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	1c5a      	adds	r2, r3, #1
 80035c6:	60ba      	str	r2, [r7, #8]
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	3301      	adds	r3, #1
 80035d4:	617b      	str	r3, [r7, #20]
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	429a      	cmp	r2, r3
 80035dc:	dbf1      	blt.n	80035c2 <_write+0x12>
  }
  return len;
 80035de:	687b      	ldr	r3, [r7, #4]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3718      	adds	r7, #24
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <_close>:

int _close(int file)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80035f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003610:	605a      	str	r2, [r3, #4]
  return 0;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <_isatty>:

int _isatty(int file)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003628:	2301      	movs	r3, #1
}
 800362a:	4618      	mov	r0, r3
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr

08003636 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003636:	b480      	push	{r7}
 8003638:	b085      	sub	sp, #20
 800363a:	af00      	add	r7, sp, #0
 800363c:	60f8      	str	r0, [r7, #12]
 800363e:	60b9      	str	r1, [r7, #8]
 8003640:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3714      	adds	r7, #20
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003658:	4a14      	ldr	r2, [pc, #80]	@ (80036ac <_sbrk+0x5c>)
 800365a:	4b15      	ldr	r3, [pc, #84]	@ (80036b0 <_sbrk+0x60>)
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003664:	4b13      	ldr	r3, [pc, #76]	@ (80036b4 <_sbrk+0x64>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d102      	bne.n	8003672 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800366c:	4b11      	ldr	r3, [pc, #68]	@ (80036b4 <_sbrk+0x64>)
 800366e:	4a12      	ldr	r2, [pc, #72]	@ (80036b8 <_sbrk+0x68>)
 8003670:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003672:	4b10      	ldr	r3, [pc, #64]	@ (80036b4 <_sbrk+0x64>)
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4413      	add	r3, r2
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	429a      	cmp	r2, r3
 800367e:	d207      	bcs.n	8003690 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003680:	f003 fddc 	bl	800723c <__errno>
 8003684:	4603      	mov	r3, r0
 8003686:	220c      	movs	r2, #12
 8003688:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800368a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800368e:	e009      	b.n	80036a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003690:	4b08      	ldr	r3, [pc, #32]	@ (80036b4 <_sbrk+0x64>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003696:	4b07      	ldr	r3, [pc, #28]	@ (80036b4 <_sbrk+0x64>)
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4413      	add	r3, r2
 800369e:	4a05      	ldr	r2, [pc, #20]	@ (80036b4 <_sbrk+0x64>)
 80036a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036a2:	68fb      	ldr	r3, [r7, #12]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3718      	adds	r7, #24
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	20030000 	.word	0x20030000
 80036b0:	00000400 	.word	0x00000400
 80036b4:	20025c3c 	.word	0x20025c3c
 80036b8:	20025d90 	.word	0x20025d90

080036bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036c0:	4b06      	ldr	r3, [pc, #24]	@ (80036dc <SystemInit+0x20>)
 80036c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036c6:	4a05      	ldr	r2, [pc, #20]	@ (80036dc <SystemInit+0x20>)
 80036c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80036cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036d0:	bf00      	nop
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	e000ed00 	.word	0xe000ed00

080036e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80036e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003718 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80036e4:	f7ff ffea 	bl	80036bc <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80036e8:	480c      	ldr	r0, [pc, #48]	@ (800371c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80036ea:	490d      	ldr	r1, [pc, #52]	@ (8003720 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80036ec:	4a0d      	ldr	r2, [pc, #52]	@ (8003724 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80036ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036f0:	e002      	b.n	80036f8 <LoopCopyDataInit>

080036f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036f6:	3304      	adds	r3, #4

080036f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036fc:	d3f9      	bcc.n	80036f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003728 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003700:	4c0a      	ldr	r4, [pc, #40]	@ (800372c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003702:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003704:	e001      	b.n	800370a <LoopFillZerobss>

08003706 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003706:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003708:	3204      	adds	r2, #4

0800370a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800370a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800370c:	d3fb      	bcc.n	8003706 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800370e:	f003 fd9b 	bl	8007248 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003712:	f7fe fd26 	bl	8002162 <main>
  bx  lr    
 8003716:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003718:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800371c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003720:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8003724:	0800a130 	.word	0x0800a130
  ldr r2, =_sbss
 8003728:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800372c:	20025d90 	.word	0x20025d90

08003730 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003730:	e7fe      	b.n	8003730 <ADC_IRQHandler>
	...

08003734 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003738:	4b0e      	ldr	r3, [pc, #56]	@ (8003774 <HAL_Init+0x40>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a0d      	ldr	r2, [pc, #52]	@ (8003774 <HAL_Init+0x40>)
 800373e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003742:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003744:	4b0b      	ldr	r3, [pc, #44]	@ (8003774 <HAL_Init+0x40>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a0a      	ldr	r2, [pc, #40]	@ (8003774 <HAL_Init+0x40>)
 800374a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800374e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003750:	4b08      	ldr	r3, [pc, #32]	@ (8003774 <HAL_Init+0x40>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a07      	ldr	r2, [pc, #28]	@ (8003774 <HAL_Init+0x40>)
 8003756:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800375a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800375c:	2003      	movs	r0, #3
 800375e:	f000 f931 	bl	80039c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003762:	2000      	movs	r0, #0
 8003764:	f000 f808 	bl	8003778 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003768:	f7ff f8f2 	bl	8002950 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	40023c00 	.word	0x40023c00

08003778 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003780:	4b12      	ldr	r3, [pc, #72]	@ (80037cc <HAL_InitTick+0x54>)
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	4b12      	ldr	r3, [pc, #72]	@ (80037d0 <HAL_InitTick+0x58>)
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	4619      	mov	r1, r3
 800378a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800378e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003792:	fbb2 f3f3 	udiv	r3, r2, r3
 8003796:	4618      	mov	r0, r3
 8003798:	f000 f93b 	bl	8003a12 <HAL_SYSTICK_Config>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e00e      	b.n	80037c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b0f      	cmp	r3, #15
 80037aa:	d80a      	bhi.n	80037c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037ac:	2200      	movs	r2, #0
 80037ae:	6879      	ldr	r1, [r7, #4]
 80037b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80037b4:	f000 f911 	bl	80039da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037b8:	4a06      	ldr	r2, [pc, #24]	@ (80037d4 <HAL_InitTick+0x5c>)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80037be:	2300      	movs	r3, #0
 80037c0:	e000      	b.n	80037c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3708      	adds	r7, #8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	20000018 	.word	0x20000018
 80037d0:	20000020 	.word	0x20000020
 80037d4:	2000001c 	.word	0x2000001c

080037d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037dc:	4b06      	ldr	r3, [pc, #24]	@ (80037f8 <HAL_IncTick+0x20>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	461a      	mov	r2, r3
 80037e2:	4b06      	ldr	r3, [pc, #24]	@ (80037fc <HAL_IncTick+0x24>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4413      	add	r3, r2
 80037e8:	4a04      	ldr	r2, [pc, #16]	@ (80037fc <HAL_IncTick+0x24>)
 80037ea:	6013      	str	r3, [r2, #0]
}
 80037ec:	bf00      	nop
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	20000020 	.word	0x20000020
 80037fc:	20025c40 	.word	0x20025c40

08003800 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  return uwTick;
 8003804:	4b03      	ldr	r3, [pc, #12]	@ (8003814 <HAL_GetTick+0x14>)
 8003806:	681b      	ldr	r3, [r3, #0]
}
 8003808:	4618      	mov	r0, r3
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	20025c40 	.word	0x20025c40

08003818 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003820:	f7ff ffee 	bl	8003800 <HAL_GetTick>
 8003824:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003830:	d005      	beq.n	800383e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003832:	4b0a      	ldr	r3, [pc, #40]	@ (800385c <HAL_Delay+0x44>)
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	461a      	mov	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	4413      	add	r3, r2
 800383c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800383e:	bf00      	nop
 8003840:	f7ff ffde 	bl	8003800 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	429a      	cmp	r2, r3
 800384e:	d8f7      	bhi.n	8003840 <HAL_Delay+0x28>
  {
  }
}
 8003850:	bf00      	nop
 8003852:	bf00      	nop
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	20000020 	.word	0x20000020

08003860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f003 0307 	and.w	r3, r3, #7
 800386e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003870:	4b0c      	ldr	r3, [pc, #48]	@ (80038a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800387c:	4013      	ands	r3, r2
 800387e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003888:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800388c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003892:	4a04      	ldr	r2, [pc, #16]	@ (80038a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	60d3      	str	r3, [r2, #12]
}
 8003898:	bf00      	nop
 800389a:	3714      	adds	r7, #20
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	e000ed00 	.word	0xe000ed00

080038a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038ac:	4b04      	ldr	r3, [pc, #16]	@ (80038c0 <__NVIC_GetPriorityGrouping+0x18>)
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	0a1b      	lsrs	r3, r3, #8
 80038b2:	f003 0307 	and.w	r3, r3, #7
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr
 80038c0:	e000ed00 	.word	0xe000ed00

080038c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	4603      	mov	r3, r0
 80038cc:	6039      	str	r1, [r7, #0]
 80038ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	db0a      	blt.n	80038ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	b2da      	uxtb	r2, r3
 80038dc:	490c      	ldr	r1, [pc, #48]	@ (8003910 <__NVIC_SetPriority+0x4c>)
 80038de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e2:	0112      	lsls	r2, r2, #4
 80038e4:	b2d2      	uxtb	r2, r2
 80038e6:	440b      	add	r3, r1
 80038e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038ec:	e00a      	b.n	8003904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	b2da      	uxtb	r2, r3
 80038f2:	4908      	ldr	r1, [pc, #32]	@ (8003914 <__NVIC_SetPriority+0x50>)
 80038f4:	79fb      	ldrb	r3, [r7, #7]
 80038f6:	f003 030f 	and.w	r3, r3, #15
 80038fa:	3b04      	subs	r3, #4
 80038fc:	0112      	lsls	r2, r2, #4
 80038fe:	b2d2      	uxtb	r2, r2
 8003900:	440b      	add	r3, r1
 8003902:	761a      	strb	r2, [r3, #24]
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	e000e100 	.word	0xe000e100
 8003914:	e000ed00 	.word	0xe000ed00

08003918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003918:	b480      	push	{r7}
 800391a:	b089      	sub	sp, #36	@ 0x24
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f003 0307 	and.w	r3, r3, #7
 800392a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	f1c3 0307 	rsb	r3, r3, #7
 8003932:	2b04      	cmp	r3, #4
 8003934:	bf28      	it	cs
 8003936:	2304      	movcs	r3, #4
 8003938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	3304      	adds	r3, #4
 800393e:	2b06      	cmp	r3, #6
 8003940:	d902      	bls.n	8003948 <NVIC_EncodePriority+0x30>
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	3b03      	subs	r3, #3
 8003946:	e000      	b.n	800394a <NVIC_EncodePriority+0x32>
 8003948:	2300      	movs	r3, #0
 800394a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800394c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	fa02 f303 	lsl.w	r3, r2, r3
 8003956:	43da      	mvns	r2, r3
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	401a      	ands	r2, r3
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003960:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	fa01 f303 	lsl.w	r3, r1, r3
 800396a:	43d9      	mvns	r1, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003970:	4313      	orrs	r3, r2
         );
}
 8003972:	4618      	mov	r0, r3
 8003974:	3724      	adds	r7, #36	@ 0x24
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
	...

08003980 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3b01      	subs	r3, #1
 800398c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003990:	d301      	bcc.n	8003996 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003992:	2301      	movs	r3, #1
 8003994:	e00f      	b.n	80039b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003996:	4a0a      	ldr	r2, [pc, #40]	@ (80039c0 <SysTick_Config+0x40>)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	3b01      	subs	r3, #1
 800399c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800399e:	210f      	movs	r1, #15
 80039a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80039a4:	f7ff ff8e 	bl	80038c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039a8:	4b05      	ldr	r3, [pc, #20]	@ (80039c0 <SysTick_Config+0x40>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039ae:	4b04      	ldr	r3, [pc, #16]	@ (80039c0 <SysTick_Config+0x40>)
 80039b0:	2207      	movs	r2, #7
 80039b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	e000e010 	.word	0xe000e010

080039c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f7ff ff47 	bl	8003860 <__NVIC_SetPriorityGrouping>
}
 80039d2:	bf00      	nop
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039da:	b580      	push	{r7, lr}
 80039dc:	b086      	sub	sp, #24
 80039de:	af00      	add	r7, sp, #0
 80039e0:	4603      	mov	r3, r0
 80039e2:	60b9      	str	r1, [r7, #8]
 80039e4:	607a      	str	r2, [r7, #4]
 80039e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039ec:	f7ff ff5c 	bl	80038a8 <__NVIC_GetPriorityGrouping>
 80039f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	68b9      	ldr	r1, [r7, #8]
 80039f6:	6978      	ldr	r0, [r7, #20]
 80039f8:	f7ff ff8e 	bl	8003918 <NVIC_EncodePriority>
 80039fc:	4602      	mov	r2, r0
 80039fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a02:	4611      	mov	r1, r2
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7ff ff5d 	bl	80038c4 <__NVIC_SetPriority>
}
 8003a0a:	bf00      	nop
 8003a0c:	3718      	adds	r7, #24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b082      	sub	sp, #8
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7ff ffb0 	bl	8003980 <SysTick_Config>
 8003a20:	4603      	mov	r3, r0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3708      	adds	r7, #8
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
	...

08003a2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b089      	sub	sp, #36	@ 0x24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a36:	2300      	movs	r3, #0
 8003a38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a42:	2300      	movs	r3, #0
 8003a44:	61fb      	str	r3, [r7, #28]
 8003a46:	e177      	b.n	8003d38 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a48:	2201      	movs	r2, #1
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	f040 8166 	bne.w	8003d32 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f003 0303 	and.w	r3, r3, #3
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d005      	beq.n	8003a7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d130      	bne.n	8003ae0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	2203      	movs	r2, #3
 8003a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8e:	43db      	mvns	r3, r3
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	4013      	ands	r3, r2
 8003a94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	68da      	ldr	r2, [r3, #12]
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	69ba      	ldr	r2, [r7, #24]
 8003aac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	43db      	mvns	r3, r3
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	091b      	lsrs	r3, r3, #4
 8003aca:	f003 0201 	and.w	r2, r3, #1
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f003 0303 	and.w	r3, r3, #3
 8003ae8:	2b03      	cmp	r3, #3
 8003aea:	d017      	beq.n	8003b1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	2203      	movs	r2, #3
 8003af8:	fa02 f303 	lsl.w	r3, r2, r3
 8003afc:	43db      	mvns	r3, r3
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	4013      	ands	r3, r2
 8003b02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f003 0303 	and.w	r3, r3, #3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d123      	bne.n	8003b70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	08da      	lsrs	r2, r3, #3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	3208      	adds	r2, #8
 8003b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	f003 0307 	and.w	r3, r3, #7
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	220f      	movs	r2, #15
 8003b40:	fa02 f303 	lsl.w	r3, r2, r3
 8003b44:	43db      	mvns	r3, r3
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	691a      	ldr	r2, [r3, #16]
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	f003 0307 	and.w	r3, r3, #7
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	08da      	lsrs	r2, r3, #3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	3208      	adds	r2, #8
 8003b6a:	69b9      	ldr	r1, [r7, #24]
 8003b6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	2203      	movs	r2, #3
 8003b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b80:	43db      	mvns	r3, r3
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	4013      	ands	r3, r2
 8003b86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f003 0203 	and.w	r2, r3, #3
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 80c0 	beq.w	8003d32 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60fb      	str	r3, [r7, #12]
 8003bb6:	4b66      	ldr	r3, [pc, #408]	@ (8003d50 <HAL_GPIO_Init+0x324>)
 8003bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bba:	4a65      	ldr	r2, [pc, #404]	@ (8003d50 <HAL_GPIO_Init+0x324>)
 8003bbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003bc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bc2:	4b63      	ldr	r3, [pc, #396]	@ (8003d50 <HAL_GPIO_Init+0x324>)
 8003bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bce:	4a61      	ldr	r2, [pc, #388]	@ (8003d54 <HAL_GPIO_Init+0x328>)
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	089b      	lsrs	r3, r3, #2
 8003bd4:	3302      	adds	r3, #2
 8003bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	f003 0303 	and.w	r3, r3, #3
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	220f      	movs	r2, #15
 8003be6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bea:	43db      	mvns	r3, r3
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a58      	ldr	r2, [pc, #352]	@ (8003d58 <HAL_GPIO_Init+0x32c>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d037      	beq.n	8003c6a <HAL_GPIO_Init+0x23e>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a57      	ldr	r2, [pc, #348]	@ (8003d5c <HAL_GPIO_Init+0x330>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d031      	beq.n	8003c66 <HAL_GPIO_Init+0x23a>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a56      	ldr	r2, [pc, #344]	@ (8003d60 <HAL_GPIO_Init+0x334>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d02b      	beq.n	8003c62 <HAL_GPIO_Init+0x236>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a55      	ldr	r2, [pc, #340]	@ (8003d64 <HAL_GPIO_Init+0x338>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d025      	beq.n	8003c5e <HAL_GPIO_Init+0x232>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a54      	ldr	r2, [pc, #336]	@ (8003d68 <HAL_GPIO_Init+0x33c>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d01f      	beq.n	8003c5a <HAL_GPIO_Init+0x22e>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a53      	ldr	r2, [pc, #332]	@ (8003d6c <HAL_GPIO_Init+0x340>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d019      	beq.n	8003c56 <HAL_GPIO_Init+0x22a>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a52      	ldr	r2, [pc, #328]	@ (8003d70 <HAL_GPIO_Init+0x344>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d013      	beq.n	8003c52 <HAL_GPIO_Init+0x226>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a51      	ldr	r2, [pc, #324]	@ (8003d74 <HAL_GPIO_Init+0x348>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d00d      	beq.n	8003c4e <HAL_GPIO_Init+0x222>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a50      	ldr	r2, [pc, #320]	@ (8003d78 <HAL_GPIO_Init+0x34c>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d007      	beq.n	8003c4a <HAL_GPIO_Init+0x21e>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a4f      	ldr	r2, [pc, #316]	@ (8003d7c <HAL_GPIO_Init+0x350>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d101      	bne.n	8003c46 <HAL_GPIO_Init+0x21a>
 8003c42:	2309      	movs	r3, #9
 8003c44:	e012      	b.n	8003c6c <HAL_GPIO_Init+0x240>
 8003c46:	230a      	movs	r3, #10
 8003c48:	e010      	b.n	8003c6c <HAL_GPIO_Init+0x240>
 8003c4a:	2308      	movs	r3, #8
 8003c4c:	e00e      	b.n	8003c6c <HAL_GPIO_Init+0x240>
 8003c4e:	2307      	movs	r3, #7
 8003c50:	e00c      	b.n	8003c6c <HAL_GPIO_Init+0x240>
 8003c52:	2306      	movs	r3, #6
 8003c54:	e00a      	b.n	8003c6c <HAL_GPIO_Init+0x240>
 8003c56:	2305      	movs	r3, #5
 8003c58:	e008      	b.n	8003c6c <HAL_GPIO_Init+0x240>
 8003c5a:	2304      	movs	r3, #4
 8003c5c:	e006      	b.n	8003c6c <HAL_GPIO_Init+0x240>
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e004      	b.n	8003c6c <HAL_GPIO_Init+0x240>
 8003c62:	2302      	movs	r3, #2
 8003c64:	e002      	b.n	8003c6c <HAL_GPIO_Init+0x240>
 8003c66:	2301      	movs	r3, #1
 8003c68:	e000      	b.n	8003c6c <HAL_GPIO_Init+0x240>
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	69fa      	ldr	r2, [r7, #28]
 8003c6e:	f002 0203 	and.w	r2, r2, #3
 8003c72:	0092      	lsls	r2, r2, #2
 8003c74:	4093      	lsls	r3, r2
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c7c:	4935      	ldr	r1, [pc, #212]	@ (8003d54 <HAL_GPIO_Init+0x328>)
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	089b      	lsrs	r3, r3, #2
 8003c82:	3302      	adds	r3, #2
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c8a:	4b3d      	ldr	r3, [pc, #244]	@ (8003d80 <HAL_GPIO_Init+0x354>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	43db      	mvns	r3, r3
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	4013      	ands	r3, r2
 8003c98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cae:	4a34      	ldr	r2, [pc, #208]	@ (8003d80 <HAL_GPIO_Init+0x354>)
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cb4:	4b32      	ldr	r3, [pc, #200]	@ (8003d80 <HAL_GPIO_Init+0x354>)
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	43db      	mvns	r3, r3
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d003      	beq.n	8003cd8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cd8:	4a29      	ldr	r2, [pc, #164]	@ (8003d80 <HAL_GPIO_Init+0x354>)
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003cde:	4b28      	ldr	r3, [pc, #160]	@ (8003d80 <HAL_GPIO_Init+0x354>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	43db      	mvns	r3, r3
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	4013      	ands	r3, r2
 8003cec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d02:	4a1f      	ldr	r2, [pc, #124]	@ (8003d80 <HAL_GPIO_Init+0x354>)
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d08:	4b1d      	ldr	r3, [pc, #116]	@ (8003d80 <HAL_GPIO_Init+0x354>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	43db      	mvns	r3, r3
 8003d12:	69ba      	ldr	r2, [r7, #24]
 8003d14:	4013      	ands	r3, r2
 8003d16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d003      	beq.n	8003d2c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d2c:	4a14      	ldr	r2, [pc, #80]	@ (8003d80 <HAL_GPIO_Init+0x354>)
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	3301      	adds	r3, #1
 8003d36:	61fb      	str	r3, [r7, #28]
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	2b0f      	cmp	r3, #15
 8003d3c:	f67f ae84 	bls.w	8003a48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d40:	bf00      	nop
 8003d42:	bf00      	nop
 8003d44:	3724      	adds	r7, #36	@ 0x24
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	40023800 	.word	0x40023800
 8003d54:	40013800 	.word	0x40013800
 8003d58:	40020000 	.word	0x40020000
 8003d5c:	40020400 	.word	0x40020400
 8003d60:	40020800 	.word	0x40020800
 8003d64:	40020c00 	.word	0x40020c00
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	40021400 	.word	0x40021400
 8003d70:	40021800 	.word	0x40021800
 8003d74:	40021c00 	.word	0x40021c00
 8003d78:	40022000 	.word	0x40022000
 8003d7c:	40022400 	.word	0x40022400
 8003d80:	40013c00 	.word	0x40013c00

08003d84 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b087      	sub	sp, #28
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003d92:	2300      	movs	r3, #0
 8003d94:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003d96:	2300      	movs	r3, #0
 8003d98:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	617b      	str	r3, [r7, #20]
 8003d9e:	e0d9      	b.n	8003f54 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003da0:	2201      	movs	r2, #1
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	fa02 f303 	lsl.w	r3, r2, r3
 8003da8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	4013      	ands	r3, r2
 8003db0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	f040 80c9 	bne.w	8003f4e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003dbc:	4a6b      	ldr	r2, [pc, #428]	@ (8003f6c <HAL_GPIO_DeInit+0x1e8>)
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	089b      	lsrs	r3, r3, #2
 8003dc2:	3302      	adds	r3, #2
 8003dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dc8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	f003 0303 	and.w	r3, r3, #3
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	220f      	movs	r2, #15
 8003dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	4013      	ands	r3, r2
 8003ddc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a63      	ldr	r2, [pc, #396]	@ (8003f70 <HAL_GPIO_DeInit+0x1ec>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d037      	beq.n	8003e56 <HAL_GPIO_DeInit+0xd2>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a62      	ldr	r2, [pc, #392]	@ (8003f74 <HAL_GPIO_DeInit+0x1f0>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d031      	beq.n	8003e52 <HAL_GPIO_DeInit+0xce>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a61      	ldr	r2, [pc, #388]	@ (8003f78 <HAL_GPIO_DeInit+0x1f4>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d02b      	beq.n	8003e4e <HAL_GPIO_DeInit+0xca>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a60      	ldr	r2, [pc, #384]	@ (8003f7c <HAL_GPIO_DeInit+0x1f8>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d025      	beq.n	8003e4a <HAL_GPIO_DeInit+0xc6>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a5f      	ldr	r2, [pc, #380]	@ (8003f80 <HAL_GPIO_DeInit+0x1fc>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d01f      	beq.n	8003e46 <HAL_GPIO_DeInit+0xc2>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a5e      	ldr	r2, [pc, #376]	@ (8003f84 <HAL_GPIO_DeInit+0x200>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d019      	beq.n	8003e42 <HAL_GPIO_DeInit+0xbe>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a5d      	ldr	r2, [pc, #372]	@ (8003f88 <HAL_GPIO_DeInit+0x204>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d013      	beq.n	8003e3e <HAL_GPIO_DeInit+0xba>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a5c      	ldr	r2, [pc, #368]	@ (8003f8c <HAL_GPIO_DeInit+0x208>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d00d      	beq.n	8003e3a <HAL_GPIO_DeInit+0xb6>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a5b      	ldr	r2, [pc, #364]	@ (8003f90 <HAL_GPIO_DeInit+0x20c>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d007      	beq.n	8003e36 <HAL_GPIO_DeInit+0xb2>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a5a      	ldr	r2, [pc, #360]	@ (8003f94 <HAL_GPIO_DeInit+0x210>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d101      	bne.n	8003e32 <HAL_GPIO_DeInit+0xae>
 8003e2e:	2309      	movs	r3, #9
 8003e30:	e012      	b.n	8003e58 <HAL_GPIO_DeInit+0xd4>
 8003e32:	230a      	movs	r3, #10
 8003e34:	e010      	b.n	8003e58 <HAL_GPIO_DeInit+0xd4>
 8003e36:	2308      	movs	r3, #8
 8003e38:	e00e      	b.n	8003e58 <HAL_GPIO_DeInit+0xd4>
 8003e3a:	2307      	movs	r3, #7
 8003e3c:	e00c      	b.n	8003e58 <HAL_GPIO_DeInit+0xd4>
 8003e3e:	2306      	movs	r3, #6
 8003e40:	e00a      	b.n	8003e58 <HAL_GPIO_DeInit+0xd4>
 8003e42:	2305      	movs	r3, #5
 8003e44:	e008      	b.n	8003e58 <HAL_GPIO_DeInit+0xd4>
 8003e46:	2304      	movs	r3, #4
 8003e48:	e006      	b.n	8003e58 <HAL_GPIO_DeInit+0xd4>
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e004      	b.n	8003e58 <HAL_GPIO_DeInit+0xd4>
 8003e4e:	2302      	movs	r3, #2
 8003e50:	e002      	b.n	8003e58 <HAL_GPIO_DeInit+0xd4>
 8003e52:	2301      	movs	r3, #1
 8003e54:	e000      	b.n	8003e58 <HAL_GPIO_DeInit+0xd4>
 8003e56:	2300      	movs	r3, #0
 8003e58:	697a      	ldr	r2, [r7, #20]
 8003e5a:	f002 0203 	and.w	r2, r2, #3
 8003e5e:	0092      	lsls	r2, r2, #2
 8003e60:	4093      	lsls	r3, r2
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d132      	bne.n	8003ece <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003e68:	4b4b      	ldr	r3, [pc, #300]	@ (8003f98 <HAL_GPIO_DeInit+0x214>)
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	43db      	mvns	r3, r3
 8003e70:	4949      	ldr	r1, [pc, #292]	@ (8003f98 <HAL_GPIO_DeInit+0x214>)
 8003e72:	4013      	ands	r3, r2
 8003e74:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003e76:	4b48      	ldr	r3, [pc, #288]	@ (8003f98 <HAL_GPIO_DeInit+0x214>)
 8003e78:	685a      	ldr	r2, [r3, #4]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	43db      	mvns	r3, r3
 8003e7e:	4946      	ldr	r1, [pc, #280]	@ (8003f98 <HAL_GPIO_DeInit+0x214>)
 8003e80:	4013      	ands	r3, r2
 8003e82:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003e84:	4b44      	ldr	r3, [pc, #272]	@ (8003f98 <HAL_GPIO_DeInit+0x214>)
 8003e86:	68da      	ldr	r2, [r3, #12]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	43db      	mvns	r3, r3
 8003e8c:	4942      	ldr	r1, [pc, #264]	@ (8003f98 <HAL_GPIO_DeInit+0x214>)
 8003e8e:	4013      	ands	r3, r2
 8003e90:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003e92:	4b41      	ldr	r3, [pc, #260]	@ (8003f98 <HAL_GPIO_DeInit+0x214>)
 8003e94:	689a      	ldr	r2, [r3, #8]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	43db      	mvns	r3, r3
 8003e9a:	493f      	ldr	r1, [pc, #252]	@ (8003f98 <HAL_GPIO_DeInit+0x214>)
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	f003 0303 	and.w	r3, r3, #3
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	220f      	movs	r2, #15
 8003eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003eae:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003eb0:	4a2e      	ldr	r2, [pc, #184]	@ (8003f6c <HAL_GPIO_DeInit+0x1e8>)
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	089b      	lsrs	r3, r3, #2
 8003eb6:	3302      	adds	r3, #2
 8003eb8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	43da      	mvns	r2, r3
 8003ec0:	482a      	ldr	r0, [pc, #168]	@ (8003f6c <HAL_GPIO_DeInit+0x1e8>)
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	089b      	lsrs	r3, r3, #2
 8003ec6:	400a      	ands	r2, r1
 8003ec8:	3302      	adds	r3, #2
 8003eca:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	005b      	lsls	r3, r3, #1
 8003ed6:	2103      	movs	r1, #3
 8003ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8003edc:	43db      	mvns	r3, r3
 8003ede:	401a      	ands	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	08da      	lsrs	r2, r3, #3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	3208      	adds	r2, #8
 8003eec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	f003 0307 	and.w	r3, r3, #7
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	220f      	movs	r2, #15
 8003efa:	fa02 f303 	lsl.w	r3, r2, r3
 8003efe:	43db      	mvns	r3, r3
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	08d2      	lsrs	r2, r2, #3
 8003f04:	4019      	ands	r1, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	3208      	adds	r2, #8
 8003f0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68da      	ldr	r2, [r3, #12]
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	2103      	movs	r1, #3
 8003f18:	fa01 f303 	lsl.w	r3, r1, r3
 8003f1c:	43db      	mvns	r3, r3
 8003f1e:	401a      	ands	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	2101      	movs	r1, #1
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f30:	43db      	mvns	r3, r3
 8003f32:	401a      	ands	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689a      	ldr	r2, [r3, #8]
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	005b      	lsls	r3, r3, #1
 8003f40:	2103      	movs	r1, #3
 8003f42:	fa01 f303 	lsl.w	r3, r1, r3
 8003f46:	43db      	mvns	r3, r3
 8003f48:	401a      	ands	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	3301      	adds	r3, #1
 8003f52:	617b      	str	r3, [r7, #20]
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	2b0f      	cmp	r3, #15
 8003f58:	f67f af22 	bls.w	8003da0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003f5c:	bf00      	nop
 8003f5e:	bf00      	nop
 8003f60:	371c      	adds	r7, #28
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	40013800 	.word	0x40013800
 8003f70:	40020000 	.word	0x40020000
 8003f74:	40020400 	.word	0x40020400
 8003f78:	40020800 	.word	0x40020800
 8003f7c:	40020c00 	.word	0x40020c00
 8003f80:	40021000 	.word	0x40021000
 8003f84:	40021400 	.word	0x40021400
 8003f88:	40021800 	.word	0x40021800
 8003f8c:	40021c00 	.word	0x40021c00
 8003f90:	40022000 	.word	0x40022000
 8003f94:	40022400 	.word	0x40022400
 8003f98:	40013c00 	.word	0x40013c00

08003f9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	691a      	ldr	r2, [r3, #16]
 8003fac:	887b      	ldrh	r3, [r7, #2]
 8003fae:	4013      	ands	r3, r2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d002      	beq.n	8003fba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	73fb      	strb	r3, [r7, #15]
 8003fb8:	e001      	b.n	8003fbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3714      	adds	r7, #20
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	807b      	strh	r3, [r7, #2]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fdc:	787b      	ldrb	r3, [r7, #1]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fe2:	887a      	ldrh	r2, [r7, #2]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003fe8:	e003      	b.n	8003ff2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003fea:	887b      	ldrh	r3, [r7, #2]
 8003fec:	041a      	lsls	r2, r3, #16
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	619a      	str	r2, [r3, #24]
}
 8003ff2:	bf00      	nop
 8003ff4:	370c      	adds	r7, #12
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
	...

08004000 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e12b      	b.n	800426a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d106      	bne.n	800402c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7fe fcba 	bl	80029a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2224      	movs	r2, #36	@ 0x24
 8004030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f022 0201 	bic.w	r2, r2, #1
 8004042:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004052:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004062:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004064:	f001 ff82 	bl	8005f6c <HAL_RCC_GetPCLK1Freq>
 8004068:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	4a81      	ldr	r2, [pc, #516]	@ (8004274 <HAL_I2C_Init+0x274>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d807      	bhi.n	8004084 <HAL_I2C_Init+0x84>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	4a80      	ldr	r2, [pc, #512]	@ (8004278 <HAL_I2C_Init+0x278>)
 8004078:	4293      	cmp	r3, r2
 800407a:	bf94      	ite	ls
 800407c:	2301      	movls	r3, #1
 800407e:	2300      	movhi	r3, #0
 8004080:	b2db      	uxtb	r3, r3
 8004082:	e006      	b.n	8004092 <HAL_I2C_Init+0x92>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4a7d      	ldr	r2, [pc, #500]	@ (800427c <HAL_I2C_Init+0x27c>)
 8004088:	4293      	cmp	r3, r2
 800408a:	bf94      	ite	ls
 800408c:	2301      	movls	r3, #1
 800408e:	2300      	movhi	r3, #0
 8004090:	b2db      	uxtb	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d001      	beq.n	800409a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e0e7      	b.n	800426a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	4a78      	ldr	r2, [pc, #480]	@ (8004280 <HAL_I2C_Init+0x280>)
 800409e:	fba2 2303 	umull	r2, r3, r2, r3
 80040a2:	0c9b      	lsrs	r3, r3, #18
 80040a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68ba      	ldr	r2, [r7, #8]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	6a1b      	ldr	r3, [r3, #32]
 80040c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	4a6a      	ldr	r2, [pc, #424]	@ (8004274 <HAL_I2C_Init+0x274>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d802      	bhi.n	80040d4 <HAL_I2C_Init+0xd4>
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	3301      	adds	r3, #1
 80040d2:	e009      	b.n	80040e8 <HAL_I2C_Init+0xe8>
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80040da:	fb02 f303 	mul.w	r3, r2, r3
 80040de:	4a69      	ldr	r2, [pc, #420]	@ (8004284 <HAL_I2C_Init+0x284>)
 80040e0:	fba2 2303 	umull	r2, r3, r2, r3
 80040e4:	099b      	lsrs	r3, r3, #6
 80040e6:	3301      	adds	r3, #1
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	6812      	ldr	r2, [r2, #0]
 80040ec:	430b      	orrs	r3, r1
 80040ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	69db      	ldr	r3, [r3, #28]
 80040f6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80040fa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	495c      	ldr	r1, [pc, #368]	@ (8004274 <HAL_I2C_Init+0x274>)
 8004104:	428b      	cmp	r3, r1
 8004106:	d819      	bhi.n	800413c <HAL_I2C_Init+0x13c>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	1e59      	subs	r1, r3, #1
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	005b      	lsls	r3, r3, #1
 8004112:	fbb1 f3f3 	udiv	r3, r1, r3
 8004116:	1c59      	adds	r1, r3, #1
 8004118:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800411c:	400b      	ands	r3, r1
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00a      	beq.n	8004138 <HAL_I2C_Init+0x138>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	1e59      	subs	r1, r3, #1
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004130:	3301      	adds	r3, #1
 8004132:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004136:	e051      	b.n	80041dc <HAL_I2C_Init+0x1dc>
 8004138:	2304      	movs	r3, #4
 800413a:	e04f      	b.n	80041dc <HAL_I2C_Init+0x1dc>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d111      	bne.n	8004168 <HAL_I2C_Init+0x168>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	1e58      	subs	r0, r3, #1
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6859      	ldr	r1, [r3, #4]
 800414c:	460b      	mov	r3, r1
 800414e:	005b      	lsls	r3, r3, #1
 8004150:	440b      	add	r3, r1
 8004152:	fbb0 f3f3 	udiv	r3, r0, r3
 8004156:	3301      	adds	r3, #1
 8004158:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800415c:	2b00      	cmp	r3, #0
 800415e:	bf0c      	ite	eq
 8004160:	2301      	moveq	r3, #1
 8004162:	2300      	movne	r3, #0
 8004164:	b2db      	uxtb	r3, r3
 8004166:	e012      	b.n	800418e <HAL_I2C_Init+0x18e>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	1e58      	subs	r0, r3, #1
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6859      	ldr	r1, [r3, #4]
 8004170:	460b      	mov	r3, r1
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	440b      	add	r3, r1
 8004176:	0099      	lsls	r1, r3, #2
 8004178:	440b      	add	r3, r1
 800417a:	fbb0 f3f3 	udiv	r3, r0, r3
 800417e:	3301      	adds	r3, #1
 8004180:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004184:	2b00      	cmp	r3, #0
 8004186:	bf0c      	ite	eq
 8004188:	2301      	moveq	r3, #1
 800418a:	2300      	movne	r3, #0
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <HAL_I2C_Init+0x196>
 8004192:	2301      	movs	r3, #1
 8004194:	e022      	b.n	80041dc <HAL_I2C_Init+0x1dc>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10e      	bne.n	80041bc <HAL_I2C_Init+0x1bc>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	1e58      	subs	r0, r3, #1
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6859      	ldr	r1, [r3, #4]
 80041a6:	460b      	mov	r3, r1
 80041a8:	005b      	lsls	r3, r3, #1
 80041aa:	440b      	add	r3, r1
 80041ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80041b0:	3301      	adds	r3, #1
 80041b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041ba:	e00f      	b.n	80041dc <HAL_I2C_Init+0x1dc>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	1e58      	subs	r0, r3, #1
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6859      	ldr	r1, [r3, #4]
 80041c4:	460b      	mov	r3, r1
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	440b      	add	r3, r1
 80041ca:	0099      	lsls	r1, r3, #2
 80041cc:	440b      	add	r3, r1
 80041ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80041d2:	3301      	adds	r3, #1
 80041d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80041dc:	6879      	ldr	r1, [r7, #4]
 80041de:	6809      	ldr	r1, [r1, #0]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	69da      	ldr	r2, [r3, #28]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	431a      	orrs	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	430a      	orrs	r2, r1
 80041fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800420a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	6911      	ldr	r1, [r2, #16]
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	68d2      	ldr	r2, [r2, #12]
 8004216:	4311      	orrs	r1, r2
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	6812      	ldr	r2, [r2, #0]
 800421c:	430b      	orrs	r3, r1
 800421e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	695a      	ldr	r2, [r3, #20]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	431a      	orrs	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	430a      	orrs	r2, r1
 800423a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f042 0201 	orr.w	r2, r2, #1
 800424a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2220      	movs	r2, #32
 8004256:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	000186a0 	.word	0x000186a0
 8004278:	001e847f 	.word	0x001e847f
 800427c:	003d08ff 	.word	0x003d08ff
 8004280:	431bde83 	.word	0x431bde83
 8004284:	10624dd3 	.word	0x10624dd3

08004288 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b088      	sub	sp, #32
 800428c:	af02      	add	r7, sp, #8
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	4608      	mov	r0, r1
 8004292:	4611      	mov	r1, r2
 8004294:	461a      	mov	r2, r3
 8004296:	4603      	mov	r3, r0
 8004298:	817b      	strh	r3, [r7, #10]
 800429a:	460b      	mov	r3, r1
 800429c:	813b      	strh	r3, [r7, #8]
 800429e:	4613      	mov	r3, r2
 80042a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042a2:	f7ff faad 	bl	8003800 <HAL_GetTick>
 80042a6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b20      	cmp	r3, #32
 80042b2:	f040 80d9 	bne.w	8004468 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	9300      	str	r3, [sp, #0]
 80042ba:	2319      	movs	r3, #25
 80042bc:	2201      	movs	r2, #1
 80042be:	496d      	ldr	r1, [pc, #436]	@ (8004474 <HAL_I2C_Mem_Write+0x1ec>)
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f000 fc8b 	bl	8004bdc <I2C_WaitOnFlagUntilTimeout>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d001      	beq.n	80042d0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80042cc:	2302      	movs	r3, #2
 80042ce:	e0cc      	b.n	800446a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d101      	bne.n	80042de <HAL_I2C_Mem_Write+0x56>
 80042da:	2302      	movs	r3, #2
 80042dc:	e0c5      	b.n	800446a <HAL_I2C_Mem_Write+0x1e2>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d007      	beq.n	8004304 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f042 0201 	orr.w	r2, r2, #1
 8004302:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004312:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2221      	movs	r2, #33	@ 0x21
 8004318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2240      	movs	r2, #64	@ 0x40
 8004320:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6a3a      	ldr	r2, [r7, #32]
 800432e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004334:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800433a:	b29a      	uxth	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	4a4d      	ldr	r2, [pc, #308]	@ (8004478 <HAL_I2C_Mem_Write+0x1f0>)
 8004344:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004346:	88f8      	ldrh	r0, [r7, #6]
 8004348:	893a      	ldrh	r2, [r7, #8]
 800434a:	8979      	ldrh	r1, [r7, #10]
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	9301      	str	r3, [sp, #4]
 8004350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004352:	9300      	str	r3, [sp, #0]
 8004354:	4603      	mov	r3, r0
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f000 fac2 	bl	80048e0 <I2C_RequestMemoryWrite>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d052      	beq.n	8004408 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e081      	b.n	800446a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f000 fd50 	bl	8004e10 <I2C_WaitOnTXEFlagUntilTimeout>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00d      	beq.n	8004392 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800437a:	2b04      	cmp	r3, #4
 800437c:	d107      	bne.n	800438e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800438c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e06b      	b.n	800446a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004396:	781a      	ldrb	r2, [r3, #0]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a2:	1c5a      	adds	r2, r3, #1
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ac:	3b01      	subs	r3, #1
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	3b01      	subs	r3, #1
 80043bc:	b29a      	uxth	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	f003 0304 	and.w	r3, r3, #4
 80043cc:	2b04      	cmp	r3, #4
 80043ce:	d11b      	bne.n	8004408 <HAL_I2C_Mem_Write+0x180>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d017      	beq.n	8004408 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043dc:	781a      	ldrb	r2, [r3, #0]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e8:	1c5a      	adds	r2, r3, #1
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043f2:	3b01      	subs	r3, #1
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043fe:	b29b      	uxth	r3, r3
 8004400:	3b01      	subs	r3, #1
 8004402:	b29a      	uxth	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1aa      	bne.n	8004366 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004410:	697a      	ldr	r2, [r7, #20]
 8004412:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f000 fd43 	bl	8004ea0 <I2C_WaitOnBTFFlagUntilTimeout>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00d      	beq.n	800443c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004424:	2b04      	cmp	r3, #4
 8004426:	d107      	bne.n	8004438 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004436:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e016      	b.n	800446a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800444a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2220      	movs	r2, #32
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004464:	2300      	movs	r3, #0
 8004466:	e000      	b.n	800446a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004468:	2302      	movs	r3, #2
  }
}
 800446a:	4618      	mov	r0, r3
 800446c:	3718      	adds	r7, #24
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	00100002 	.word	0x00100002
 8004478:	ffff0000 	.word	0xffff0000

0800447c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b08c      	sub	sp, #48	@ 0x30
 8004480:	af02      	add	r7, sp, #8
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	4608      	mov	r0, r1
 8004486:	4611      	mov	r1, r2
 8004488:	461a      	mov	r2, r3
 800448a:	4603      	mov	r3, r0
 800448c:	817b      	strh	r3, [r7, #10]
 800448e:	460b      	mov	r3, r1
 8004490:	813b      	strh	r3, [r7, #8]
 8004492:	4613      	mov	r3, r2
 8004494:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004496:	f7ff f9b3 	bl	8003800 <HAL_GetTick>
 800449a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2b20      	cmp	r3, #32
 80044a6:	f040 8214 	bne.w	80048d2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ac:	9300      	str	r3, [sp, #0]
 80044ae:	2319      	movs	r3, #25
 80044b0:	2201      	movs	r2, #1
 80044b2:	497b      	ldr	r1, [pc, #492]	@ (80046a0 <HAL_I2C_Mem_Read+0x224>)
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f000 fb91 	bl	8004bdc <I2C_WaitOnFlagUntilTimeout>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d001      	beq.n	80044c4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80044c0:	2302      	movs	r3, #2
 80044c2:	e207      	b.n	80048d4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d101      	bne.n	80044d2 <HAL_I2C_Mem_Read+0x56>
 80044ce:	2302      	movs	r3, #2
 80044d0:	e200      	b.n	80048d4 <HAL_I2C_Mem_Read+0x458>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2201      	movs	r2, #1
 80044d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d007      	beq.n	80044f8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f042 0201 	orr.w	r2, r2, #1
 80044f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004506:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2222      	movs	r2, #34	@ 0x22
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2240      	movs	r2, #64	@ 0x40
 8004514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004522:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004528:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800452e:	b29a      	uxth	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	4a5b      	ldr	r2, [pc, #364]	@ (80046a4 <HAL_I2C_Mem_Read+0x228>)
 8004538:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800453a:	88f8      	ldrh	r0, [r7, #6]
 800453c:	893a      	ldrh	r2, [r7, #8]
 800453e:	8979      	ldrh	r1, [r7, #10]
 8004540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004542:	9301      	str	r3, [sp, #4]
 8004544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	4603      	mov	r3, r0
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f000 fa5e 	bl	8004a0c <I2C_RequestMemoryRead>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e1bc      	b.n	80048d4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800455e:	2b00      	cmp	r3, #0
 8004560:	d113      	bne.n	800458a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004562:	2300      	movs	r3, #0
 8004564:	623b      	str	r3, [r7, #32]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	623b      	str	r3, [r7, #32]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	623b      	str	r3, [r7, #32]
 8004576:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004586:	601a      	str	r2, [r3, #0]
 8004588:	e190      	b.n	80048ac <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800458e:	2b01      	cmp	r3, #1
 8004590:	d11b      	bne.n	80045ca <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045a2:	2300      	movs	r3, #0
 80045a4:	61fb      	str	r3, [r7, #28]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	695b      	ldr	r3, [r3, #20]
 80045ac:	61fb      	str	r3, [r7, #28]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	61fb      	str	r3, [r7, #28]
 80045b6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045c6:	601a      	str	r2, [r3, #0]
 80045c8:	e170      	b.n	80048ac <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d11b      	bne.n	800460a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045e0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045f2:	2300      	movs	r3, #0
 80045f4:	61bb      	str	r3, [r7, #24]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	61bb      	str	r3, [r7, #24]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	61bb      	str	r3, [r7, #24]
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	e150      	b.n	80048ac <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800460a:	2300      	movs	r3, #0
 800460c:	617b      	str	r3, [r7, #20]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	695b      	ldr	r3, [r3, #20]
 8004614:	617b      	str	r3, [r7, #20]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	617b      	str	r3, [r7, #20]
 800461e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004620:	e144      	b.n	80048ac <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004626:	2b03      	cmp	r3, #3
 8004628:	f200 80f1 	bhi.w	800480e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004630:	2b01      	cmp	r3, #1
 8004632:	d123      	bne.n	800467c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004634:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004636:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f000 fc79 	bl	8004f30 <I2C_WaitOnRXNEFlagUntilTimeout>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d001      	beq.n	8004648 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e145      	b.n	80048d4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	691a      	ldr	r2, [r3, #16]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004652:	b2d2      	uxtb	r2, r2
 8004654:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800465a:	1c5a      	adds	r2, r3, #1
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004664:	3b01      	subs	r3, #1
 8004666:	b29a      	uxth	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004670:	b29b      	uxth	r3, r3
 8004672:	3b01      	subs	r3, #1
 8004674:	b29a      	uxth	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800467a:	e117      	b.n	80048ac <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004680:	2b02      	cmp	r3, #2
 8004682:	d14e      	bne.n	8004722 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800468a:	2200      	movs	r2, #0
 800468c:	4906      	ldr	r1, [pc, #24]	@ (80046a8 <HAL_I2C_Mem_Read+0x22c>)
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f000 faa4 	bl	8004bdc <I2C_WaitOnFlagUntilTimeout>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d008      	beq.n	80046ac <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e11a      	b.n	80048d4 <HAL_I2C_Mem_Read+0x458>
 800469e:	bf00      	nop
 80046a0:	00100002 	.word	0x00100002
 80046a4:	ffff0000 	.word	0xffff0000
 80046a8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	691a      	ldr	r2, [r3, #16]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c6:	b2d2      	uxtb	r2, r2
 80046c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ce:	1c5a      	adds	r2, r3, #1
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046d8:	3b01      	subs	r3, #1
 80046da:	b29a      	uxth	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	3b01      	subs	r3, #1
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	691a      	ldr	r2, [r3, #16]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f8:	b2d2      	uxtb	r2, r2
 80046fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004700:	1c5a      	adds	r2, r3, #1
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800470a:	3b01      	subs	r3, #1
 800470c:	b29a      	uxth	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004716:	b29b      	uxth	r3, r3
 8004718:	3b01      	subs	r3, #1
 800471a:	b29a      	uxth	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004720:	e0c4      	b.n	80048ac <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004728:	2200      	movs	r2, #0
 800472a:	496c      	ldr	r1, [pc, #432]	@ (80048dc <HAL_I2C_Mem_Read+0x460>)
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f000 fa55 	bl	8004bdc <I2C_WaitOnFlagUntilTimeout>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d001      	beq.n	800473c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e0cb      	b.n	80048d4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800474a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	691a      	ldr	r2, [r3, #16]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004756:	b2d2      	uxtb	r2, r2
 8004758:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475e:	1c5a      	adds	r2, r3, #1
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004768:	3b01      	subs	r3, #1
 800476a:	b29a      	uxth	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004774:	b29b      	uxth	r3, r3
 8004776:	3b01      	subs	r3, #1
 8004778:	b29a      	uxth	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800477e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004780:	9300      	str	r3, [sp, #0]
 8004782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004784:	2200      	movs	r2, #0
 8004786:	4955      	ldr	r1, [pc, #340]	@ (80048dc <HAL_I2C_Mem_Read+0x460>)
 8004788:	68f8      	ldr	r0, [r7, #12]
 800478a:	f000 fa27 	bl	8004bdc <I2C_WaitOnFlagUntilTimeout>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d001      	beq.n	8004798 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e09d      	b.n	80048d4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	691a      	ldr	r2, [r3, #16]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b2:	b2d2      	uxtb	r2, r2
 80047b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ba:	1c5a      	adds	r2, r3, #1
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047c4:	3b01      	subs	r3, #1
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	3b01      	subs	r3, #1
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	691a      	ldr	r2, [r3, #16]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e4:	b2d2      	uxtb	r2, r2
 80047e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ec:	1c5a      	adds	r2, r3, #1
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047f6:	3b01      	subs	r3, #1
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004802:	b29b      	uxth	r3, r3
 8004804:	3b01      	subs	r3, #1
 8004806:	b29a      	uxth	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800480c:	e04e      	b.n	80048ac <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800480e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004810:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f000 fb8c 	bl	8004f30 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d001      	beq.n	8004822 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e058      	b.n	80048d4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	691a      	ldr	r2, [r3, #16]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800482c:	b2d2      	uxtb	r2, r2
 800482e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004834:	1c5a      	adds	r2, r3, #1
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800483e:	3b01      	subs	r3, #1
 8004840:	b29a      	uxth	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800484a:	b29b      	uxth	r3, r3
 800484c:	3b01      	subs	r3, #1
 800484e:	b29a      	uxth	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	f003 0304 	and.w	r3, r3, #4
 800485e:	2b04      	cmp	r3, #4
 8004860:	d124      	bne.n	80048ac <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004866:	2b03      	cmp	r3, #3
 8004868:	d107      	bne.n	800487a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004878:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	691a      	ldr	r2, [r3, #16]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004884:	b2d2      	uxtb	r2, r2
 8004886:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800488c:	1c5a      	adds	r2, r3, #1
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004896:	3b01      	subs	r3, #1
 8004898:	b29a      	uxth	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	3b01      	subs	r3, #1
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f47f aeb6 	bne.w	8004622 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2220      	movs	r2, #32
 80048ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80048ce:	2300      	movs	r3, #0
 80048d0:	e000      	b.n	80048d4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80048d2:	2302      	movs	r3, #2
  }
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3728      	adds	r7, #40	@ 0x28
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	00010004 	.word	0x00010004

080048e0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b088      	sub	sp, #32
 80048e4:	af02      	add	r7, sp, #8
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	4608      	mov	r0, r1
 80048ea:	4611      	mov	r1, r2
 80048ec:	461a      	mov	r2, r3
 80048ee:	4603      	mov	r3, r0
 80048f0:	817b      	strh	r3, [r7, #10]
 80048f2:	460b      	mov	r3, r1
 80048f4:	813b      	strh	r3, [r7, #8]
 80048f6:	4613      	mov	r3, r2
 80048f8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004908:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800490a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800490c:	9300      	str	r3, [sp, #0]
 800490e:	6a3b      	ldr	r3, [r7, #32]
 8004910:	2200      	movs	r2, #0
 8004912:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f000 f960 	bl	8004bdc <I2C_WaitOnFlagUntilTimeout>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00d      	beq.n	800493e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800492c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004930:	d103      	bne.n	800493a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004938:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e05f      	b.n	80049fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800493e:	897b      	ldrh	r3, [r7, #10]
 8004940:	b2db      	uxtb	r3, r3
 8004942:	461a      	mov	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800494c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800494e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004950:	6a3a      	ldr	r2, [r7, #32]
 8004952:	492d      	ldr	r1, [pc, #180]	@ (8004a08 <I2C_RequestMemoryWrite+0x128>)
 8004954:	68f8      	ldr	r0, [r7, #12]
 8004956:	f000 f9bb 	bl	8004cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d001      	beq.n	8004964 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e04c      	b.n	80049fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004964:	2300      	movs	r3, #0
 8004966:	617b      	str	r3, [r7, #20]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	617b      	str	r3, [r7, #20]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	617b      	str	r3, [r7, #20]
 8004978:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800497a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800497c:	6a39      	ldr	r1, [r7, #32]
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f000 fa46 	bl	8004e10 <I2C_WaitOnTXEFlagUntilTimeout>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00d      	beq.n	80049a6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800498e:	2b04      	cmp	r3, #4
 8004990:	d107      	bne.n	80049a2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e02b      	b.n	80049fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049a6:	88fb      	ldrh	r3, [r7, #6]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d105      	bne.n	80049b8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049ac:	893b      	ldrh	r3, [r7, #8]
 80049ae:	b2da      	uxtb	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	611a      	str	r2, [r3, #16]
 80049b6:	e021      	b.n	80049fc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80049b8:	893b      	ldrh	r3, [r7, #8]
 80049ba:	0a1b      	lsrs	r3, r3, #8
 80049bc:	b29b      	uxth	r3, r3
 80049be:	b2da      	uxtb	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049c8:	6a39      	ldr	r1, [r7, #32]
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f000 fa20 	bl	8004e10 <I2C_WaitOnTXEFlagUntilTimeout>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00d      	beq.n	80049f2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049da:	2b04      	cmp	r3, #4
 80049dc:	d107      	bne.n	80049ee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e005      	b.n	80049fe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049f2:	893b      	ldrh	r3, [r7, #8]
 80049f4:	b2da      	uxtb	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3718      	adds	r7, #24
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	00010002 	.word	0x00010002

08004a0c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b088      	sub	sp, #32
 8004a10:	af02      	add	r7, sp, #8
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	4608      	mov	r0, r1
 8004a16:	4611      	mov	r1, r2
 8004a18:	461a      	mov	r2, r3
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	817b      	strh	r3, [r7, #10]
 8004a1e:	460b      	mov	r3, r1
 8004a20:	813b      	strh	r3, [r7, #8]
 8004a22:	4613      	mov	r3, r2
 8004a24:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004a34:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a44:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a48:	9300      	str	r3, [sp, #0]
 8004a4a:	6a3b      	ldr	r3, [r7, #32]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a52:	68f8      	ldr	r0, [r7, #12]
 8004a54:	f000 f8c2 	bl	8004bdc <I2C_WaitOnFlagUntilTimeout>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00d      	beq.n	8004a7a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a6c:	d103      	bne.n	8004a76 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a74:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e0aa      	b.n	8004bd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a7a:	897b      	ldrh	r3, [r7, #10]
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	461a      	mov	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004a88:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a8c:	6a3a      	ldr	r2, [r7, #32]
 8004a8e:	4952      	ldr	r1, [pc, #328]	@ (8004bd8 <I2C_RequestMemoryRead+0x1cc>)
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f000 f91d 	bl	8004cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d001      	beq.n	8004aa0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e097      	b.n	8004bd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	617b      	str	r3, [r7, #20]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	617b      	str	r3, [r7, #20]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	617b      	str	r3, [r7, #20]
 8004ab4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ab6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ab8:	6a39      	ldr	r1, [r7, #32]
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f000 f9a8 	bl	8004e10 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00d      	beq.n	8004ae2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aca:	2b04      	cmp	r3, #4
 8004acc:	d107      	bne.n	8004ade <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004adc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e076      	b.n	8004bd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ae2:	88fb      	ldrh	r3, [r7, #6]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d105      	bne.n	8004af4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ae8:	893b      	ldrh	r3, [r7, #8]
 8004aea:	b2da      	uxtb	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	611a      	str	r2, [r3, #16]
 8004af2:	e021      	b.n	8004b38 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004af4:	893b      	ldrh	r3, [r7, #8]
 8004af6:	0a1b      	lsrs	r3, r3, #8
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b04:	6a39      	ldr	r1, [r7, #32]
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f000 f982 	bl	8004e10 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00d      	beq.n	8004b2e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	d107      	bne.n	8004b2a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b28:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e050      	b.n	8004bd0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b2e:	893b      	ldrh	r3, [r7, #8]
 8004b30:	b2da      	uxtb	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b3a:	6a39      	ldr	r1, [r7, #32]
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f000 f967 	bl	8004e10 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00d      	beq.n	8004b64 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b4c:	2b04      	cmp	r3, #4
 8004b4e:	d107      	bne.n	8004b60 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b5e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e035      	b.n	8004bd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b72:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b76:	9300      	str	r3, [sp, #0]
 8004b78:	6a3b      	ldr	r3, [r7, #32]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f000 f82b 	bl	8004bdc <I2C_WaitOnFlagUntilTimeout>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00d      	beq.n	8004ba8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b9a:	d103      	bne.n	8004ba4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ba2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e013      	b.n	8004bd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004ba8:	897b      	ldrh	r3, [r7, #10]
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	f043 0301 	orr.w	r3, r3, #1
 8004bb0:	b2da      	uxtb	r2, r3
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bba:	6a3a      	ldr	r2, [r7, #32]
 8004bbc:	4906      	ldr	r1, [pc, #24]	@ (8004bd8 <I2C_RequestMemoryRead+0x1cc>)
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	f000 f886 	bl	8004cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d001      	beq.n	8004bce <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e000      	b.n	8004bd0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3718      	adds	r7, #24
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	00010002 	.word	0x00010002

08004bdc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	603b      	str	r3, [r7, #0]
 8004be8:	4613      	mov	r3, r2
 8004bea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bec:	e048      	b.n	8004c80 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004bf4:	d044      	beq.n	8004c80 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bf6:	f7fe fe03 	bl	8003800 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	683a      	ldr	r2, [r7, #0]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d302      	bcc.n	8004c0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d139      	bne.n	8004c80 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	0c1b      	lsrs	r3, r3, #16
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d10d      	bne.n	8004c32 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	43da      	mvns	r2, r3
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	4013      	ands	r3, r2
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	bf0c      	ite	eq
 8004c28:	2301      	moveq	r3, #1
 8004c2a:	2300      	movne	r3, #0
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	461a      	mov	r2, r3
 8004c30:	e00c      	b.n	8004c4c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	43da      	mvns	r2, r3
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	bf0c      	ite	eq
 8004c44:	2301      	moveq	r3, #1
 8004c46:	2300      	movne	r3, #0
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	79fb      	ldrb	r3, [r7, #7]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d116      	bne.n	8004c80 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6c:	f043 0220 	orr.w	r2, r3, #32
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e023      	b.n	8004cc8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	0c1b      	lsrs	r3, r3, #16
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d10d      	bne.n	8004ca6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	695b      	ldr	r3, [r3, #20]
 8004c90:	43da      	mvns	r2, r3
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	4013      	ands	r3, r2
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	bf0c      	ite	eq
 8004c9c:	2301      	moveq	r3, #1
 8004c9e:	2300      	movne	r3, #0
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	e00c      	b.n	8004cc0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	699b      	ldr	r3, [r3, #24]
 8004cac:	43da      	mvns	r2, r3
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	bf0c      	ite	eq
 8004cb8:	2301      	moveq	r3, #1
 8004cba:	2300      	movne	r3, #0
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	79fb      	ldrb	r3, [r7, #7]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d093      	beq.n	8004bee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3710      	adds	r7, #16
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	607a      	str	r2, [r7, #4]
 8004cdc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004cde:	e071      	b.n	8004dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cee:	d123      	bne.n	8004d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cfe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d08:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2220      	movs	r2, #32
 8004d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d24:	f043 0204 	orr.w	r2, r3, #4
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e067      	b.n	8004e08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d3e:	d041      	beq.n	8004dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d40:	f7fe fd5e 	bl	8003800 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d302      	bcc.n	8004d56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d136      	bne.n	8004dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	0c1b      	lsrs	r3, r3, #16
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d10c      	bne.n	8004d7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	43da      	mvns	r2, r3
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	bf14      	ite	ne
 8004d72:	2301      	movne	r3, #1
 8004d74:	2300      	moveq	r3, #0
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	e00b      	b.n	8004d92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	43da      	mvns	r2, r3
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	4013      	ands	r3, r2
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	bf14      	ite	ne
 8004d8c:	2301      	movne	r3, #1
 8004d8e:	2300      	moveq	r3, #0
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d016      	beq.n	8004dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2220      	movs	r2, #32
 8004da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db0:	f043 0220 	orr.w	r2, r3, #32
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e021      	b.n	8004e08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	0c1b      	lsrs	r3, r3, #16
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d10c      	bne.n	8004de8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	695b      	ldr	r3, [r3, #20]
 8004dd4:	43da      	mvns	r2, r3
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	4013      	ands	r3, r2
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	bf14      	ite	ne
 8004de0:	2301      	movne	r3, #1
 8004de2:	2300      	moveq	r3, #0
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	e00b      	b.n	8004e00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	43da      	mvns	r2, r3
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	4013      	ands	r3, r2
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	bf14      	ite	ne
 8004dfa:	2301      	movne	r3, #1
 8004dfc:	2300      	moveq	r3, #0
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f47f af6d 	bne.w	8004ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3710      	adds	r7, #16
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e1c:	e034      	b.n	8004e88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f000 f8e3 	bl	8004fea <I2C_IsAcknowledgeFailed>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d001      	beq.n	8004e2e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e034      	b.n	8004e98 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e34:	d028      	beq.n	8004e88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e36:	f7fe fce3 	bl	8003800 <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	68ba      	ldr	r2, [r7, #8]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d302      	bcc.n	8004e4c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d11d      	bne.n	8004e88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e56:	2b80      	cmp	r3, #128	@ 0x80
 8004e58:	d016      	beq.n	8004e88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2220      	movs	r2, #32
 8004e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e74:	f043 0220 	orr.w	r2, r3, #32
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e007      	b.n	8004e98 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e92:	2b80      	cmp	r3, #128	@ 0x80
 8004e94:	d1c3      	bne.n	8004e1e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004eac:	e034      	b.n	8004f18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004eae:	68f8      	ldr	r0, [r7, #12]
 8004eb0:	f000 f89b 	bl	8004fea <I2C_IsAcknowledgeFailed>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d001      	beq.n	8004ebe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e034      	b.n	8004f28 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ec4:	d028      	beq.n	8004f18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ec6:	f7fe fc9b 	bl	8003800 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	68ba      	ldr	r2, [r7, #8]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d302      	bcc.n	8004edc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d11d      	bne.n	8004f18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	f003 0304 	and.w	r3, r3, #4
 8004ee6:	2b04      	cmp	r3, #4
 8004ee8:	d016      	beq.n	8004f18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2220      	movs	r2, #32
 8004ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f04:	f043 0220 	orr.w	r2, r3, #32
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e007      	b.n	8004f28 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	f003 0304 	and.w	r3, r3, #4
 8004f22:	2b04      	cmp	r3, #4
 8004f24:	d1c3      	bne.n	8004eae <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3710      	adds	r7, #16
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f3c:	e049      	b.n	8004fd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	695b      	ldr	r3, [r3, #20]
 8004f44:	f003 0310 	and.w	r3, r3, #16
 8004f48:	2b10      	cmp	r3, #16
 8004f4a:	d119      	bne.n	8004f80 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f06f 0210 	mvn.w	r2, #16
 8004f54:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2220      	movs	r2, #32
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e030      	b.n	8004fe2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f80:	f7fe fc3e 	bl	8003800 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d302      	bcc.n	8004f96 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d11d      	bne.n	8004fd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	695b      	ldr	r3, [r3, #20]
 8004f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fa0:	2b40      	cmp	r3, #64	@ 0x40
 8004fa2:	d016      	beq.n	8004fd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2220      	movs	r2, #32
 8004fae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fbe:	f043 0220 	orr.w	r2, r3, #32
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e007      	b.n	8004fe2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	695b      	ldr	r3, [r3, #20]
 8004fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fdc:	2b40      	cmp	r3, #64	@ 0x40
 8004fde:	d1ae      	bne.n	8004f3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3710      	adds	r7, #16
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b083      	sub	sp, #12
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	695b      	ldr	r3, [r3, #20]
 8004ff8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ffc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005000:	d11b      	bne.n	800503a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800500a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2220      	movs	r2, #32
 8005016:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005026:	f043 0204 	orr.w	r2, r3, #4
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e000      	b.n	800503c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2b20      	cmp	r3, #32
 800505c:	d129      	bne.n	80050b2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2224      	movs	r2, #36	@ 0x24
 8005062:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f022 0201 	bic.w	r2, r2, #1
 8005074:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f022 0210 	bic.w	r2, r2, #16
 8005084:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	430a      	orrs	r2, r1
 8005094:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f042 0201 	orr.w	r2, r2, #1
 80050a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2220      	movs	r2, #32
 80050aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80050ae:	2300      	movs	r3, #0
 80050b0:	e000      	b.n	80050b4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80050b2:	2302      	movs	r3, #2
  }
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80050ca:	2300      	movs	r3, #0
 80050cc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b20      	cmp	r3, #32
 80050d8:	d12a      	bne.n	8005130 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2224      	movs	r2, #36	@ 0x24
 80050de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f022 0201 	bic.w	r2, r2, #1
 80050f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80050fa:	89fb      	ldrh	r3, [r7, #14]
 80050fc:	f023 030f 	bic.w	r3, r3, #15
 8005100:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	b29a      	uxth	r2, r3
 8005106:	89fb      	ldrh	r3, [r7, #14]
 8005108:	4313      	orrs	r3, r2
 800510a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	89fa      	ldrh	r2, [r7, #14]
 8005112:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f042 0201 	orr.w	r2, r2, #1
 8005122:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2220      	movs	r2, #32
 8005128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800512c:	2300      	movs	r3, #0
 800512e:	e000      	b.n	8005132 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005130:	2302      	movs	r3, #2
  }
}
 8005132:	4618      	mov	r0, r3
 8005134:	3714      	adds	r7, #20
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
	...

08005140 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e0bf      	b.n	80052d2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d106      	bne.n	800516c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f7fd fc84 	bl	8002a74 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	699a      	ldr	r2, [r3, #24]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8005182:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	6999      	ldr	r1, [r3, #24]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005198:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	430a      	orrs	r2, r1
 80051a6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6899      	ldr	r1, [r3, #8]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	4b4a      	ldr	r3, [pc, #296]	@ (80052dc <HAL_LTDC_Init+0x19c>)
 80051b4:	400b      	ands	r3, r1
 80051b6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	695b      	ldr	r3, [r3, #20]
 80051bc:	041b      	lsls	r3, r3, #16
 80051be:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	6899      	ldr	r1, [r3, #8]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	699a      	ldr	r2, [r3, #24]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	431a      	orrs	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	430a      	orrs	r2, r1
 80051d4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68d9      	ldr	r1, [r3, #12]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	4b3e      	ldr	r3, [pc, #248]	@ (80052dc <HAL_LTDC_Init+0x19c>)
 80051e2:	400b      	ands	r3, r1
 80051e4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	69db      	ldr	r3, [r3, #28]
 80051ea:	041b      	lsls	r3, r3, #16
 80051ec:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68d9      	ldr	r1, [r3, #12]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a1a      	ldr	r2, [r3, #32]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	431a      	orrs	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	430a      	orrs	r2, r1
 8005202:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	6919      	ldr	r1, [r3, #16]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	4b33      	ldr	r3, [pc, #204]	@ (80052dc <HAL_LTDC_Init+0x19c>)
 8005210:	400b      	ands	r3, r1
 8005212:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005218:	041b      	lsls	r3, r3, #16
 800521a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6919      	ldr	r1, [r3, #16]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	431a      	orrs	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	430a      	orrs	r2, r1
 8005230:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	6959      	ldr	r1, [r3, #20]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	4b27      	ldr	r3, [pc, #156]	@ (80052dc <HAL_LTDC_Init+0x19c>)
 800523e:	400b      	ands	r3, r1
 8005240:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005246:	041b      	lsls	r3, r3, #16
 8005248:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	6959      	ldr	r1, [r3, #20]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	431a      	orrs	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	430a      	orrs	r2, r1
 800525e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005266:	021b      	lsls	r3, r3, #8
 8005268:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005270:	041b      	lsls	r3, r3, #16
 8005272:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8005282:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	4313      	orrs	r3, r2
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8005296:	431a      	orrs	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	430a      	orrs	r2, r1
 800529e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f042 0206 	orr.w	r2, r2, #6
 80052ae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	699a      	ldr	r2, [r3, #24]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f042 0201 	orr.w	r2, r2, #1
 80052be:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3710      	adds	r7, #16
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	f000f800 	.word	0xf000f800

080052e0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80052e0:	b5b0      	push	{r4, r5, r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d101      	bne.n	80052fa <HAL_LTDC_ConfigLayer+0x1a>
 80052f6:	2302      	movs	r3, #2
 80052f8:	e02c      	b.n	8005354 <HAL_LTDC_ConfigLayer+0x74>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2202      	movs	r2, #2
 8005306:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2134      	movs	r1, #52	@ 0x34
 8005310:	fb01 f303 	mul.w	r3, r1, r3
 8005314:	4413      	add	r3, r2
 8005316:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	4614      	mov	r4, r2
 800531e:	461d      	mov	r5, r3
 8005320:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005322:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005324:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005326:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005328:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800532a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800532c:	682b      	ldr	r3, [r5, #0]
 800532e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	68b9      	ldr	r1, [r7, #8]
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f000 f811 	bl	800535c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2201      	movs	r2, #1
 8005340:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2201      	movs	r2, #1
 8005346:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3710      	adds	r7, #16
 8005358:	46bd      	mov	sp, r7
 800535a:	bdb0      	pop	{r4, r5, r7, pc}

0800535c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800535c:	b480      	push	{r7}
 800535e:	b089      	sub	sp, #36	@ 0x24
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	685a      	ldr	r2, [r3, #4]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	0c1b      	lsrs	r3, r3, #16
 8005374:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005378:	4413      	add	r3, r2
 800537a:	041b      	lsls	r3, r3, #16
 800537c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	461a      	mov	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	01db      	lsls	r3, r3, #7
 8005388:	4413      	add	r3, r2
 800538a:	3384      	adds	r3, #132	@ 0x84
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	6812      	ldr	r2, [r2, #0]
 8005392:	4611      	mov	r1, r2
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	01d2      	lsls	r2, r2, #7
 8005398:	440a      	add	r2, r1
 800539a:	3284      	adds	r2, #132	@ 0x84
 800539c:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80053a0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	0c1b      	lsrs	r3, r3, #16
 80053ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80053b2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80053b4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4619      	mov	r1, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	01db      	lsls	r3, r3, #7
 80053c0:	440b      	add	r3, r1
 80053c2:	3384      	adds	r3, #132	@ 0x84
 80053c4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80053ca:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	68da      	ldr	r2, [r3, #12]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053da:	4413      	add	r3, r2
 80053dc:	041b      	lsls	r3, r3, #16
 80053de:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	461a      	mov	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	01db      	lsls	r3, r3, #7
 80053ea:	4413      	add	r3, r2
 80053ec:	3384      	adds	r3, #132	@ 0x84
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	6812      	ldr	r2, [r2, #0]
 80053f4:	4611      	mov	r1, r2
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	01d2      	lsls	r2, r2, #7
 80053fa:	440a      	add	r2, r1
 80053fc:	3284      	adds	r2, #132	@ 0x84
 80053fe:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005402:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	689a      	ldr	r2, [r3, #8]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005412:	4413      	add	r3, r2
 8005414:	1c5a      	adds	r2, r3, #1
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4619      	mov	r1, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	01db      	lsls	r3, r3, #7
 8005420:	440b      	add	r3, r1
 8005422:	3384      	adds	r3, #132	@ 0x84
 8005424:	4619      	mov	r1, r3
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	4313      	orrs	r3, r2
 800542a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	461a      	mov	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	01db      	lsls	r3, r3, #7
 8005436:	4413      	add	r3, r2
 8005438:	3384      	adds	r3, #132	@ 0x84
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	6812      	ldr	r2, [r2, #0]
 8005440:	4611      	mov	r1, r2
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	01d2      	lsls	r2, r2, #7
 8005446:	440a      	add	r2, r1
 8005448:	3284      	adds	r2, #132	@ 0x84
 800544a:	f023 0307 	bic.w	r3, r3, #7
 800544e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	461a      	mov	r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	01db      	lsls	r3, r3, #7
 800545a:	4413      	add	r3, r2
 800545c:	3384      	adds	r3, #132	@ 0x84
 800545e:	461a      	mov	r2, r3
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800546c:	021b      	lsls	r3, r3, #8
 800546e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005476:	041b      	lsls	r3, r3, #16
 8005478:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	061b      	lsls	r3, r3, #24
 8005480:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	461a      	mov	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	01db      	lsls	r3, r3, #7
 800548c:	4413      	add	r3, r2
 800548e:	3384      	adds	r3, #132	@ 0x84
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	461a      	mov	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	01db      	lsls	r3, r3, #7
 800549c:	4413      	add	r3, r2
 800549e:	3384      	adds	r3, #132	@ 0x84
 80054a0:	461a      	mov	r2, r3
 80054a2:	2300      	movs	r3, #0
 80054a4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80054ac:	461a      	mov	r2, r3
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	431a      	orrs	r2, r3
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	431a      	orrs	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4619      	mov	r1, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	01db      	lsls	r3, r3, #7
 80054c0:	440b      	add	r3, r1
 80054c2:	3384      	adds	r3, #132	@ 0x84
 80054c4:	4619      	mov	r1, r3
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	461a      	mov	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	01db      	lsls	r3, r3, #7
 80054d6:	4413      	add	r3, r2
 80054d8:	3384      	adds	r3, #132	@ 0x84
 80054da:	695b      	ldr	r3, [r3, #20]
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	6812      	ldr	r2, [r2, #0]
 80054e0:	4611      	mov	r1, r2
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	01d2      	lsls	r2, r2, #7
 80054e6:	440a      	add	r2, r1
 80054e8:	3284      	adds	r2, #132	@ 0x84
 80054ea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80054ee:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	461a      	mov	r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	01db      	lsls	r3, r3, #7
 80054fa:	4413      	add	r3, r2
 80054fc:	3384      	adds	r3, #132	@ 0x84
 80054fe:	461a      	mov	r2, r3
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	695b      	ldr	r3, [r3, #20]
 8005504:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	461a      	mov	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	01db      	lsls	r3, r3, #7
 8005510:	4413      	add	r3, r2
 8005512:	3384      	adds	r3, #132	@ 0x84
 8005514:	69db      	ldr	r3, [r3, #28]
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	6812      	ldr	r2, [r2, #0]
 800551a:	4611      	mov	r1, r2
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	01d2      	lsls	r2, r2, #7
 8005520:	440a      	add	r2, r1
 8005522:	3284      	adds	r2, #132	@ 0x84
 8005524:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005528:	f023 0307 	bic.w	r3, r3, #7
 800552c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	69da      	ldr	r2, [r3, #28]
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	68f9      	ldr	r1, [r7, #12]
 8005538:	6809      	ldr	r1, [r1, #0]
 800553a:	4608      	mov	r0, r1
 800553c:	6879      	ldr	r1, [r7, #4]
 800553e:	01c9      	lsls	r1, r1, #7
 8005540:	4401      	add	r1, r0
 8005542:	3184      	adds	r1, #132	@ 0x84
 8005544:	4313      	orrs	r3, r2
 8005546:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	461a      	mov	r2, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	01db      	lsls	r3, r3, #7
 8005552:	4413      	add	r3, r2
 8005554:	3384      	adds	r3, #132	@ 0x84
 8005556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	461a      	mov	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	01db      	lsls	r3, r3, #7
 8005562:	4413      	add	r3, r2
 8005564:	3384      	adds	r3, #132	@ 0x84
 8005566:	461a      	mov	r2, r3
 8005568:	2300      	movs	r3, #0
 800556a:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	461a      	mov	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	01db      	lsls	r3, r3, #7
 8005576:	4413      	add	r3, r2
 8005578:	3384      	adds	r3, #132	@ 0x84
 800557a:	461a      	mov	r2, r3
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005580:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d102      	bne.n	8005590 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800558a:	2304      	movs	r3, #4
 800558c:	61fb      	str	r3, [r7, #28]
 800558e:	e01b      	b.n	80055c8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d102      	bne.n	800559e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005598:	2303      	movs	r3, #3
 800559a:	61fb      	str	r3, [r7, #28]
 800559c:	e014      	b.n	80055c8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	2b04      	cmp	r3, #4
 80055a4:	d00b      	beq.n	80055be <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d007      	beq.n	80055be <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80055b2:	2b03      	cmp	r3, #3
 80055b4:	d003      	beq.n	80055be <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80055ba:	2b07      	cmp	r3, #7
 80055bc:	d102      	bne.n	80055c4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80055be:	2302      	movs	r3, #2
 80055c0:	61fb      	str	r3, [r7, #28]
 80055c2:	e001      	b.n	80055c8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80055c4:	2301      	movs	r3, #1
 80055c6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	461a      	mov	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	01db      	lsls	r3, r3, #7
 80055d2:	4413      	add	r3, r2
 80055d4:	3384      	adds	r3, #132	@ 0x84
 80055d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	6812      	ldr	r2, [r2, #0]
 80055dc:	4611      	mov	r1, r2
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	01d2      	lsls	r2, r2, #7
 80055e2:	440a      	add	r2, r1
 80055e4:	3284      	adds	r2, #132	@ 0x84
 80055e6:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80055ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f0:	69fa      	ldr	r2, [r7, #28]
 80055f2:	fb02 f303 	mul.w	r3, r2, r3
 80055f6:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	6859      	ldr	r1, [r3, #4]
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	1acb      	subs	r3, r1, r3
 8005602:	69f9      	ldr	r1, [r7, #28]
 8005604:	fb01 f303 	mul.w	r3, r1, r3
 8005608:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800560a:	68f9      	ldr	r1, [r7, #12]
 800560c:	6809      	ldr	r1, [r1, #0]
 800560e:	4608      	mov	r0, r1
 8005610:	6879      	ldr	r1, [r7, #4]
 8005612:	01c9      	lsls	r1, r1, #7
 8005614:	4401      	add	r1, r0
 8005616:	3184      	adds	r1, #132	@ 0x84
 8005618:	4313      	orrs	r3, r2
 800561a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	461a      	mov	r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	01db      	lsls	r3, r3, #7
 8005626:	4413      	add	r3, r2
 8005628:	3384      	adds	r3, #132	@ 0x84
 800562a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	6812      	ldr	r2, [r2, #0]
 8005630:	4611      	mov	r1, r2
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	01d2      	lsls	r2, r2, #7
 8005636:	440a      	add	r2, r1
 8005638:	3284      	adds	r2, #132	@ 0x84
 800563a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800563e:	f023 0307 	bic.w	r3, r3, #7
 8005642:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	461a      	mov	r2, r3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	01db      	lsls	r3, r3, #7
 800564e:	4413      	add	r3, r2
 8005650:	3384      	adds	r3, #132	@ 0x84
 8005652:	461a      	mov	r2, r3
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005658:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	461a      	mov	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	01db      	lsls	r3, r3, #7
 8005664:	4413      	add	r3, r2
 8005666:	3384      	adds	r3, #132	@ 0x84
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	6812      	ldr	r2, [r2, #0]
 800566e:	4611      	mov	r1, r2
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	01d2      	lsls	r2, r2, #7
 8005674:	440a      	add	r2, r1
 8005676:	3284      	adds	r2, #132	@ 0x84
 8005678:	f043 0301 	orr.w	r3, r3, #1
 800567c:	6013      	str	r3, [r2, #0]
}
 800567e:	bf00      	nop
 8005680:	3724      	adds	r7, #36	@ 0x24
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
	...

0800568c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d101      	bne.n	800569e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e267      	b.n	8005b6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0301 	and.w	r3, r3, #1
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d075      	beq.n	8005796 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80056aa:	4b88      	ldr	r3, [pc, #544]	@ (80058cc <HAL_RCC_OscConfig+0x240>)
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f003 030c 	and.w	r3, r3, #12
 80056b2:	2b04      	cmp	r3, #4
 80056b4:	d00c      	beq.n	80056d0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056b6:	4b85      	ldr	r3, [pc, #532]	@ (80058cc <HAL_RCC_OscConfig+0x240>)
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80056be:	2b08      	cmp	r3, #8
 80056c0:	d112      	bne.n	80056e8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056c2:	4b82      	ldr	r3, [pc, #520]	@ (80058cc <HAL_RCC_OscConfig+0x240>)
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056ce:	d10b      	bne.n	80056e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056d0:	4b7e      	ldr	r3, [pc, #504]	@ (80058cc <HAL_RCC_OscConfig+0x240>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d05b      	beq.n	8005794 <HAL_RCC_OscConfig+0x108>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d157      	bne.n	8005794 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e242      	b.n	8005b6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056f0:	d106      	bne.n	8005700 <HAL_RCC_OscConfig+0x74>
 80056f2:	4b76      	ldr	r3, [pc, #472]	@ (80058cc <HAL_RCC_OscConfig+0x240>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a75      	ldr	r2, [pc, #468]	@ (80058cc <HAL_RCC_OscConfig+0x240>)
 80056f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056fc:	6013      	str	r3, [r2, #0]
 80056fe:	e01d      	b.n	800573c <HAL_RCC_OscConfig+0xb0>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005708:	d10c      	bne.n	8005724 <HAL_RCC_OscConfig+0x98>
 800570a:	4b70      	ldr	r3, [pc, #448]	@ (80058cc <HAL_RCC_OscConfig+0x240>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a6f      	ldr	r2, [pc, #444]	@ (80058cc <HAL_RCC_OscConfig+0x240>)
 8005710:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005714:	6013      	str	r3, [r2, #0]
 8005716:	4b6d      	ldr	r3, [pc, #436]	@ (80058cc <HAL_RCC_OscConfig+0x240>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a6c      	ldr	r2, [pc, #432]	@ (80058cc <HAL_RCC_OscConfig+0x240>)
 800571c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005720:	6013      	str	r3, [r2, #0]
 8005722:	e00b      	b.n	800573c <HAL_RCC_OscConfig+0xb0>
 8005724:	4b69      	ldr	r3, [pc, #420]	@ (80058cc <HAL_RCC_OscConfig+0x240>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a68      	ldr	r2, [pc, #416]	@ (80058cc <HAL_RCC_OscConfig+0x240>)
 800572a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800572e:	6013      	str	r3, [r2, #0]
 8005730:	4b66      	ldr	r3, [pc, #408]	@ (80058cc <HAL_RCC_OscConfig+0x240>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a65      	ldr	r2, [pc, #404]	@ (80058cc <HAL_RCC_OscConfig+0x240>)
 8005736:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800573a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d013      	beq.n	800576c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005744:	f7fe f85c 	bl	8003800 <HAL_GetTick>
 8005748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800574a:	e008      	b.n	800575e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800574c:	f7fe f858 	bl	8003800 <HAL_GetTick>
 8005750:	4602      	mov	r2, r0
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	2b64      	cmp	r3, #100	@ 0x64
 8005758:	d901      	bls.n	800575e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e207      	b.n	8005b6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800575e:	4b5b      	ldr	r3, [pc, #364]	@ (80058cc <HAL_RCC_OscConfig+0x240>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d0f0      	beq.n	800574c <HAL_RCC_OscConfig+0xc0>
 800576a:	e014      	b.n	8005796 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800576c:	f7fe f848 	bl	8003800 <HAL_GetTick>
 8005770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005772:	e008      	b.n	8005786 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005774:	f7fe f844 	bl	8003800 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	2b64      	cmp	r3, #100	@ 0x64
 8005780:	d901      	bls.n	8005786 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e1f3      	b.n	8005b6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005786:	4b51      	ldr	r3, [pc, #324]	@ (80058cc <HAL_RCC_OscConfig+0x240>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1f0      	bne.n	8005774 <HAL_RCC_OscConfig+0xe8>
 8005792:	e000      	b.n	8005796 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005794:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0302 	and.w	r3, r3, #2
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d063      	beq.n	800586a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80057a2:	4b4a      	ldr	r3, [pc, #296]	@ (80058cc <HAL_RCC_OscConfig+0x240>)
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f003 030c 	and.w	r3, r3, #12
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00b      	beq.n	80057c6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057ae:	4b47      	ldr	r3, [pc, #284]	@ (80058cc <HAL_RCC_OscConfig+0x240>)
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80057b6:	2b08      	cmp	r3, #8
 80057b8:	d11c      	bne.n	80057f4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057ba:	4b44      	ldr	r3, [pc, #272]	@ (80058cc <HAL_RCC_OscConfig+0x240>)
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d116      	bne.n	80057f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057c6:	4b41      	ldr	r3, [pc, #260]	@ (80058cc <HAL_RCC_OscConfig+0x240>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d005      	beq.n	80057de <HAL_RCC_OscConfig+0x152>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d001      	beq.n	80057de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e1c7      	b.n	8005b6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057de:	4b3b      	ldr	r3, [pc, #236]	@ (80058cc <HAL_RCC_OscConfig+0x240>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	00db      	lsls	r3, r3, #3
 80057ec:	4937      	ldr	r1, [pc, #220]	@ (80058cc <HAL_RCC_OscConfig+0x240>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057f2:	e03a      	b.n	800586a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d020      	beq.n	800583e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057fc:	4b34      	ldr	r3, [pc, #208]	@ (80058d0 <HAL_RCC_OscConfig+0x244>)
 80057fe:	2201      	movs	r2, #1
 8005800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005802:	f7fd fffd 	bl	8003800 <HAL_GetTick>
 8005806:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005808:	e008      	b.n	800581c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800580a:	f7fd fff9 	bl	8003800 <HAL_GetTick>
 800580e:	4602      	mov	r2, r0
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	2b02      	cmp	r3, #2
 8005816:	d901      	bls.n	800581c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e1a8      	b.n	8005b6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800581c:	4b2b      	ldr	r3, [pc, #172]	@ (80058cc <HAL_RCC_OscConfig+0x240>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0302 	and.w	r3, r3, #2
 8005824:	2b00      	cmp	r3, #0
 8005826:	d0f0      	beq.n	800580a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005828:	4b28      	ldr	r3, [pc, #160]	@ (80058cc <HAL_RCC_OscConfig+0x240>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	00db      	lsls	r3, r3, #3
 8005836:	4925      	ldr	r1, [pc, #148]	@ (80058cc <HAL_RCC_OscConfig+0x240>)
 8005838:	4313      	orrs	r3, r2
 800583a:	600b      	str	r3, [r1, #0]
 800583c:	e015      	b.n	800586a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800583e:	4b24      	ldr	r3, [pc, #144]	@ (80058d0 <HAL_RCC_OscConfig+0x244>)
 8005840:	2200      	movs	r2, #0
 8005842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005844:	f7fd ffdc 	bl	8003800 <HAL_GetTick>
 8005848:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800584a:	e008      	b.n	800585e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800584c:	f7fd ffd8 	bl	8003800 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	2b02      	cmp	r3, #2
 8005858:	d901      	bls.n	800585e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e187      	b.n	8005b6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800585e:	4b1b      	ldr	r3, [pc, #108]	@ (80058cc <HAL_RCC_OscConfig+0x240>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0302 	and.w	r3, r3, #2
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1f0      	bne.n	800584c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 0308 	and.w	r3, r3, #8
 8005872:	2b00      	cmp	r3, #0
 8005874:	d036      	beq.n	80058e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d016      	beq.n	80058ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800587e:	4b15      	ldr	r3, [pc, #84]	@ (80058d4 <HAL_RCC_OscConfig+0x248>)
 8005880:	2201      	movs	r2, #1
 8005882:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005884:	f7fd ffbc 	bl	8003800 <HAL_GetTick>
 8005888:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800588a:	e008      	b.n	800589e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800588c:	f7fd ffb8 	bl	8003800 <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	2b02      	cmp	r3, #2
 8005898:	d901      	bls.n	800589e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	e167      	b.n	8005b6e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800589e:	4b0b      	ldr	r3, [pc, #44]	@ (80058cc <HAL_RCC_OscConfig+0x240>)
 80058a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058a2:	f003 0302 	and.w	r3, r3, #2
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d0f0      	beq.n	800588c <HAL_RCC_OscConfig+0x200>
 80058aa:	e01b      	b.n	80058e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058ac:	4b09      	ldr	r3, [pc, #36]	@ (80058d4 <HAL_RCC_OscConfig+0x248>)
 80058ae:	2200      	movs	r2, #0
 80058b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058b2:	f7fd ffa5 	bl	8003800 <HAL_GetTick>
 80058b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058b8:	e00e      	b.n	80058d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058ba:	f7fd ffa1 	bl	8003800 <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d907      	bls.n	80058d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e150      	b.n	8005b6e <HAL_RCC_OscConfig+0x4e2>
 80058cc:	40023800 	.word	0x40023800
 80058d0:	42470000 	.word	0x42470000
 80058d4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058d8:	4b88      	ldr	r3, [pc, #544]	@ (8005afc <HAL_RCC_OscConfig+0x470>)
 80058da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058dc:	f003 0302 	and.w	r3, r3, #2
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1ea      	bne.n	80058ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0304 	and.w	r3, r3, #4
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f000 8097 	beq.w	8005a20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058f2:	2300      	movs	r3, #0
 80058f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058f6:	4b81      	ldr	r3, [pc, #516]	@ (8005afc <HAL_RCC_OscConfig+0x470>)
 80058f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d10f      	bne.n	8005922 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005902:	2300      	movs	r3, #0
 8005904:	60bb      	str	r3, [r7, #8]
 8005906:	4b7d      	ldr	r3, [pc, #500]	@ (8005afc <HAL_RCC_OscConfig+0x470>)
 8005908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800590a:	4a7c      	ldr	r2, [pc, #496]	@ (8005afc <HAL_RCC_OscConfig+0x470>)
 800590c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005910:	6413      	str	r3, [r2, #64]	@ 0x40
 8005912:	4b7a      	ldr	r3, [pc, #488]	@ (8005afc <HAL_RCC_OscConfig+0x470>)
 8005914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005916:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800591a:	60bb      	str	r3, [r7, #8]
 800591c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800591e:	2301      	movs	r3, #1
 8005920:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005922:	4b77      	ldr	r3, [pc, #476]	@ (8005b00 <HAL_RCC_OscConfig+0x474>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800592a:	2b00      	cmp	r3, #0
 800592c:	d118      	bne.n	8005960 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800592e:	4b74      	ldr	r3, [pc, #464]	@ (8005b00 <HAL_RCC_OscConfig+0x474>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a73      	ldr	r2, [pc, #460]	@ (8005b00 <HAL_RCC_OscConfig+0x474>)
 8005934:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005938:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800593a:	f7fd ff61 	bl	8003800 <HAL_GetTick>
 800593e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005940:	e008      	b.n	8005954 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005942:	f7fd ff5d 	bl	8003800 <HAL_GetTick>
 8005946:	4602      	mov	r2, r0
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	2b02      	cmp	r3, #2
 800594e:	d901      	bls.n	8005954 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e10c      	b.n	8005b6e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005954:	4b6a      	ldr	r3, [pc, #424]	@ (8005b00 <HAL_RCC_OscConfig+0x474>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800595c:	2b00      	cmp	r3, #0
 800595e:	d0f0      	beq.n	8005942 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d106      	bne.n	8005976 <HAL_RCC_OscConfig+0x2ea>
 8005968:	4b64      	ldr	r3, [pc, #400]	@ (8005afc <HAL_RCC_OscConfig+0x470>)
 800596a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800596c:	4a63      	ldr	r2, [pc, #396]	@ (8005afc <HAL_RCC_OscConfig+0x470>)
 800596e:	f043 0301 	orr.w	r3, r3, #1
 8005972:	6713      	str	r3, [r2, #112]	@ 0x70
 8005974:	e01c      	b.n	80059b0 <HAL_RCC_OscConfig+0x324>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	2b05      	cmp	r3, #5
 800597c:	d10c      	bne.n	8005998 <HAL_RCC_OscConfig+0x30c>
 800597e:	4b5f      	ldr	r3, [pc, #380]	@ (8005afc <HAL_RCC_OscConfig+0x470>)
 8005980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005982:	4a5e      	ldr	r2, [pc, #376]	@ (8005afc <HAL_RCC_OscConfig+0x470>)
 8005984:	f043 0304 	orr.w	r3, r3, #4
 8005988:	6713      	str	r3, [r2, #112]	@ 0x70
 800598a:	4b5c      	ldr	r3, [pc, #368]	@ (8005afc <HAL_RCC_OscConfig+0x470>)
 800598c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800598e:	4a5b      	ldr	r2, [pc, #364]	@ (8005afc <HAL_RCC_OscConfig+0x470>)
 8005990:	f043 0301 	orr.w	r3, r3, #1
 8005994:	6713      	str	r3, [r2, #112]	@ 0x70
 8005996:	e00b      	b.n	80059b0 <HAL_RCC_OscConfig+0x324>
 8005998:	4b58      	ldr	r3, [pc, #352]	@ (8005afc <HAL_RCC_OscConfig+0x470>)
 800599a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800599c:	4a57      	ldr	r2, [pc, #348]	@ (8005afc <HAL_RCC_OscConfig+0x470>)
 800599e:	f023 0301 	bic.w	r3, r3, #1
 80059a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80059a4:	4b55      	ldr	r3, [pc, #340]	@ (8005afc <HAL_RCC_OscConfig+0x470>)
 80059a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059a8:	4a54      	ldr	r2, [pc, #336]	@ (8005afc <HAL_RCC_OscConfig+0x470>)
 80059aa:	f023 0304 	bic.w	r3, r3, #4
 80059ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d015      	beq.n	80059e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059b8:	f7fd ff22 	bl	8003800 <HAL_GetTick>
 80059bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059be:	e00a      	b.n	80059d6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059c0:	f7fd ff1e 	bl	8003800 <HAL_GetTick>
 80059c4:	4602      	mov	r2, r0
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d901      	bls.n	80059d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e0cb      	b.n	8005b6e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059d6:	4b49      	ldr	r3, [pc, #292]	@ (8005afc <HAL_RCC_OscConfig+0x470>)
 80059d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059da:	f003 0302 	and.w	r3, r3, #2
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d0ee      	beq.n	80059c0 <HAL_RCC_OscConfig+0x334>
 80059e2:	e014      	b.n	8005a0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059e4:	f7fd ff0c 	bl	8003800 <HAL_GetTick>
 80059e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059ea:	e00a      	b.n	8005a02 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059ec:	f7fd ff08 	bl	8003800 <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d901      	bls.n	8005a02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e0b5      	b.n	8005b6e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a02:	4b3e      	ldr	r3, [pc, #248]	@ (8005afc <HAL_RCC_OscConfig+0x470>)
 8005a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a06:	f003 0302 	and.w	r3, r3, #2
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1ee      	bne.n	80059ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005a0e:	7dfb      	ldrb	r3, [r7, #23]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d105      	bne.n	8005a20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a14:	4b39      	ldr	r3, [pc, #228]	@ (8005afc <HAL_RCC_OscConfig+0x470>)
 8005a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a18:	4a38      	ldr	r2, [pc, #224]	@ (8005afc <HAL_RCC_OscConfig+0x470>)
 8005a1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a1e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	699b      	ldr	r3, [r3, #24]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f000 80a1 	beq.w	8005b6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a2a:	4b34      	ldr	r3, [pc, #208]	@ (8005afc <HAL_RCC_OscConfig+0x470>)
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f003 030c 	and.w	r3, r3, #12
 8005a32:	2b08      	cmp	r3, #8
 8005a34:	d05c      	beq.n	8005af0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d141      	bne.n	8005ac2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a3e:	4b31      	ldr	r3, [pc, #196]	@ (8005b04 <HAL_RCC_OscConfig+0x478>)
 8005a40:	2200      	movs	r2, #0
 8005a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a44:	f7fd fedc 	bl	8003800 <HAL_GetTick>
 8005a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a4a:	e008      	b.n	8005a5e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a4c:	f7fd fed8 	bl	8003800 <HAL_GetTick>
 8005a50:	4602      	mov	r2, r0
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d901      	bls.n	8005a5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e087      	b.n	8005b6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a5e:	4b27      	ldr	r3, [pc, #156]	@ (8005afc <HAL_RCC_OscConfig+0x470>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1f0      	bne.n	8005a4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	69da      	ldr	r2, [r3, #28]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a1b      	ldr	r3, [r3, #32]
 8005a72:	431a      	orrs	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a78:	019b      	lsls	r3, r3, #6
 8005a7a:	431a      	orrs	r2, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a80:	085b      	lsrs	r3, r3, #1
 8005a82:	3b01      	subs	r3, #1
 8005a84:	041b      	lsls	r3, r3, #16
 8005a86:	431a      	orrs	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a8c:	061b      	lsls	r3, r3, #24
 8005a8e:	491b      	ldr	r1, [pc, #108]	@ (8005afc <HAL_RCC_OscConfig+0x470>)
 8005a90:	4313      	orrs	r3, r2
 8005a92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a94:	4b1b      	ldr	r3, [pc, #108]	@ (8005b04 <HAL_RCC_OscConfig+0x478>)
 8005a96:	2201      	movs	r2, #1
 8005a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a9a:	f7fd feb1 	bl	8003800 <HAL_GetTick>
 8005a9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005aa0:	e008      	b.n	8005ab4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005aa2:	f7fd fead 	bl	8003800 <HAL_GetTick>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	d901      	bls.n	8005ab4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	e05c      	b.n	8005b6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ab4:	4b11      	ldr	r3, [pc, #68]	@ (8005afc <HAL_RCC_OscConfig+0x470>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d0f0      	beq.n	8005aa2 <HAL_RCC_OscConfig+0x416>
 8005ac0:	e054      	b.n	8005b6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ac2:	4b10      	ldr	r3, [pc, #64]	@ (8005b04 <HAL_RCC_OscConfig+0x478>)
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ac8:	f7fd fe9a 	bl	8003800 <HAL_GetTick>
 8005acc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ace:	e008      	b.n	8005ae2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ad0:	f7fd fe96 	bl	8003800 <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d901      	bls.n	8005ae2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e045      	b.n	8005b6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ae2:	4b06      	ldr	r3, [pc, #24]	@ (8005afc <HAL_RCC_OscConfig+0x470>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1f0      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x444>
 8005aee:	e03d      	b.n	8005b6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	699b      	ldr	r3, [r3, #24]
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d107      	bne.n	8005b08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e038      	b.n	8005b6e <HAL_RCC_OscConfig+0x4e2>
 8005afc:	40023800 	.word	0x40023800
 8005b00:	40007000 	.word	0x40007000
 8005b04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b08:	4b1b      	ldr	r3, [pc, #108]	@ (8005b78 <HAL_RCC_OscConfig+0x4ec>)
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d028      	beq.n	8005b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d121      	bne.n	8005b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d11a      	bne.n	8005b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005b38:	4013      	ands	r3, r2
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005b3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d111      	bne.n	8005b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b4e:	085b      	lsrs	r3, r3, #1
 8005b50:	3b01      	subs	r3, #1
 8005b52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d107      	bne.n	8005b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d001      	beq.n	8005b6c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e000      	b.n	8005b6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3718      	adds	r7, #24
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	40023800 	.word	0x40023800

08005b7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d101      	bne.n	8005b90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e0cc      	b.n	8005d2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b90:	4b68      	ldr	r3, [pc, #416]	@ (8005d34 <HAL_RCC_ClockConfig+0x1b8>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 030f 	and.w	r3, r3, #15
 8005b98:	683a      	ldr	r2, [r7, #0]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d90c      	bls.n	8005bb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b9e:	4b65      	ldr	r3, [pc, #404]	@ (8005d34 <HAL_RCC_ClockConfig+0x1b8>)
 8005ba0:	683a      	ldr	r2, [r7, #0]
 8005ba2:	b2d2      	uxtb	r2, r2
 8005ba4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ba6:	4b63      	ldr	r3, [pc, #396]	@ (8005d34 <HAL_RCC_ClockConfig+0x1b8>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 030f 	and.w	r3, r3, #15
 8005bae:	683a      	ldr	r2, [r7, #0]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d001      	beq.n	8005bb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e0b8      	b.n	8005d2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0302 	and.w	r3, r3, #2
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d020      	beq.n	8005c06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0304 	and.w	r3, r3, #4
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d005      	beq.n	8005bdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005bd0:	4b59      	ldr	r3, [pc, #356]	@ (8005d38 <HAL_RCC_ClockConfig+0x1bc>)
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	4a58      	ldr	r2, [pc, #352]	@ (8005d38 <HAL_RCC_ClockConfig+0x1bc>)
 8005bd6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005bda:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0308 	and.w	r3, r3, #8
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d005      	beq.n	8005bf4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005be8:	4b53      	ldr	r3, [pc, #332]	@ (8005d38 <HAL_RCC_ClockConfig+0x1bc>)
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	4a52      	ldr	r2, [pc, #328]	@ (8005d38 <HAL_RCC_ClockConfig+0x1bc>)
 8005bee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005bf2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bf4:	4b50      	ldr	r3, [pc, #320]	@ (8005d38 <HAL_RCC_ClockConfig+0x1bc>)
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	494d      	ldr	r1, [pc, #308]	@ (8005d38 <HAL_RCC_ClockConfig+0x1bc>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d044      	beq.n	8005c9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d107      	bne.n	8005c2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c1a:	4b47      	ldr	r3, [pc, #284]	@ (8005d38 <HAL_RCC_ClockConfig+0x1bc>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d119      	bne.n	8005c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e07f      	b.n	8005d2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d003      	beq.n	8005c3a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c36:	2b03      	cmp	r3, #3
 8005c38:	d107      	bne.n	8005c4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c3a:	4b3f      	ldr	r3, [pc, #252]	@ (8005d38 <HAL_RCC_ClockConfig+0x1bc>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d109      	bne.n	8005c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e06f      	b.n	8005d2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c4a:	4b3b      	ldr	r3, [pc, #236]	@ (8005d38 <HAL_RCC_ClockConfig+0x1bc>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 0302 	and.w	r3, r3, #2
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d101      	bne.n	8005c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e067      	b.n	8005d2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c5a:	4b37      	ldr	r3, [pc, #220]	@ (8005d38 <HAL_RCC_ClockConfig+0x1bc>)
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	f023 0203 	bic.w	r2, r3, #3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	4934      	ldr	r1, [pc, #208]	@ (8005d38 <HAL_RCC_ClockConfig+0x1bc>)
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c6c:	f7fd fdc8 	bl	8003800 <HAL_GetTick>
 8005c70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c72:	e00a      	b.n	8005c8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c74:	f7fd fdc4 	bl	8003800 <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d901      	bls.n	8005c8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e04f      	b.n	8005d2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c8a:	4b2b      	ldr	r3, [pc, #172]	@ (8005d38 <HAL_RCC_ClockConfig+0x1bc>)
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	f003 020c 	and.w	r2, r3, #12
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d1eb      	bne.n	8005c74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c9c:	4b25      	ldr	r3, [pc, #148]	@ (8005d34 <HAL_RCC_ClockConfig+0x1b8>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 030f 	and.w	r3, r3, #15
 8005ca4:	683a      	ldr	r2, [r7, #0]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d20c      	bcs.n	8005cc4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005caa:	4b22      	ldr	r3, [pc, #136]	@ (8005d34 <HAL_RCC_ClockConfig+0x1b8>)
 8005cac:	683a      	ldr	r2, [r7, #0]
 8005cae:	b2d2      	uxtb	r2, r2
 8005cb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cb2:	4b20      	ldr	r3, [pc, #128]	@ (8005d34 <HAL_RCC_ClockConfig+0x1b8>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 030f 	and.w	r3, r3, #15
 8005cba:	683a      	ldr	r2, [r7, #0]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d001      	beq.n	8005cc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e032      	b.n	8005d2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0304 	and.w	r3, r3, #4
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d008      	beq.n	8005ce2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005cd0:	4b19      	ldr	r3, [pc, #100]	@ (8005d38 <HAL_RCC_ClockConfig+0x1bc>)
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	4916      	ldr	r1, [pc, #88]	@ (8005d38 <HAL_RCC_ClockConfig+0x1bc>)
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0308 	and.w	r3, r3, #8
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d009      	beq.n	8005d02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005cee:	4b12      	ldr	r3, [pc, #72]	@ (8005d38 <HAL_RCC_ClockConfig+0x1bc>)
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	00db      	lsls	r3, r3, #3
 8005cfc:	490e      	ldr	r1, [pc, #56]	@ (8005d38 <HAL_RCC_ClockConfig+0x1bc>)
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005d02:	f000 f821 	bl	8005d48 <HAL_RCC_GetSysClockFreq>
 8005d06:	4602      	mov	r2, r0
 8005d08:	4b0b      	ldr	r3, [pc, #44]	@ (8005d38 <HAL_RCC_ClockConfig+0x1bc>)
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	091b      	lsrs	r3, r3, #4
 8005d0e:	f003 030f 	and.w	r3, r3, #15
 8005d12:	490a      	ldr	r1, [pc, #40]	@ (8005d3c <HAL_RCC_ClockConfig+0x1c0>)
 8005d14:	5ccb      	ldrb	r3, [r1, r3]
 8005d16:	fa22 f303 	lsr.w	r3, r2, r3
 8005d1a:	4a09      	ldr	r2, [pc, #36]	@ (8005d40 <HAL_RCC_ClockConfig+0x1c4>)
 8005d1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005d1e:	4b09      	ldr	r3, [pc, #36]	@ (8005d44 <HAL_RCC_ClockConfig+0x1c8>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7fd fd28 	bl	8003778 <HAL_InitTick>

  return HAL_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	40023c00 	.word	0x40023c00
 8005d38:	40023800 	.word	0x40023800
 8005d3c:	0800a0d4 	.word	0x0800a0d4
 8005d40:	20000018 	.word	0x20000018
 8005d44:	2000001c 	.word	0x2000001c

08005d48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d4c:	b094      	sub	sp, #80	@ 0x50
 8005d4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005d50:	2300      	movs	r3, #0
 8005d52:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005d54:	2300      	movs	r3, #0
 8005d56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d60:	4b79      	ldr	r3, [pc, #484]	@ (8005f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	f003 030c 	and.w	r3, r3, #12
 8005d68:	2b08      	cmp	r3, #8
 8005d6a:	d00d      	beq.n	8005d88 <HAL_RCC_GetSysClockFreq+0x40>
 8005d6c:	2b08      	cmp	r3, #8
 8005d6e:	f200 80e1 	bhi.w	8005f34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d002      	beq.n	8005d7c <HAL_RCC_GetSysClockFreq+0x34>
 8005d76:	2b04      	cmp	r3, #4
 8005d78:	d003      	beq.n	8005d82 <HAL_RCC_GetSysClockFreq+0x3a>
 8005d7a:	e0db      	b.n	8005f34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d7c:	4b73      	ldr	r3, [pc, #460]	@ (8005f4c <HAL_RCC_GetSysClockFreq+0x204>)
 8005d7e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005d80:	e0db      	b.n	8005f3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d82:	4b73      	ldr	r3, [pc, #460]	@ (8005f50 <HAL_RCC_GetSysClockFreq+0x208>)
 8005d84:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005d86:	e0d8      	b.n	8005f3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d88:	4b6f      	ldr	r3, [pc, #444]	@ (8005f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d90:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d92:	4b6d      	ldr	r3, [pc, #436]	@ (8005f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d063      	beq.n	8005e66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d9e:	4b6a      	ldr	r3, [pc, #424]	@ (8005f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	099b      	lsrs	r3, r3, #6
 8005da4:	2200      	movs	r2, #0
 8005da6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005da8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005db0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005db2:	2300      	movs	r3, #0
 8005db4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005db6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005dba:	4622      	mov	r2, r4
 8005dbc:	462b      	mov	r3, r5
 8005dbe:	f04f 0000 	mov.w	r0, #0
 8005dc2:	f04f 0100 	mov.w	r1, #0
 8005dc6:	0159      	lsls	r1, r3, #5
 8005dc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005dcc:	0150      	lsls	r0, r2, #5
 8005dce:	4602      	mov	r2, r0
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	4621      	mov	r1, r4
 8005dd4:	1a51      	subs	r1, r2, r1
 8005dd6:	6139      	str	r1, [r7, #16]
 8005dd8:	4629      	mov	r1, r5
 8005dda:	eb63 0301 	sbc.w	r3, r3, r1
 8005dde:	617b      	str	r3, [r7, #20]
 8005de0:	f04f 0200 	mov.w	r2, #0
 8005de4:	f04f 0300 	mov.w	r3, #0
 8005de8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005dec:	4659      	mov	r1, fp
 8005dee:	018b      	lsls	r3, r1, #6
 8005df0:	4651      	mov	r1, sl
 8005df2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005df6:	4651      	mov	r1, sl
 8005df8:	018a      	lsls	r2, r1, #6
 8005dfa:	4651      	mov	r1, sl
 8005dfc:	ebb2 0801 	subs.w	r8, r2, r1
 8005e00:	4659      	mov	r1, fp
 8005e02:	eb63 0901 	sbc.w	r9, r3, r1
 8005e06:	f04f 0200 	mov.w	r2, #0
 8005e0a:	f04f 0300 	mov.w	r3, #0
 8005e0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e1a:	4690      	mov	r8, r2
 8005e1c:	4699      	mov	r9, r3
 8005e1e:	4623      	mov	r3, r4
 8005e20:	eb18 0303 	adds.w	r3, r8, r3
 8005e24:	60bb      	str	r3, [r7, #8]
 8005e26:	462b      	mov	r3, r5
 8005e28:	eb49 0303 	adc.w	r3, r9, r3
 8005e2c:	60fb      	str	r3, [r7, #12]
 8005e2e:	f04f 0200 	mov.w	r2, #0
 8005e32:	f04f 0300 	mov.w	r3, #0
 8005e36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005e3a:	4629      	mov	r1, r5
 8005e3c:	024b      	lsls	r3, r1, #9
 8005e3e:	4621      	mov	r1, r4
 8005e40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005e44:	4621      	mov	r1, r4
 8005e46:	024a      	lsls	r2, r1, #9
 8005e48:	4610      	mov	r0, r2
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e4e:	2200      	movs	r2, #0
 8005e50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005e58:	f7fa fa22 	bl	80002a0 <__aeabi_uldivmod>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	460b      	mov	r3, r1
 8005e60:	4613      	mov	r3, r2
 8005e62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e64:	e058      	b.n	8005f18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e66:	4b38      	ldr	r3, [pc, #224]	@ (8005f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	099b      	lsrs	r3, r3, #6
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	4618      	mov	r0, r3
 8005e70:	4611      	mov	r1, r2
 8005e72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005e76:	623b      	str	r3, [r7, #32]
 8005e78:	2300      	movs	r3, #0
 8005e7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005e80:	4642      	mov	r2, r8
 8005e82:	464b      	mov	r3, r9
 8005e84:	f04f 0000 	mov.w	r0, #0
 8005e88:	f04f 0100 	mov.w	r1, #0
 8005e8c:	0159      	lsls	r1, r3, #5
 8005e8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e92:	0150      	lsls	r0, r2, #5
 8005e94:	4602      	mov	r2, r0
 8005e96:	460b      	mov	r3, r1
 8005e98:	4641      	mov	r1, r8
 8005e9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005e9e:	4649      	mov	r1, r9
 8005ea0:	eb63 0b01 	sbc.w	fp, r3, r1
 8005ea4:	f04f 0200 	mov.w	r2, #0
 8005ea8:	f04f 0300 	mov.w	r3, #0
 8005eac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005eb0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005eb4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005eb8:	ebb2 040a 	subs.w	r4, r2, sl
 8005ebc:	eb63 050b 	sbc.w	r5, r3, fp
 8005ec0:	f04f 0200 	mov.w	r2, #0
 8005ec4:	f04f 0300 	mov.w	r3, #0
 8005ec8:	00eb      	lsls	r3, r5, #3
 8005eca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ece:	00e2      	lsls	r2, r4, #3
 8005ed0:	4614      	mov	r4, r2
 8005ed2:	461d      	mov	r5, r3
 8005ed4:	4643      	mov	r3, r8
 8005ed6:	18e3      	adds	r3, r4, r3
 8005ed8:	603b      	str	r3, [r7, #0]
 8005eda:	464b      	mov	r3, r9
 8005edc:	eb45 0303 	adc.w	r3, r5, r3
 8005ee0:	607b      	str	r3, [r7, #4]
 8005ee2:	f04f 0200 	mov.w	r2, #0
 8005ee6:	f04f 0300 	mov.w	r3, #0
 8005eea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005eee:	4629      	mov	r1, r5
 8005ef0:	028b      	lsls	r3, r1, #10
 8005ef2:	4621      	mov	r1, r4
 8005ef4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ef8:	4621      	mov	r1, r4
 8005efa:	028a      	lsls	r2, r1, #10
 8005efc:	4610      	mov	r0, r2
 8005efe:	4619      	mov	r1, r3
 8005f00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f02:	2200      	movs	r2, #0
 8005f04:	61bb      	str	r3, [r7, #24]
 8005f06:	61fa      	str	r2, [r7, #28]
 8005f08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f0c:	f7fa f9c8 	bl	80002a0 <__aeabi_uldivmod>
 8005f10:	4602      	mov	r2, r0
 8005f12:	460b      	mov	r3, r1
 8005f14:	4613      	mov	r3, r2
 8005f16:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005f18:	4b0b      	ldr	r3, [pc, #44]	@ (8005f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	0c1b      	lsrs	r3, r3, #16
 8005f1e:	f003 0303 	and.w	r3, r3, #3
 8005f22:	3301      	adds	r3, #1
 8005f24:	005b      	lsls	r3, r3, #1
 8005f26:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005f28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005f2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f30:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005f32:	e002      	b.n	8005f3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f34:	4b05      	ldr	r3, [pc, #20]	@ (8005f4c <HAL_RCC_GetSysClockFreq+0x204>)
 8005f36:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005f38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3750      	adds	r7, #80	@ 0x50
 8005f40:	46bd      	mov	sp, r7
 8005f42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f46:	bf00      	nop
 8005f48:	40023800 	.word	0x40023800
 8005f4c:	00f42400 	.word	0x00f42400
 8005f50:	007a1200 	.word	0x007a1200

08005f54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f54:	b480      	push	{r7}
 8005f56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f58:	4b03      	ldr	r3, [pc, #12]	@ (8005f68 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop
 8005f68:	20000018 	.word	0x20000018

08005f6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005f70:	f7ff fff0 	bl	8005f54 <HAL_RCC_GetHCLKFreq>
 8005f74:	4602      	mov	r2, r0
 8005f76:	4b05      	ldr	r3, [pc, #20]	@ (8005f8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	0a9b      	lsrs	r3, r3, #10
 8005f7c:	f003 0307 	and.w	r3, r3, #7
 8005f80:	4903      	ldr	r1, [pc, #12]	@ (8005f90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f82:	5ccb      	ldrb	r3, [r1, r3]
 8005f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	40023800 	.word	0x40023800
 8005f90:	0800a0e4 	.word	0x0800a0e4

08005f94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b086      	sub	sp, #24
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 0301 	and.w	r3, r3, #1
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d10b      	bne.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d105      	bne.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d075      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005fc8:	4b91      	ldr	r3, [pc, #580]	@ (8006210 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005fca:	2200      	movs	r2, #0
 8005fcc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005fce:	f7fd fc17 	bl	8003800 <HAL_GetTick>
 8005fd2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005fd4:	e008      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005fd6:	f7fd fc13 	bl	8003800 <HAL_GetTick>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d901      	bls.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e189      	b.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005fe8:	4b8a      	ldr	r3, [pc, #552]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d1f0      	bne.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 0301 	and.w	r3, r3, #1
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d009      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	019a      	lsls	r2, r3, #6
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	071b      	lsls	r3, r3, #28
 800600c:	4981      	ldr	r1, [pc, #516]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800600e:	4313      	orrs	r3, r2
 8006010:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 0302 	and.w	r3, r3, #2
 800601c:	2b00      	cmp	r3, #0
 800601e:	d01f      	beq.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006020:	4b7c      	ldr	r3, [pc, #496]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006022:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006026:	0f1b      	lsrs	r3, r3, #28
 8006028:	f003 0307 	and.w	r3, r3, #7
 800602c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	019a      	lsls	r2, r3, #6
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	061b      	lsls	r3, r3, #24
 800603a:	431a      	orrs	r2, r3
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	071b      	lsls	r3, r3, #28
 8006040:	4974      	ldr	r1, [pc, #464]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006042:	4313      	orrs	r3, r2
 8006044:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006048:	4b72      	ldr	r3, [pc, #456]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800604a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800604e:	f023 021f 	bic.w	r2, r3, #31
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	69db      	ldr	r3, [r3, #28]
 8006056:	3b01      	subs	r3, #1
 8006058:	496e      	ldr	r1, [pc, #440]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800605a:	4313      	orrs	r3, r2
 800605c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00d      	beq.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	019a      	lsls	r2, r3, #6
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	061b      	lsls	r3, r3, #24
 8006078:	431a      	orrs	r2, r3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	071b      	lsls	r3, r3, #28
 8006080:	4964      	ldr	r1, [pc, #400]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006082:	4313      	orrs	r3, r2
 8006084:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006088:	4b61      	ldr	r3, [pc, #388]	@ (8006210 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800608a:	2201      	movs	r2, #1
 800608c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800608e:	f7fd fbb7 	bl	8003800 <HAL_GetTick>
 8006092:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006094:	e008      	b.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006096:	f7fd fbb3 	bl	8003800 <HAL_GetTick>
 800609a:	4602      	mov	r2, r0
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	d901      	bls.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e129      	b.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80060a8:	4b5a      	ldr	r3, [pc, #360]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d0f0      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0304 	and.w	r3, r3, #4
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d105      	bne.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d079      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80060cc:	4b52      	ldr	r3, [pc, #328]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80060ce:	2200      	movs	r2, #0
 80060d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80060d2:	f7fd fb95 	bl	8003800 <HAL_GetTick>
 80060d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80060d8:	e008      	b.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80060da:	f7fd fb91 	bl	8003800 <HAL_GetTick>
 80060de:	4602      	mov	r2, r0
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d901      	bls.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e107      	b.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80060ec:	4b49      	ldr	r3, [pc, #292]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80060f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060f8:	d0ef      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 0304 	and.w	r3, r3, #4
 8006102:	2b00      	cmp	r3, #0
 8006104:	d020      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006106:	4b43      	ldr	r3, [pc, #268]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800610c:	0f1b      	lsrs	r3, r3, #28
 800610e:	f003 0307 	and.w	r3, r3, #7
 8006112:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	019a      	lsls	r2, r3, #6
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	061b      	lsls	r3, r3, #24
 8006120:	431a      	orrs	r2, r3
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	071b      	lsls	r3, r3, #28
 8006126:	493b      	ldr	r1, [pc, #236]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006128:	4313      	orrs	r3, r2
 800612a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800612e:	4b39      	ldr	r3, [pc, #228]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006130:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006134:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a1b      	ldr	r3, [r3, #32]
 800613c:	3b01      	subs	r3, #1
 800613e:	021b      	lsls	r3, r3, #8
 8006140:	4934      	ldr	r1, [pc, #208]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006142:	4313      	orrs	r3, r2
 8006144:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 0308 	and.w	r3, r3, #8
 8006150:	2b00      	cmp	r3, #0
 8006152:	d01e      	beq.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006154:	4b2f      	ldr	r3, [pc, #188]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800615a:	0e1b      	lsrs	r3, r3, #24
 800615c:	f003 030f 	and.w	r3, r3, #15
 8006160:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	019a      	lsls	r2, r3, #6
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	061b      	lsls	r3, r3, #24
 800616c:	431a      	orrs	r2, r3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	071b      	lsls	r3, r3, #28
 8006174:	4927      	ldr	r1, [pc, #156]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006176:	4313      	orrs	r3, r2
 8006178:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800617c:	4b25      	ldr	r3, [pc, #148]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800617e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006182:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800618a:	4922      	ldr	r1, [pc, #136]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800618c:	4313      	orrs	r3, r2
 800618e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006192:	4b21      	ldr	r3, [pc, #132]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006194:	2201      	movs	r2, #1
 8006196:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006198:	f7fd fb32 	bl	8003800 <HAL_GetTick>
 800619c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800619e:	e008      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80061a0:	f7fd fb2e 	bl	8003800 <HAL_GetTick>
 80061a4:	4602      	mov	r2, r0
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d901      	bls.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e0a4      	b.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80061b2:	4b18      	ldr	r3, [pc, #96]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80061ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061be:	d1ef      	bne.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 0320 	and.w	r3, r3, #32
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f000 808b 	beq.w	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80061ce:	2300      	movs	r3, #0
 80061d0:	60fb      	str	r3, [r7, #12]
 80061d2:	4b10      	ldr	r3, [pc, #64]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061d6:	4a0f      	ldr	r2, [pc, #60]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80061de:	4b0d      	ldr	r3, [pc, #52]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061e6:	60fb      	str	r3, [r7, #12]
 80061e8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80061ea:	4b0c      	ldr	r3, [pc, #48]	@ (800621c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a0b      	ldr	r2, [pc, #44]	@ (800621c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80061f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061f4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80061f6:	f7fd fb03 	bl	8003800 <HAL_GetTick>
 80061fa:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80061fc:	e010      	b.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061fe:	f7fd faff 	bl	8003800 <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	2b02      	cmp	r3, #2
 800620a:	d909      	bls.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800620c:	2303      	movs	r3, #3
 800620e:	e075      	b.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006210:	42470068 	.word	0x42470068
 8006214:	40023800 	.word	0x40023800
 8006218:	42470070 	.word	0x42470070
 800621c:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006220:	4b38      	ldr	r3, [pc, #224]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006228:	2b00      	cmp	r3, #0
 800622a:	d0e8      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800622c:	4b36      	ldr	r3, [pc, #216]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800622e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006230:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006234:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d02f      	beq.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x308>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006240:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	429a      	cmp	r2, r3
 8006248:	d028      	beq.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800624a:	4b2f      	ldr	r3, [pc, #188]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800624c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800624e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006252:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006254:	4b2d      	ldr	r3, [pc, #180]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006256:	2201      	movs	r2, #1
 8006258:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800625a:	4b2c      	ldr	r3, [pc, #176]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800625c:	2200      	movs	r2, #0
 800625e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006260:	4a29      	ldr	r2, [pc, #164]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006266:	4b28      	ldr	r3, [pc, #160]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800626a:	f003 0301 	and.w	r3, r3, #1
 800626e:	2b01      	cmp	r3, #1
 8006270:	d114      	bne.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006272:	f7fd fac5 	bl	8003800 <HAL_GetTick>
 8006276:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006278:	e00a      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800627a:	f7fd fac1 	bl	8003800 <HAL_GetTick>
 800627e:	4602      	mov	r2, r0
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006288:	4293      	cmp	r3, r2
 800628a:	d901      	bls.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800628c:	2303      	movs	r3, #3
 800628e:	e035      	b.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006290:	4b1d      	ldr	r3, [pc, #116]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006294:	f003 0302 	and.w	r3, r3, #2
 8006298:	2b00      	cmp	r3, #0
 800629a:	d0ee      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062a8:	d10d      	bne.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80062aa:	4b17      	ldr	r3, [pc, #92]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062b6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80062ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062be:	4912      	ldr	r1, [pc, #72]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80062c0:	4313      	orrs	r3, r2
 80062c2:	608b      	str	r3, [r1, #8]
 80062c4:	e005      	b.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80062c6:	4b10      	ldr	r3, [pc, #64]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	4a0f      	ldr	r2, [pc, #60]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80062cc:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80062d0:	6093      	str	r3, [r2, #8]
 80062d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80062d4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062de:	490a      	ldr	r1, [pc, #40]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80062e0:	4313      	orrs	r3, r2
 80062e2:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0310 	and.w	r3, r3, #16
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d004      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80062f6:	4b06      	ldr	r3, [pc, #24]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80062f8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3718      	adds	r7, #24
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	40007000 	.word	0x40007000
 8006308:	40023800 	.word	0x40023800
 800630c:	42470e40 	.word	0x42470e40
 8006310:	424711e0 	.word	0x424711e0

08006314 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d101      	bne.n	8006326 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e01c      	b.n	8006360 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	795b      	ldrb	r3, [r3, #5]
 800632a:	b2db      	uxtb	r3, r3
 800632c:	2b00      	cmp	r3, #0
 800632e:	d105      	bne.n	800633c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f7fc fcc4 	bl	8002cc4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2202      	movs	r2, #2
 8006340:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f042 0204 	orr.w	r2, r2, #4
 8006350:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2201      	movs	r2, #1
 8006356:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800635e:	2300      	movs	r3, #0
}
 8006360:	4618      	mov	r0, r3
 8006362:	3708      	adds	r7, #8
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006372:	2300      	movs	r3, #0
 8006374:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	791b      	ldrb	r3, [r3, #4]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d101      	bne.n	8006382 <HAL_RNG_GenerateRandomNumber+0x1a>
 800637e:	2302      	movs	r3, #2
 8006380:	e044      	b.n	800640c <HAL_RNG_GenerateRandomNumber+0xa4>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2201      	movs	r2, #1
 8006386:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	795b      	ldrb	r3, [r3, #5]
 800638c:	b2db      	uxtb	r3, r3
 800638e:	2b01      	cmp	r3, #1
 8006390:	d133      	bne.n	80063fa <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2202      	movs	r2, #2
 8006396:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006398:	f7fd fa32 	bl	8003800 <HAL_GetTick>
 800639c:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800639e:	e018      	b.n	80063d2 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80063a0:	f7fd fa2e 	bl	8003800 <HAL_GetTick>
 80063a4:	4602      	mov	r2, r0
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d911      	bls.n	80063d2 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	f003 0301 	and.w	r3, r3, #1
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d00a      	beq.n	80063d2 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2202      	movs	r2, #2
 80063c6:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e01c      	b.n	800640c <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	f003 0301 	and.w	r3, r3, #1
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d1df      	bne.n	80063a0 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	689a      	ldr	r2, [r3, #8]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	68da      	ldr	r2, [r3, #12]
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2201      	movs	r2, #1
 80063f6:	715a      	strb	r2, [r3, #5]
 80063f8:	e004      	b.n	8006404 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2204      	movs	r2, #4
 80063fe:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	711a      	strb	r2, [r3, #4]

  return status;
 800640a:	7bfb      	ldrb	r3, [r7, #15]
}
 800640c:	4618      	mov	r0, r3
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d101      	bne.n	8006426 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e07b      	b.n	800651e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800642a:	2b00      	cmp	r3, #0
 800642c:	d108      	bne.n	8006440 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006436:	d009      	beq.n	800644c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	61da      	str	r2, [r3, #28]
 800643e:	e005      	b.n	800644c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006458:	b2db      	uxtb	r3, r3
 800645a:	2b00      	cmp	r3, #0
 800645c:	d106      	bne.n	800646c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f7fc fc4e 	bl	8002d08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2202      	movs	r2, #2
 8006470:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006482:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006494:	431a      	orrs	r2, r3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800649e:	431a      	orrs	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	f003 0302 	and.w	r3, r3, #2
 80064a8:	431a      	orrs	r2, r3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	695b      	ldr	r3, [r3, #20]
 80064ae:	f003 0301 	and.w	r3, r3, #1
 80064b2:	431a      	orrs	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	699b      	ldr	r3, [r3, #24]
 80064b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064bc:	431a      	orrs	r2, r3
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	69db      	ldr	r3, [r3, #28]
 80064c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80064c6:	431a      	orrs	r2, r3
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a1b      	ldr	r3, [r3, #32]
 80064cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064d0:	ea42 0103 	orr.w	r1, r2, r3
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064d8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	430a      	orrs	r2, r1
 80064e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	699b      	ldr	r3, [r3, #24]
 80064e8:	0c1b      	lsrs	r3, r3, #16
 80064ea:	f003 0104 	and.w	r1, r3, #4
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f2:	f003 0210 	and.w	r2, r3, #16
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	430a      	orrs	r2, r1
 80064fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	69da      	ldr	r2, [r3, #28]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800650c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3708      	adds	r7, #8
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006526:	b580      	push	{r7, lr}
 8006528:	b082      	sub	sp, #8
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d101      	bne.n	8006538 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	e01a      	b.n	800656e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2202      	movs	r2, #2
 800653c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800654e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f7fc fc21 	bl	8002d98 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	3708      	adds	r7, #8
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}

08006576 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006576:	b580      	push	{r7, lr}
 8006578:	b088      	sub	sp, #32
 800657a:	af00      	add	r7, sp, #0
 800657c:	60f8      	str	r0, [r7, #12]
 800657e:	60b9      	str	r1, [r7, #8]
 8006580:	603b      	str	r3, [r7, #0]
 8006582:	4613      	mov	r3, r2
 8006584:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006586:	f7fd f93b 	bl	8003800 <HAL_GetTick>
 800658a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800658c:	88fb      	ldrh	r3, [r7, #6]
 800658e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006596:	b2db      	uxtb	r3, r3
 8006598:	2b01      	cmp	r3, #1
 800659a:	d001      	beq.n	80065a0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800659c:	2302      	movs	r3, #2
 800659e:	e12a      	b.n	80067f6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d002      	beq.n	80065ac <HAL_SPI_Transmit+0x36>
 80065a6:	88fb      	ldrh	r3, [r7, #6]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d101      	bne.n	80065b0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	e122      	b.n	80067f6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d101      	bne.n	80065be <HAL_SPI_Transmit+0x48>
 80065ba:	2302      	movs	r3, #2
 80065bc:	e11b      	b.n	80067f6 <HAL_SPI_Transmit+0x280>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2203      	movs	r2, #3
 80065ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2200      	movs	r2, #0
 80065d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	68ba      	ldr	r2, [r7, #8]
 80065d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	88fa      	ldrh	r2, [r7, #6]
 80065de:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	88fa      	ldrh	r2, [r7, #6]
 80065e4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2200      	movs	r2, #0
 80065f0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2200      	movs	r2, #0
 80065f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2200      	movs	r2, #0
 8006602:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800660c:	d10f      	bne.n	800662e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800661c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800662c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006638:	2b40      	cmp	r3, #64	@ 0x40
 800663a:	d007      	beq.n	800664c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800664a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006654:	d152      	bne.n	80066fc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d002      	beq.n	8006664 <HAL_SPI_Transmit+0xee>
 800665e:	8b7b      	ldrh	r3, [r7, #26]
 8006660:	2b01      	cmp	r3, #1
 8006662:	d145      	bne.n	80066f0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006668:	881a      	ldrh	r2, [r3, #0]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006674:	1c9a      	adds	r2, r3, #2
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800667e:	b29b      	uxth	r3, r3
 8006680:	3b01      	subs	r3, #1
 8006682:	b29a      	uxth	r2, r3
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006688:	e032      	b.n	80066f0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	f003 0302 	and.w	r3, r3, #2
 8006694:	2b02      	cmp	r3, #2
 8006696:	d112      	bne.n	80066be <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800669c:	881a      	ldrh	r2, [r3, #0]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066a8:	1c9a      	adds	r2, r3, #2
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	3b01      	subs	r3, #1
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	86da      	strh	r2, [r3, #54]	@ 0x36
 80066bc:	e018      	b.n	80066f0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066be:	f7fd f89f 	bl	8003800 <HAL_GetTick>
 80066c2:	4602      	mov	r2, r0
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	683a      	ldr	r2, [r7, #0]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d803      	bhi.n	80066d6 <HAL_SPI_Transmit+0x160>
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80066d4:	d102      	bne.n	80066dc <HAL_SPI_Transmit+0x166>
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d109      	bne.n	80066f0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2201      	movs	r2, #1
 80066e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80066ec:	2303      	movs	r3, #3
 80066ee:	e082      	b.n	80067f6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1c7      	bne.n	800668a <HAL_SPI_Transmit+0x114>
 80066fa:	e053      	b.n	80067a4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d002      	beq.n	800670a <HAL_SPI_Transmit+0x194>
 8006704:	8b7b      	ldrh	r3, [r7, #26]
 8006706:	2b01      	cmp	r3, #1
 8006708:	d147      	bne.n	800679a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	330c      	adds	r3, #12
 8006714:	7812      	ldrb	r2, [r2, #0]
 8006716:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800671c:	1c5a      	adds	r2, r3, #1
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006726:	b29b      	uxth	r3, r3
 8006728:	3b01      	subs	r3, #1
 800672a:	b29a      	uxth	r2, r3
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006730:	e033      	b.n	800679a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	f003 0302 	and.w	r3, r3, #2
 800673c:	2b02      	cmp	r3, #2
 800673e:	d113      	bne.n	8006768 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	330c      	adds	r3, #12
 800674a:	7812      	ldrb	r2, [r2, #0]
 800674c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006752:	1c5a      	adds	r2, r3, #1
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800675c:	b29b      	uxth	r3, r3
 800675e:	3b01      	subs	r3, #1
 8006760:	b29a      	uxth	r2, r3
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006766:	e018      	b.n	800679a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006768:	f7fd f84a 	bl	8003800 <HAL_GetTick>
 800676c:	4602      	mov	r2, r0
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	683a      	ldr	r2, [r7, #0]
 8006774:	429a      	cmp	r2, r3
 8006776:	d803      	bhi.n	8006780 <HAL_SPI_Transmit+0x20a>
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800677e:	d102      	bne.n	8006786 <HAL_SPI_Transmit+0x210>
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d109      	bne.n	800679a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2201      	movs	r2, #1
 800678a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	e02d      	b.n	80067f6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800679e:	b29b      	uxth	r3, r3
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d1c6      	bne.n	8006732 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067a4:	69fa      	ldr	r2, [r7, #28]
 80067a6:	6839      	ldr	r1, [r7, #0]
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	f000 f8bf 	bl	800692c <SPI_EndRxTxTransaction>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d002      	beq.n	80067ba <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2220      	movs	r2, #32
 80067b8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d10a      	bne.n	80067d8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067c2:	2300      	movs	r3, #0
 80067c4:	617b      	str	r3, [r7, #20]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	617b      	str	r3, [r7, #20]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	617b      	str	r3, [r7, #20]
 80067d6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d001      	beq.n	80067f4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	e000      	b.n	80067f6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80067f4:	2300      	movs	r3, #0
  }
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3720      	adds	r7, #32
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}

080067fe <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80067fe:	b480      	push	{r7}
 8006800:	b083      	sub	sp, #12
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800680c:	b2db      	uxtb	r3, r3
}
 800680e:	4618      	mov	r0, r3
 8006810:	370c      	adds	r7, #12
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
	...

0800681c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b088      	sub	sp, #32
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	603b      	str	r3, [r7, #0]
 8006828:	4613      	mov	r3, r2
 800682a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800682c:	f7fc ffe8 	bl	8003800 <HAL_GetTick>
 8006830:	4602      	mov	r2, r0
 8006832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006834:	1a9b      	subs	r3, r3, r2
 8006836:	683a      	ldr	r2, [r7, #0]
 8006838:	4413      	add	r3, r2
 800683a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800683c:	f7fc ffe0 	bl	8003800 <HAL_GetTick>
 8006840:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006842:	4b39      	ldr	r3, [pc, #228]	@ (8006928 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	015b      	lsls	r3, r3, #5
 8006848:	0d1b      	lsrs	r3, r3, #20
 800684a:	69fa      	ldr	r2, [r7, #28]
 800684c:	fb02 f303 	mul.w	r3, r2, r3
 8006850:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006852:	e054      	b.n	80068fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800685a:	d050      	beq.n	80068fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800685c:	f7fc ffd0 	bl	8003800 <HAL_GetTick>
 8006860:	4602      	mov	r2, r0
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	69fa      	ldr	r2, [r7, #28]
 8006868:	429a      	cmp	r2, r3
 800686a:	d902      	bls.n	8006872 <SPI_WaitFlagStateUntilTimeout+0x56>
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d13d      	bne.n	80068ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	685a      	ldr	r2, [r3, #4]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006880:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800688a:	d111      	bne.n	80068b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006894:	d004      	beq.n	80068a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800689e:	d107      	bne.n	80068b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80068ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068b8:	d10f      	bne.n	80068da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80068c8:	601a      	str	r2, [r3, #0]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80068d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2201      	movs	r2, #1
 80068de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80068ea:	2303      	movs	r3, #3
 80068ec:	e017      	b.n	800691e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d101      	bne.n	80068f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80068f4:	2300      	movs	r3, #0
 80068f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	3b01      	subs	r3, #1
 80068fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	689a      	ldr	r2, [r3, #8]
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	4013      	ands	r3, r2
 8006908:	68ba      	ldr	r2, [r7, #8]
 800690a:	429a      	cmp	r2, r3
 800690c:	bf0c      	ite	eq
 800690e:	2301      	moveq	r3, #1
 8006910:	2300      	movne	r3, #0
 8006912:	b2db      	uxtb	r3, r3
 8006914:	461a      	mov	r2, r3
 8006916:	79fb      	ldrb	r3, [r7, #7]
 8006918:	429a      	cmp	r2, r3
 800691a:	d19b      	bne.n	8006854 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	3720      	adds	r7, #32
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	20000018 	.word	0x20000018

0800692c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b088      	sub	sp, #32
 8006930:	af02      	add	r7, sp, #8
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	9300      	str	r3, [sp, #0]
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	2201      	movs	r2, #1
 8006940:	2102      	movs	r1, #2
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f7ff ff6a 	bl	800681c <SPI_WaitFlagStateUntilTimeout>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d007      	beq.n	800695e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006952:	f043 0220 	orr.w	r2, r3, #32
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	e032      	b.n	80069c4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800695e:	4b1b      	ldr	r3, [pc, #108]	@ (80069cc <SPI_EndRxTxTransaction+0xa0>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a1b      	ldr	r2, [pc, #108]	@ (80069d0 <SPI_EndRxTxTransaction+0xa4>)
 8006964:	fba2 2303 	umull	r2, r3, r2, r3
 8006968:	0d5b      	lsrs	r3, r3, #21
 800696a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800696e:	fb02 f303 	mul.w	r3, r2, r3
 8006972:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800697c:	d112      	bne.n	80069a4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	9300      	str	r3, [sp, #0]
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	2200      	movs	r2, #0
 8006986:	2180      	movs	r1, #128	@ 0x80
 8006988:	68f8      	ldr	r0, [r7, #12]
 800698a:	f7ff ff47 	bl	800681c <SPI_WaitFlagStateUntilTimeout>
 800698e:	4603      	mov	r3, r0
 8006990:	2b00      	cmp	r3, #0
 8006992:	d016      	beq.n	80069c2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006998:	f043 0220 	orr.w	r2, r3, #32
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80069a0:	2303      	movs	r3, #3
 80069a2:	e00f      	b.n	80069c4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00a      	beq.n	80069c0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	3b01      	subs	r3, #1
 80069ae:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069ba:	2b80      	cmp	r3, #128	@ 0x80
 80069bc:	d0f2      	beq.n	80069a4 <SPI_EndRxTxTransaction+0x78>
 80069be:	e000      	b.n	80069c2 <SPI_EndRxTxTransaction+0x96>
        break;
 80069c0:	bf00      	nop
  }

  return HAL_OK;
 80069c2:	2300      	movs	r3, #0
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3718      	adds	r7, #24
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}
 80069cc:	20000018 	.word	0x20000018
 80069d0:	165e9f81 	.word	0x165e9f81

080069d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b082      	sub	sp, #8
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d101      	bne.n	80069e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e041      	b.n	8006a6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d106      	bne.n	8006a00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f7fc f9ea 	bl	8002dd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2202      	movs	r2, #2
 8006a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	3304      	adds	r3, #4
 8006a10:	4619      	mov	r1, r3
 8006a12:	4610      	mov	r0, r2
 8006a14:	f000 f8f4 	bl	8006c00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3708      	adds	r7, #8
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}

08006a72 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b084      	sub	sp, #16
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
 8006a7a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d101      	bne.n	8006a8e <HAL_TIM_ConfigClockSource+0x1c>
 8006a8a:	2302      	movs	r3, #2
 8006a8c:	e0b4      	b.n	8006bf8 <HAL_TIM_ConfigClockSource+0x186>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2201      	movs	r2, #1
 8006a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2202      	movs	r2, #2
 8006a9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006aac:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006ab4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	68ba      	ldr	r2, [r7, #8]
 8006abc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ac6:	d03e      	beq.n	8006b46 <HAL_TIM_ConfigClockSource+0xd4>
 8006ac8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006acc:	f200 8087 	bhi.w	8006bde <HAL_TIM_ConfigClockSource+0x16c>
 8006ad0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ad4:	f000 8086 	beq.w	8006be4 <HAL_TIM_ConfigClockSource+0x172>
 8006ad8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006adc:	d87f      	bhi.n	8006bde <HAL_TIM_ConfigClockSource+0x16c>
 8006ade:	2b70      	cmp	r3, #112	@ 0x70
 8006ae0:	d01a      	beq.n	8006b18 <HAL_TIM_ConfigClockSource+0xa6>
 8006ae2:	2b70      	cmp	r3, #112	@ 0x70
 8006ae4:	d87b      	bhi.n	8006bde <HAL_TIM_ConfigClockSource+0x16c>
 8006ae6:	2b60      	cmp	r3, #96	@ 0x60
 8006ae8:	d050      	beq.n	8006b8c <HAL_TIM_ConfigClockSource+0x11a>
 8006aea:	2b60      	cmp	r3, #96	@ 0x60
 8006aec:	d877      	bhi.n	8006bde <HAL_TIM_ConfigClockSource+0x16c>
 8006aee:	2b50      	cmp	r3, #80	@ 0x50
 8006af0:	d03c      	beq.n	8006b6c <HAL_TIM_ConfigClockSource+0xfa>
 8006af2:	2b50      	cmp	r3, #80	@ 0x50
 8006af4:	d873      	bhi.n	8006bde <HAL_TIM_ConfigClockSource+0x16c>
 8006af6:	2b40      	cmp	r3, #64	@ 0x40
 8006af8:	d058      	beq.n	8006bac <HAL_TIM_ConfigClockSource+0x13a>
 8006afa:	2b40      	cmp	r3, #64	@ 0x40
 8006afc:	d86f      	bhi.n	8006bde <HAL_TIM_ConfigClockSource+0x16c>
 8006afe:	2b30      	cmp	r3, #48	@ 0x30
 8006b00:	d064      	beq.n	8006bcc <HAL_TIM_ConfigClockSource+0x15a>
 8006b02:	2b30      	cmp	r3, #48	@ 0x30
 8006b04:	d86b      	bhi.n	8006bde <HAL_TIM_ConfigClockSource+0x16c>
 8006b06:	2b20      	cmp	r3, #32
 8006b08:	d060      	beq.n	8006bcc <HAL_TIM_ConfigClockSource+0x15a>
 8006b0a:	2b20      	cmp	r3, #32
 8006b0c:	d867      	bhi.n	8006bde <HAL_TIM_ConfigClockSource+0x16c>
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d05c      	beq.n	8006bcc <HAL_TIM_ConfigClockSource+0x15a>
 8006b12:	2b10      	cmp	r3, #16
 8006b14:	d05a      	beq.n	8006bcc <HAL_TIM_ConfigClockSource+0x15a>
 8006b16:	e062      	b.n	8006bde <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b28:	f000 f990 	bl	8006e4c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006b3a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68ba      	ldr	r2, [r7, #8]
 8006b42:	609a      	str	r2, [r3, #8]
      break;
 8006b44:	e04f      	b.n	8006be6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b56:	f000 f979 	bl	8006e4c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	689a      	ldr	r2, [r3, #8]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006b68:	609a      	str	r2, [r3, #8]
      break;
 8006b6a:	e03c      	b.n	8006be6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b78:	461a      	mov	r2, r3
 8006b7a:	f000 f8ed 	bl	8006d58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	2150      	movs	r1, #80	@ 0x50
 8006b84:	4618      	mov	r0, r3
 8006b86:	f000 f946 	bl	8006e16 <TIM_ITRx_SetConfig>
      break;
 8006b8a:	e02c      	b.n	8006be6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b98:	461a      	mov	r2, r3
 8006b9a:	f000 f90c 	bl	8006db6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2160      	movs	r1, #96	@ 0x60
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f000 f936 	bl	8006e16 <TIM_ITRx_SetConfig>
      break;
 8006baa:	e01c      	b.n	8006be6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bb8:	461a      	mov	r2, r3
 8006bba:	f000 f8cd 	bl	8006d58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	2140      	movs	r1, #64	@ 0x40
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f000 f926 	bl	8006e16 <TIM_ITRx_SetConfig>
      break;
 8006bca:	e00c      	b.n	8006be6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	4610      	mov	r0, r2
 8006bd8:	f000 f91d 	bl	8006e16 <TIM_ITRx_SetConfig>
      break;
 8006bdc:	e003      	b.n	8006be6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	73fb      	strb	r3, [r7, #15]
      break;
 8006be2:	e000      	b.n	8006be6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006be4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2201      	movs	r2, #1
 8006bea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3710      	adds	r7, #16
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b085      	sub	sp, #20
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a46      	ldr	r2, [pc, #280]	@ (8006d2c <TIM_Base_SetConfig+0x12c>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d013      	beq.n	8006c40 <TIM_Base_SetConfig+0x40>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c1e:	d00f      	beq.n	8006c40 <TIM_Base_SetConfig+0x40>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4a43      	ldr	r2, [pc, #268]	@ (8006d30 <TIM_Base_SetConfig+0x130>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d00b      	beq.n	8006c40 <TIM_Base_SetConfig+0x40>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4a42      	ldr	r2, [pc, #264]	@ (8006d34 <TIM_Base_SetConfig+0x134>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d007      	beq.n	8006c40 <TIM_Base_SetConfig+0x40>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4a41      	ldr	r2, [pc, #260]	@ (8006d38 <TIM_Base_SetConfig+0x138>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d003      	beq.n	8006c40 <TIM_Base_SetConfig+0x40>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4a40      	ldr	r2, [pc, #256]	@ (8006d3c <TIM_Base_SetConfig+0x13c>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d108      	bne.n	8006c52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a35      	ldr	r2, [pc, #212]	@ (8006d2c <TIM_Base_SetConfig+0x12c>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d02b      	beq.n	8006cb2 <TIM_Base_SetConfig+0xb2>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c60:	d027      	beq.n	8006cb2 <TIM_Base_SetConfig+0xb2>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a32      	ldr	r2, [pc, #200]	@ (8006d30 <TIM_Base_SetConfig+0x130>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d023      	beq.n	8006cb2 <TIM_Base_SetConfig+0xb2>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a31      	ldr	r2, [pc, #196]	@ (8006d34 <TIM_Base_SetConfig+0x134>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d01f      	beq.n	8006cb2 <TIM_Base_SetConfig+0xb2>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a30      	ldr	r2, [pc, #192]	@ (8006d38 <TIM_Base_SetConfig+0x138>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d01b      	beq.n	8006cb2 <TIM_Base_SetConfig+0xb2>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a2f      	ldr	r2, [pc, #188]	@ (8006d3c <TIM_Base_SetConfig+0x13c>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d017      	beq.n	8006cb2 <TIM_Base_SetConfig+0xb2>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a2e      	ldr	r2, [pc, #184]	@ (8006d40 <TIM_Base_SetConfig+0x140>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d013      	beq.n	8006cb2 <TIM_Base_SetConfig+0xb2>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a2d      	ldr	r2, [pc, #180]	@ (8006d44 <TIM_Base_SetConfig+0x144>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d00f      	beq.n	8006cb2 <TIM_Base_SetConfig+0xb2>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4a2c      	ldr	r2, [pc, #176]	@ (8006d48 <TIM_Base_SetConfig+0x148>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d00b      	beq.n	8006cb2 <TIM_Base_SetConfig+0xb2>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a2b      	ldr	r2, [pc, #172]	@ (8006d4c <TIM_Base_SetConfig+0x14c>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d007      	beq.n	8006cb2 <TIM_Base_SetConfig+0xb2>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a2a      	ldr	r2, [pc, #168]	@ (8006d50 <TIM_Base_SetConfig+0x150>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d003      	beq.n	8006cb2 <TIM_Base_SetConfig+0xb2>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a29      	ldr	r2, [pc, #164]	@ (8006d54 <TIM_Base_SetConfig+0x154>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d108      	bne.n	8006cc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	695b      	ldr	r3, [r3, #20]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	689a      	ldr	r2, [r3, #8]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a10      	ldr	r2, [pc, #64]	@ (8006d2c <TIM_Base_SetConfig+0x12c>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d003      	beq.n	8006cf8 <TIM_Base_SetConfig+0xf8>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a12      	ldr	r2, [pc, #72]	@ (8006d3c <TIM_Base_SetConfig+0x13c>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d103      	bne.n	8006d00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	691a      	ldr	r2, [r3, #16]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	f003 0301 	and.w	r3, r3, #1
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d105      	bne.n	8006d1e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	691b      	ldr	r3, [r3, #16]
 8006d16:	f023 0201 	bic.w	r2, r3, #1
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	611a      	str	r2, [r3, #16]
  }
}
 8006d1e:	bf00      	nop
 8006d20:	3714      	adds	r7, #20
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	40010000 	.word	0x40010000
 8006d30:	40000400 	.word	0x40000400
 8006d34:	40000800 	.word	0x40000800
 8006d38:	40000c00 	.word	0x40000c00
 8006d3c:	40010400 	.word	0x40010400
 8006d40:	40014000 	.word	0x40014000
 8006d44:	40014400 	.word	0x40014400
 8006d48:	40014800 	.word	0x40014800
 8006d4c:	40001800 	.word	0x40001800
 8006d50:	40001c00 	.word	0x40001c00
 8006d54:	40002000 	.word	0x40002000

08006d58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b087      	sub	sp, #28
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6a1b      	ldr	r3, [r3, #32]
 8006d68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6a1b      	ldr	r3, [r3, #32]
 8006d6e:	f023 0201 	bic.w	r2, r3, #1
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	699b      	ldr	r3, [r3, #24]
 8006d7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	011b      	lsls	r3, r3, #4
 8006d88:	693a      	ldr	r2, [r7, #16]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	f023 030a 	bic.w	r3, r3, #10
 8006d94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d96:	697a      	ldr	r2, [r7, #20]
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	693a      	ldr	r2, [r7, #16]
 8006da2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	697a      	ldr	r2, [r7, #20]
 8006da8:	621a      	str	r2, [r3, #32]
}
 8006daa:	bf00      	nop
 8006dac:	371c      	adds	r7, #28
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr

08006db6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006db6:	b480      	push	{r7}
 8006db8:	b087      	sub	sp, #28
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	60f8      	str	r0, [r7, #12]
 8006dbe:	60b9      	str	r1, [r7, #8]
 8006dc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6a1b      	ldr	r3, [r3, #32]
 8006dc6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6a1b      	ldr	r3, [r3, #32]
 8006dcc:	f023 0210 	bic.w	r2, r3, #16
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	699b      	ldr	r3, [r3, #24]
 8006dd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006de0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	031b      	lsls	r3, r3, #12
 8006de6:	693a      	ldr	r2, [r7, #16]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006df2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	011b      	lsls	r3, r3, #4
 8006df8:	697a      	ldr	r2, [r7, #20]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	693a      	ldr	r2, [r7, #16]
 8006e02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	697a      	ldr	r2, [r7, #20]
 8006e08:	621a      	str	r2, [r3, #32]
}
 8006e0a:	bf00      	nop
 8006e0c:	371c      	adds	r7, #28
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr

08006e16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e16:	b480      	push	{r7}
 8006e18:	b085      	sub	sp, #20
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
 8006e1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e2e:	683a      	ldr	r2, [r7, #0]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	f043 0307 	orr.w	r3, r3, #7
 8006e38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	68fa      	ldr	r2, [r7, #12]
 8006e3e:	609a      	str	r2, [r3, #8]
}
 8006e40:	bf00      	nop
 8006e42:	3714      	adds	r7, #20
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b087      	sub	sp, #28
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	607a      	str	r2, [r7, #4]
 8006e58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006e66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	021a      	lsls	r2, r3, #8
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	431a      	orrs	r2, r3
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	697a      	ldr	r2, [r7, #20]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	697a      	ldr	r2, [r7, #20]
 8006e7e:	609a      	str	r2, [r3, #8]
}
 8006e80:	bf00      	nop
 8006e82:	371c      	adds	r7, #28
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b085      	sub	sp, #20
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d101      	bne.n	8006ea4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ea0:	2302      	movs	r3, #2
 8006ea2:	e05a      	b.n	8006f5a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2202      	movs	r2, #2
 8006eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68fa      	ldr	r2, [r7, #12]
 8006edc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a21      	ldr	r2, [pc, #132]	@ (8006f68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d022      	beq.n	8006f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ef0:	d01d      	beq.n	8006f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a1d      	ldr	r2, [pc, #116]	@ (8006f6c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d018      	beq.n	8006f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a1b      	ldr	r2, [pc, #108]	@ (8006f70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d013      	beq.n	8006f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a1a      	ldr	r2, [pc, #104]	@ (8006f74 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d00e      	beq.n	8006f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a18      	ldr	r2, [pc, #96]	@ (8006f78 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d009      	beq.n	8006f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a17      	ldr	r2, [pc, #92]	@ (8006f7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d004      	beq.n	8006f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a15      	ldr	r2, [pc, #84]	@ (8006f80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d10c      	bne.n	8006f48 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	68ba      	ldr	r2, [r7, #8]
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	68ba      	ldr	r2, [r7, #8]
 8006f46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3714      	adds	r7, #20
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop
 8006f68:	40010000 	.word	0x40010000
 8006f6c:	40000400 	.word	0x40000400
 8006f70:	40000800 	.word	0x40000800
 8006f74:	40000c00 	.word	0x40000c00
 8006f78:	40010400 	.word	0x40010400
 8006f7c:	40014000 	.word	0x40014000
 8006f80:	40001800 	.word	0x40001800

08006f84 <siprintf>:
 8006f84:	b40e      	push	{r1, r2, r3}
 8006f86:	b510      	push	{r4, lr}
 8006f88:	b09d      	sub	sp, #116	@ 0x74
 8006f8a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006f8c:	9002      	str	r0, [sp, #8]
 8006f8e:	9006      	str	r0, [sp, #24]
 8006f90:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006f94:	480a      	ldr	r0, [pc, #40]	@ (8006fc0 <siprintf+0x3c>)
 8006f96:	9107      	str	r1, [sp, #28]
 8006f98:	9104      	str	r1, [sp, #16]
 8006f9a:	490a      	ldr	r1, [pc, #40]	@ (8006fc4 <siprintf+0x40>)
 8006f9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fa0:	9105      	str	r1, [sp, #20]
 8006fa2:	2400      	movs	r4, #0
 8006fa4:	a902      	add	r1, sp, #8
 8006fa6:	6800      	ldr	r0, [r0, #0]
 8006fa8:	9301      	str	r3, [sp, #4]
 8006faa:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006fac:	f000 f9ce 	bl	800734c <_svfiprintf_r>
 8006fb0:	9b02      	ldr	r3, [sp, #8]
 8006fb2:	701c      	strb	r4, [r3, #0]
 8006fb4:	b01d      	add	sp, #116	@ 0x74
 8006fb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fba:	b003      	add	sp, #12
 8006fbc:	4770      	bx	lr
 8006fbe:	bf00      	nop
 8006fc0:	20000030 	.word	0x20000030
 8006fc4:	ffff0208 	.word	0xffff0208

08006fc8 <std>:
 8006fc8:	2300      	movs	r3, #0
 8006fca:	b510      	push	{r4, lr}
 8006fcc:	4604      	mov	r4, r0
 8006fce:	e9c0 3300 	strd	r3, r3, [r0]
 8006fd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006fd6:	6083      	str	r3, [r0, #8]
 8006fd8:	8181      	strh	r1, [r0, #12]
 8006fda:	6643      	str	r3, [r0, #100]	@ 0x64
 8006fdc:	81c2      	strh	r2, [r0, #14]
 8006fde:	6183      	str	r3, [r0, #24]
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	2208      	movs	r2, #8
 8006fe4:	305c      	adds	r0, #92	@ 0x5c
 8006fe6:	f000 f921 	bl	800722c <memset>
 8006fea:	4b0d      	ldr	r3, [pc, #52]	@ (8007020 <std+0x58>)
 8006fec:	6263      	str	r3, [r4, #36]	@ 0x24
 8006fee:	4b0d      	ldr	r3, [pc, #52]	@ (8007024 <std+0x5c>)
 8006ff0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8007028 <std+0x60>)
 8006ff4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800702c <std+0x64>)
 8006ff8:	6323      	str	r3, [r4, #48]	@ 0x30
 8006ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8007030 <std+0x68>)
 8006ffc:	6224      	str	r4, [r4, #32]
 8006ffe:	429c      	cmp	r4, r3
 8007000:	d006      	beq.n	8007010 <std+0x48>
 8007002:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007006:	4294      	cmp	r4, r2
 8007008:	d002      	beq.n	8007010 <std+0x48>
 800700a:	33d0      	adds	r3, #208	@ 0xd0
 800700c:	429c      	cmp	r4, r3
 800700e:	d105      	bne.n	800701c <std+0x54>
 8007010:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007018:	f000 b93a 	b.w	8007290 <__retarget_lock_init_recursive>
 800701c:	bd10      	pop	{r4, pc}
 800701e:	bf00      	nop
 8007020:	08007d95 	.word	0x08007d95
 8007024:	08007db7 	.word	0x08007db7
 8007028:	08007def 	.word	0x08007def
 800702c:	08007e13 	.word	0x08007e13
 8007030:	20025c44 	.word	0x20025c44

08007034 <stdio_exit_handler>:
 8007034:	4a02      	ldr	r2, [pc, #8]	@ (8007040 <stdio_exit_handler+0xc>)
 8007036:	4903      	ldr	r1, [pc, #12]	@ (8007044 <stdio_exit_handler+0x10>)
 8007038:	4803      	ldr	r0, [pc, #12]	@ (8007048 <stdio_exit_handler+0x14>)
 800703a:	f000 b869 	b.w	8007110 <_fwalk_sglue>
 800703e:	bf00      	nop
 8007040:	20000024 	.word	0x20000024
 8007044:	08007d2d 	.word	0x08007d2d
 8007048:	20000034 	.word	0x20000034

0800704c <cleanup_stdio>:
 800704c:	6841      	ldr	r1, [r0, #4]
 800704e:	4b0c      	ldr	r3, [pc, #48]	@ (8007080 <cleanup_stdio+0x34>)
 8007050:	4299      	cmp	r1, r3
 8007052:	b510      	push	{r4, lr}
 8007054:	4604      	mov	r4, r0
 8007056:	d001      	beq.n	800705c <cleanup_stdio+0x10>
 8007058:	f000 fe68 	bl	8007d2c <_fflush_r>
 800705c:	68a1      	ldr	r1, [r4, #8]
 800705e:	4b09      	ldr	r3, [pc, #36]	@ (8007084 <cleanup_stdio+0x38>)
 8007060:	4299      	cmp	r1, r3
 8007062:	d002      	beq.n	800706a <cleanup_stdio+0x1e>
 8007064:	4620      	mov	r0, r4
 8007066:	f000 fe61 	bl	8007d2c <_fflush_r>
 800706a:	68e1      	ldr	r1, [r4, #12]
 800706c:	4b06      	ldr	r3, [pc, #24]	@ (8007088 <cleanup_stdio+0x3c>)
 800706e:	4299      	cmp	r1, r3
 8007070:	d004      	beq.n	800707c <cleanup_stdio+0x30>
 8007072:	4620      	mov	r0, r4
 8007074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007078:	f000 be58 	b.w	8007d2c <_fflush_r>
 800707c:	bd10      	pop	{r4, pc}
 800707e:	bf00      	nop
 8007080:	20025c44 	.word	0x20025c44
 8007084:	20025cac 	.word	0x20025cac
 8007088:	20025d14 	.word	0x20025d14

0800708c <global_stdio_init.part.0>:
 800708c:	b510      	push	{r4, lr}
 800708e:	4b0b      	ldr	r3, [pc, #44]	@ (80070bc <global_stdio_init.part.0+0x30>)
 8007090:	4c0b      	ldr	r4, [pc, #44]	@ (80070c0 <global_stdio_init.part.0+0x34>)
 8007092:	4a0c      	ldr	r2, [pc, #48]	@ (80070c4 <global_stdio_init.part.0+0x38>)
 8007094:	601a      	str	r2, [r3, #0]
 8007096:	4620      	mov	r0, r4
 8007098:	2200      	movs	r2, #0
 800709a:	2104      	movs	r1, #4
 800709c:	f7ff ff94 	bl	8006fc8 <std>
 80070a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80070a4:	2201      	movs	r2, #1
 80070a6:	2109      	movs	r1, #9
 80070a8:	f7ff ff8e 	bl	8006fc8 <std>
 80070ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80070b0:	2202      	movs	r2, #2
 80070b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070b6:	2112      	movs	r1, #18
 80070b8:	f7ff bf86 	b.w	8006fc8 <std>
 80070bc:	20025d7c 	.word	0x20025d7c
 80070c0:	20025c44 	.word	0x20025c44
 80070c4:	08007035 	.word	0x08007035

080070c8 <__sfp_lock_acquire>:
 80070c8:	4801      	ldr	r0, [pc, #4]	@ (80070d0 <__sfp_lock_acquire+0x8>)
 80070ca:	f000 b8e2 	b.w	8007292 <__retarget_lock_acquire_recursive>
 80070ce:	bf00      	nop
 80070d0:	20025d81 	.word	0x20025d81

080070d4 <__sfp_lock_release>:
 80070d4:	4801      	ldr	r0, [pc, #4]	@ (80070dc <__sfp_lock_release+0x8>)
 80070d6:	f000 b8dd 	b.w	8007294 <__retarget_lock_release_recursive>
 80070da:	bf00      	nop
 80070dc:	20025d81 	.word	0x20025d81

080070e0 <__sinit>:
 80070e0:	b510      	push	{r4, lr}
 80070e2:	4604      	mov	r4, r0
 80070e4:	f7ff fff0 	bl	80070c8 <__sfp_lock_acquire>
 80070e8:	6a23      	ldr	r3, [r4, #32]
 80070ea:	b11b      	cbz	r3, 80070f4 <__sinit+0x14>
 80070ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070f0:	f7ff bff0 	b.w	80070d4 <__sfp_lock_release>
 80070f4:	4b04      	ldr	r3, [pc, #16]	@ (8007108 <__sinit+0x28>)
 80070f6:	6223      	str	r3, [r4, #32]
 80070f8:	4b04      	ldr	r3, [pc, #16]	@ (800710c <__sinit+0x2c>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d1f5      	bne.n	80070ec <__sinit+0xc>
 8007100:	f7ff ffc4 	bl	800708c <global_stdio_init.part.0>
 8007104:	e7f2      	b.n	80070ec <__sinit+0xc>
 8007106:	bf00      	nop
 8007108:	0800704d 	.word	0x0800704d
 800710c:	20025d7c 	.word	0x20025d7c

08007110 <_fwalk_sglue>:
 8007110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007114:	4607      	mov	r7, r0
 8007116:	4688      	mov	r8, r1
 8007118:	4614      	mov	r4, r2
 800711a:	2600      	movs	r6, #0
 800711c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007120:	f1b9 0901 	subs.w	r9, r9, #1
 8007124:	d505      	bpl.n	8007132 <_fwalk_sglue+0x22>
 8007126:	6824      	ldr	r4, [r4, #0]
 8007128:	2c00      	cmp	r4, #0
 800712a:	d1f7      	bne.n	800711c <_fwalk_sglue+0xc>
 800712c:	4630      	mov	r0, r6
 800712e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007132:	89ab      	ldrh	r3, [r5, #12]
 8007134:	2b01      	cmp	r3, #1
 8007136:	d907      	bls.n	8007148 <_fwalk_sglue+0x38>
 8007138:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800713c:	3301      	adds	r3, #1
 800713e:	d003      	beq.n	8007148 <_fwalk_sglue+0x38>
 8007140:	4629      	mov	r1, r5
 8007142:	4638      	mov	r0, r7
 8007144:	47c0      	blx	r8
 8007146:	4306      	orrs	r6, r0
 8007148:	3568      	adds	r5, #104	@ 0x68
 800714a:	e7e9      	b.n	8007120 <_fwalk_sglue+0x10>

0800714c <iprintf>:
 800714c:	b40f      	push	{r0, r1, r2, r3}
 800714e:	b507      	push	{r0, r1, r2, lr}
 8007150:	4906      	ldr	r1, [pc, #24]	@ (800716c <iprintf+0x20>)
 8007152:	ab04      	add	r3, sp, #16
 8007154:	6808      	ldr	r0, [r1, #0]
 8007156:	f853 2b04 	ldr.w	r2, [r3], #4
 800715a:	6881      	ldr	r1, [r0, #8]
 800715c:	9301      	str	r3, [sp, #4]
 800715e:	f000 fa1b 	bl	8007598 <_vfiprintf_r>
 8007162:	b003      	add	sp, #12
 8007164:	f85d eb04 	ldr.w	lr, [sp], #4
 8007168:	b004      	add	sp, #16
 800716a:	4770      	bx	lr
 800716c:	20000030 	.word	0x20000030

08007170 <_puts_r>:
 8007170:	6a03      	ldr	r3, [r0, #32]
 8007172:	b570      	push	{r4, r5, r6, lr}
 8007174:	6884      	ldr	r4, [r0, #8]
 8007176:	4605      	mov	r5, r0
 8007178:	460e      	mov	r6, r1
 800717a:	b90b      	cbnz	r3, 8007180 <_puts_r+0x10>
 800717c:	f7ff ffb0 	bl	80070e0 <__sinit>
 8007180:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007182:	07db      	lsls	r3, r3, #31
 8007184:	d405      	bmi.n	8007192 <_puts_r+0x22>
 8007186:	89a3      	ldrh	r3, [r4, #12]
 8007188:	0598      	lsls	r0, r3, #22
 800718a:	d402      	bmi.n	8007192 <_puts_r+0x22>
 800718c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800718e:	f000 f880 	bl	8007292 <__retarget_lock_acquire_recursive>
 8007192:	89a3      	ldrh	r3, [r4, #12]
 8007194:	0719      	lsls	r1, r3, #28
 8007196:	d502      	bpl.n	800719e <_puts_r+0x2e>
 8007198:	6923      	ldr	r3, [r4, #16]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d135      	bne.n	800720a <_puts_r+0x9a>
 800719e:	4621      	mov	r1, r4
 80071a0:	4628      	mov	r0, r5
 80071a2:	f000 fea7 	bl	8007ef4 <__swsetup_r>
 80071a6:	b380      	cbz	r0, 800720a <_puts_r+0x9a>
 80071a8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80071ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80071ae:	07da      	lsls	r2, r3, #31
 80071b0:	d405      	bmi.n	80071be <_puts_r+0x4e>
 80071b2:	89a3      	ldrh	r3, [r4, #12]
 80071b4:	059b      	lsls	r3, r3, #22
 80071b6:	d402      	bmi.n	80071be <_puts_r+0x4e>
 80071b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80071ba:	f000 f86b 	bl	8007294 <__retarget_lock_release_recursive>
 80071be:	4628      	mov	r0, r5
 80071c0:	bd70      	pop	{r4, r5, r6, pc}
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	da04      	bge.n	80071d0 <_puts_r+0x60>
 80071c6:	69a2      	ldr	r2, [r4, #24]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	dc17      	bgt.n	80071fc <_puts_r+0x8c>
 80071cc:	290a      	cmp	r1, #10
 80071ce:	d015      	beq.n	80071fc <_puts_r+0x8c>
 80071d0:	6823      	ldr	r3, [r4, #0]
 80071d2:	1c5a      	adds	r2, r3, #1
 80071d4:	6022      	str	r2, [r4, #0]
 80071d6:	7019      	strb	r1, [r3, #0]
 80071d8:	68a3      	ldr	r3, [r4, #8]
 80071da:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80071de:	3b01      	subs	r3, #1
 80071e0:	60a3      	str	r3, [r4, #8]
 80071e2:	2900      	cmp	r1, #0
 80071e4:	d1ed      	bne.n	80071c2 <_puts_r+0x52>
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	da11      	bge.n	800720e <_puts_r+0x9e>
 80071ea:	4622      	mov	r2, r4
 80071ec:	210a      	movs	r1, #10
 80071ee:	4628      	mov	r0, r5
 80071f0:	f000 fe41 	bl	8007e76 <__swbuf_r>
 80071f4:	3001      	adds	r0, #1
 80071f6:	d0d7      	beq.n	80071a8 <_puts_r+0x38>
 80071f8:	250a      	movs	r5, #10
 80071fa:	e7d7      	b.n	80071ac <_puts_r+0x3c>
 80071fc:	4622      	mov	r2, r4
 80071fe:	4628      	mov	r0, r5
 8007200:	f000 fe39 	bl	8007e76 <__swbuf_r>
 8007204:	3001      	adds	r0, #1
 8007206:	d1e7      	bne.n	80071d8 <_puts_r+0x68>
 8007208:	e7ce      	b.n	80071a8 <_puts_r+0x38>
 800720a:	3e01      	subs	r6, #1
 800720c:	e7e4      	b.n	80071d8 <_puts_r+0x68>
 800720e:	6823      	ldr	r3, [r4, #0]
 8007210:	1c5a      	adds	r2, r3, #1
 8007212:	6022      	str	r2, [r4, #0]
 8007214:	220a      	movs	r2, #10
 8007216:	701a      	strb	r2, [r3, #0]
 8007218:	e7ee      	b.n	80071f8 <_puts_r+0x88>
	...

0800721c <puts>:
 800721c:	4b02      	ldr	r3, [pc, #8]	@ (8007228 <puts+0xc>)
 800721e:	4601      	mov	r1, r0
 8007220:	6818      	ldr	r0, [r3, #0]
 8007222:	f7ff bfa5 	b.w	8007170 <_puts_r>
 8007226:	bf00      	nop
 8007228:	20000030 	.word	0x20000030

0800722c <memset>:
 800722c:	4402      	add	r2, r0
 800722e:	4603      	mov	r3, r0
 8007230:	4293      	cmp	r3, r2
 8007232:	d100      	bne.n	8007236 <memset+0xa>
 8007234:	4770      	bx	lr
 8007236:	f803 1b01 	strb.w	r1, [r3], #1
 800723a:	e7f9      	b.n	8007230 <memset+0x4>

0800723c <__errno>:
 800723c:	4b01      	ldr	r3, [pc, #4]	@ (8007244 <__errno+0x8>)
 800723e:	6818      	ldr	r0, [r3, #0]
 8007240:	4770      	bx	lr
 8007242:	bf00      	nop
 8007244:	20000030 	.word	0x20000030

08007248 <__libc_init_array>:
 8007248:	b570      	push	{r4, r5, r6, lr}
 800724a:	4d0d      	ldr	r5, [pc, #52]	@ (8007280 <__libc_init_array+0x38>)
 800724c:	4c0d      	ldr	r4, [pc, #52]	@ (8007284 <__libc_init_array+0x3c>)
 800724e:	1b64      	subs	r4, r4, r5
 8007250:	10a4      	asrs	r4, r4, #2
 8007252:	2600      	movs	r6, #0
 8007254:	42a6      	cmp	r6, r4
 8007256:	d109      	bne.n	800726c <__libc_init_array+0x24>
 8007258:	4d0b      	ldr	r5, [pc, #44]	@ (8007288 <__libc_init_array+0x40>)
 800725a:	4c0c      	ldr	r4, [pc, #48]	@ (800728c <__libc_init_array+0x44>)
 800725c:	f000 fff4 	bl	8008248 <_init>
 8007260:	1b64      	subs	r4, r4, r5
 8007262:	10a4      	asrs	r4, r4, #2
 8007264:	2600      	movs	r6, #0
 8007266:	42a6      	cmp	r6, r4
 8007268:	d105      	bne.n	8007276 <__libc_init_array+0x2e>
 800726a:	bd70      	pop	{r4, r5, r6, pc}
 800726c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007270:	4798      	blx	r3
 8007272:	3601      	adds	r6, #1
 8007274:	e7ee      	b.n	8007254 <__libc_init_array+0xc>
 8007276:	f855 3b04 	ldr.w	r3, [r5], #4
 800727a:	4798      	blx	r3
 800727c:	3601      	adds	r6, #1
 800727e:	e7f2      	b.n	8007266 <__libc_init_array+0x1e>
 8007280:	0800a128 	.word	0x0800a128
 8007284:	0800a128 	.word	0x0800a128
 8007288:	0800a128 	.word	0x0800a128
 800728c:	0800a12c 	.word	0x0800a12c

08007290 <__retarget_lock_init_recursive>:
 8007290:	4770      	bx	lr

08007292 <__retarget_lock_acquire_recursive>:
 8007292:	4770      	bx	lr

08007294 <__retarget_lock_release_recursive>:
 8007294:	4770      	bx	lr

08007296 <__ssputs_r>:
 8007296:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800729a:	688e      	ldr	r6, [r1, #8]
 800729c:	461f      	mov	r7, r3
 800729e:	42be      	cmp	r6, r7
 80072a0:	680b      	ldr	r3, [r1, #0]
 80072a2:	4682      	mov	sl, r0
 80072a4:	460c      	mov	r4, r1
 80072a6:	4690      	mov	r8, r2
 80072a8:	d82d      	bhi.n	8007306 <__ssputs_r+0x70>
 80072aa:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80072ae:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80072b2:	d026      	beq.n	8007302 <__ssputs_r+0x6c>
 80072b4:	6965      	ldr	r5, [r4, #20]
 80072b6:	6909      	ldr	r1, [r1, #16]
 80072b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80072bc:	eba3 0901 	sub.w	r9, r3, r1
 80072c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80072c4:	1c7b      	adds	r3, r7, #1
 80072c6:	444b      	add	r3, r9
 80072c8:	106d      	asrs	r5, r5, #1
 80072ca:	429d      	cmp	r5, r3
 80072cc:	bf38      	it	cc
 80072ce:	461d      	movcc	r5, r3
 80072d0:	0553      	lsls	r3, r2, #21
 80072d2:	d527      	bpl.n	8007324 <__ssputs_r+0x8e>
 80072d4:	4629      	mov	r1, r5
 80072d6:	f000 fa99 	bl	800780c <_malloc_r>
 80072da:	4606      	mov	r6, r0
 80072dc:	b360      	cbz	r0, 8007338 <__ssputs_r+0xa2>
 80072de:	6921      	ldr	r1, [r4, #16]
 80072e0:	464a      	mov	r2, r9
 80072e2:	f000 ff51 	bl	8008188 <memcpy>
 80072e6:	89a3      	ldrh	r3, [r4, #12]
 80072e8:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80072ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072f0:	81a3      	strh	r3, [r4, #12]
 80072f2:	6126      	str	r6, [r4, #16]
 80072f4:	6165      	str	r5, [r4, #20]
 80072f6:	444e      	add	r6, r9
 80072f8:	eba5 0509 	sub.w	r5, r5, r9
 80072fc:	6026      	str	r6, [r4, #0]
 80072fe:	60a5      	str	r5, [r4, #8]
 8007300:	463e      	mov	r6, r7
 8007302:	42be      	cmp	r6, r7
 8007304:	d900      	bls.n	8007308 <__ssputs_r+0x72>
 8007306:	463e      	mov	r6, r7
 8007308:	6820      	ldr	r0, [r4, #0]
 800730a:	4632      	mov	r2, r6
 800730c:	4641      	mov	r1, r8
 800730e:	f000 fea9 	bl	8008064 <memmove>
 8007312:	68a3      	ldr	r3, [r4, #8]
 8007314:	1b9b      	subs	r3, r3, r6
 8007316:	60a3      	str	r3, [r4, #8]
 8007318:	6823      	ldr	r3, [r4, #0]
 800731a:	4433      	add	r3, r6
 800731c:	6023      	str	r3, [r4, #0]
 800731e:	2000      	movs	r0, #0
 8007320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007324:	462a      	mov	r2, r5
 8007326:	f000 fd78 	bl	8007e1a <_realloc_r>
 800732a:	4606      	mov	r6, r0
 800732c:	2800      	cmp	r0, #0
 800732e:	d1e0      	bne.n	80072f2 <__ssputs_r+0x5c>
 8007330:	6921      	ldr	r1, [r4, #16]
 8007332:	4650      	mov	r0, sl
 8007334:	f000 ff36 	bl	80081a4 <_free_r>
 8007338:	230c      	movs	r3, #12
 800733a:	f8ca 3000 	str.w	r3, [sl]
 800733e:	89a3      	ldrh	r3, [r4, #12]
 8007340:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007344:	81a3      	strh	r3, [r4, #12]
 8007346:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800734a:	e7e9      	b.n	8007320 <__ssputs_r+0x8a>

0800734c <_svfiprintf_r>:
 800734c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007350:	4698      	mov	r8, r3
 8007352:	898b      	ldrh	r3, [r1, #12]
 8007354:	061b      	lsls	r3, r3, #24
 8007356:	b09d      	sub	sp, #116	@ 0x74
 8007358:	4607      	mov	r7, r0
 800735a:	460d      	mov	r5, r1
 800735c:	4614      	mov	r4, r2
 800735e:	d510      	bpl.n	8007382 <_svfiprintf_r+0x36>
 8007360:	690b      	ldr	r3, [r1, #16]
 8007362:	b973      	cbnz	r3, 8007382 <_svfiprintf_r+0x36>
 8007364:	2140      	movs	r1, #64	@ 0x40
 8007366:	f000 fa51 	bl	800780c <_malloc_r>
 800736a:	6028      	str	r0, [r5, #0]
 800736c:	6128      	str	r0, [r5, #16]
 800736e:	b930      	cbnz	r0, 800737e <_svfiprintf_r+0x32>
 8007370:	230c      	movs	r3, #12
 8007372:	603b      	str	r3, [r7, #0]
 8007374:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007378:	b01d      	add	sp, #116	@ 0x74
 800737a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800737e:	2340      	movs	r3, #64	@ 0x40
 8007380:	616b      	str	r3, [r5, #20]
 8007382:	2300      	movs	r3, #0
 8007384:	9309      	str	r3, [sp, #36]	@ 0x24
 8007386:	2320      	movs	r3, #32
 8007388:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800738c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007390:	2330      	movs	r3, #48	@ 0x30
 8007392:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007530 <_svfiprintf_r+0x1e4>
 8007396:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800739a:	f04f 0901 	mov.w	r9, #1
 800739e:	4623      	mov	r3, r4
 80073a0:	469a      	mov	sl, r3
 80073a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073a6:	b10a      	cbz	r2, 80073ac <_svfiprintf_r+0x60>
 80073a8:	2a25      	cmp	r2, #37	@ 0x25
 80073aa:	d1f9      	bne.n	80073a0 <_svfiprintf_r+0x54>
 80073ac:	ebba 0b04 	subs.w	fp, sl, r4
 80073b0:	d00b      	beq.n	80073ca <_svfiprintf_r+0x7e>
 80073b2:	465b      	mov	r3, fp
 80073b4:	4622      	mov	r2, r4
 80073b6:	4629      	mov	r1, r5
 80073b8:	4638      	mov	r0, r7
 80073ba:	f7ff ff6c 	bl	8007296 <__ssputs_r>
 80073be:	3001      	adds	r0, #1
 80073c0:	f000 80a7 	beq.w	8007512 <_svfiprintf_r+0x1c6>
 80073c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073c6:	445a      	add	r2, fp
 80073c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80073ca:	f89a 3000 	ldrb.w	r3, [sl]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	f000 809f 	beq.w	8007512 <_svfiprintf_r+0x1c6>
 80073d4:	2300      	movs	r3, #0
 80073d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80073da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073de:	f10a 0a01 	add.w	sl, sl, #1
 80073e2:	9304      	str	r3, [sp, #16]
 80073e4:	9307      	str	r3, [sp, #28]
 80073e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80073ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80073ec:	4654      	mov	r4, sl
 80073ee:	2205      	movs	r2, #5
 80073f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073f4:	484e      	ldr	r0, [pc, #312]	@ (8007530 <_svfiprintf_r+0x1e4>)
 80073f6:	f7f8 ff03 	bl	8000200 <memchr>
 80073fa:	9a04      	ldr	r2, [sp, #16]
 80073fc:	b9d8      	cbnz	r0, 8007436 <_svfiprintf_r+0xea>
 80073fe:	06d0      	lsls	r0, r2, #27
 8007400:	bf44      	itt	mi
 8007402:	2320      	movmi	r3, #32
 8007404:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007408:	0711      	lsls	r1, r2, #28
 800740a:	bf44      	itt	mi
 800740c:	232b      	movmi	r3, #43	@ 0x2b
 800740e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007412:	f89a 3000 	ldrb.w	r3, [sl]
 8007416:	2b2a      	cmp	r3, #42	@ 0x2a
 8007418:	d015      	beq.n	8007446 <_svfiprintf_r+0xfa>
 800741a:	9a07      	ldr	r2, [sp, #28]
 800741c:	4654      	mov	r4, sl
 800741e:	2000      	movs	r0, #0
 8007420:	f04f 0c0a 	mov.w	ip, #10
 8007424:	4621      	mov	r1, r4
 8007426:	f811 3b01 	ldrb.w	r3, [r1], #1
 800742a:	3b30      	subs	r3, #48	@ 0x30
 800742c:	2b09      	cmp	r3, #9
 800742e:	d94b      	bls.n	80074c8 <_svfiprintf_r+0x17c>
 8007430:	b1b0      	cbz	r0, 8007460 <_svfiprintf_r+0x114>
 8007432:	9207      	str	r2, [sp, #28]
 8007434:	e014      	b.n	8007460 <_svfiprintf_r+0x114>
 8007436:	eba0 0308 	sub.w	r3, r0, r8
 800743a:	fa09 f303 	lsl.w	r3, r9, r3
 800743e:	4313      	orrs	r3, r2
 8007440:	9304      	str	r3, [sp, #16]
 8007442:	46a2      	mov	sl, r4
 8007444:	e7d2      	b.n	80073ec <_svfiprintf_r+0xa0>
 8007446:	9b03      	ldr	r3, [sp, #12]
 8007448:	1d19      	adds	r1, r3, #4
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	9103      	str	r1, [sp, #12]
 800744e:	2b00      	cmp	r3, #0
 8007450:	bfbb      	ittet	lt
 8007452:	425b      	neglt	r3, r3
 8007454:	f042 0202 	orrlt.w	r2, r2, #2
 8007458:	9307      	strge	r3, [sp, #28]
 800745a:	9307      	strlt	r3, [sp, #28]
 800745c:	bfb8      	it	lt
 800745e:	9204      	strlt	r2, [sp, #16]
 8007460:	7823      	ldrb	r3, [r4, #0]
 8007462:	2b2e      	cmp	r3, #46	@ 0x2e
 8007464:	d10a      	bne.n	800747c <_svfiprintf_r+0x130>
 8007466:	7863      	ldrb	r3, [r4, #1]
 8007468:	2b2a      	cmp	r3, #42	@ 0x2a
 800746a:	d132      	bne.n	80074d2 <_svfiprintf_r+0x186>
 800746c:	9b03      	ldr	r3, [sp, #12]
 800746e:	1d1a      	adds	r2, r3, #4
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	9203      	str	r2, [sp, #12]
 8007474:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007478:	3402      	adds	r4, #2
 800747a:	9305      	str	r3, [sp, #20]
 800747c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007540 <_svfiprintf_r+0x1f4>
 8007480:	7821      	ldrb	r1, [r4, #0]
 8007482:	2203      	movs	r2, #3
 8007484:	4650      	mov	r0, sl
 8007486:	f7f8 febb 	bl	8000200 <memchr>
 800748a:	b138      	cbz	r0, 800749c <_svfiprintf_r+0x150>
 800748c:	9b04      	ldr	r3, [sp, #16]
 800748e:	eba0 000a 	sub.w	r0, r0, sl
 8007492:	2240      	movs	r2, #64	@ 0x40
 8007494:	4082      	lsls	r2, r0
 8007496:	4313      	orrs	r3, r2
 8007498:	3401      	adds	r4, #1
 800749a:	9304      	str	r3, [sp, #16]
 800749c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074a0:	4824      	ldr	r0, [pc, #144]	@ (8007534 <_svfiprintf_r+0x1e8>)
 80074a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80074a6:	2206      	movs	r2, #6
 80074a8:	f7f8 feaa 	bl	8000200 <memchr>
 80074ac:	2800      	cmp	r0, #0
 80074ae:	d036      	beq.n	800751e <_svfiprintf_r+0x1d2>
 80074b0:	4b21      	ldr	r3, [pc, #132]	@ (8007538 <_svfiprintf_r+0x1ec>)
 80074b2:	bb1b      	cbnz	r3, 80074fc <_svfiprintf_r+0x1b0>
 80074b4:	9b03      	ldr	r3, [sp, #12]
 80074b6:	3307      	adds	r3, #7
 80074b8:	f023 0307 	bic.w	r3, r3, #7
 80074bc:	3308      	adds	r3, #8
 80074be:	9303      	str	r3, [sp, #12]
 80074c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074c2:	4433      	add	r3, r6
 80074c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80074c6:	e76a      	b.n	800739e <_svfiprintf_r+0x52>
 80074c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80074cc:	460c      	mov	r4, r1
 80074ce:	2001      	movs	r0, #1
 80074d0:	e7a8      	b.n	8007424 <_svfiprintf_r+0xd8>
 80074d2:	2300      	movs	r3, #0
 80074d4:	3401      	adds	r4, #1
 80074d6:	9305      	str	r3, [sp, #20]
 80074d8:	4619      	mov	r1, r3
 80074da:	f04f 0c0a 	mov.w	ip, #10
 80074de:	4620      	mov	r0, r4
 80074e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074e4:	3a30      	subs	r2, #48	@ 0x30
 80074e6:	2a09      	cmp	r2, #9
 80074e8:	d903      	bls.n	80074f2 <_svfiprintf_r+0x1a6>
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d0c6      	beq.n	800747c <_svfiprintf_r+0x130>
 80074ee:	9105      	str	r1, [sp, #20]
 80074f0:	e7c4      	b.n	800747c <_svfiprintf_r+0x130>
 80074f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80074f6:	4604      	mov	r4, r0
 80074f8:	2301      	movs	r3, #1
 80074fa:	e7f0      	b.n	80074de <_svfiprintf_r+0x192>
 80074fc:	ab03      	add	r3, sp, #12
 80074fe:	9300      	str	r3, [sp, #0]
 8007500:	462a      	mov	r2, r5
 8007502:	4b0e      	ldr	r3, [pc, #56]	@ (800753c <_svfiprintf_r+0x1f0>)
 8007504:	a904      	add	r1, sp, #16
 8007506:	4638      	mov	r0, r7
 8007508:	f3af 8000 	nop.w
 800750c:	1c42      	adds	r2, r0, #1
 800750e:	4606      	mov	r6, r0
 8007510:	d1d6      	bne.n	80074c0 <_svfiprintf_r+0x174>
 8007512:	89ab      	ldrh	r3, [r5, #12]
 8007514:	065b      	lsls	r3, r3, #25
 8007516:	f53f af2d 	bmi.w	8007374 <_svfiprintf_r+0x28>
 800751a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800751c:	e72c      	b.n	8007378 <_svfiprintf_r+0x2c>
 800751e:	ab03      	add	r3, sp, #12
 8007520:	9300      	str	r3, [sp, #0]
 8007522:	462a      	mov	r2, r5
 8007524:	4b05      	ldr	r3, [pc, #20]	@ (800753c <_svfiprintf_r+0x1f0>)
 8007526:	a904      	add	r1, sp, #16
 8007528:	4638      	mov	r0, r7
 800752a:	f000 fa5d 	bl	80079e8 <_printf_i>
 800752e:	e7ed      	b.n	800750c <_svfiprintf_r+0x1c0>
 8007530:	0800a0ec 	.word	0x0800a0ec
 8007534:	0800a0f6 	.word	0x0800a0f6
 8007538:	00000000 	.word	0x00000000
 800753c:	08007297 	.word	0x08007297
 8007540:	0800a0f2 	.word	0x0800a0f2

08007544 <__sfputc_r>:
 8007544:	6893      	ldr	r3, [r2, #8]
 8007546:	3b01      	subs	r3, #1
 8007548:	2b00      	cmp	r3, #0
 800754a:	b410      	push	{r4}
 800754c:	6093      	str	r3, [r2, #8]
 800754e:	da08      	bge.n	8007562 <__sfputc_r+0x1e>
 8007550:	6994      	ldr	r4, [r2, #24]
 8007552:	42a3      	cmp	r3, r4
 8007554:	db01      	blt.n	800755a <__sfputc_r+0x16>
 8007556:	290a      	cmp	r1, #10
 8007558:	d103      	bne.n	8007562 <__sfputc_r+0x1e>
 800755a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800755e:	f000 bc8a 	b.w	8007e76 <__swbuf_r>
 8007562:	6813      	ldr	r3, [r2, #0]
 8007564:	1c58      	adds	r0, r3, #1
 8007566:	6010      	str	r0, [r2, #0]
 8007568:	7019      	strb	r1, [r3, #0]
 800756a:	4608      	mov	r0, r1
 800756c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007570:	4770      	bx	lr

08007572 <__sfputs_r>:
 8007572:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007574:	4606      	mov	r6, r0
 8007576:	460f      	mov	r7, r1
 8007578:	4614      	mov	r4, r2
 800757a:	18d5      	adds	r5, r2, r3
 800757c:	42ac      	cmp	r4, r5
 800757e:	d101      	bne.n	8007584 <__sfputs_r+0x12>
 8007580:	2000      	movs	r0, #0
 8007582:	e007      	b.n	8007594 <__sfputs_r+0x22>
 8007584:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007588:	463a      	mov	r2, r7
 800758a:	4630      	mov	r0, r6
 800758c:	f7ff ffda 	bl	8007544 <__sfputc_r>
 8007590:	1c43      	adds	r3, r0, #1
 8007592:	d1f3      	bne.n	800757c <__sfputs_r+0xa>
 8007594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007598 <_vfiprintf_r>:
 8007598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800759c:	460d      	mov	r5, r1
 800759e:	b09d      	sub	sp, #116	@ 0x74
 80075a0:	4614      	mov	r4, r2
 80075a2:	4698      	mov	r8, r3
 80075a4:	4606      	mov	r6, r0
 80075a6:	b118      	cbz	r0, 80075b0 <_vfiprintf_r+0x18>
 80075a8:	6a03      	ldr	r3, [r0, #32]
 80075aa:	b90b      	cbnz	r3, 80075b0 <_vfiprintf_r+0x18>
 80075ac:	f7ff fd98 	bl	80070e0 <__sinit>
 80075b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80075b2:	07d9      	lsls	r1, r3, #31
 80075b4:	d405      	bmi.n	80075c2 <_vfiprintf_r+0x2a>
 80075b6:	89ab      	ldrh	r3, [r5, #12]
 80075b8:	059a      	lsls	r2, r3, #22
 80075ba:	d402      	bmi.n	80075c2 <_vfiprintf_r+0x2a>
 80075bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80075be:	f7ff fe68 	bl	8007292 <__retarget_lock_acquire_recursive>
 80075c2:	89ab      	ldrh	r3, [r5, #12]
 80075c4:	071b      	lsls	r3, r3, #28
 80075c6:	d501      	bpl.n	80075cc <_vfiprintf_r+0x34>
 80075c8:	692b      	ldr	r3, [r5, #16]
 80075ca:	b99b      	cbnz	r3, 80075f4 <_vfiprintf_r+0x5c>
 80075cc:	4629      	mov	r1, r5
 80075ce:	4630      	mov	r0, r6
 80075d0:	f000 fc90 	bl	8007ef4 <__swsetup_r>
 80075d4:	b170      	cbz	r0, 80075f4 <_vfiprintf_r+0x5c>
 80075d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80075d8:	07dc      	lsls	r4, r3, #31
 80075da:	d504      	bpl.n	80075e6 <_vfiprintf_r+0x4e>
 80075dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80075e0:	b01d      	add	sp, #116	@ 0x74
 80075e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075e6:	89ab      	ldrh	r3, [r5, #12]
 80075e8:	0598      	lsls	r0, r3, #22
 80075ea:	d4f7      	bmi.n	80075dc <_vfiprintf_r+0x44>
 80075ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80075ee:	f7ff fe51 	bl	8007294 <__retarget_lock_release_recursive>
 80075f2:	e7f3      	b.n	80075dc <_vfiprintf_r+0x44>
 80075f4:	2300      	movs	r3, #0
 80075f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80075f8:	2320      	movs	r3, #32
 80075fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80075fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8007602:	2330      	movs	r3, #48	@ 0x30
 8007604:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80077b4 <_vfiprintf_r+0x21c>
 8007608:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800760c:	f04f 0901 	mov.w	r9, #1
 8007610:	4623      	mov	r3, r4
 8007612:	469a      	mov	sl, r3
 8007614:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007618:	b10a      	cbz	r2, 800761e <_vfiprintf_r+0x86>
 800761a:	2a25      	cmp	r2, #37	@ 0x25
 800761c:	d1f9      	bne.n	8007612 <_vfiprintf_r+0x7a>
 800761e:	ebba 0b04 	subs.w	fp, sl, r4
 8007622:	d00b      	beq.n	800763c <_vfiprintf_r+0xa4>
 8007624:	465b      	mov	r3, fp
 8007626:	4622      	mov	r2, r4
 8007628:	4629      	mov	r1, r5
 800762a:	4630      	mov	r0, r6
 800762c:	f7ff ffa1 	bl	8007572 <__sfputs_r>
 8007630:	3001      	adds	r0, #1
 8007632:	f000 80a7 	beq.w	8007784 <_vfiprintf_r+0x1ec>
 8007636:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007638:	445a      	add	r2, fp
 800763a:	9209      	str	r2, [sp, #36]	@ 0x24
 800763c:	f89a 3000 	ldrb.w	r3, [sl]
 8007640:	2b00      	cmp	r3, #0
 8007642:	f000 809f 	beq.w	8007784 <_vfiprintf_r+0x1ec>
 8007646:	2300      	movs	r3, #0
 8007648:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800764c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007650:	f10a 0a01 	add.w	sl, sl, #1
 8007654:	9304      	str	r3, [sp, #16]
 8007656:	9307      	str	r3, [sp, #28]
 8007658:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800765c:	931a      	str	r3, [sp, #104]	@ 0x68
 800765e:	4654      	mov	r4, sl
 8007660:	2205      	movs	r2, #5
 8007662:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007666:	4853      	ldr	r0, [pc, #332]	@ (80077b4 <_vfiprintf_r+0x21c>)
 8007668:	f7f8 fdca 	bl	8000200 <memchr>
 800766c:	9a04      	ldr	r2, [sp, #16]
 800766e:	b9d8      	cbnz	r0, 80076a8 <_vfiprintf_r+0x110>
 8007670:	06d1      	lsls	r1, r2, #27
 8007672:	bf44      	itt	mi
 8007674:	2320      	movmi	r3, #32
 8007676:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800767a:	0713      	lsls	r3, r2, #28
 800767c:	bf44      	itt	mi
 800767e:	232b      	movmi	r3, #43	@ 0x2b
 8007680:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007684:	f89a 3000 	ldrb.w	r3, [sl]
 8007688:	2b2a      	cmp	r3, #42	@ 0x2a
 800768a:	d015      	beq.n	80076b8 <_vfiprintf_r+0x120>
 800768c:	9a07      	ldr	r2, [sp, #28]
 800768e:	4654      	mov	r4, sl
 8007690:	2000      	movs	r0, #0
 8007692:	f04f 0c0a 	mov.w	ip, #10
 8007696:	4621      	mov	r1, r4
 8007698:	f811 3b01 	ldrb.w	r3, [r1], #1
 800769c:	3b30      	subs	r3, #48	@ 0x30
 800769e:	2b09      	cmp	r3, #9
 80076a0:	d94b      	bls.n	800773a <_vfiprintf_r+0x1a2>
 80076a2:	b1b0      	cbz	r0, 80076d2 <_vfiprintf_r+0x13a>
 80076a4:	9207      	str	r2, [sp, #28]
 80076a6:	e014      	b.n	80076d2 <_vfiprintf_r+0x13a>
 80076a8:	eba0 0308 	sub.w	r3, r0, r8
 80076ac:	fa09 f303 	lsl.w	r3, r9, r3
 80076b0:	4313      	orrs	r3, r2
 80076b2:	9304      	str	r3, [sp, #16]
 80076b4:	46a2      	mov	sl, r4
 80076b6:	e7d2      	b.n	800765e <_vfiprintf_r+0xc6>
 80076b8:	9b03      	ldr	r3, [sp, #12]
 80076ba:	1d19      	adds	r1, r3, #4
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	9103      	str	r1, [sp, #12]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	bfbb      	ittet	lt
 80076c4:	425b      	neglt	r3, r3
 80076c6:	f042 0202 	orrlt.w	r2, r2, #2
 80076ca:	9307      	strge	r3, [sp, #28]
 80076cc:	9307      	strlt	r3, [sp, #28]
 80076ce:	bfb8      	it	lt
 80076d0:	9204      	strlt	r2, [sp, #16]
 80076d2:	7823      	ldrb	r3, [r4, #0]
 80076d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80076d6:	d10a      	bne.n	80076ee <_vfiprintf_r+0x156>
 80076d8:	7863      	ldrb	r3, [r4, #1]
 80076da:	2b2a      	cmp	r3, #42	@ 0x2a
 80076dc:	d132      	bne.n	8007744 <_vfiprintf_r+0x1ac>
 80076de:	9b03      	ldr	r3, [sp, #12]
 80076e0:	1d1a      	adds	r2, r3, #4
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	9203      	str	r2, [sp, #12]
 80076e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80076ea:	3402      	adds	r4, #2
 80076ec:	9305      	str	r3, [sp, #20]
 80076ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80077c4 <_vfiprintf_r+0x22c>
 80076f2:	7821      	ldrb	r1, [r4, #0]
 80076f4:	2203      	movs	r2, #3
 80076f6:	4650      	mov	r0, sl
 80076f8:	f7f8 fd82 	bl	8000200 <memchr>
 80076fc:	b138      	cbz	r0, 800770e <_vfiprintf_r+0x176>
 80076fe:	9b04      	ldr	r3, [sp, #16]
 8007700:	eba0 000a 	sub.w	r0, r0, sl
 8007704:	2240      	movs	r2, #64	@ 0x40
 8007706:	4082      	lsls	r2, r0
 8007708:	4313      	orrs	r3, r2
 800770a:	3401      	adds	r4, #1
 800770c:	9304      	str	r3, [sp, #16]
 800770e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007712:	4829      	ldr	r0, [pc, #164]	@ (80077b8 <_vfiprintf_r+0x220>)
 8007714:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007718:	2206      	movs	r2, #6
 800771a:	f7f8 fd71 	bl	8000200 <memchr>
 800771e:	2800      	cmp	r0, #0
 8007720:	d03f      	beq.n	80077a2 <_vfiprintf_r+0x20a>
 8007722:	4b26      	ldr	r3, [pc, #152]	@ (80077bc <_vfiprintf_r+0x224>)
 8007724:	bb1b      	cbnz	r3, 800776e <_vfiprintf_r+0x1d6>
 8007726:	9b03      	ldr	r3, [sp, #12]
 8007728:	3307      	adds	r3, #7
 800772a:	f023 0307 	bic.w	r3, r3, #7
 800772e:	3308      	adds	r3, #8
 8007730:	9303      	str	r3, [sp, #12]
 8007732:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007734:	443b      	add	r3, r7
 8007736:	9309      	str	r3, [sp, #36]	@ 0x24
 8007738:	e76a      	b.n	8007610 <_vfiprintf_r+0x78>
 800773a:	fb0c 3202 	mla	r2, ip, r2, r3
 800773e:	460c      	mov	r4, r1
 8007740:	2001      	movs	r0, #1
 8007742:	e7a8      	b.n	8007696 <_vfiprintf_r+0xfe>
 8007744:	2300      	movs	r3, #0
 8007746:	3401      	adds	r4, #1
 8007748:	9305      	str	r3, [sp, #20]
 800774a:	4619      	mov	r1, r3
 800774c:	f04f 0c0a 	mov.w	ip, #10
 8007750:	4620      	mov	r0, r4
 8007752:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007756:	3a30      	subs	r2, #48	@ 0x30
 8007758:	2a09      	cmp	r2, #9
 800775a:	d903      	bls.n	8007764 <_vfiprintf_r+0x1cc>
 800775c:	2b00      	cmp	r3, #0
 800775e:	d0c6      	beq.n	80076ee <_vfiprintf_r+0x156>
 8007760:	9105      	str	r1, [sp, #20]
 8007762:	e7c4      	b.n	80076ee <_vfiprintf_r+0x156>
 8007764:	fb0c 2101 	mla	r1, ip, r1, r2
 8007768:	4604      	mov	r4, r0
 800776a:	2301      	movs	r3, #1
 800776c:	e7f0      	b.n	8007750 <_vfiprintf_r+0x1b8>
 800776e:	ab03      	add	r3, sp, #12
 8007770:	9300      	str	r3, [sp, #0]
 8007772:	462a      	mov	r2, r5
 8007774:	4b12      	ldr	r3, [pc, #72]	@ (80077c0 <_vfiprintf_r+0x228>)
 8007776:	a904      	add	r1, sp, #16
 8007778:	4630      	mov	r0, r6
 800777a:	f3af 8000 	nop.w
 800777e:	4607      	mov	r7, r0
 8007780:	1c78      	adds	r0, r7, #1
 8007782:	d1d6      	bne.n	8007732 <_vfiprintf_r+0x19a>
 8007784:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007786:	07d9      	lsls	r1, r3, #31
 8007788:	d405      	bmi.n	8007796 <_vfiprintf_r+0x1fe>
 800778a:	89ab      	ldrh	r3, [r5, #12]
 800778c:	059a      	lsls	r2, r3, #22
 800778e:	d402      	bmi.n	8007796 <_vfiprintf_r+0x1fe>
 8007790:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007792:	f7ff fd7f 	bl	8007294 <__retarget_lock_release_recursive>
 8007796:	89ab      	ldrh	r3, [r5, #12]
 8007798:	065b      	lsls	r3, r3, #25
 800779a:	f53f af1f 	bmi.w	80075dc <_vfiprintf_r+0x44>
 800779e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80077a0:	e71e      	b.n	80075e0 <_vfiprintf_r+0x48>
 80077a2:	ab03      	add	r3, sp, #12
 80077a4:	9300      	str	r3, [sp, #0]
 80077a6:	462a      	mov	r2, r5
 80077a8:	4b05      	ldr	r3, [pc, #20]	@ (80077c0 <_vfiprintf_r+0x228>)
 80077aa:	a904      	add	r1, sp, #16
 80077ac:	4630      	mov	r0, r6
 80077ae:	f000 f91b 	bl	80079e8 <_printf_i>
 80077b2:	e7e4      	b.n	800777e <_vfiprintf_r+0x1e6>
 80077b4:	0800a0ec 	.word	0x0800a0ec
 80077b8:	0800a0f6 	.word	0x0800a0f6
 80077bc:	00000000 	.word	0x00000000
 80077c0:	08007573 	.word	0x08007573
 80077c4:	0800a0f2 	.word	0x0800a0f2

080077c8 <sbrk_aligned>:
 80077c8:	b570      	push	{r4, r5, r6, lr}
 80077ca:	4e0f      	ldr	r6, [pc, #60]	@ (8007808 <sbrk_aligned+0x40>)
 80077cc:	460c      	mov	r4, r1
 80077ce:	6831      	ldr	r1, [r6, #0]
 80077d0:	4605      	mov	r5, r0
 80077d2:	b911      	cbnz	r1, 80077da <sbrk_aligned+0x12>
 80077d4:	f000 fc94 	bl	8008100 <_sbrk_r>
 80077d8:	6030      	str	r0, [r6, #0]
 80077da:	4621      	mov	r1, r4
 80077dc:	4628      	mov	r0, r5
 80077de:	f000 fc8f 	bl	8008100 <_sbrk_r>
 80077e2:	1c43      	adds	r3, r0, #1
 80077e4:	d103      	bne.n	80077ee <sbrk_aligned+0x26>
 80077e6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80077ea:	4620      	mov	r0, r4
 80077ec:	bd70      	pop	{r4, r5, r6, pc}
 80077ee:	1cc4      	adds	r4, r0, #3
 80077f0:	f024 0403 	bic.w	r4, r4, #3
 80077f4:	42a0      	cmp	r0, r4
 80077f6:	d0f8      	beq.n	80077ea <sbrk_aligned+0x22>
 80077f8:	1a21      	subs	r1, r4, r0
 80077fa:	4628      	mov	r0, r5
 80077fc:	f000 fc80 	bl	8008100 <_sbrk_r>
 8007800:	3001      	adds	r0, #1
 8007802:	d1f2      	bne.n	80077ea <sbrk_aligned+0x22>
 8007804:	e7ef      	b.n	80077e6 <sbrk_aligned+0x1e>
 8007806:	bf00      	nop
 8007808:	20025d84 	.word	0x20025d84

0800780c <_malloc_r>:
 800780c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007810:	1ccd      	adds	r5, r1, #3
 8007812:	f025 0503 	bic.w	r5, r5, #3
 8007816:	3508      	adds	r5, #8
 8007818:	2d0c      	cmp	r5, #12
 800781a:	bf38      	it	cc
 800781c:	250c      	movcc	r5, #12
 800781e:	2d00      	cmp	r5, #0
 8007820:	4606      	mov	r6, r0
 8007822:	db01      	blt.n	8007828 <_malloc_r+0x1c>
 8007824:	42a9      	cmp	r1, r5
 8007826:	d904      	bls.n	8007832 <_malloc_r+0x26>
 8007828:	230c      	movs	r3, #12
 800782a:	6033      	str	r3, [r6, #0]
 800782c:	2000      	movs	r0, #0
 800782e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007832:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007908 <_malloc_r+0xfc>
 8007836:	f000 faa1 	bl	8007d7c <__malloc_lock>
 800783a:	f8d8 3000 	ldr.w	r3, [r8]
 800783e:	461c      	mov	r4, r3
 8007840:	bb44      	cbnz	r4, 8007894 <_malloc_r+0x88>
 8007842:	4629      	mov	r1, r5
 8007844:	4630      	mov	r0, r6
 8007846:	f7ff ffbf 	bl	80077c8 <sbrk_aligned>
 800784a:	1c43      	adds	r3, r0, #1
 800784c:	4604      	mov	r4, r0
 800784e:	d158      	bne.n	8007902 <_malloc_r+0xf6>
 8007850:	f8d8 4000 	ldr.w	r4, [r8]
 8007854:	4627      	mov	r7, r4
 8007856:	2f00      	cmp	r7, #0
 8007858:	d143      	bne.n	80078e2 <_malloc_r+0xd6>
 800785a:	2c00      	cmp	r4, #0
 800785c:	d04b      	beq.n	80078f6 <_malloc_r+0xea>
 800785e:	6823      	ldr	r3, [r4, #0]
 8007860:	4639      	mov	r1, r7
 8007862:	4630      	mov	r0, r6
 8007864:	eb04 0903 	add.w	r9, r4, r3
 8007868:	f000 fc4a 	bl	8008100 <_sbrk_r>
 800786c:	4581      	cmp	r9, r0
 800786e:	d142      	bne.n	80078f6 <_malloc_r+0xea>
 8007870:	6821      	ldr	r1, [r4, #0]
 8007872:	1a6d      	subs	r5, r5, r1
 8007874:	4629      	mov	r1, r5
 8007876:	4630      	mov	r0, r6
 8007878:	f7ff ffa6 	bl	80077c8 <sbrk_aligned>
 800787c:	3001      	adds	r0, #1
 800787e:	d03a      	beq.n	80078f6 <_malloc_r+0xea>
 8007880:	6823      	ldr	r3, [r4, #0]
 8007882:	442b      	add	r3, r5
 8007884:	6023      	str	r3, [r4, #0]
 8007886:	f8d8 3000 	ldr.w	r3, [r8]
 800788a:	685a      	ldr	r2, [r3, #4]
 800788c:	bb62      	cbnz	r2, 80078e8 <_malloc_r+0xdc>
 800788e:	f8c8 7000 	str.w	r7, [r8]
 8007892:	e00f      	b.n	80078b4 <_malloc_r+0xa8>
 8007894:	6822      	ldr	r2, [r4, #0]
 8007896:	1b52      	subs	r2, r2, r5
 8007898:	d420      	bmi.n	80078dc <_malloc_r+0xd0>
 800789a:	2a0b      	cmp	r2, #11
 800789c:	d917      	bls.n	80078ce <_malloc_r+0xc2>
 800789e:	1961      	adds	r1, r4, r5
 80078a0:	42a3      	cmp	r3, r4
 80078a2:	6025      	str	r5, [r4, #0]
 80078a4:	bf18      	it	ne
 80078a6:	6059      	strne	r1, [r3, #4]
 80078a8:	6863      	ldr	r3, [r4, #4]
 80078aa:	bf08      	it	eq
 80078ac:	f8c8 1000 	streq.w	r1, [r8]
 80078b0:	5162      	str	r2, [r4, r5]
 80078b2:	604b      	str	r3, [r1, #4]
 80078b4:	4630      	mov	r0, r6
 80078b6:	f000 fa67 	bl	8007d88 <__malloc_unlock>
 80078ba:	f104 000b 	add.w	r0, r4, #11
 80078be:	1d23      	adds	r3, r4, #4
 80078c0:	f020 0007 	bic.w	r0, r0, #7
 80078c4:	1ac2      	subs	r2, r0, r3
 80078c6:	bf1c      	itt	ne
 80078c8:	1a1b      	subne	r3, r3, r0
 80078ca:	50a3      	strne	r3, [r4, r2]
 80078cc:	e7af      	b.n	800782e <_malloc_r+0x22>
 80078ce:	6862      	ldr	r2, [r4, #4]
 80078d0:	42a3      	cmp	r3, r4
 80078d2:	bf0c      	ite	eq
 80078d4:	f8c8 2000 	streq.w	r2, [r8]
 80078d8:	605a      	strne	r2, [r3, #4]
 80078da:	e7eb      	b.n	80078b4 <_malloc_r+0xa8>
 80078dc:	4623      	mov	r3, r4
 80078de:	6864      	ldr	r4, [r4, #4]
 80078e0:	e7ae      	b.n	8007840 <_malloc_r+0x34>
 80078e2:	463c      	mov	r4, r7
 80078e4:	687f      	ldr	r7, [r7, #4]
 80078e6:	e7b6      	b.n	8007856 <_malloc_r+0x4a>
 80078e8:	461a      	mov	r2, r3
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	42a3      	cmp	r3, r4
 80078ee:	d1fb      	bne.n	80078e8 <_malloc_r+0xdc>
 80078f0:	2300      	movs	r3, #0
 80078f2:	6053      	str	r3, [r2, #4]
 80078f4:	e7de      	b.n	80078b4 <_malloc_r+0xa8>
 80078f6:	230c      	movs	r3, #12
 80078f8:	6033      	str	r3, [r6, #0]
 80078fa:	4630      	mov	r0, r6
 80078fc:	f000 fa44 	bl	8007d88 <__malloc_unlock>
 8007900:	e794      	b.n	800782c <_malloc_r+0x20>
 8007902:	6005      	str	r5, [r0, #0]
 8007904:	e7d6      	b.n	80078b4 <_malloc_r+0xa8>
 8007906:	bf00      	nop
 8007908:	20025d88 	.word	0x20025d88

0800790c <_printf_common>:
 800790c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007910:	4616      	mov	r6, r2
 8007912:	4698      	mov	r8, r3
 8007914:	688a      	ldr	r2, [r1, #8]
 8007916:	690b      	ldr	r3, [r1, #16]
 8007918:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800791c:	4293      	cmp	r3, r2
 800791e:	bfb8      	it	lt
 8007920:	4613      	movlt	r3, r2
 8007922:	6033      	str	r3, [r6, #0]
 8007924:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007928:	4607      	mov	r7, r0
 800792a:	460c      	mov	r4, r1
 800792c:	b10a      	cbz	r2, 8007932 <_printf_common+0x26>
 800792e:	3301      	adds	r3, #1
 8007930:	6033      	str	r3, [r6, #0]
 8007932:	6823      	ldr	r3, [r4, #0]
 8007934:	0699      	lsls	r1, r3, #26
 8007936:	bf42      	ittt	mi
 8007938:	6833      	ldrmi	r3, [r6, #0]
 800793a:	3302      	addmi	r3, #2
 800793c:	6033      	strmi	r3, [r6, #0]
 800793e:	6825      	ldr	r5, [r4, #0]
 8007940:	f015 0506 	ands.w	r5, r5, #6
 8007944:	d106      	bne.n	8007954 <_printf_common+0x48>
 8007946:	f104 0a19 	add.w	sl, r4, #25
 800794a:	68e3      	ldr	r3, [r4, #12]
 800794c:	6832      	ldr	r2, [r6, #0]
 800794e:	1a9b      	subs	r3, r3, r2
 8007950:	42ab      	cmp	r3, r5
 8007952:	dc26      	bgt.n	80079a2 <_printf_common+0x96>
 8007954:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007958:	6822      	ldr	r2, [r4, #0]
 800795a:	3b00      	subs	r3, #0
 800795c:	bf18      	it	ne
 800795e:	2301      	movne	r3, #1
 8007960:	0692      	lsls	r2, r2, #26
 8007962:	d42b      	bmi.n	80079bc <_printf_common+0xb0>
 8007964:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007968:	4641      	mov	r1, r8
 800796a:	4638      	mov	r0, r7
 800796c:	47c8      	blx	r9
 800796e:	3001      	adds	r0, #1
 8007970:	d01e      	beq.n	80079b0 <_printf_common+0xa4>
 8007972:	6823      	ldr	r3, [r4, #0]
 8007974:	6922      	ldr	r2, [r4, #16]
 8007976:	f003 0306 	and.w	r3, r3, #6
 800797a:	2b04      	cmp	r3, #4
 800797c:	bf02      	ittt	eq
 800797e:	68e5      	ldreq	r5, [r4, #12]
 8007980:	6833      	ldreq	r3, [r6, #0]
 8007982:	1aed      	subeq	r5, r5, r3
 8007984:	68a3      	ldr	r3, [r4, #8]
 8007986:	bf0c      	ite	eq
 8007988:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800798c:	2500      	movne	r5, #0
 800798e:	4293      	cmp	r3, r2
 8007990:	bfc4      	itt	gt
 8007992:	1a9b      	subgt	r3, r3, r2
 8007994:	18ed      	addgt	r5, r5, r3
 8007996:	2600      	movs	r6, #0
 8007998:	341a      	adds	r4, #26
 800799a:	42b5      	cmp	r5, r6
 800799c:	d11a      	bne.n	80079d4 <_printf_common+0xc8>
 800799e:	2000      	movs	r0, #0
 80079a0:	e008      	b.n	80079b4 <_printf_common+0xa8>
 80079a2:	2301      	movs	r3, #1
 80079a4:	4652      	mov	r2, sl
 80079a6:	4641      	mov	r1, r8
 80079a8:	4638      	mov	r0, r7
 80079aa:	47c8      	blx	r9
 80079ac:	3001      	adds	r0, #1
 80079ae:	d103      	bne.n	80079b8 <_printf_common+0xac>
 80079b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80079b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079b8:	3501      	adds	r5, #1
 80079ba:	e7c6      	b.n	800794a <_printf_common+0x3e>
 80079bc:	18e1      	adds	r1, r4, r3
 80079be:	1c5a      	adds	r2, r3, #1
 80079c0:	2030      	movs	r0, #48	@ 0x30
 80079c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80079c6:	4422      	add	r2, r4
 80079c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80079cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80079d0:	3302      	adds	r3, #2
 80079d2:	e7c7      	b.n	8007964 <_printf_common+0x58>
 80079d4:	2301      	movs	r3, #1
 80079d6:	4622      	mov	r2, r4
 80079d8:	4641      	mov	r1, r8
 80079da:	4638      	mov	r0, r7
 80079dc:	47c8      	blx	r9
 80079de:	3001      	adds	r0, #1
 80079e0:	d0e6      	beq.n	80079b0 <_printf_common+0xa4>
 80079e2:	3601      	adds	r6, #1
 80079e4:	e7d9      	b.n	800799a <_printf_common+0x8e>
	...

080079e8 <_printf_i>:
 80079e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079ec:	7e0f      	ldrb	r7, [r1, #24]
 80079ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80079f0:	2f78      	cmp	r7, #120	@ 0x78
 80079f2:	4691      	mov	r9, r2
 80079f4:	4680      	mov	r8, r0
 80079f6:	460c      	mov	r4, r1
 80079f8:	469a      	mov	sl, r3
 80079fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80079fe:	d807      	bhi.n	8007a10 <_printf_i+0x28>
 8007a00:	2f62      	cmp	r7, #98	@ 0x62
 8007a02:	d80a      	bhi.n	8007a1a <_printf_i+0x32>
 8007a04:	2f00      	cmp	r7, #0
 8007a06:	f000 80d1 	beq.w	8007bac <_printf_i+0x1c4>
 8007a0a:	2f58      	cmp	r7, #88	@ 0x58
 8007a0c:	f000 80b8 	beq.w	8007b80 <_printf_i+0x198>
 8007a10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007a18:	e03a      	b.n	8007a90 <_printf_i+0xa8>
 8007a1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007a1e:	2b15      	cmp	r3, #21
 8007a20:	d8f6      	bhi.n	8007a10 <_printf_i+0x28>
 8007a22:	a101      	add	r1, pc, #4	@ (adr r1, 8007a28 <_printf_i+0x40>)
 8007a24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a28:	08007a81 	.word	0x08007a81
 8007a2c:	08007a95 	.word	0x08007a95
 8007a30:	08007a11 	.word	0x08007a11
 8007a34:	08007a11 	.word	0x08007a11
 8007a38:	08007a11 	.word	0x08007a11
 8007a3c:	08007a11 	.word	0x08007a11
 8007a40:	08007a95 	.word	0x08007a95
 8007a44:	08007a11 	.word	0x08007a11
 8007a48:	08007a11 	.word	0x08007a11
 8007a4c:	08007a11 	.word	0x08007a11
 8007a50:	08007a11 	.word	0x08007a11
 8007a54:	08007b93 	.word	0x08007b93
 8007a58:	08007abf 	.word	0x08007abf
 8007a5c:	08007b4d 	.word	0x08007b4d
 8007a60:	08007a11 	.word	0x08007a11
 8007a64:	08007a11 	.word	0x08007a11
 8007a68:	08007bb5 	.word	0x08007bb5
 8007a6c:	08007a11 	.word	0x08007a11
 8007a70:	08007abf 	.word	0x08007abf
 8007a74:	08007a11 	.word	0x08007a11
 8007a78:	08007a11 	.word	0x08007a11
 8007a7c:	08007b55 	.word	0x08007b55
 8007a80:	6833      	ldr	r3, [r6, #0]
 8007a82:	1d1a      	adds	r2, r3, #4
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	6032      	str	r2, [r6, #0]
 8007a88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007a90:	2301      	movs	r3, #1
 8007a92:	e09c      	b.n	8007bce <_printf_i+0x1e6>
 8007a94:	6833      	ldr	r3, [r6, #0]
 8007a96:	6820      	ldr	r0, [r4, #0]
 8007a98:	1d19      	adds	r1, r3, #4
 8007a9a:	6031      	str	r1, [r6, #0]
 8007a9c:	0606      	lsls	r6, r0, #24
 8007a9e:	d501      	bpl.n	8007aa4 <_printf_i+0xbc>
 8007aa0:	681d      	ldr	r5, [r3, #0]
 8007aa2:	e003      	b.n	8007aac <_printf_i+0xc4>
 8007aa4:	0645      	lsls	r5, r0, #25
 8007aa6:	d5fb      	bpl.n	8007aa0 <_printf_i+0xb8>
 8007aa8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007aac:	2d00      	cmp	r5, #0
 8007aae:	da03      	bge.n	8007ab8 <_printf_i+0xd0>
 8007ab0:	232d      	movs	r3, #45	@ 0x2d
 8007ab2:	426d      	negs	r5, r5
 8007ab4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ab8:	4858      	ldr	r0, [pc, #352]	@ (8007c1c <_printf_i+0x234>)
 8007aba:	230a      	movs	r3, #10
 8007abc:	e011      	b.n	8007ae2 <_printf_i+0xfa>
 8007abe:	6821      	ldr	r1, [r4, #0]
 8007ac0:	6833      	ldr	r3, [r6, #0]
 8007ac2:	0608      	lsls	r0, r1, #24
 8007ac4:	f853 5b04 	ldr.w	r5, [r3], #4
 8007ac8:	d402      	bmi.n	8007ad0 <_printf_i+0xe8>
 8007aca:	0649      	lsls	r1, r1, #25
 8007acc:	bf48      	it	mi
 8007ace:	b2ad      	uxthmi	r5, r5
 8007ad0:	2f6f      	cmp	r7, #111	@ 0x6f
 8007ad2:	4852      	ldr	r0, [pc, #328]	@ (8007c1c <_printf_i+0x234>)
 8007ad4:	6033      	str	r3, [r6, #0]
 8007ad6:	bf14      	ite	ne
 8007ad8:	230a      	movne	r3, #10
 8007ada:	2308      	moveq	r3, #8
 8007adc:	2100      	movs	r1, #0
 8007ade:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007ae2:	6866      	ldr	r6, [r4, #4]
 8007ae4:	60a6      	str	r6, [r4, #8]
 8007ae6:	2e00      	cmp	r6, #0
 8007ae8:	db05      	blt.n	8007af6 <_printf_i+0x10e>
 8007aea:	6821      	ldr	r1, [r4, #0]
 8007aec:	432e      	orrs	r6, r5
 8007aee:	f021 0104 	bic.w	r1, r1, #4
 8007af2:	6021      	str	r1, [r4, #0]
 8007af4:	d04b      	beq.n	8007b8e <_printf_i+0x1a6>
 8007af6:	4616      	mov	r6, r2
 8007af8:	fbb5 f1f3 	udiv	r1, r5, r3
 8007afc:	fb03 5711 	mls	r7, r3, r1, r5
 8007b00:	5dc7      	ldrb	r7, [r0, r7]
 8007b02:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007b06:	462f      	mov	r7, r5
 8007b08:	42bb      	cmp	r3, r7
 8007b0a:	460d      	mov	r5, r1
 8007b0c:	d9f4      	bls.n	8007af8 <_printf_i+0x110>
 8007b0e:	2b08      	cmp	r3, #8
 8007b10:	d10b      	bne.n	8007b2a <_printf_i+0x142>
 8007b12:	6823      	ldr	r3, [r4, #0]
 8007b14:	07df      	lsls	r7, r3, #31
 8007b16:	d508      	bpl.n	8007b2a <_printf_i+0x142>
 8007b18:	6923      	ldr	r3, [r4, #16]
 8007b1a:	6861      	ldr	r1, [r4, #4]
 8007b1c:	4299      	cmp	r1, r3
 8007b1e:	bfde      	ittt	le
 8007b20:	2330      	movle	r3, #48	@ 0x30
 8007b22:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007b26:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007b2a:	1b92      	subs	r2, r2, r6
 8007b2c:	6122      	str	r2, [r4, #16]
 8007b2e:	f8cd a000 	str.w	sl, [sp]
 8007b32:	464b      	mov	r3, r9
 8007b34:	aa03      	add	r2, sp, #12
 8007b36:	4621      	mov	r1, r4
 8007b38:	4640      	mov	r0, r8
 8007b3a:	f7ff fee7 	bl	800790c <_printf_common>
 8007b3e:	3001      	adds	r0, #1
 8007b40:	d14a      	bne.n	8007bd8 <_printf_i+0x1f0>
 8007b42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007b46:	b004      	add	sp, #16
 8007b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b4c:	6823      	ldr	r3, [r4, #0]
 8007b4e:	f043 0320 	orr.w	r3, r3, #32
 8007b52:	6023      	str	r3, [r4, #0]
 8007b54:	4832      	ldr	r0, [pc, #200]	@ (8007c20 <_printf_i+0x238>)
 8007b56:	2778      	movs	r7, #120	@ 0x78
 8007b58:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007b5c:	6823      	ldr	r3, [r4, #0]
 8007b5e:	6831      	ldr	r1, [r6, #0]
 8007b60:	061f      	lsls	r7, r3, #24
 8007b62:	f851 5b04 	ldr.w	r5, [r1], #4
 8007b66:	d402      	bmi.n	8007b6e <_printf_i+0x186>
 8007b68:	065f      	lsls	r7, r3, #25
 8007b6a:	bf48      	it	mi
 8007b6c:	b2ad      	uxthmi	r5, r5
 8007b6e:	6031      	str	r1, [r6, #0]
 8007b70:	07d9      	lsls	r1, r3, #31
 8007b72:	bf44      	itt	mi
 8007b74:	f043 0320 	orrmi.w	r3, r3, #32
 8007b78:	6023      	strmi	r3, [r4, #0]
 8007b7a:	b11d      	cbz	r5, 8007b84 <_printf_i+0x19c>
 8007b7c:	2310      	movs	r3, #16
 8007b7e:	e7ad      	b.n	8007adc <_printf_i+0xf4>
 8007b80:	4826      	ldr	r0, [pc, #152]	@ (8007c1c <_printf_i+0x234>)
 8007b82:	e7e9      	b.n	8007b58 <_printf_i+0x170>
 8007b84:	6823      	ldr	r3, [r4, #0]
 8007b86:	f023 0320 	bic.w	r3, r3, #32
 8007b8a:	6023      	str	r3, [r4, #0]
 8007b8c:	e7f6      	b.n	8007b7c <_printf_i+0x194>
 8007b8e:	4616      	mov	r6, r2
 8007b90:	e7bd      	b.n	8007b0e <_printf_i+0x126>
 8007b92:	6833      	ldr	r3, [r6, #0]
 8007b94:	6825      	ldr	r5, [r4, #0]
 8007b96:	6961      	ldr	r1, [r4, #20]
 8007b98:	1d18      	adds	r0, r3, #4
 8007b9a:	6030      	str	r0, [r6, #0]
 8007b9c:	062e      	lsls	r6, r5, #24
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	d501      	bpl.n	8007ba6 <_printf_i+0x1be>
 8007ba2:	6019      	str	r1, [r3, #0]
 8007ba4:	e002      	b.n	8007bac <_printf_i+0x1c4>
 8007ba6:	0668      	lsls	r0, r5, #25
 8007ba8:	d5fb      	bpl.n	8007ba2 <_printf_i+0x1ba>
 8007baa:	8019      	strh	r1, [r3, #0]
 8007bac:	2300      	movs	r3, #0
 8007bae:	6123      	str	r3, [r4, #16]
 8007bb0:	4616      	mov	r6, r2
 8007bb2:	e7bc      	b.n	8007b2e <_printf_i+0x146>
 8007bb4:	6833      	ldr	r3, [r6, #0]
 8007bb6:	1d1a      	adds	r2, r3, #4
 8007bb8:	6032      	str	r2, [r6, #0]
 8007bba:	681e      	ldr	r6, [r3, #0]
 8007bbc:	6862      	ldr	r2, [r4, #4]
 8007bbe:	2100      	movs	r1, #0
 8007bc0:	4630      	mov	r0, r6
 8007bc2:	f7f8 fb1d 	bl	8000200 <memchr>
 8007bc6:	b108      	cbz	r0, 8007bcc <_printf_i+0x1e4>
 8007bc8:	1b80      	subs	r0, r0, r6
 8007bca:	6060      	str	r0, [r4, #4]
 8007bcc:	6863      	ldr	r3, [r4, #4]
 8007bce:	6123      	str	r3, [r4, #16]
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007bd6:	e7aa      	b.n	8007b2e <_printf_i+0x146>
 8007bd8:	6923      	ldr	r3, [r4, #16]
 8007bda:	4632      	mov	r2, r6
 8007bdc:	4649      	mov	r1, r9
 8007bde:	4640      	mov	r0, r8
 8007be0:	47d0      	blx	sl
 8007be2:	3001      	adds	r0, #1
 8007be4:	d0ad      	beq.n	8007b42 <_printf_i+0x15a>
 8007be6:	6823      	ldr	r3, [r4, #0]
 8007be8:	079b      	lsls	r3, r3, #30
 8007bea:	d413      	bmi.n	8007c14 <_printf_i+0x22c>
 8007bec:	68e0      	ldr	r0, [r4, #12]
 8007bee:	9b03      	ldr	r3, [sp, #12]
 8007bf0:	4298      	cmp	r0, r3
 8007bf2:	bfb8      	it	lt
 8007bf4:	4618      	movlt	r0, r3
 8007bf6:	e7a6      	b.n	8007b46 <_printf_i+0x15e>
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	4632      	mov	r2, r6
 8007bfc:	4649      	mov	r1, r9
 8007bfe:	4640      	mov	r0, r8
 8007c00:	47d0      	blx	sl
 8007c02:	3001      	adds	r0, #1
 8007c04:	d09d      	beq.n	8007b42 <_printf_i+0x15a>
 8007c06:	3501      	adds	r5, #1
 8007c08:	68e3      	ldr	r3, [r4, #12]
 8007c0a:	9903      	ldr	r1, [sp, #12]
 8007c0c:	1a5b      	subs	r3, r3, r1
 8007c0e:	42ab      	cmp	r3, r5
 8007c10:	dcf2      	bgt.n	8007bf8 <_printf_i+0x210>
 8007c12:	e7eb      	b.n	8007bec <_printf_i+0x204>
 8007c14:	2500      	movs	r5, #0
 8007c16:	f104 0619 	add.w	r6, r4, #25
 8007c1a:	e7f5      	b.n	8007c08 <_printf_i+0x220>
 8007c1c:	0800a0fd 	.word	0x0800a0fd
 8007c20:	0800a10e 	.word	0x0800a10e

08007c24 <__sflush_r>:
 8007c24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c2c:	0716      	lsls	r6, r2, #28
 8007c2e:	4605      	mov	r5, r0
 8007c30:	460c      	mov	r4, r1
 8007c32:	d454      	bmi.n	8007cde <__sflush_r+0xba>
 8007c34:	684b      	ldr	r3, [r1, #4]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	dc02      	bgt.n	8007c40 <__sflush_r+0x1c>
 8007c3a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	dd48      	ble.n	8007cd2 <__sflush_r+0xae>
 8007c40:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007c42:	2e00      	cmp	r6, #0
 8007c44:	d045      	beq.n	8007cd2 <__sflush_r+0xae>
 8007c46:	2300      	movs	r3, #0
 8007c48:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007c4c:	682f      	ldr	r7, [r5, #0]
 8007c4e:	6a21      	ldr	r1, [r4, #32]
 8007c50:	602b      	str	r3, [r5, #0]
 8007c52:	d030      	beq.n	8007cb6 <__sflush_r+0x92>
 8007c54:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007c56:	89a3      	ldrh	r3, [r4, #12]
 8007c58:	0759      	lsls	r1, r3, #29
 8007c5a:	d505      	bpl.n	8007c68 <__sflush_r+0x44>
 8007c5c:	6863      	ldr	r3, [r4, #4]
 8007c5e:	1ad2      	subs	r2, r2, r3
 8007c60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007c62:	b10b      	cbz	r3, 8007c68 <__sflush_r+0x44>
 8007c64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007c66:	1ad2      	subs	r2, r2, r3
 8007c68:	2300      	movs	r3, #0
 8007c6a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007c6c:	6a21      	ldr	r1, [r4, #32]
 8007c6e:	4628      	mov	r0, r5
 8007c70:	47b0      	blx	r6
 8007c72:	1c43      	adds	r3, r0, #1
 8007c74:	89a3      	ldrh	r3, [r4, #12]
 8007c76:	d106      	bne.n	8007c86 <__sflush_r+0x62>
 8007c78:	6829      	ldr	r1, [r5, #0]
 8007c7a:	291d      	cmp	r1, #29
 8007c7c:	d82b      	bhi.n	8007cd6 <__sflush_r+0xb2>
 8007c7e:	4a2a      	ldr	r2, [pc, #168]	@ (8007d28 <__sflush_r+0x104>)
 8007c80:	40ca      	lsrs	r2, r1
 8007c82:	07d6      	lsls	r6, r2, #31
 8007c84:	d527      	bpl.n	8007cd6 <__sflush_r+0xb2>
 8007c86:	2200      	movs	r2, #0
 8007c88:	6062      	str	r2, [r4, #4]
 8007c8a:	04d9      	lsls	r1, r3, #19
 8007c8c:	6922      	ldr	r2, [r4, #16]
 8007c8e:	6022      	str	r2, [r4, #0]
 8007c90:	d504      	bpl.n	8007c9c <__sflush_r+0x78>
 8007c92:	1c42      	adds	r2, r0, #1
 8007c94:	d101      	bne.n	8007c9a <__sflush_r+0x76>
 8007c96:	682b      	ldr	r3, [r5, #0]
 8007c98:	b903      	cbnz	r3, 8007c9c <__sflush_r+0x78>
 8007c9a:	6560      	str	r0, [r4, #84]	@ 0x54
 8007c9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c9e:	602f      	str	r7, [r5, #0]
 8007ca0:	b1b9      	cbz	r1, 8007cd2 <__sflush_r+0xae>
 8007ca2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007ca6:	4299      	cmp	r1, r3
 8007ca8:	d002      	beq.n	8007cb0 <__sflush_r+0x8c>
 8007caa:	4628      	mov	r0, r5
 8007cac:	f000 fa7a 	bl	80081a4 <_free_r>
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	6363      	str	r3, [r4, #52]	@ 0x34
 8007cb4:	e00d      	b.n	8007cd2 <__sflush_r+0xae>
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	4628      	mov	r0, r5
 8007cba:	47b0      	blx	r6
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	1c50      	adds	r0, r2, #1
 8007cc0:	d1c9      	bne.n	8007c56 <__sflush_r+0x32>
 8007cc2:	682b      	ldr	r3, [r5, #0]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d0c6      	beq.n	8007c56 <__sflush_r+0x32>
 8007cc8:	2b1d      	cmp	r3, #29
 8007cca:	d001      	beq.n	8007cd0 <__sflush_r+0xac>
 8007ccc:	2b16      	cmp	r3, #22
 8007cce:	d11e      	bne.n	8007d0e <__sflush_r+0xea>
 8007cd0:	602f      	str	r7, [r5, #0]
 8007cd2:	2000      	movs	r0, #0
 8007cd4:	e022      	b.n	8007d1c <__sflush_r+0xf8>
 8007cd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cda:	b21b      	sxth	r3, r3
 8007cdc:	e01b      	b.n	8007d16 <__sflush_r+0xf2>
 8007cde:	690f      	ldr	r7, [r1, #16]
 8007ce0:	2f00      	cmp	r7, #0
 8007ce2:	d0f6      	beq.n	8007cd2 <__sflush_r+0xae>
 8007ce4:	0793      	lsls	r3, r2, #30
 8007ce6:	680e      	ldr	r6, [r1, #0]
 8007ce8:	bf08      	it	eq
 8007cea:	694b      	ldreq	r3, [r1, #20]
 8007cec:	600f      	str	r7, [r1, #0]
 8007cee:	bf18      	it	ne
 8007cf0:	2300      	movne	r3, #0
 8007cf2:	eba6 0807 	sub.w	r8, r6, r7
 8007cf6:	608b      	str	r3, [r1, #8]
 8007cf8:	f1b8 0f00 	cmp.w	r8, #0
 8007cfc:	dde9      	ble.n	8007cd2 <__sflush_r+0xae>
 8007cfe:	6a21      	ldr	r1, [r4, #32]
 8007d00:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007d02:	4643      	mov	r3, r8
 8007d04:	463a      	mov	r2, r7
 8007d06:	4628      	mov	r0, r5
 8007d08:	47b0      	blx	r6
 8007d0a:	2800      	cmp	r0, #0
 8007d0c:	dc08      	bgt.n	8007d20 <__sflush_r+0xfc>
 8007d0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d16:	81a3      	strh	r3, [r4, #12]
 8007d18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d20:	4407      	add	r7, r0
 8007d22:	eba8 0800 	sub.w	r8, r8, r0
 8007d26:	e7e7      	b.n	8007cf8 <__sflush_r+0xd4>
 8007d28:	20400001 	.word	0x20400001

08007d2c <_fflush_r>:
 8007d2c:	b538      	push	{r3, r4, r5, lr}
 8007d2e:	690b      	ldr	r3, [r1, #16]
 8007d30:	4605      	mov	r5, r0
 8007d32:	460c      	mov	r4, r1
 8007d34:	b913      	cbnz	r3, 8007d3c <_fflush_r+0x10>
 8007d36:	2500      	movs	r5, #0
 8007d38:	4628      	mov	r0, r5
 8007d3a:	bd38      	pop	{r3, r4, r5, pc}
 8007d3c:	b118      	cbz	r0, 8007d46 <_fflush_r+0x1a>
 8007d3e:	6a03      	ldr	r3, [r0, #32]
 8007d40:	b90b      	cbnz	r3, 8007d46 <_fflush_r+0x1a>
 8007d42:	f7ff f9cd 	bl	80070e0 <__sinit>
 8007d46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d0f3      	beq.n	8007d36 <_fflush_r+0xa>
 8007d4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007d50:	07d0      	lsls	r0, r2, #31
 8007d52:	d404      	bmi.n	8007d5e <_fflush_r+0x32>
 8007d54:	0599      	lsls	r1, r3, #22
 8007d56:	d402      	bmi.n	8007d5e <_fflush_r+0x32>
 8007d58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d5a:	f7ff fa9a 	bl	8007292 <__retarget_lock_acquire_recursive>
 8007d5e:	4628      	mov	r0, r5
 8007d60:	4621      	mov	r1, r4
 8007d62:	f7ff ff5f 	bl	8007c24 <__sflush_r>
 8007d66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007d68:	07da      	lsls	r2, r3, #31
 8007d6a:	4605      	mov	r5, r0
 8007d6c:	d4e4      	bmi.n	8007d38 <_fflush_r+0xc>
 8007d6e:	89a3      	ldrh	r3, [r4, #12]
 8007d70:	059b      	lsls	r3, r3, #22
 8007d72:	d4e1      	bmi.n	8007d38 <_fflush_r+0xc>
 8007d74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d76:	f7ff fa8d 	bl	8007294 <__retarget_lock_release_recursive>
 8007d7a:	e7dd      	b.n	8007d38 <_fflush_r+0xc>

08007d7c <__malloc_lock>:
 8007d7c:	4801      	ldr	r0, [pc, #4]	@ (8007d84 <__malloc_lock+0x8>)
 8007d7e:	f7ff ba88 	b.w	8007292 <__retarget_lock_acquire_recursive>
 8007d82:	bf00      	nop
 8007d84:	20025d80 	.word	0x20025d80

08007d88 <__malloc_unlock>:
 8007d88:	4801      	ldr	r0, [pc, #4]	@ (8007d90 <__malloc_unlock+0x8>)
 8007d8a:	f7ff ba83 	b.w	8007294 <__retarget_lock_release_recursive>
 8007d8e:	bf00      	nop
 8007d90:	20025d80 	.word	0x20025d80

08007d94 <__sread>:
 8007d94:	b510      	push	{r4, lr}
 8007d96:	460c      	mov	r4, r1
 8007d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d9c:	f000 f99e 	bl	80080dc <_read_r>
 8007da0:	2800      	cmp	r0, #0
 8007da2:	bfab      	itete	ge
 8007da4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007da6:	89a3      	ldrhlt	r3, [r4, #12]
 8007da8:	181b      	addge	r3, r3, r0
 8007daa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007dae:	bfac      	ite	ge
 8007db0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007db2:	81a3      	strhlt	r3, [r4, #12]
 8007db4:	bd10      	pop	{r4, pc}

08007db6 <__swrite>:
 8007db6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dba:	461f      	mov	r7, r3
 8007dbc:	898b      	ldrh	r3, [r1, #12]
 8007dbe:	05db      	lsls	r3, r3, #23
 8007dc0:	4605      	mov	r5, r0
 8007dc2:	460c      	mov	r4, r1
 8007dc4:	4616      	mov	r6, r2
 8007dc6:	d505      	bpl.n	8007dd4 <__swrite+0x1e>
 8007dc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dcc:	2302      	movs	r3, #2
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f000 f972 	bl	80080b8 <_lseek_r>
 8007dd4:	89a3      	ldrh	r3, [r4, #12]
 8007dd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dda:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007dde:	81a3      	strh	r3, [r4, #12]
 8007de0:	4632      	mov	r2, r6
 8007de2:	463b      	mov	r3, r7
 8007de4:	4628      	mov	r0, r5
 8007de6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dea:	f000 b999 	b.w	8008120 <_write_r>

08007dee <__sseek>:
 8007dee:	b510      	push	{r4, lr}
 8007df0:	460c      	mov	r4, r1
 8007df2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007df6:	f000 f95f 	bl	80080b8 <_lseek_r>
 8007dfa:	1c43      	adds	r3, r0, #1
 8007dfc:	89a3      	ldrh	r3, [r4, #12]
 8007dfe:	bf15      	itete	ne
 8007e00:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007e02:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007e06:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007e0a:	81a3      	strheq	r3, [r4, #12]
 8007e0c:	bf18      	it	ne
 8007e0e:	81a3      	strhne	r3, [r4, #12]
 8007e10:	bd10      	pop	{r4, pc}

08007e12 <__sclose>:
 8007e12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e16:	f000 b995 	b.w	8008144 <_close_r>

08007e1a <_realloc_r>:
 8007e1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e1e:	4607      	mov	r7, r0
 8007e20:	4614      	mov	r4, r2
 8007e22:	460d      	mov	r5, r1
 8007e24:	b921      	cbnz	r1, 8007e30 <_realloc_r+0x16>
 8007e26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e2a:	4611      	mov	r1, r2
 8007e2c:	f7ff bcee 	b.w	800780c <_malloc_r>
 8007e30:	b92a      	cbnz	r2, 8007e3e <_realloc_r+0x24>
 8007e32:	f000 f9b7 	bl	80081a4 <_free_r>
 8007e36:	4625      	mov	r5, r4
 8007e38:	4628      	mov	r0, r5
 8007e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e3e:	f000 f9fb 	bl	8008238 <_malloc_usable_size_r>
 8007e42:	4284      	cmp	r4, r0
 8007e44:	4606      	mov	r6, r0
 8007e46:	d802      	bhi.n	8007e4e <_realloc_r+0x34>
 8007e48:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007e4c:	d8f4      	bhi.n	8007e38 <_realloc_r+0x1e>
 8007e4e:	4621      	mov	r1, r4
 8007e50:	4638      	mov	r0, r7
 8007e52:	f7ff fcdb 	bl	800780c <_malloc_r>
 8007e56:	4680      	mov	r8, r0
 8007e58:	b908      	cbnz	r0, 8007e5e <_realloc_r+0x44>
 8007e5a:	4645      	mov	r5, r8
 8007e5c:	e7ec      	b.n	8007e38 <_realloc_r+0x1e>
 8007e5e:	42b4      	cmp	r4, r6
 8007e60:	4622      	mov	r2, r4
 8007e62:	4629      	mov	r1, r5
 8007e64:	bf28      	it	cs
 8007e66:	4632      	movcs	r2, r6
 8007e68:	f000 f98e 	bl	8008188 <memcpy>
 8007e6c:	4629      	mov	r1, r5
 8007e6e:	4638      	mov	r0, r7
 8007e70:	f000 f998 	bl	80081a4 <_free_r>
 8007e74:	e7f1      	b.n	8007e5a <_realloc_r+0x40>

08007e76 <__swbuf_r>:
 8007e76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e78:	460e      	mov	r6, r1
 8007e7a:	4614      	mov	r4, r2
 8007e7c:	4605      	mov	r5, r0
 8007e7e:	b118      	cbz	r0, 8007e88 <__swbuf_r+0x12>
 8007e80:	6a03      	ldr	r3, [r0, #32]
 8007e82:	b90b      	cbnz	r3, 8007e88 <__swbuf_r+0x12>
 8007e84:	f7ff f92c 	bl	80070e0 <__sinit>
 8007e88:	69a3      	ldr	r3, [r4, #24]
 8007e8a:	60a3      	str	r3, [r4, #8]
 8007e8c:	89a3      	ldrh	r3, [r4, #12]
 8007e8e:	071a      	lsls	r2, r3, #28
 8007e90:	d501      	bpl.n	8007e96 <__swbuf_r+0x20>
 8007e92:	6923      	ldr	r3, [r4, #16]
 8007e94:	b943      	cbnz	r3, 8007ea8 <__swbuf_r+0x32>
 8007e96:	4621      	mov	r1, r4
 8007e98:	4628      	mov	r0, r5
 8007e9a:	f000 f82b 	bl	8007ef4 <__swsetup_r>
 8007e9e:	b118      	cbz	r0, 8007ea8 <__swbuf_r+0x32>
 8007ea0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007ea4:	4638      	mov	r0, r7
 8007ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ea8:	6823      	ldr	r3, [r4, #0]
 8007eaa:	6922      	ldr	r2, [r4, #16]
 8007eac:	1a98      	subs	r0, r3, r2
 8007eae:	6963      	ldr	r3, [r4, #20]
 8007eb0:	b2f6      	uxtb	r6, r6
 8007eb2:	4283      	cmp	r3, r0
 8007eb4:	4637      	mov	r7, r6
 8007eb6:	dc05      	bgt.n	8007ec4 <__swbuf_r+0x4e>
 8007eb8:	4621      	mov	r1, r4
 8007eba:	4628      	mov	r0, r5
 8007ebc:	f7ff ff36 	bl	8007d2c <_fflush_r>
 8007ec0:	2800      	cmp	r0, #0
 8007ec2:	d1ed      	bne.n	8007ea0 <__swbuf_r+0x2a>
 8007ec4:	68a3      	ldr	r3, [r4, #8]
 8007ec6:	3b01      	subs	r3, #1
 8007ec8:	60a3      	str	r3, [r4, #8]
 8007eca:	6823      	ldr	r3, [r4, #0]
 8007ecc:	1c5a      	adds	r2, r3, #1
 8007ece:	6022      	str	r2, [r4, #0]
 8007ed0:	701e      	strb	r6, [r3, #0]
 8007ed2:	6962      	ldr	r2, [r4, #20]
 8007ed4:	1c43      	adds	r3, r0, #1
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d004      	beq.n	8007ee4 <__swbuf_r+0x6e>
 8007eda:	89a3      	ldrh	r3, [r4, #12]
 8007edc:	07db      	lsls	r3, r3, #31
 8007ede:	d5e1      	bpl.n	8007ea4 <__swbuf_r+0x2e>
 8007ee0:	2e0a      	cmp	r6, #10
 8007ee2:	d1df      	bne.n	8007ea4 <__swbuf_r+0x2e>
 8007ee4:	4621      	mov	r1, r4
 8007ee6:	4628      	mov	r0, r5
 8007ee8:	f7ff ff20 	bl	8007d2c <_fflush_r>
 8007eec:	2800      	cmp	r0, #0
 8007eee:	d0d9      	beq.n	8007ea4 <__swbuf_r+0x2e>
 8007ef0:	e7d6      	b.n	8007ea0 <__swbuf_r+0x2a>
	...

08007ef4 <__swsetup_r>:
 8007ef4:	b538      	push	{r3, r4, r5, lr}
 8007ef6:	4b29      	ldr	r3, [pc, #164]	@ (8007f9c <__swsetup_r+0xa8>)
 8007ef8:	4605      	mov	r5, r0
 8007efa:	6818      	ldr	r0, [r3, #0]
 8007efc:	460c      	mov	r4, r1
 8007efe:	b118      	cbz	r0, 8007f08 <__swsetup_r+0x14>
 8007f00:	6a03      	ldr	r3, [r0, #32]
 8007f02:	b90b      	cbnz	r3, 8007f08 <__swsetup_r+0x14>
 8007f04:	f7ff f8ec 	bl	80070e0 <__sinit>
 8007f08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f0c:	0719      	lsls	r1, r3, #28
 8007f0e:	d422      	bmi.n	8007f56 <__swsetup_r+0x62>
 8007f10:	06da      	lsls	r2, r3, #27
 8007f12:	d407      	bmi.n	8007f24 <__swsetup_r+0x30>
 8007f14:	2209      	movs	r2, #9
 8007f16:	602a      	str	r2, [r5, #0]
 8007f18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f1c:	81a3      	strh	r3, [r4, #12]
 8007f1e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007f22:	e033      	b.n	8007f8c <__swsetup_r+0x98>
 8007f24:	0758      	lsls	r0, r3, #29
 8007f26:	d512      	bpl.n	8007f4e <__swsetup_r+0x5a>
 8007f28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f2a:	b141      	cbz	r1, 8007f3e <__swsetup_r+0x4a>
 8007f2c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007f30:	4299      	cmp	r1, r3
 8007f32:	d002      	beq.n	8007f3a <__swsetup_r+0x46>
 8007f34:	4628      	mov	r0, r5
 8007f36:	f000 f935 	bl	80081a4 <_free_r>
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f3e:	89a3      	ldrh	r3, [r4, #12]
 8007f40:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007f44:	81a3      	strh	r3, [r4, #12]
 8007f46:	2300      	movs	r3, #0
 8007f48:	6063      	str	r3, [r4, #4]
 8007f4a:	6923      	ldr	r3, [r4, #16]
 8007f4c:	6023      	str	r3, [r4, #0]
 8007f4e:	89a3      	ldrh	r3, [r4, #12]
 8007f50:	f043 0308 	orr.w	r3, r3, #8
 8007f54:	81a3      	strh	r3, [r4, #12]
 8007f56:	6923      	ldr	r3, [r4, #16]
 8007f58:	b94b      	cbnz	r3, 8007f6e <__swsetup_r+0x7a>
 8007f5a:	89a3      	ldrh	r3, [r4, #12]
 8007f5c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007f60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f64:	d003      	beq.n	8007f6e <__swsetup_r+0x7a>
 8007f66:	4621      	mov	r1, r4
 8007f68:	4628      	mov	r0, r5
 8007f6a:	f000 f83f 	bl	8007fec <__smakebuf_r>
 8007f6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f72:	f013 0201 	ands.w	r2, r3, #1
 8007f76:	d00a      	beq.n	8007f8e <__swsetup_r+0x9a>
 8007f78:	2200      	movs	r2, #0
 8007f7a:	60a2      	str	r2, [r4, #8]
 8007f7c:	6962      	ldr	r2, [r4, #20]
 8007f7e:	4252      	negs	r2, r2
 8007f80:	61a2      	str	r2, [r4, #24]
 8007f82:	6922      	ldr	r2, [r4, #16]
 8007f84:	b942      	cbnz	r2, 8007f98 <__swsetup_r+0xa4>
 8007f86:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007f8a:	d1c5      	bne.n	8007f18 <__swsetup_r+0x24>
 8007f8c:	bd38      	pop	{r3, r4, r5, pc}
 8007f8e:	0799      	lsls	r1, r3, #30
 8007f90:	bf58      	it	pl
 8007f92:	6962      	ldrpl	r2, [r4, #20]
 8007f94:	60a2      	str	r2, [r4, #8]
 8007f96:	e7f4      	b.n	8007f82 <__swsetup_r+0x8e>
 8007f98:	2000      	movs	r0, #0
 8007f9a:	e7f7      	b.n	8007f8c <__swsetup_r+0x98>
 8007f9c:	20000030 	.word	0x20000030

08007fa0 <__swhatbuf_r>:
 8007fa0:	b570      	push	{r4, r5, r6, lr}
 8007fa2:	460c      	mov	r4, r1
 8007fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fa8:	2900      	cmp	r1, #0
 8007faa:	b096      	sub	sp, #88	@ 0x58
 8007fac:	4615      	mov	r5, r2
 8007fae:	461e      	mov	r6, r3
 8007fb0:	da0d      	bge.n	8007fce <__swhatbuf_r+0x2e>
 8007fb2:	89a3      	ldrh	r3, [r4, #12]
 8007fb4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007fb8:	f04f 0100 	mov.w	r1, #0
 8007fbc:	bf14      	ite	ne
 8007fbe:	2340      	movne	r3, #64	@ 0x40
 8007fc0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007fc4:	2000      	movs	r0, #0
 8007fc6:	6031      	str	r1, [r6, #0]
 8007fc8:	602b      	str	r3, [r5, #0]
 8007fca:	b016      	add	sp, #88	@ 0x58
 8007fcc:	bd70      	pop	{r4, r5, r6, pc}
 8007fce:	466a      	mov	r2, sp
 8007fd0:	f000 f8c8 	bl	8008164 <_fstat_r>
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	dbec      	blt.n	8007fb2 <__swhatbuf_r+0x12>
 8007fd8:	9901      	ldr	r1, [sp, #4]
 8007fda:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007fde:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007fe2:	4259      	negs	r1, r3
 8007fe4:	4159      	adcs	r1, r3
 8007fe6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007fea:	e7eb      	b.n	8007fc4 <__swhatbuf_r+0x24>

08007fec <__smakebuf_r>:
 8007fec:	898b      	ldrh	r3, [r1, #12]
 8007fee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ff0:	079d      	lsls	r5, r3, #30
 8007ff2:	4606      	mov	r6, r0
 8007ff4:	460c      	mov	r4, r1
 8007ff6:	d507      	bpl.n	8008008 <__smakebuf_r+0x1c>
 8007ff8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007ffc:	6023      	str	r3, [r4, #0]
 8007ffe:	6123      	str	r3, [r4, #16]
 8008000:	2301      	movs	r3, #1
 8008002:	6163      	str	r3, [r4, #20]
 8008004:	b003      	add	sp, #12
 8008006:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008008:	ab01      	add	r3, sp, #4
 800800a:	466a      	mov	r2, sp
 800800c:	f7ff ffc8 	bl	8007fa0 <__swhatbuf_r>
 8008010:	9f00      	ldr	r7, [sp, #0]
 8008012:	4605      	mov	r5, r0
 8008014:	4639      	mov	r1, r7
 8008016:	4630      	mov	r0, r6
 8008018:	f7ff fbf8 	bl	800780c <_malloc_r>
 800801c:	b948      	cbnz	r0, 8008032 <__smakebuf_r+0x46>
 800801e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008022:	059a      	lsls	r2, r3, #22
 8008024:	d4ee      	bmi.n	8008004 <__smakebuf_r+0x18>
 8008026:	f023 0303 	bic.w	r3, r3, #3
 800802a:	f043 0302 	orr.w	r3, r3, #2
 800802e:	81a3      	strh	r3, [r4, #12]
 8008030:	e7e2      	b.n	8007ff8 <__smakebuf_r+0xc>
 8008032:	89a3      	ldrh	r3, [r4, #12]
 8008034:	6020      	str	r0, [r4, #0]
 8008036:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800803a:	81a3      	strh	r3, [r4, #12]
 800803c:	9b01      	ldr	r3, [sp, #4]
 800803e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008042:	b15b      	cbz	r3, 800805c <__smakebuf_r+0x70>
 8008044:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008048:	4630      	mov	r0, r6
 800804a:	f000 f825 	bl	8008098 <_isatty_r>
 800804e:	b128      	cbz	r0, 800805c <__smakebuf_r+0x70>
 8008050:	89a3      	ldrh	r3, [r4, #12]
 8008052:	f023 0303 	bic.w	r3, r3, #3
 8008056:	f043 0301 	orr.w	r3, r3, #1
 800805a:	81a3      	strh	r3, [r4, #12]
 800805c:	89a3      	ldrh	r3, [r4, #12]
 800805e:	431d      	orrs	r5, r3
 8008060:	81a5      	strh	r5, [r4, #12]
 8008062:	e7cf      	b.n	8008004 <__smakebuf_r+0x18>

08008064 <memmove>:
 8008064:	4288      	cmp	r0, r1
 8008066:	b510      	push	{r4, lr}
 8008068:	eb01 0402 	add.w	r4, r1, r2
 800806c:	d902      	bls.n	8008074 <memmove+0x10>
 800806e:	4284      	cmp	r4, r0
 8008070:	4623      	mov	r3, r4
 8008072:	d807      	bhi.n	8008084 <memmove+0x20>
 8008074:	1e43      	subs	r3, r0, #1
 8008076:	42a1      	cmp	r1, r4
 8008078:	d008      	beq.n	800808c <memmove+0x28>
 800807a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800807e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008082:	e7f8      	b.n	8008076 <memmove+0x12>
 8008084:	4402      	add	r2, r0
 8008086:	4601      	mov	r1, r0
 8008088:	428a      	cmp	r2, r1
 800808a:	d100      	bne.n	800808e <memmove+0x2a>
 800808c:	bd10      	pop	{r4, pc}
 800808e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008092:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008096:	e7f7      	b.n	8008088 <memmove+0x24>

08008098 <_isatty_r>:
 8008098:	b538      	push	{r3, r4, r5, lr}
 800809a:	4d06      	ldr	r5, [pc, #24]	@ (80080b4 <_isatty_r+0x1c>)
 800809c:	2300      	movs	r3, #0
 800809e:	4604      	mov	r4, r0
 80080a0:	4608      	mov	r0, r1
 80080a2:	602b      	str	r3, [r5, #0]
 80080a4:	f7fb fabc 	bl	8003620 <_isatty>
 80080a8:	1c43      	adds	r3, r0, #1
 80080aa:	d102      	bne.n	80080b2 <_isatty_r+0x1a>
 80080ac:	682b      	ldr	r3, [r5, #0]
 80080ae:	b103      	cbz	r3, 80080b2 <_isatty_r+0x1a>
 80080b0:	6023      	str	r3, [r4, #0]
 80080b2:	bd38      	pop	{r3, r4, r5, pc}
 80080b4:	20025d8c 	.word	0x20025d8c

080080b8 <_lseek_r>:
 80080b8:	b538      	push	{r3, r4, r5, lr}
 80080ba:	4d07      	ldr	r5, [pc, #28]	@ (80080d8 <_lseek_r+0x20>)
 80080bc:	4604      	mov	r4, r0
 80080be:	4608      	mov	r0, r1
 80080c0:	4611      	mov	r1, r2
 80080c2:	2200      	movs	r2, #0
 80080c4:	602a      	str	r2, [r5, #0]
 80080c6:	461a      	mov	r2, r3
 80080c8:	f7fb fab5 	bl	8003636 <_lseek>
 80080cc:	1c43      	adds	r3, r0, #1
 80080ce:	d102      	bne.n	80080d6 <_lseek_r+0x1e>
 80080d0:	682b      	ldr	r3, [r5, #0]
 80080d2:	b103      	cbz	r3, 80080d6 <_lseek_r+0x1e>
 80080d4:	6023      	str	r3, [r4, #0]
 80080d6:	bd38      	pop	{r3, r4, r5, pc}
 80080d8:	20025d8c 	.word	0x20025d8c

080080dc <_read_r>:
 80080dc:	b538      	push	{r3, r4, r5, lr}
 80080de:	4d07      	ldr	r5, [pc, #28]	@ (80080fc <_read_r+0x20>)
 80080e0:	4604      	mov	r4, r0
 80080e2:	4608      	mov	r0, r1
 80080e4:	4611      	mov	r1, r2
 80080e6:	2200      	movs	r2, #0
 80080e8:	602a      	str	r2, [r5, #0]
 80080ea:	461a      	mov	r2, r3
 80080ec:	f7fb fa43 	bl	8003576 <_read>
 80080f0:	1c43      	adds	r3, r0, #1
 80080f2:	d102      	bne.n	80080fa <_read_r+0x1e>
 80080f4:	682b      	ldr	r3, [r5, #0]
 80080f6:	b103      	cbz	r3, 80080fa <_read_r+0x1e>
 80080f8:	6023      	str	r3, [r4, #0]
 80080fa:	bd38      	pop	{r3, r4, r5, pc}
 80080fc:	20025d8c 	.word	0x20025d8c

08008100 <_sbrk_r>:
 8008100:	b538      	push	{r3, r4, r5, lr}
 8008102:	4d06      	ldr	r5, [pc, #24]	@ (800811c <_sbrk_r+0x1c>)
 8008104:	2300      	movs	r3, #0
 8008106:	4604      	mov	r4, r0
 8008108:	4608      	mov	r0, r1
 800810a:	602b      	str	r3, [r5, #0]
 800810c:	f7fb faa0 	bl	8003650 <_sbrk>
 8008110:	1c43      	adds	r3, r0, #1
 8008112:	d102      	bne.n	800811a <_sbrk_r+0x1a>
 8008114:	682b      	ldr	r3, [r5, #0]
 8008116:	b103      	cbz	r3, 800811a <_sbrk_r+0x1a>
 8008118:	6023      	str	r3, [r4, #0]
 800811a:	bd38      	pop	{r3, r4, r5, pc}
 800811c:	20025d8c 	.word	0x20025d8c

08008120 <_write_r>:
 8008120:	b538      	push	{r3, r4, r5, lr}
 8008122:	4d07      	ldr	r5, [pc, #28]	@ (8008140 <_write_r+0x20>)
 8008124:	4604      	mov	r4, r0
 8008126:	4608      	mov	r0, r1
 8008128:	4611      	mov	r1, r2
 800812a:	2200      	movs	r2, #0
 800812c:	602a      	str	r2, [r5, #0]
 800812e:	461a      	mov	r2, r3
 8008130:	f7fb fa3e 	bl	80035b0 <_write>
 8008134:	1c43      	adds	r3, r0, #1
 8008136:	d102      	bne.n	800813e <_write_r+0x1e>
 8008138:	682b      	ldr	r3, [r5, #0]
 800813a:	b103      	cbz	r3, 800813e <_write_r+0x1e>
 800813c:	6023      	str	r3, [r4, #0]
 800813e:	bd38      	pop	{r3, r4, r5, pc}
 8008140:	20025d8c 	.word	0x20025d8c

08008144 <_close_r>:
 8008144:	b538      	push	{r3, r4, r5, lr}
 8008146:	4d06      	ldr	r5, [pc, #24]	@ (8008160 <_close_r+0x1c>)
 8008148:	2300      	movs	r3, #0
 800814a:	4604      	mov	r4, r0
 800814c:	4608      	mov	r0, r1
 800814e:	602b      	str	r3, [r5, #0]
 8008150:	f7fb fa4a 	bl	80035e8 <_close>
 8008154:	1c43      	adds	r3, r0, #1
 8008156:	d102      	bne.n	800815e <_close_r+0x1a>
 8008158:	682b      	ldr	r3, [r5, #0]
 800815a:	b103      	cbz	r3, 800815e <_close_r+0x1a>
 800815c:	6023      	str	r3, [r4, #0]
 800815e:	bd38      	pop	{r3, r4, r5, pc}
 8008160:	20025d8c 	.word	0x20025d8c

08008164 <_fstat_r>:
 8008164:	b538      	push	{r3, r4, r5, lr}
 8008166:	4d07      	ldr	r5, [pc, #28]	@ (8008184 <_fstat_r+0x20>)
 8008168:	2300      	movs	r3, #0
 800816a:	4604      	mov	r4, r0
 800816c:	4608      	mov	r0, r1
 800816e:	4611      	mov	r1, r2
 8008170:	602b      	str	r3, [r5, #0]
 8008172:	f7fb fa45 	bl	8003600 <_fstat>
 8008176:	1c43      	adds	r3, r0, #1
 8008178:	d102      	bne.n	8008180 <_fstat_r+0x1c>
 800817a:	682b      	ldr	r3, [r5, #0]
 800817c:	b103      	cbz	r3, 8008180 <_fstat_r+0x1c>
 800817e:	6023      	str	r3, [r4, #0]
 8008180:	bd38      	pop	{r3, r4, r5, pc}
 8008182:	bf00      	nop
 8008184:	20025d8c 	.word	0x20025d8c

08008188 <memcpy>:
 8008188:	440a      	add	r2, r1
 800818a:	4291      	cmp	r1, r2
 800818c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008190:	d100      	bne.n	8008194 <memcpy+0xc>
 8008192:	4770      	bx	lr
 8008194:	b510      	push	{r4, lr}
 8008196:	f811 4b01 	ldrb.w	r4, [r1], #1
 800819a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800819e:	4291      	cmp	r1, r2
 80081a0:	d1f9      	bne.n	8008196 <memcpy+0xe>
 80081a2:	bd10      	pop	{r4, pc}

080081a4 <_free_r>:
 80081a4:	b538      	push	{r3, r4, r5, lr}
 80081a6:	4605      	mov	r5, r0
 80081a8:	2900      	cmp	r1, #0
 80081aa:	d041      	beq.n	8008230 <_free_r+0x8c>
 80081ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081b0:	1f0c      	subs	r4, r1, #4
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	bfb8      	it	lt
 80081b6:	18e4      	addlt	r4, r4, r3
 80081b8:	f7ff fde0 	bl	8007d7c <__malloc_lock>
 80081bc:	4a1d      	ldr	r2, [pc, #116]	@ (8008234 <_free_r+0x90>)
 80081be:	6813      	ldr	r3, [r2, #0]
 80081c0:	b933      	cbnz	r3, 80081d0 <_free_r+0x2c>
 80081c2:	6063      	str	r3, [r4, #4]
 80081c4:	6014      	str	r4, [r2, #0]
 80081c6:	4628      	mov	r0, r5
 80081c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081cc:	f7ff bddc 	b.w	8007d88 <__malloc_unlock>
 80081d0:	42a3      	cmp	r3, r4
 80081d2:	d908      	bls.n	80081e6 <_free_r+0x42>
 80081d4:	6820      	ldr	r0, [r4, #0]
 80081d6:	1821      	adds	r1, r4, r0
 80081d8:	428b      	cmp	r3, r1
 80081da:	bf01      	itttt	eq
 80081dc:	6819      	ldreq	r1, [r3, #0]
 80081de:	685b      	ldreq	r3, [r3, #4]
 80081e0:	1809      	addeq	r1, r1, r0
 80081e2:	6021      	streq	r1, [r4, #0]
 80081e4:	e7ed      	b.n	80081c2 <_free_r+0x1e>
 80081e6:	461a      	mov	r2, r3
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	b10b      	cbz	r3, 80081f0 <_free_r+0x4c>
 80081ec:	42a3      	cmp	r3, r4
 80081ee:	d9fa      	bls.n	80081e6 <_free_r+0x42>
 80081f0:	6811      	ldr	r1, [r2, #0]
 80081f2:	1850      	adds	r0, r2, r1
 80081f4:	42a0      	cmp	r0, r4
 80081f6:	d10b      	bne.n	8008210 <_free_r+0x6c>
 80081f8:	6820      	ldr	r0, [r4, #0]
 80081fa:	4401      	add	r1, r0
 80081fc:	1850      	adds	r0, r2, r1
 80081fe:	4283      	cmp	r3, r0
 8008200:	6011      	str	r1, [r2, #0]
 8008202:	d1e0      	bne.n	80081c6 <_free_r+0x22>
 8008204:	6818      	ldr	r0, [r3, #0]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	6053      	str	r3, [r2, #4]
 800820a:	4408      	add	r0, r1
 800820c:	6010      	str	r0, [r2, #0]
 800820e:	e7da      	b.n	80081c6 <_free_r+0x22>
 8008210:	d902      	bls.n	8008218 <_free_r+0x74>
 8008212:	230c      	movs	r3, #12
 8008214:	602b      	str	r3, [r5, #0]
 8008216:	e7d6      	b.n	80081c6 <_free_r+0x22>
 8008218:	6820      	ldr	r0, [r4, #0]
 800821a:	1821      	adds	r1, r4, r0
 800821c:	428b      	cmp	r3, r1
 800821e:	bf04      	itt	eq
 8008220:	6819      	ldreq	r1, [r3, #0]
 8008222:	685b      	ldreq	r3, [r3, #4]
 8008224:	6063      	str	r3, [r4, #4]
 8008226:	bf04      	itt	eq
 8008228:	1809      	addeq	r1, r1, r0
 800822a:	6021      	streq	r1, [r4, #0]
 800822c:	6054      	str	r4, [r2, #4]
 800822e:	e7ca      	b.n	80081c6 <_free_r+0x22>
 8008230:	bd38      	pop	{r3, r4, r5, pc}
 8008232:	bf00      	nop
 8008234:	20025d88 	.word	0x20025d88

08008238 <_malloc_usable_size_r>:
 8008238:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800823c:	1f18      	subs	r0, r3, #4
 800823e:	2b00      	cmp	r3, #0
 8008240:	bfbc      	itt	lt
 8008242:	580b      	ldrlt	r3, [r1, r0]
 8008244:	18c0      	addlt	r0, r0, r3
 8008246:	4770      	bx	lr

08008248 <_init>:
 8008248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800824a:	bf00      	nop
 800824c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800824e:	bc08      	pop	{r3}
 8008250:	469e      	mov	lr, r3
 8008252:	4770      	bx	lr

08008254 <_fini>:
 8008254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008256:	bf00      	nop
 8008258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800825a:	bc08      	pop	{r3}
 800825c:	469e      	mov	lr, r3
 800825e:	4770      	bx	lr

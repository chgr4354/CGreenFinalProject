
CGreenFinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b10  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001348  08006cbc  08006cbc  00007cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008004  08008004  0000a078  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008004  08008004  00009004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800800c  0800800c  0000a078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800800c  0800800c  0000900c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008010  08008010  00009010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08008014  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a078  2**0
                  CONTENTS
 10 .bss          00025cec  20000078  20000078  0000a078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20025d64  20025d64  0000a078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013a79  00000000  00000000  0000a0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031b7  00000000  00000000  0001db21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001448  00000000  00000000  00020cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f9b  00000000  00000000  00022120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027069  00000000  00000000  000230bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017de1  00000000  00000000  0004a124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3212  00000000  00000000  00061f05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00145117  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005ab0  00000000  00000000  0014515c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008f  00000000  00000000  0014ac0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000078 	.word	0x20000078
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006ca4 	.word	0x08006ca4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000007c 	.word	0x2000007c
 80001e8:	08006ca4 	.word	0x08006ca4

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000200:	f000 b988 	b.w	8000514 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	468e      	mov	lr, r1
 8000224:	4604      	mov	r4, r0
 8000226:	4688      	mov	r8, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d962      	bls.n	80002f8 <__udivmoddi4+0xdc>
 8000232:	fab2 f682 	clz	r6, r2
 8000236:	b14e      	cbz	r6, 800024c <__udivmoddi4+0x30>
 8000238:	f1c6 0320 	rsb	r3, r6, #32
 800023c:	fa01 f806 	lsl.w	r8, r1, r6
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	40b7      	lsls	r7, r6
 8000246:	ea43 0808 	orr.w	r8, r3, r8
 800024a:	40b4      	lsls	r4, r6
 800024c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000250:	fa1f fc87 	uxth.w	ip, r7
 8000254:	fbb8 f1fe 	udiv	r1, r8, lr
 8000258:	0c23      	lsrs	r3, r4, #16
 800025a:	fb0e 8811 	mls	r8, lr, r1, r8
 800025e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000262:	fb01 f20c 	mul.w	r2, r1, ip
 8000266:	429a      	cmp	r2, r3
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0x62>
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000270:	f080 80ea 	bcs.w	8000448 <__udivmoddi4+0x22c>
 8000274:	429a      	cmp	r2, r3
 8000276:	f240 80e7 	bls.w	8000448 <__udivmoddi4+0x22c>
 800027a:	3902      	subs	r1, #2
 800027c:	443b      	add	r3, r7
 800027e:	1a9a      	subs	r2, r3, r2
 8000280:	b2a3      	uxth	r3, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000292:	459c      	cmp	ip, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x8e>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 800029c:	f080 80d6 	bcs.w	800044c <__udivmoddi4+0x230>
 80002a0:	459c      	cmp	ip, r3
 80002a2:	f240 80d3 	bls.w	800044c <__udivmoddi4+0x230>
 80002a6:	443b      	add	r3, r7
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ae:	eba3 030c 	sub.w	r3, r3, ip
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa2>
 80002b6:	40f3      	lsrs	r3, r6
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xb6>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb0>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa2>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x14c>
 80002da:	4573      	cmp	r3, lr
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xc8>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 8105 	bhi.w	80004ee <__udivmoddi4+0x2d2>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4690      	mov	r8, r2
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e5      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f2:	e9c5 4800 	strd	r4, r8, [r5]
 80002f6:	e7e2      	b.n	80002be <__udivmoddi4+0xa2>
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f000 8090 	beq.w	800041e <__udivmoddi4+0x202>
 80002fe:	fab2 f682 	clz	r6, r2
 8000302:	2e00      	cmp	r6, #0
 8000304:	f040 80a4 	bne.w	8000450 <__udivmoddi4+0x234>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	0c03      	lsrs	r3, r0, #16
 800030c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000310:	b280      	uxth	r0, r0
 8000312:	b2bc      	uxth	r4, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb2 fcfe 	udiv	ip, r2, lr
 800031a:	fb0e 221c 	mls	r2, lr, ip, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb04 f20c 	mul.w	r2, r4, ip
 8000326:	429a      	cmp	r2, r3
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0x11e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x11c>
 8000332:	429a      	cmp	r2, r3
 8000334:	f200 80e0 	bhi.w	80004f8 <__udivmoddi4+0x2dc>
 8000338:	46c4      	mov	ip, r8
 800033a:	1a9b      	subs	r3, r3, r2
 800033c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000340:	fb0e 3312 	mls	r3, lr, r2, r3
 8000344:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000348:	fb02 f404 	mul.w	r4, r2, r4
 800034c:	429c      	cmp	r4, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x144>
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x142>
 8000358:	429c      	cmp	r4, r3
 800035a:	f200 80ca 	bhi.w	80004f2 <__udivmoddi4+0x2d6>
 800035e:	4602      	mov	r2, r0
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x98>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa0e f401 	lsl.w	r4, lr, r1
 8000378:	fa20 f306 	lsr.w	r3, r0, r6
 800037c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000380:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	fa1f fc87 	uxth.w	ip, r7
 800038e:	fbbe f0f9 	udiv	r0, lr, r9
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	fb09 ee10 	mls	lr, r9, r0, lr
 8000398:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800039c:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1a0>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003ae:	f080 809c 	bcs.w	80004ea <__udivmoddi4+0x2ce>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f240 8099 	bls.w	80004ea <__udivmoddi4+0x2ce>
 80003b8:	3802      	subs	r0, #2
 80003ba:	443c      	add	r4, r7
 80003bc:	eba4 040e 	sub.w	r4, r4, lr
 80003c0:	fa1f fe83 	uxth.w	lr, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1ce>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003de:	f080 8082 	bcs.w	80004e6 <__udivmoddi4+0x2ca>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d97f      	bls.n	80004e6 <__udivmoddi4+0x2ca>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f6:	4564      	cmp	r4, ip
 80003f8:	4673      	mov	r3, lr
 80003fa:	46e1      	mov	r9, ip
 80003fc:	d362      	bcc.n	80004c4 <__udivmoddi4+0x2a8>
 80003fe:	d05f      	beq.n	80004c0 <__udivmoddi4+0x2a4>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x1fe>
 8000402:	ebb8 0203 	subs.w	r2, r8, r3
 8000406:	eb64 0409 	sbc.w	r4, r4, r9
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	431e      	orrs	r6, r3
 8000414:	40cc      	lsrs	r4, r1
 8000416:	e9c5 6400 	strd	r6, r4, [r5]
 800041a:	2100      	movs	r1, #0
 800041c:	e74f      	b.n	80002be <__udivmoddi4+0xa2>
 800041e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000422:	0c01      	lsrs	r1, r0, #16
 8000424:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000428:	b280      	uxth	r0, r0
 800042a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042e:	463b      	mov	r3, r7
 8000430:	4638      	mov	r0, r7
 8000432:	463c      	mov	r4, r7
 8000434:	46b8      	mov	r8, r7
 8000436:	46be      	mov	lr, r7
 8000438:	2620      	movs	r6, #32
 800043a:	fbb1 f1f7 	udiv	r1, r1, r7
 800043e:	eba2 0208 	sub.w	r2, r2, r8
 8000442:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000446:	e766      	b.n	8000316 <__udivmoddi4+0xfa>
 8000448:	4601      	mov	r1, r0
 800044a:	e718      	b.n	800027e <__udivmoddi4+0x62>
 800044c:	4610      	mov	r0, r2
 800044e:	e72c      	b.n	80002aa <__udivmoddi4+0x8e>
 8000450:	f1c6 0220 	rsb	r2, r6, #32
 8000454:	fa2e f302 	lsr.w	r3, lr, r2
 8000458:	40b7      	lsls	r7, r6
 800045a:	40b1      	lsls	r1, r6
 800045c:	fa20 f202 	lsr.w	r2, r0, r2
 8000460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000464:	430a      	orrs	r2, r1
 8000466:	fbb3 f8fe 	udiv	r8, r3, lr
 800046a:	b2bc      	uxth	r4, r7
 800046c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000470:	0c11      	lsrs	r1, r2, #16
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb08 f904 	mul.w	r9, r8, r4
 800047a:	40b0      	lsls	r0, r6
 800047c:	4589      	cmp	r9, r1
 800047e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000482:	b280      	uxth	r0, r0
 8000484:	d93e      	bls.n	8000504 <__udivmoddi4+0x2e8>
 8000486:	1879      	adds	r1, r7, r1
 8000488:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 800048c:	d201      	bcs.n	8000492 <__udivmoddi4+0x276>
 800048e:	4589      	cmp	r9, r1
 8000490:	d81f      	bhi.n	80004d2 <__udivmoddi4+0x2b6>
 8000492:	eba1 0109 	sub.w	r1, r1, r9
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a2:	b292      	uxth	r2, r2
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d229      	bcs.n	8000500 <__udivmoddi4+0x2e4>
 80004ac:	18ba      	adds	r2, r7, r2
 80004ae:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004b2:	d2c4      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b4:	4542      	cmp	r2, r8
 80004b6:	d2c2      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b8:	f1a9 0102 	sub.w	r1, r9, #2
 80004bc:	443a      	add	r2, r7
 80004be:	e7be      	b.n	800043e <__udivmoddi4+0x222>
 80004c0:	45f0      	cmp	r8, lr
 80004c2:	d29d      	bcs.n	8000400 <__udivmoddi4+0x1e4>
 80004c4:	ebbe 0302 	subs.w	r3, lr, r2
 80004c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004cc:	3801      	subs	r0, #1
 80004ce:	46e1      	mov	r9, ip
 80004d0:	e796      	b.n	8000400 <__udivmoddi4+0x1e4>
 80004d2:	eba7 0909 	sub.w	r9, r7, r9
 80004d6:	4449      	add	r1, r9
 80004d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e0:	fb09 f804 	mul.w	r8, r9, r4
 80004e4:	e7db      	b.n	800049e <__udivmoddi4+0x282>
 80004e6:	4673      	mov	r3, lr
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1ce>
 80004ea:	4650      	mov	r0, sl
 80004ec:	e766      	b.n	80003bc <__udivmoddi4+0x1a0>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e6fd      	b.n	80002ee <__udivmoddi4+0xd2>
 80004f2:	443b      	add	r3, r7
 80004f4:	3a02      	subs	r2, #2
 80004f6:	e733      	b.n	8000360 <__udivmoddi4+0x144>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	443b      	add	r3, r7
 80004fe:	e71c      	b.n	800033a <__udivmoddi4+0x11e>
 8000500:	4649      	mov	r1, r9
 8000502:	e79c      	b.n	800043e <__udivmoddi4+0x222>
 8000504:	eba1 0109 	sub.w	r1, r1, r9
 8000508:	46c4      	mov	ip, r8
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fb09 f804 	mul.w	r8, r9, r4
 8000512:	e7c4      	b.n	800049e <__udivmoddi4+0x282>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <ApplicationInit>:
static STMPE811_TouchData StaticTouchData;
static SlotState_t gameBoard[BOARD_ROWS][BOARD_COLS];
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 800051c:	f002 fa4a 	bl	80029b4 <initialise_monitor_handles>
    LTCD__Init();
 8000520:	f000 fb88 	bl	8000c34 <LTCD__Init>
    LTCD_Layer_Init(0);
 8000524:	2000      	movs	r0, #0
 8000526:	f000 fb45 	bl	8000bb4 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 800052a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800052e:	2000      	movs	r0, #0
 8000530:	f000 fc98 	bl	8000e64 <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 8000534:	f000 fd6e 	bl	8001014 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 8000538:	4b08      	ldr	r3, [pc, #32]	@ (800055c <ApplicationInit+0x44>)
 800053a:	2201      	movs	r2, #1
 800053c:	719a      	strb	r2, [r3, #6]

	Button_Interrupt_Init();
 800053e:	f000 fa57 	bl	80009f0 <Button_Interrupt_Init>

    currentAppState = APP_STATE_MENU;
 8000542:	4b07      	ldr	r3, [pc, #28]	@ (8000560 <ApplicationInit+0x48>)
 8000544:	2201      	movs	r2, #1
 8000546:	701a      	strb	r2, [r3, #0]
    drawMenuScreen();
 8000548:	f000 f89e 	bl	8000688 <drawMenuScreen>
    printf("Initial Menu Drawn. Entering Scheduler Loop.\n");
 800054c:	4805      	ldr	r0, [pc, #20]	@ (8000564 <ApplicationInit+0x4c>)
 800054e:	f006 f815 	bl	800657c <puts>
    printf("----------------------\n");
 8000552:	4805      	ldr	r0, [pc, #20]	@ (8000568 <ApplicationInit+0x50>)
 8000554:	f006 f812 	bl	800657c <puts>

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 8000558:	bf00      	nop
 800055a:	bd80      	pop	{r7, pc}
 800055c:	20000098 	.word	0x20000098
 8000560:	20000094 	.word	0x20000094
 8000564:	08006cbc 	.word	0x08006cbc
 8000568:	08006cec 	.word	0x08006cec

0800056c <LCD_Draw_Rect>:

// Simple rectangle drawing
void LCD_Draw_Rect(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color) {
 800056c:	b590      	push	{r4, r7, lr}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	4604      	mov	r4, r0
 8000574:	4608      	mov	r0, r1
 8000576:	4611      	mov	r1, r2
 8000578:	461a      	mov	r2, r3
 800057a:	4623      	mov	r3, r4
 800057c:	80fb      	strh	r3, [r7, #6]
 800057e:	4603      	mov	r3, r0
 8000580:	80bb      	strh	r3, [r7, #4]
 8000582:	460b      	mov	r3, r1
 8000584:	807b      	strh	r3, [r7, #2]
 8000586:	4613      	mov	r3, r2
 8000588:	803b      	strh	r3, [r7, #0]
    // Draw horizontal lines
    for (uint16_t i = 0; i < width; i++) {
 800058a:	2300      	movs	r3, #0
 800058c:	81fb      	strh	r3, [r7, #14]
 800058e:	e019      	b.n	80005c4 <LCD_Draw_Rect+0x58>
        LCD_Draw_Pixel(x + i, y, color);
 8000590:	88fa      	ldrh	r2, [r7, #6]
 8000592:	89fb      	ldrh	r3, [r7, #14]
 8000594:	4413      	add	r3, r2
 8000596:	b29b      	uxth	r3, r3
 8000598:	8c3a      	ldrh	r2, [r7, #32]
 800059a:	88b9      	ldrh	r1, [r7, #4]
 800059c:	4618      	mov	r0, r3
 800059e:	f000 fba7 	bl	8000cf0 <LCD_Draw_Pixel>
        LCD_Draw_Pixel(x + i, y + height - 1, color);
 80005a2:	88fa      	ldrh	r2, [r7, #6]
 80005a4:	89fb      	ldrh	r3, [r7, #14]
 80005a6:	4413      	add	r3, r2
 80005a8:	b298      	uxth	r0, r3
 80005aa:	88ba      	ldrh	r2, [r7, #4]
 80005ac:	883b      	ldrh	r3, [r7, #0]
 80005ae:	4413      	add	r3, r2
 80005b0:	b29b      	uxth	r3, r3
 80005b2:	3b01      	subs	r3, #1
 80005b4:	b29b      	uxth	r3, r3
 80005b6:	8c3a      	ldrh	r2, [r7, #32]
 80005b8:	4619      	mov	r1, r3
 80005ba:	f000 fb99 	bl	8000cf0 <LCD_Draw_Pixel>
    for (uint16_t i = 0; i < width; i++) {
 80005be:	89fb      	ldrh	r3, [r7, #14]
 80005c0:	3301      	adds	r3, #1
 80005c2:	81fb      	strh	r3, [r7, #14]
 80005c4:	89fa      	ldrh	r2, [r7, #14]
 80005c6:	887b      	ldrh	r3, [r7, #2]
 80005c8:	429a      	cmp	r2, r3
 80005ca:	d3e1      	bcc.n	8000590 <LCD_Draw_Rect+0x24>
    }
    // Draw vertical lines
    for (uint16_t i = 1; i < height - 1; i++) { // Avoid drawing corners twice
 80005cc:	2301      	movs	r3, #1
 80005ce:	81bb      	strh	r3, [r7, #12]
 80005d0:	e019      	b.n	8000606 <LCD_Draw_Rect+0x9a>
        LCD_Draw_Pixel(x, y + i, color);
 80005d2:	88ba      	ldrh	r2, [r7, #4]
 80005d4:	89bb      	ldrh	r3, [r7, #12]
 80005d6:	4413      	add	r3, r2
 80005d8:	b299      	uxth	r1, r3
 80005da:	8c3a      	ldrh	r2, [r7, #32]
 80005dc:	88fb      	ldrh	r3, [r7, #6]
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 fb86 	bl	8000cf0 <LCD_Draw_Pixel>
        LCD_Draw_Pixel(x + width - 1, y + i, color);
 80005e4:	88fa      	ldrh	r2, [r7, #6]
 80005e6:	887b      	ldrh	r3, [r7, #2]
 80005e8:	4413      	add	r3, r2
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	3b01      	subs	r3, #1
 80005ee:	b298      	uxth	r0, r3
 80005f0:	88ba      	ldrh	r2, [r7, #4]
 80005f2:	89bb      	ldrh	r3, [r7, #12]
 80005f4:	4413      	add	r3, r2
 80005f6:	b29b      	uxth	r3, r3
 80005f8:	8c3a      	ldrh	r2, [r7, #32]
 80005fa:	4619      	mov	r1, r3
 80005fc:	f000 fb78 	bl	8000cf0 <LCD_Draw_Pixel>
    for (uint16_t i = 1; i < height - 1; i++) { // Avoid drawing corners twice
 8000600:	89bb      	ldrh	r3, [r7, #12]
 8000602:	3301      	adds	r3, #1
 8000604:	81bb      	strh	r3, [r7, #12]
 8000606:	89ba      	ldrh	r2, [r7, #12]
 8000608:	883b      	ldrh	r3, [r7, #0]
 800060a:	3b01      	subs	r3, #1
 800060c:	429a      	cmp	r2, r3
 800060e:	dbe0      	blt.n	80005d2 <LCD_Draw_Rect+0x66>
    }
}
 8000610:	bf00      	nop
 8000612:	bf00      	nop
 8000614:	3714      	adds	r7, #20
 8000616:	46bd      	mov	sp, r7
 8000618:	bd90      	pop	{r4, r7, pc}

0800061a <LCD_DisplayString>:

// Simple string display
void LCD_DisplayString(uint16_t Xpos, uint16_t Ypos, uint8_t *ptr, FONT_t* font, uint16_t textColor, uint16_t bgColor, bool opaque) {
 800061a:	b580      	push	{r7, lr}
 800061c:	b084      	sub	sp, #16
 800061e:	af00      	add	r7, sp, #0
 8000620:	60ba      	str	r2, [r7, #8]
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	4603      	mov	r3, r0
 8000626:	81fb      	strh	r3, [r7, #14]
 8000628:	460b      	mov	r3, r1
 800062a:	81bb      	strh	r3, [r7, #12]
    LCD_SetFont(font);
 800062c:	6878      	ldr	r0, [r7, #4]
 800062e:	f000 fc4b 	bl	8000ec8 <LCD_SetFont>
    LCD_SetTextColor(textColor);
 8000632:	8b3b      	ldrh	r3, [r7, #24]
 8000634:	4618      	mov	r0, r3
 8000636:	f000 fc37 	bl	8000ea8 <LCD_SetTextColor>
    // Background color setting would go here if opaque is true
    // This requires a fill rectangle function or modifying LCD_DisplayChar

    while (*ptr != '\0') {
 800063a:	e01c      	b.n	8000676 <LCD_DisplayString+0x5c>
        // Add bounds checking
        if (Xpos >= LCD_PIXEL_WIDTH - font->Width || Ypos >= LCD_PIXEL_HEIGHT - font->Height) {
 800063c:	89fa      	ldrh	r2, [r7, #14]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	889b      	ldrh	r3, [r3, #4]
 8000642:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000646:	429a      	cmp	r2, r3
 8000648:	da19      	bge.n	800067e <LCD_DisplayString+0x64>
 800064a:	89ba      	ldrh	r2, [r7, #12]
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	88db      	ldrh	r3, [r3, #6]
 8000650:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8000654:	429a      	cmp	r2, r3
 8000656:	da12      	bge.n	800067e <LCD_DisplayString+0x64>
            break;
        }
        LCD_DisplayChar(Xpos, Ypos, *ptr); // Assumes transparent background
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	781a      	ldrb	r2, [r3, #0]
 800065c:	89b9      	ldrh	r1, [r7, #12]
 800065e:	89fb      	ldrh	r3, [r7, #14]
 8000660:	4618      	mov	r0, r3
 8000662:	f000 fcaf 	bl	8000fc4 <LCD_DisplayChar>
        Xpos += font->Width;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	889a      	ldrh	r2, [r3, #4]
 800066a:	89fb      	ldrh	r3, [r7, #14]
 800066c:	4413      	add	r3, r2
 800066e:	81fb      	strh	r3, [r7, #14]
        ptr++;
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	3301      	adds	r3, #1
 8000674:	60bb      	str	r3, [r7, #8]
    while (*ptr != '\0') {
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d1de      	bne.n	800063c <LCD_DisplayString+0x22>
    }
}
 800067e:	bf00      	nop
 8000680:	3710      	adds	r7, #16
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
	...

08000688 <drawMenuScreen>:

void drawMenuScreen() {
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af04      	add	r7, sp, #16

		LCD_Clear(0, LCD_COLOR_BLUE); // Background
 800068e:	211f      	movs	r1, #31
 8000690:	2000      	movs	r0, #0
 8000692:	f000 fbe7 	bl	8000e64 <LCD_Clear>

		// --- Draw Button 1 (1 Player) ---
		LCD_Draw_Rect(BUTTON1_X, BUTTON1_Y, BUTTON_WIDTH, BUTTON_HEIGHT, LCD_COLOR_YELLOW); // Outline
 8000696:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800069a:	9300      	str	r3, [sp, #0]
 800069c:	2332      	movs	r3, #50	@ 0x32
 800069e:	2264      	movs	r2, #100	@ 0x64
 80006a0:	2169      	movs	r1, #105	@ 0x69
 80006a2:	200a      	movs	r0, #10
 80006a4:	f7ff ff62 	bl	800056c <LCD_Draw_Rect>
		LCD_DisplayString(BUTTON1_X + 5, BUTTON1_Y + (BUTTON_HEIGHT - Font16x24.Height)/2, (uint8_t*)"1P", &Font16x24, LCD_COLOR_WHITE, LCD_COLOR_BLUE, false);
 80006a8:	4b29      	ldr	r3, [pc, #164]	@ (8000750 <drawMenuScreen+0xc8>)
 80006aa:	88db      	ldrh	r3, [r3, #6]
 80006ac:	f1c3 0332 	rsb	r3, r3, #50	@ 0x32
 80006b0:	0fda      	lsrs	r2, r3, #31
 80006b2:	4413      	add	r3, r2
 80006b4:	105b      	asrs	r3, r3, #1
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	3369      	adds	r3, #105	@ 0x69
 80006ba:	b299      	uxth	r1, r3
 80006bc:	2300      	movs	r3, #0
 80006be:	9302      	str	r3, [sp, #8]
 80006c0:	231f      	movs	r3, #31
 80006c2:	9301      	str	r3, [sp, #4]
 80006c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	4b21      	ldr	r3, [pc, #132]	@ (8000750 <drawMenuScreen+0xc8>)
 80006cc:	4a21      	ldr	r2, [pc, #132]	@ (8000754 <drawMenuScreen+0xcc>)
 80006ce:	200f      	movs	r0, #15
 80006d0:	f7ff ffa3 	bl	800061a <LCD_DisplayString>

		// --- Draw Button 2 (2 Player) ---
		LCD_Draw_Rect(BUTTON2_X, BUTTON2_Y, BUTTON_WIDTH, BUTTON_HEIGHT, LCD_COLOR_YELLOW); // Outline
 80006d4:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80006d8:	9300      	str	r3, [sp, #0]
 80006da:	2332      	movs	r3, #50	@ 0x32
 80006dc:	2264      	movs	r2, #100	@ 0x64
 80006de:	2169      	movs	r1, #105	@ 0x69
 80006e0:	2082      	movs	r0, #130	@ 0x82
 80006e2:	f7ff ff43 	bl	800056c <LCD_Draw_Rect>
		LCD_DisplayString(BUTTON2_X + 5, BUTTON2_Y + (BUTTON_HEIGHT - Font16x24.Height)/2, (uint8_t*)"2P", &Font16x24, LCD_COLOR_WHITE, LCD_COLOR_BLUE, false);
 80006e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000750 <drawMenuScreen+0xc8>)
 80006e8:	88db      	ldrh	r3, [r3, #6]
 80006ea:	f1c3 0332 	rsb	r3, r3, #50	@ 0x32
 80006ee:	0fda      	lsrs	r2, r3, #31
 80006f0:	4413      	add	r3, r2
 80006f2:	105b      	asrs	r3, r3, #1
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	3369      	adds	r3, #105	@ 0x69
 80006f8:	b299      	uxth	r1, r3
 80006fa:	2300      	movs	r3, #0
 80006fc:	9302      	str	r3, [sp, #8]
 80006fe:	231f      	movs	r3, #31
 8000700:	9301      	str	r3, [sp, #4]
 8000702:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	4b11      	ldr	r3, [pc, #68]	@ (8000750 <drawMenuScreen+0xc8>)
 800070a:	4a13      	ldr	r2, [pc, #76]	@ (8000758 <drawMenuScreen+0xd0>)
 800070c:	2087      	movs	r0, #135	@ 0x87
 800070e:	f7ff ff84 	bl	800061a <LCD_DisplayString>

		// --- Title ---
		LCD_DisplayString((LCD_PIXEL_WIDTH - 12*Font16x24.Width)/2, 30, (uint8_t*)"Connect Four", &Font16x24, LCD_COLOR_YELLOW, LCD_COLOR_BLUE, false); // Centered title
 8000712:	4b0f      	ldr	r3, [pc, #60]	@ (8000750 <drawMenuScreen+0xc8>)
 8000714:	889b      	ldrh	r3, [r3, #4]
 8000716:	461a      	mov	r2, r3
 8000718:	4613      	mov	r3, r2
 800071a:	0092      	lsls	r2, r2, #2
 800071c:	1a9b      	subs	r3, r3, r2
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	33f0      	adds	r3, #240	@ 0xf0
 8000722:	0fda      	lsrs	r2, r3, #31
 8000724:	4413      	add	r3, r2
 8000726:	105b      	asrs	r3, r3, #1
 8000728:	b298      	uxth	r0, r3
 800072a:	2300      	movs	r3, #0
 800072c:	9302      	str	r3, [sp, #8]
 800072e:	231f      	movs	r3, #31
 8000730:	9301      	str	r3, [sp, #4]
 8000732:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	4b05      	ldr	r3, [pc, #20]	@ (8000750 <drawMenuScreen+0xc8>)
 800073a:	4a08      	ldr	r2, [pc, #32]	@ (800075c <drawMenuScreen+0xd4>)
 800073c:	211e      	movs	r1, #30
 800073e:	f7ff ff6c 	bl	800061a <LCD_DisplayString>

		//handleTouchInput();
		addSchedulerEvent(TOUCH_POLLING_EVENT);
 8000742:	2001      	movs	r0, #1
 8000744:	f000 fc8a 	bl	800105c <addSchedulerEvent>
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000004 	.word	0x20000004
 8000754:	08006d04 	.word	0x08006d04
 8000758:	08006d08 	.word	0x08006d08
 800075c:	08006d0c 	.word	0x08006d0c

08000760 <getSlotColor>:


uint16_t getSlotColor(SlotState_t state) {
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	71fb      	strb	r3, [r7, #7]
    switch(state) {
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	2b01      	cmp	r3, #1
 800076e:	d002      	beq.n	8000776 <getSlotColor+0x16>
 8000770:	2b02      	cmp	r3, #2
 8000772:	d003      	beq.n	800077c <getSlotColor+0x1c>
 8000774:	e005      	b.n	8000782 <getSlotColor+0x22>
        case SLOT_PLAYER1:
            return PLAYER1_COLOR;
 8000776:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800077a:	e004      	b.n	8000786 <getSlotColor+0x26>
        case SLOT_PLAYER2:
            return PLAYER2_COLOR;
 800077c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000780:	e001      	b.n	8000786 <getSlotColor+0x26>
        case SLOT_EMPTY:
        default:
            return EMPTY_SLOT_COLOR;
 8000782:	f64f 73ff 	movw	r3, #65535	@ 0xffff
    }
}
 8000786:	4618      	mov	r0, r3
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
	...

08000794 <initializeGameBoard>:

void initializeGameBoard() {
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
    printf("Initializing Game Board...\n");
 800079a:	4812      	ldr	r0, [pc, #72]	@ (80007e4 <initializeGameBoard+0x50>)
 800079c:	f005 feee 	bl	800657c <puts>
    for (int r = 0; r < BOARD_ROWS; r++) {
 80007a0:	2300      	movs	r3, #0
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	e015      	b.n	80007d2 <initializeGameBoard+0x3e>
        for (int c = 0; c < BOARD_COLS; c++) {
 80007a6:	2300      	movs	r3, #0
 80007a8:	603b      	str	r3, [r7, #0]
 80007aa:	e00c      	b.n	80007c6 <initializeGameBoard+0x32>
            gameBoard[r][c] = SLOT_EMPTY;
 80007ac:	490e      	ldr	r1, [pc, #56]	@ (80007e8 <initializeGameBoard+0x54>)
 80007ae:	687a      	ldr	r2, [r7, #4]
 80007b0:	4613      	mov	r3, r2
 80007b2:	00db      	lsls	r3, r3, #3
 80007b4:	1a9b      	subs	r3, r3, r2
 80007b6:	18ca      	adds	r2, r1, r3
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	4413      	add	r3, r2
 80007bc:	2200      	movs	r2, #0
 80007be:	701a      	strb	r2, [r3, #0]
        for (int c = 0; c < BOARD_COLS; c++) {
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	3301      	adds	r3, #1
 80007c4:	603b      	str	r3, [r7, #0]
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	2b06      	cmp	r3, #6
 80007ca:	ddef      	ble.n	80007ac <initializeGameBoard+0x18>
    for (int r = 0; r < BOARD_ROWS; r++) {
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	3301      	adds	r3, #1
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2b05      	cmp	r3, #5
 80007d6:	dde6      	ble.n	80007a6 <initializeGameBoard+0x12>
        }
    }
}
 80007d8:	bf00      	nop
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	08006d1c 	.word	0x08006d1c
 80007e8:	200000a0 	.word	0x200000a0

080007ec <drawGameBoard>:

void drawGameBoard() {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af02      	add	r7, sp, #8
    printf("Drawing Game Board...\n");
 80007f2:	4824      	ldr	r0, [pc, #144]	@ (8000884 <drawGameBoard+0x98>)
 80007f4:	f005 fec2 	bl	800657c <puts>
    // 1. Clear the screen or draw a background
    LCD_Clear(0, BACKGROUND_COLOR); // Or use LCD_Fill_Rect for just the screen area
 80007f8:	2100      	movs	r1, #0
 80007fa:	2000      	movs	r0, #0
 80007fc:	f000 fb32 	bl	8000e64 <LCD_Clear>

    // 2. Draw the main board structure (the blue rectangle)
    LCD_Fill_Rect(BOARD_X_OFFSET, BOARD_Y_OFFSET, BOARD_DRAW_WIDTH, BOARD_DRAW_HEIGHT, BOARD_COLOR);
 8000800:	231f      	movs	r3, #31
 8000802:	9300      	str	r3, [sp, #0]
 8000804:	23c4      	movs	r3, #196	@ 0xc4
 8000806:	22e4      	movs	r2, #228	@ 0xe4
 8000808:	2132      	movs	r1, #50	@ 0x32
 800080a:	2006      	movs	r0, #6
 800080c:	f000 fae1 	bl	8000dd2 <LCD_Fill_Rect>

    // 3. Draw the slots (circles) based on the gameBoard state
    for (int r = 0; r < BOARD_ROWS; r++) {
 8000810:	2300      	movs	r3, #0
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	e02b      	b.n	800086e <drawGameBoard+0x82>
        for (int c = 0; c < BOARD_COLS; c++) {
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	e022      	b.n	8000862 <drawGameBoard+0x76>
            // Calculate the center coordinates of the circle for slot (r, c)
            uint16_t centerX = BOARD_X_OFFSET + BOARD_SPACING + CIRCLE_RADIUS + c * (CIRCLE_DIAMETER + BOARD_SPACING);
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	b29b      	uxth	r3, r3
 8000820:	015b      	lsls	r3, r3, #5
 8000822:	b29b      	uxth	r3, r3
 8000824:	3318      	adds	r3, #24
 8000826:	80fb      	strh	r3, [r7, #6]
            uint16_t centerY = BOARD_Y_OFFSET + BOARD_SPACING + CIRCLE_RADIUS + r * (CIRCLE_DIAMETER + BOARD_SPACING);
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	b29b      	uxth	r3, r3
 800082c:	015b      	lsls	r3, r3, #5
 800082e:	b29b      	uxth	r3, r3
 8000830:	3344      	adds	r3, #68	@ 0x44
 8000832:	80bb      	strh	r3, [r7, #4]

            // Get the color for the current slot state
            uint16_t slotColor = getSlotColor(gameBoard[r][c]);
 8000834:	4914      	ldr	r1, [pc, #80]	@ (8000888 <drawGameBoard+0x9c>)
 8000836:	68fa      	ldr	r2, [r7, #12]
 8000838:	4613      	mov	r3, r2
 800083a:	00db      	lsls	r3, r3, #3
 800083c:	1a9b      	subs	r3, r3, r2
 800083e:	18ca      	adds	r2, r1, r3
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	4413      	add	r3, r2
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff ff8a 	bl	8000760 <getSlotColor>
 800084c:	4603      	mov	r3, r0
 800084e:	807b      	strh	r3, [r7, #2]

            // Draw the filled circle representing the slot/coin
            // Make sure LCD_Draw_Circle_Fill exists and works!
            LCD_Draw_Circle_Fill(centerX, centerY, CIRCLE_RADIUS, slotColor);
 8000850:	887b      	ldrh	r3, [r7, #2]
 8000852:	88b9      	ldrh	r1, [r7, #4]
 8000854:	88f8      	ldrh	r0, [r7, #6]
 8000856:	220e      	movs	r2, #14
 8000858:	f000 fa68 	bl	8000d2c <LCD_Draw_Circle_Fill>
        for (int c = 0; c < BOARD_COLS; c++) {
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	3301      	adds	r3, #1
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	2b06      	cmp	r3, #6
 8000866:	ddd9      	ble.n	800081c <drawGameBoard+0x30>
    for (int r = 0; r < BOARD_ROWS; r++) {
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	3301      	adds	r3, #1
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	2b05      	cmp	r3, #5
 8000872:	ddd0      	ble.n	8000816 <drawGameBoard+0x2a>
        }
    }
     printf("Game Board Drawn.\n");
 8000874:	4805      	ldr	r0, [pc, #20]	@ (800088c <drawGameBoard+0xa0>)
 8000876:	f005 fe81 	bl	800657c <puts>
}
 800087a:	bf00      	nop
 800087c:	3710      	adds	r7, #16
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	08006d38 	.word	0x08006d38
 8000888:	200000a0 	.word	0x200000a0
 800088c:	08006d50 	.word	0x08006d50

08000890 <handleTouchInput>:


void handleTouchInput() {
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af02      	add	r7, sp, #8


//	static bool wasReleased = true; // Basic Debounce: Only process if it was previously released

	while(1) {
		returnTouchStateAndLocation(&touchData);
 8000896:	463b      	mov	r3, r7
 8000898:	4618      	mov	r0, r3
 800089a:	f000 fbc6 	bl	800102a <returnTouchStateAndLocation>

		if (currentAppState == APP_STATE_MENU) {
 800089e:	4b22      	ldr	r3, [pc, #136]	@ (8000928 <handleTouchInput+0x98>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d139      	bne.n	800091a <handleTouchInput+0x8a>

			// Check Button 2
			if (isTouchInside(touchData.x, touchData.y, BUTTON1_X, BUTTON1_Y, BUTTON_WIDTH, BUTTON_HEIGHT)) {
 80008a6:	8838      	ldrh	r0, [r7, #0]
 80008a8:	8879      	ldrh	r1, [r7, #2]
 80008aa:	2332      	movs	r3, #50	@ 0x32
 80008ac:	9301      	str	r3, [sp, #4]
 80008ae:	2364      	movs	r3, #100	@ 0x64
 80008b0:	9300      	str	r3, [sp, #0]
 80008b2:	2369      	movs	r3, #105	@ 0x69
 80008b4:	220a      	movs	r2, #10
 80008b6:	f000 f83d 	bl	8000934 <isTouchInside>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d00d      	beq.n	80008dc <handleTouchInput+0x4c>
				printf("Button 2 (2 Player) Selected!\n");
 80008c0:	481a      	ldr	r0, [pc, #104]	@ (800092c <handleTouchInput+0x9c>)
 80008c2:	f005 fe5b 	bl	800657c <puts>
				currentAppState = APP_STATE_GAME_1P_PLAYER_TURN; // Transition state
 80008c6:	4b18      	ldr	r3, [pc, #96]	@ (8000928 <handleTouchInput+0x98>)
 80008c8:	2203      	movs	r2, #3
 80008ca:	701a      	strb	r2, [r3, #0]

				//LCD_Clear(0, LCD_COLOR_GREEN); // Placeholder
	            initializeGameBoard(); // Initialize board data
 80008cc:	f7ff ff62 	bl	8000794 <initializeGameBoard>
	            drawGameBoard();       // Draw the initial empty board
 80008d0:	f7ff ff8c 	bl	80007ec <drawGameBoard>
				addSchedulerEvent(TOUCH_POLLING_EVENT);
 80008d4:	2001      	movs	r0, #1
 80008d6:	f000 fbc1 	bl	800105c <addSchedulerEvent>
				return;
 80008da:	e022      	b.n	8000922 <handleTouchInput+0x92>
			}
			// Check Button 1
			else if (isTouchInside(touchData.x, touchData.y, BUTTON2_X, BUTTON2_Y, BUTTON_WIDTH, BUTTON_HEIGHT)) {
 80008dc:	8838      	ldrh	r0, [r7, #0]
 80008de:	8879      	ldrh	r1, [r7, #2]
 80008e0:	2332      	movs	r3, #50	@ 0x32
 80008e2:	9301      	str	r3, [sp, #4]
 80008e4:	2364      	movs	r3, #100	@ 0x64
 80008e6:	9300      	str	r3, [sp, #0]
 80008e8:	2369      	movs	r3, #105	@ 0x69
 80008ea:	2282      	movs	r2, #130	@ 0x82
 80008ec:	f000 f822 	bl	8000934 <isTouchInside>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d00d      	beq.n	8000912 <handleTouchInput+0x82>
				printf("Button 1 (1 Player) Selected!\n");
 80008f6:	480e      	ldr	r0, [pc, #56]	@ (8000930 <handleTouchInput+0xa0>)
 80008f8:	f005 fe40 	bl	800657c <puts>
				currentAppState = APP_STATE_GAME_1P_SETUP; // Transition state
 80008fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000928 <handleTouchInput+0x98>)
 80008fe:	2202      	movs	r2, #2
 8000900:	701a      	strb	r2, [r3, #0]

				//LCD_Clear(0, LCD_COLOR_RED); // Placeholder
		        initializeGameBoard(); // Initialize board data
 8000902:	f7ff ff47 	bl	8000794 <initializeGameBoard>
		        drawGameBoard();       // Draw the initial empty board
 8000906:	f7ff ff71 	bl	80007ec <drawGameBoard>
				addSchedulerEvent(TOUCH_POLLING_EVENT);
 800090a:	2001      	movs	r0, #1
 800090c:	f000 fba6 	bl	800105c <addSchedulerEvent>
				return;
 8000910:	e007      	b.n	8000922 <handleTouchInput+0x92>
			}

			addSchedulerEvent(TOUCH_POLLING_EVENT);
 8000912:	2001      	movs	r0, #1
 8000914:	f000 fba2 	bl	800105c <addSchedulerEvent>
 8000918:	e7bd      	b.n	8000896 <handleTouchInput+0x6>
		}  else if (currentAppState == APP_STATE_GAME_1P_PLAYER_TURN) {
 800091a:	4b03      	ldr	r3, [pc, #12]	@ (8000928 <handleTouchInput+0x98>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	2b03      	cmp	r3, #3
		returnTouchStateAndLocation(&touchData);
 8000920:	e7b9      	b.n	8000896 <handleTouchInput+0x6>
	    }  else if (currentAppState == APP_STATE_GAME_1P_AI_TURN) {
	         // Handle touch input during the game (e.g., selecting column, dropping piece)
	         // This will be added later.
	    }
	}
}
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000094 	.word	0x20000094
 800092c:	08006d64 	.word	0x08006d64
 8000930:	08006d84 	.word	0x08006d84

08000934 <isTouchInside>:

// Check if touch coordinates are within a button's bounds
bool isTouchInside(uint16_t touchX, uint16_t touchY, uint16_t btnX, uint16_t btnY, uint16_t btnW, uint16_t btnH) {
 8000934:	b490      	push	{r4, r7}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	4604      	mov	r4, r0
 800093c:	4608      	mov	r0, r1
 800093e:	4611      	mov	r1, r2
 8000940:	461a      	mov	r2, r3
 8000942:	4623      	mov	r3, r4
 8000944:	80fb      	strh	r3, [r7, #6]
 8000946:	4603      	mov	r3, r0
 8000948:	80bb      	strh	r3, [r7, #4]
 800094a:	460b      	mov	r3, r1
 800094c:	807b      	strh	r3, [r7, #2]
 800094e:	4613      	mov	r3, r2
 8000950:	803b      	strh	r3, [r7, #0]
    return (touchX >= btnX && touchX < (btnX + btnW) &&
            touchY >= btnY && touchY < (btnY + btnH));
 8000952:	88fa      	ldrh	r2, [r7, #6]
 8000954:	887b      	ldrh	r3, [r7, #2]
 8000956:	429a      	cmp	r2, r3
 8000958:	d311      	bcc.n	800097e <isTouchInside+0x4a>
    return (touchX >= btnX && touchX < (btnX + btnW) &&
 800095a:	88fa      	ldrh	r2, [r7, #6]
 800095c:	8879      	ldrh	r1, [r7, #2]
 800095e:	8a3b      	ldrh	r3, [r7, #16]
 8000960:	440b      	add	r3, r1
 8000962:	429a      	cmp	r2, r3
 8000964:	da0b      	bge.n	800097e <isTouchInside+0x4a>
 8000966:	88ba      	ldrh	r2, [r7, #4]
 8000968:	883b      	ldrh	r3, [r7, #0]
 800096a:	429a      	cmp	r2, r3
 800096c:	d307      	bcc.n	800097e <isTouchInside+0x4a>
            touchY >= btnY && touchY < (btnY + btnH));
 800096e:	88ba      	ldrh	r2, [r7, #4]
 8000970:	8839      	ldrh	r1, [r7, #0]
 8000972:	8abb      	ldrh	r3, [r7, #20]
 8000974:	440b      	add	r3, r1
 8000976:	429a      	cmp	r2, r3
 8000978:	da01      	bge.n	800097e <isTouchInside+0x4a>
 800097a:	2301      	movs	r3, #1
 800097c:	e000      	b.n	8000980 <isTouchInside+0x4c>
 800097e:	2300      	movs	r3, #0
 8000980:	f003 0301 	and.w	r3, r3, #1
 8000984:	b2db      	uxtb	r3, r3
}
 8000986:	4618      	mov	r0, r3
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bc90      	pop	{r4, r7}
 800098e:	4770      	bx	lr

08000990 <handleHardwareButton>:

void handleHardwareButton() {
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
    // Simple debounce check
    static uint32_t last_hw_press_time = 0;
    uint32_t current_time = HAL_GetTick();
 8000996:	f002 f959 	bl	8002c4c <HAL_GetTick>
 800099a:	6078      	str	r0, [r7, #4]

    if (current_time - last_hw_press_time > 300) { // 300ms debounce
 800099c:	4b0f      	ldr	r3, [pc, #60]	@ (80009dc <handleHardwareButton+0x4c>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	1ad3      	subs	r3, r2, r3
 80009a4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80009a8:	d911      	bls.n	80009ce <handleHardwareButton+0x3e>
        printf("Hardware Button Action Triggered!\n");
 80009aa:	480d      	ldr	r0, [pc, #52]	@ (80009e0 <handleHardwareButton+0x50>)
 80009ac:	f005 fde6 	bl	800657c <puts>
        last_hw_press_time = current_time;
 80009b0:	4a0a      	ldr	r2, [pc, #40]	@ (80009dc <handleHardwareButton+0x4c>)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	6013      	str	r3, [r2, #0]

        // --- Define action for HW button ---
        // Example: Reset to Menu screen if in game
        if (currentAppState != APP_STATE_MENU && currentAppState != APP_STATE_INIT) {
 80009b6:	4b0b      	ldr	r3, [pc, #44]	@ (80009e4 <handleHardwareButton+0x54>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d00a      	beq.n	80009d4 <handleHardwareButton+0x44>
 80009be:	4b09      	ldr	r3, [pc, #36]	@ (80009e4 <handleHardwareButton+0x54>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d006      	beq.n	80009d4 <handleHardwareButton+0x44>
            printf("Placing coin\n");
 80009c6:	4808      	ldr	r0, [pc, #32]	@ (80009e8 <handleHardwareButton+0x58>)
 80009c8:	f005 fdd8 	bl	800657c <puts>
         // Example: If already in menu, maybe toggle something? (less useful here)
         // else if (currentAppState == APP_STATE_MENU) { ... }
    } else {
         printf("Hardware Button Bounce Ignored.\n");
    }
}
 80009cc:	e002      	b.n	80009d4 <handleHardwareButton+0x44>
         printf("Hardware Button Bounce Ignored.\n");
 80009ce:	4807      	ldr	r0, [pc, #28]	@ (80009ec <handleHardwareButton+0x5c>)
 80009d0:	f005 fdd4 	bl	800657c <puts>
}
 80009d4:	bf00      	nop
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	200000cc 	.word	0x200000cc
 80009e0:	08006da4 	.word	0x08006da4
 80009e4:	20000094 	.word	0x20000094
 80009e8:	08006dc8 	.word	0x08006dc8
 80009ec:	08006dd8 	.word	0x08006dd8

080009f0 <Button_Interrupt_Init>:
	} else {
		return BUTTON_NOT_PRESSED;
	}
}

void Button_Interrupt_Init(void) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef buttonConfig;

    buttonConfig.Pin = GPIO_PIN_0;
 80009f6:	2301      	movs	r3, #1
 80009f8:	607b      	str	r3, [r7, #4]
    buttonConfig.Mode = GPIO_MODE_INPUT;
 80009fa:	2300      	movs	r3, #0
 80009fc:	60bb      	str	r3, [r7, #8]
    buttonConfig.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
    buttonConfig.Speed = GPIO_SPEED_FREQ_LOW;
 8000a02:	2300      	movs	r3, #0
 8000a04:	613b      	str	r3, [r7, #16]
    //buttonConfig.Alternate = GPIO_MODE_OUTPUT_OD;

    //GPIO_ClockControl(BUTTON_GPIO_PORT, ENABLE);
    //GPIO_Init(BUTTON_GPIO_PORT, &buttonConfig);
    //GPIO_IRQConfig(EXTI0_IRQ_NUMBER, ENABLE); // Enable the interrupt
    HAL_GPIO_Init(GPIOA, &buttonConfig);
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4805      	ldr	r0, [pc, #20]	@ (8000a20 <Button_Interrupt_Init+0x30>)
 8000a0c:	f002 fa60 	bl	8002ed0 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a10:	2006      	movs	r0, #6
 8000a12:	f002 fa42 	bl	8002e9a <HAL_NVIC_EnableIRQ>
}
 8000a16:	bf00      	nop
 8000a18:	3718      	adds	r7, #24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40020000 	.word	0x40020000

08000a24 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08c      	sub	sp, #48	@ 0x30
 8000a28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61bb      	str	r3, [r7, #24]
 8000a2e:	4b5a      	ldr	r3, [pc, #360]	@ (8000b98 <LCD_GPIO_Init+0x174>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a32:	4a59      	ldr	r2, [pc, #356]	@ (8000b98 <LCD_GPIO_Init+0x174>)
 8000a34:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000a38:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a3a:	4b57      	ldr	r3, [pc, #348]	@ (8000b98 <LCD_GPIO_Init+0x174>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a3e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000a42:	61bb      	str	r3, [r7, #24]
 8000a44:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	617b      	str	r3, [r7, #20]
 8000a4a:	4b53      	ldr	r3, [pc, #332]	@ (8000b98 <LCD_GPIO_Init+0x174>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4e:	4a52      	ldr	r2, [pc, #328]	@ (8000b98 <LCD_GPIO_Init+0x174>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a56:	4b50      	ldr	r3, [pc, #320]	@ (8000b98 <LCD_GPIO_Init+0x174>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	617b      	str	r3, [r7, #20]
 8000a60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	613b      	str	r3, [r7, #16]
 8000a66:	4b4c      	ldr	r3, [pc, #304]	@ (8000b98 <LCD_GPIO_Init+0x174>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	4a4b      	ldr	r2, [pc, #300]	@ (8000b98 <LCD_GPIO_Init+0x174>)
 8000a6c:	f043 0302 	orr.w	r3, r3, #2
 8000a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a72:	4b49      	ldr	r3, [pc, #292]	@ (8000b98 <LCD_GPIO_Init+0x174>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	f003 0302 	and.w	r3, r3, #2
 8000a7a:	613b      	str	r3, [r7, #16]
 8000a7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	4b45      	ldr	r3, [pc, #276]	@ (8000b98 <LCD_GPIO_Init+0x174>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	4a44      	ldr	r2, [pc, #272]	@ (8000b98 <LCD_GPIO_Init+0x174>)
 8000a88:	f043 0304 	orr.w	r3, r3, #4
 8000a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a8e:	4b42      	ldr	r3, [pc, #264]	@ (8000b98 <LCD_GPIO_Init+0x174>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	f003 0304 	and.w	r3, r3, #4
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	4b3e      	ldr	r3, [pc, #248]	@ (8000b98 <LCD_GPIO_Init+0x174>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa2:	4a3d      	ldr	r2, [pc, #244]	@ (8000b98 <LCD_GPIO_Init+0x174>)
 8000aa4:	f043 0308 	orr.w	r3, r3, #8
 8000aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aaa:	4b3b      	ldr	r3, [pc, #236]	@ (8000b98 <LCD_GPIO_Init+0x174>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	f003 0308 	and.w	r3, r3, #8
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	4b37      	ldr	r3, [pc, #220]	@ (8000b98 <LCD_GPIO_Init+0x174>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abe:	4a36      	ldr	r2, [pc, #216]	@ (8000b98 <LCD_GPIO_Init+0x174>)
 8000ac0:	f043 0320 	orr.w	r3, r3, #32
 8000ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac6:	4b34      	ldr	r3, [pc, #208]	@ (8000b98 <LCD_GPIO_Init+0x174>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aca:	f003 0320 	and.w	r3, r3, #32
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	603b      	str	r3, [r7, #0]
 8000ad6:	4b30      	ldr	r3, [pc, #192]	@ (8000b98 <LCD_GPIO_Init+0x174>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ada:	4a2f      	ldr	r2, [pc, #188]	@ (8000b98 <LCD_GPIO_Init+0x174>)
 8000adc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae2:	4b2d      	ldr	r3, [pc, #180]	@ (8000b98 <LCD_GPIO_Init+0x174>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8000aee:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000af2:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000af4:	2302      	movs	r3, #2
 8000af6:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000afc:	2302      	movs	r3, #2
 8000afe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000b00:	230e      	movs	r3, #14
 8000b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000b04:	f107 031c 	add.w	r3, r7, #28
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4824      	ldr	r0, [pc, #144]	@ (8000b9c <LCD_GPIO_Init+0x178>)
 8000b0c:	f002 f9e0 	bl	8002ed0 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000b10:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000b14:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000b16:	f107 031c 	add.w	r3, r7, #28
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4820      	ldr	r0, [pc, #128]	@ (8000ba0 <LCD_GPIO_Init+0x17c>)
 8000b1e:	f002 f9d7 	bl	8002ed0 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000b22:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000b26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000b28:	f107 031c 	add.w	r3, r7, #28
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	481d      	ldr	r0, [pc, #116]	@ (8000ba4 <LCD_GPIO_Init+0x180>)
 8000b30:	f002 f9ce 	bl	8002ed0 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000b34:	2348      	movs	r3, #72	@ 0x48
 8000b36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000b38:	f107 031c 	add.w	r3, r7, #28
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	481a      	ldr	r0, [pc, #104]	@ (8000ba8 <LCD_GPIO_Init+0x184>)
 8000b40:	f002 f9c6 	bl	8002ed0 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000b44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000b4a:	f107 031c 	add.w	r3, r7, #28
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4816      	ldr	r0, [pc, #88]	@ (8000bac <LCD_GPIO_Init+0x188>)
 8000b52:	f002 f9bd 	bl	8002ed0 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000b56:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000b5a:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000b5c:	f107 031c 	add.w	r3, r7, #28
 8000b60:	4619      	mov	r1, r3
 8000b62:	4813      	ldr	r0, [pc, #76]	@ (8000bb0 <LCD_GPIO_Init+0x18c>)
 8000b64:	f002 f9b4 	bl	8002ed0 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000b6c:	2309      	movs	r3, #9
 8000b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000b70:	f107 031c 	add.w	r3, r7, #28
 8000b74:	4619      	mov	r1, r3
 8000b76:	480a      	ldr	r0, [pc, #40]	@ (8000ba0 <LCD_GPIO_Init+0x17c>)
 8000b78:	f002 f9aa 	bl	8002ed0 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000b7c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000b82:	f107 031c 	add.w	r3, r7, #28
 8000b86:	4619      	mov	r1, r3
 8000b88:	4809      	ldr	r0, [pc, #36]	@ (8000bb0 <LCD_GPIO_Init+0x18c>)
 8000b8a:	f002 f9a1 	bl	8002ed0 <HAL_GPIO_Init>
}
 8000b8e:	bf00      	nop
 8000b90:	3730      	adds	r7, #48	@ 0x30
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40020000 	.word	0x40020000
 8000ba0:	40020400 	.word	0x40020400
 8000ba4:	40020800 	.word	0x40020800
 8000ba8:	40020c00 	.word	0x40020c00
 8000bac:	40021400 	.word	0x40021400
 8000bb0:	40021800 	.word	0x40021800

08000bb4 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b090      	sub	sp, #64	@ 0x40
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8000bc2:	23f0      	movs	r3, #240	@ 0xf0
 8000bc4:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8000bca:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000bce:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000bd4:	23ff      	movs	r3, #255	@ 0xff
 8000bd6:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000bdc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000be0:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000be2:	2305      	movs	r3, #5
 8000be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d101      	bne.n	8000bf0 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000bec:	4b0f      	ldr	r3, [pc, #60]	@ (8000c2c <LTCD_Layer_Init+0x78>)
 8000bee:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000bf0:	23f0      	movs	r3, #240	@ 0xf0
 8000bf2:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000bf4:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000bf8:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000c06:	2300      	movs	r3, #0
 8000c08:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000c0c:	79fa      	ldrb	r2, [r7, #7]
 8000c0e:	f107 030c 	add.w	r3, r7, #12
 8000c12:	4619      	mov	r1, r3
 8000c14:	4806      	ldr	r0, [pc, #24]	@ (8000c30 <LTCD_Layer_Init+0x7c>)
 8000c16:	f003 fd9d 	bl	8004754 <HAL_LTDC_ConfigLayer>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000c20:	f000 f9f2 	bl	8001008 <LCD_Error_Handler>
	}
}
 8000c24:	bf00      	nop
 8000c26:	3740      	adds	r7, #64	@ 0x40
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	200001ac 	.word	0x200001ac
 8000c30:	200000d0 	.word	0x200000d0

08000c34 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8000c38:	4b2a      	ldr	r3, [pc, #168]	@ (8000ce4 <LTCD__Init+0xb0>)
 8000c3a:	4a2b      	ldr	r2, [pc, #172]	@ (8000ce8 <LTCD__Init+0xb4>)
 8000c3c:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000c3e:	4b29      	ldr	r3, [pc, #164]	@ (8000ce4 <LTCD__Init+0xb0>)
 8000c40:	2209      	movs	r2, #9
 8000c42:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000c44:	4b27      	ldr	r3, [pc, #156]	@ (8000ce4 <LTCD__Init+0xb0>)
 8000c46:	2201      	movs	r2, #1
 8000c48:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000c4a:	4b26      	ldr	r3, [pc, #152]	@ (8000ce4 <LTCD__Init+0xb0>)
 8000c4c:	221d      	movs	r2, #29
 8000c4e:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000c50:	4b24      	ldr	r3, [pc, #144]	@ (8000ce4 <LTCD__Init+0xb0>)
 8000c52:	2203      	movs	r2, #3
 8000c54:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8000c56:	4b23      	ldr	r3, [pc, #140]	@ (8000ce4 <LTCD__Init+0xb0>)
 8000c58:	f240 120d 	movw	r2, #269	@ 0x10d
 8000c5c:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000c5e:	4b21      	ldr	r3, [pc, #132]	@ (8000ce4 <LTCD__Init+0xb0>)
 8000c60:	f240 1243 	movw	r2, #323	@ 0x143
 8000c64:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000c66:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce4 <LTCD__Init+0xb0>)
 8000c68:	f240 1217 	movw	r2, #279	@ 0x117
 8000c6c:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce4 <LTCD__Init+0xb0>)
 8000c70:	f240 1247 	movw	r2, #327	@ 0x147
 8000c74:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000c76:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce4 <LTCD__Init+0xb0>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000c7e:	4b19      	ldr	r3, [pc, #100]	@ (8000ce4 <LTCD__Init+0xb0>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000c86:	4b17      	ldr	r3, [pc, #92]	@ (8000ce4 <LTCD__Init+0xb0>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000c8e:	4b17      	ldr	r3, [pc, #92]	@ (8000cec <LTCD__Init+0xb8>)
 8000c90:	2208      	movs	r2, #8
 8000c92:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000c94:	4b15      	ldr	r3, [pc, #84]	@ (8000cec <LTCD__Init+0xb8>)
 8000c96:	22c0      	movs	r2, #192	@ 0xc0
 8000c98:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000c9a:	4b14      	ldr	r3, [pc, #80]	@ (8000cec <LTCD__Init+0xb8>)
 8000c9c:	2204      	movs	r2, #4
 8000c9e:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000ca0:	4b12      	ldr	r3, [pc, #72]	@ (8000cec <LTCD__Init+0xb8>)
 8000ca2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000ca6:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000ca8:	4810      	ldr	r0, [pc, #64]	@ (8000cec <LTCD__Init+0xb8>)
 8000caa:	f004 fbad 	bl	8005408 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000cae:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce4 <LTCD__Init+0xb0>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce4 <LTCD__Init+0xb0>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000cba:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce4 <LTCD__Init+0xb0>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000cc0:	4b08      	ldr	r3, [pc, #32]	@ (8000ce4 <LTCD__Init+0xb0>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8000cc6:	f7ff fead 	bl	8000a24 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000cca:	4806      	ldr	r0, [pc, #24]	@ (8000ce4 <LTCD__Init+0xb0>)
 8000ccc:	f003 fc72 	bl	80045b4 <HAL_LTDC_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000cd6:	f000 f997 	bl	8001008 <LCD_Error_Handler>
	 }

	ili9341_Init();
 8000cda:	f000 f9e5 	bl	80010a8 <ili9341_Init>
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	200000d0 	.word	0x200000d0
 8000ce8:	40016800 	.word	0x40016800
 8000cec:	20000178 	.word	0x20000178

08000cf0 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	80fb      	strh	r3, [r7, #6]
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	80bb      	strh	r3, [r7, #4]
 8000cfe:	4613      	mov	r3, r2
 8000d00:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8000d02:	88ba      	ldrh	r2, [r7, #4]
 8000d04:	4613      	mov	r3, r2
 8000d06:	011b      	lsls	r3, r3, #4
 8000d08:	1a9b      	subs	r3, r3, r2
 8000d0a:	011b      	lsls	r3, r3, #4
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	88fb      	ldrh	r3, [r7, #6]
 8000d10:	4413      	add	r3, r2
 8000d12:	4905      	ldr	r1, [pc, #20]	@ (8000d28 <LCD_Draw_Pixel+0x38>)
 8000d14:	887a      	ldrh	r2, [r7, #2]
 8000d16:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	200001ac 	.word	0x200001ac

08000d2c <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 8000d2c:	b590      	push	{r4, r7, lr}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4604      	mov	r4, r0
 8000d34:	4608      	mov	r0, r1
 8000d36:	4611      	mov	r1, r2
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4623      	mov	r3, r4
 8000d3c:	80fb      	strh	r3, [r7, #6]
 8000d3e:	4603      	mov	r3, r0
 8000d40:	80bb      	strh	r3, [r7, #4]
 8000d42:	460b      	mov	r3, r1
 8000d44:	807b      	strh	r3, [r7, #2]
 8000d46:	4613      	mov	r3, r2
 8000d48:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 8000d4a:	887b      	ldrh	r3, [r7, #2]
 8000d4c:	425b      	negs	r3, r3
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	81fb      	strh	r3, [r7, #14]
 8000d52:	e034      	b.n	8000dbe <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 8000d54:	887b      	ldrh	r3, [r7, #2]
 8000d56:	425b      	negs	r3, r3
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	81bb      	strh	r3, [r7, #12]
 8000d5c:	e024      	b.n	8000da8 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 8000d5e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d62:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000d66:	fb03 f202 	mul.w	r2, r3, r2
 8000d6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d6e:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8000d72:	fb01 f303 	mul.w	r3, r1, r3
 8000d76:	441a      	add	r2, r3
 8000d78:	887b      	ldrh	r3, [r7, #2]
 8000d7a:	8879      	ldrh	r1, [r7, #2]
 8000d7c:	fb01 f303 	mul.w	r3, r1, r3
 8000d80:	429a      	cmp	r2, r3
 8000d82:	dc0b      	bgt.n	8000d9c <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8000d84:	89ba      	ldrh	r2, [r7, #12]
 8000d86:	88fb      	ldrh	r3, [r7, #6]
 8000d88:	4413      	add	r3, r2
 8000d8a:	b298      	uxth	r0, r3
 8000d8c:	89fa      	ldrh	r2, [r7, #14]
 8000d8e:	88bb      	ldrh	r3, [r7, #4]
 8000d90:	4413      	add	r3, r2
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	883a      	ldrh	r2, [r7, #0]
 8000d96:	4619      	mov	r1, r3
 8000d98:	f7ff ffaa 	bl	8000cf0 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8000d9c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000da0:	b29b      	uxth	r3, r3
 8000da2:	3301      	adds	r3, #1
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	81bb      	strh	r3, [r7, #12]
 8000da8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000dac:	887b      	ldrh	r3, [r7, #2]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	ddd5      	ble.n	8000d5e <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 8000db2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	3301      	adds	r3, #1
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	81fb      	strh	r3, [r7, #14]
 8000dbe:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000dc2:	887b      	ldrh	r3, [r7, #2]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	ddc5      	ble.n	8000d54 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 8000dc8:	bf00      	nop
 8000dca:	bf00      	nop
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd90      	pop	{r4, r7, pc}

08000dd2 <LCD_Fill_Rect>:

void LCD_Fill_Rect(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color) {
 8000dd2:	b590      	push	{r4, r7, lr}
 8000dd4:	b085      	sub	sp, #20
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	4604      	mov	r4, r0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	4611      	mov	r1, r2
 8000dde:	461a      	mov	r2, r3
 8000de0:	4623      	mov	r3, r4
 8000de2:	80fb      	strh	r3, [r7, #6]
 8000de4:	4603      	mov	r3, r0
 8000de6:	80bb      	strh	r3, [r7, #4]
 8000de8:	460b      	mov	r3, r1
 8000dea:	807b      	strh	r3, [r7, #2]
 8000dec:	4613      	mov	r3, r2
 8000dee:	803b      	strh	r3, [r7, #0]
    // Basic bounds check (optional but good practice)
    if (x >= LCD_PIXEL_WIDTH || y >= LCD_PIXEL_HEIGHT) return;
 8000df0:	88fb      	ldrh	r3, [r7, #6]
 8000df2:	2bef      	cmp	r3, #239	@ 0xef
 8000df4:	d832      	bhi.n	8000e5c <LCD_Fill_Rect+0x8a>
 8000df6:	88bb      	ldrh	r3, [r7, #4]
 8000df8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000dfc:	d22e      	bcs.n	8000e5c <LCD_Fill_Rect+0x8a>
    uint16_t endX = x + width;
 8000dfe:	88fa      	ldrh	r2, [r7, #6]
 8000e00:	887b      	ldrh	r3, [r7, #2]
 8000e02:	4413      	add	r3, r2
 8000e04:	81fb      	strh	r3, [r7, #14]
    uint16_t endY = y + height;
 8000e06:	88ba      	ldrh	r2, [r7, #4]
 8000e08:	883b      	ldrh	r3, [r7, #0]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	81bb      	strh	r3, [r7, #12]
    if (endX > LCD_PIXEL_WIDTH) endX = LCD_PIXEL_WIDTH;
 8000e0e:	89fb      	ldrh	r3, [r7, #14]
 8000e10:	2bf0      	cmp	r3, #240	@ 0xf0
 8000e12:	d901      	bls.n	8000e18 <LCD_Fill_Rect+0x46>
 8000e14:	23f0      	movs	r3, #240	@ 0xf0
 8000e16:	81fb      	strh	r3, [r7, #14]
    if (endY > LCD_PIXEL_HEIGHT) endY = LCD_PIXEL_HEIGHT;
 8000e18:	89bb      	ldrh	r3, [r7, #12]
 8000e1a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000e1e:	d902      	bls.n	8000e26 <LCD_Fill_Rect+0x54>
 8000e20:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000e24:	81bb      	strh	r3, [r7, #12]

    for (uint16_t row = y; row < endY; row++) {
 8000e26:	88bb      	ldrh	r3, [r7, #4]
 8000e28:	817b      	strh	r3, [r7, #10]
 8000e2a:	e012      	b.n	8000e52 <LCD_Fill_Rect+0x80>
        for (uint16_t col = x; col < endX; col++) {
 8000e2c:	88fb      	ldrh	r3, [r7, #6]
 8000e2e:	813b      	strh	r3, [r7, #8]
 8000e30:	e008      	b.n	8000e44 <LCD_Fill_Rect+0x72>
            LCD_Draw_Pixel(col, row, color);
 8000e32:	8c3a      	ldrh	r2, [r7, #32]
 8000e34:	8979      	ldrh	r1, [r7, #10]
 8000e36:	893b      	ldrh	r3, [r7, #8]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff ff59 	bl	8000cf0 <LCD_Draw_Pixel>
        for (uint16_t col = x; col < endX; col++) {
 8000e3e:	893b      	ldrh	r3, [r7, #8]
 8000e40:	3301      	adds	r3, #1
 8000e42:	813b      	strh	r3, [r7, #8]
 8000e44:	893a      	ldrh	r2, [r7, #8]
 8000e46:	89fb      	ldrh	r3, [r7, #14]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d3f2      	bcc.n	8000e32 <LCD_Fill_Rect+0x60>
    for (uint16_t row = y; row < endY; row++) {
 8000e4c:	897b      	ldrh	r3, [r7, #10]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	817b      	strh	r3, [r7, #10]
 8000e52:	897a      	ldrh	r2, [r7, #10]
 8000e54:	89bb      	ldrh	r3, [r7, #12]
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d3e8      	bcc.n	8000e2c <LCD_Fill_Rect+0x5a>
 8000e5a:	e000      	b.n	8000e5e <LCD_Fill_Rect+0x8c>
    if (x >= LCD_PIXEL_WIDTH || y >= LCD_PIXEL_HEIGHT) return;
 8000e5c:	bf00      	nop
        }
    }
}
 8000e5e:	3714      	adds	r7, #20
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd90      	pop	{r4, r7, pc}

08000e64 <LCD_Clear>:
	  LCD_Draw_Pixel(x, i+y, color);
  }
}

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	460a      	mov	r2, r1
 8000e6e:	71fb      	strb	r3, [r7, #7]
 8000e70:	4613      	mov	r3, r2
 8000e72:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d10e      	bne.n	8000e98 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	e007      	b.n	8000e90 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000e80:	4908      	ldr	r1, [pc, #32]	@ (8000ea4 <LCD_Clear+0x40>)
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	88ba      	ldrh	r2, [r7, #4]
 8000e86:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000e96:	d3f3      	bcc.n	8000e80 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000e98:	bf00      	nop
 8000e9a:	3714      	adds	r7, #20
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	200001ac 	.word	0x200001ac

08000ea8 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000eb2:	4a04      	ldr	r2, [pc, #16]	@ (8000ec4 <LCD_SetTextColor+0x1c>)
 8000eb4:	88fb      	ldrh	r3, [r7, #6]
 8000eb6:	8013      	strh	r3, [r2, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	20000000 	.word	0x20000000

08000ec8 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000ed0:	4a04      	ldr	r2, [pc, #16]	@ (8000ee4 <LCD_SetFont+0x1c>)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6013      	str	r3, [r2, #0]
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	200001a8 	.word	0x200001a8

08000ee8 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	603a      	str	r2, [r7, #0]
 8000ef2:	80fb      	strh	r3, [r7, #6]
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	2300      	movs	r3, #0
 8000efe:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000f00:	2300      	movs	r3, #0
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	e04c      	b.n	8000fa0 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000f06:	2300      	movs	r3, #0
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	e03f      	b.n	8000f8c <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	683a      	ldr	r2, [r7, #0]
 8000f12:	4413      	add	r3, r2
 8000f14:	881b      	ldrh	r3, [r3, #0]
 8000f16:	4619      	mov	r1, r3
 8000f18:	4b27      	ldr	r3, [pc, #156]	@ (8000fb8 <LCD_Draw_Char+0xd0>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	889b      	ldrh	r3, [r3, #4]
 8000f1e:	4a27      	ldr	r2, [pc, #156]	@ (8000fbc <LCD_Draw_Char+0xd4>)
 8000f20:	fba2 2303 	umull	r2, r3, r2, r3
 8000f24:	08db      	lsrs	r3, r3, #3
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	00db      	lsls	r3, r3, #3
 8000f2a:	2280      	movs	r2, #128	@ 0x80
 8000f2c:	409a      	lsls	r2, r3
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	fa42 f303 	asr.w	r3, r2, r3
 8000f34:	400b      	ands	r3, r1
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d104      	bne.n	8000f44 <LCD_Draw_Char+0x5c>
 8000f3a:	4b1f      	ldr	r3, [pc, #124]	@ (8000fb8 <LCD_Draw_Char+0xd0>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	889b      	ldrh	r3, [r3, #4]
 8000f40:	2b0c      	cmp	r3, #12
 8000f42:	d920      	bls.n	8000f86 <LCD_Draw_Char+0x9e>
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	683a      	ldr	r2, [r7, #0]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	881b      	ldrh	r3, [r3, #0]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	fa42 f303 	asr.w	r3, r2, r3
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d104      	bne.n	8000f68 <LCD_Draw_Char+0x80>
 8000f5e:	4b16      	ldr	r3, [pc, #88]	@ (8000fb8 <LCD_Draw_Char+0xd0>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	889b      	ldrh	r3, [r3, #4]
 8000f64:	2b0c      	cmp	r3, #12
 8000f66:	d80e      	bhi.n	8000f86 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	88fb      	ldrh	r3, [r7, #6]
 8000f6e:	4413      	add	r3, r2
 8000f70:	b298      	uxth	r0, r3
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	b29a      	uxth	r2, r3
 8000f76:	88bb      	ldrh	r3, [r7, #4]
 8000f78:	4413      	add	r3, r2
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	4a10      	ldr	r2, [pc, #64]	@ (8000fc0 <LCD_Draw_Char+0xd8>)
 8000f7e:	8812      	ldrh	r2, [r2, #0]
 8000f80:	4619      	mov	r1, r3
 8000f82:	f7ff feb5 	bl	8000cf0 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb8 <LCD_Draw_Char+0xd0>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	889b      	ldrh	r3, [r3, #4]
 8000f92:	461a      	mov	r2, r3
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d3b8      	bcc.n	8000f0c <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	4b05      	ldr	r3, [pc, #20]	@ (8000fb8 <LCD_Draw_Char+0xd0>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	88db      	ldrh	r3, [r3, #6]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d3ab      	bcc.n	8000f06 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000fae:	bf00      	nop
 8000fb0:	bf00      	nop
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	200001a8 	.word	0x200001a8
 8000fbc:	aaaaaaab 	.word	0xaaaaaaab
 8000fc0:	20000000 	.word	0x20000000

08000fc4 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	80fb      	strh	r3, [r7, #6]
 8000fce:	460b      	mov	r3, r1
 8000fd0:	80bb      	strh	r3, [r7, #4]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000fd6:	78fb      	ldrb	r3, [r7, #3]
 8000fd8:	3b20      	subs	r3, #32
 8000fda:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000fdc:	4b09      	ldr	r3, [pc, #36]	@ (8001004 <LCD_DisplayChar+0x40>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	78fb      	ldrb	r3, [r7, #3]
 8000fe4:	4907      	ldr	r1, [pc, #28]	@ (8001004 <LCD_DisplayChar+0x40>)
 8000fe6:	6809      	ldr	r1, [r1, #0]
 8000fe8:	88c9      	ldrh	r1, [r1, #6]
 8000fea:	fb01 f303 	mul.w	r3, r1, r3
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	441a      	add	r2, r3
 8000ff2:	88b9      	ldrh	r1, [r7, #4]
 8000ff4:	88fb      	ldrh	r3, [r7, #6]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff ff76 	bl	8000ee8 <LCD_Draw_Char>
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	200001a8 	.word	0x200001a8

08001008 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800100c:	b672      	cpsid	i
}
 800100e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001010:	bf00      	nop
 8001012:	e7fd      	b.n	8001010 <LCD_Error_Handler+0x8>

08001014 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8001018:	f001 f981 	bl	800231e <STMPE811_Init>
 800101c:	4603      	mov	r3, r0
 800101e:	2b02      	cmp	r3, #2
 8001020:	d001      	beq.n	8001026 <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8001022:	bf00      	nop
 8001024:	e7fd      	b.n	8001022 <InitializeLCDTouch+0xe>
  }
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}

0800102a <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b082      	sub	sp, #8
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f001 fa2b 	bl	800248e <STMPE811_ReadTouch>
 8001038:	4603      	mov	r3, r0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <getScheduledEvents>:

#include "Scheduler.h"

static uint32_t scheduledEvents = 0;

uint32_t getScheduledEvents() {
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
	return scheduledEvents;
 8001048:	4b03      	ldr	r3, [pc, #12]	@ (8001058 <getScheduledEvents+0x14>)
 800104a:	681b      	ldr	r3, [r3, #0]
}
 800104c:	4618      	mov	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	200259ac 	.word	0x200259ac

0800105c <addSchedulerEvent>:

void addSchedulerEvent(uint32_t event) {
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
	scheduledEvents |= event;
 8001064:	4b05      	ldr	r3, [pc, #20]	@ (800107c <addSchedulerEvent+0x20>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4313      	orrs	r3, r2
 800106c:	4a03      	ldr	r2, [pc, #12]	@ (800107c <addSchedulerEvent+0x20>)
 800106e:	6013      	str	r3, [r2, #0]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	200259ac 	.word	0x200259ac

08001080 <removeSchedulerEvent>:

void removeSchedulerEvent(uint32_t event) {
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	scheduledEvents &= ~event;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	43da      	mvns	r2, r3
 800108c:	4b05      	ldr	r3, [pc, #20]	@ (80010a4 <removeSchedulerEvent+0x24>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4013      	ands	r3, r2
 8001092:	4a04      	ldr	r2, [pc, #16]	@ (80010a4 <removeSchedulerEvent+0x24>)
 8001094:	6013      	str	r3, [r2, #0]
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	200259ac 	.word	0x200259ac

080010a8 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80010ac:	f000 f9fe 	bl	80014ac <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 80010b0:	20ca      	movs	r0, #202	@ 0xca
 80010b2:	f000 f943 	bl	800133c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 80010b6:	20c3      	movs	r0, #195	@ 0xc3
 80010b8:	f000 f94d 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 80010bc:	2008      	movs	r0, #8
 80010be:	f000 f94a 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 80010c2:	2050      	movs	r0, #80	@ 0x50
 80010c4:	f000 f947 	bl	8001356 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 80010c8:	20cf      	movs	r0, #207	@ 0xcf
 80010ca:	f000 f937 	bl	800133c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 80010ce:	2000      	movs	r0, #0
 80010d0:	f000 f941 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 80010d4:	20c1      	movs	r0, #193	@ 0xc1
 80010d6:	f000 f93e 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 80010da:	2030      	movs	r0, #48	@ 0x30
 80010dc:	f000 f93b 	bl	8001356 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 80010e0:	20ed      	movs	r0, #237	@ 0xed
 80010e2:	f000 f92b 	bl	800133c <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 80010e6:	2064      	movs	r0, #100	@ 0x64
 80010e8:	f000 f935 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 80010ec:	2003      	movs	r0, #3
 80010ee:	f000 f932 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 80010f2:	2012      	movs	r0, #18
 80010f4:	f000 f92f 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 80010f8:	2081      	movs	r0, #129	@ 0x81
 80010fa:	f000 f92c 	bl	8001356 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 80010fe:	20e8      	movs	r0, #232	@ 0xe8
 8001100:	f000 f91c 	bl	800133c <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001104:	2085      	movs	r0, #133	@ 0x85
 8001106:	f000 f926 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800110a:	2000      	movs	r0, #0
 800110c:	f000 f923 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001110:	2078      	movs	r0, #120	@ 0x78
 8001112:	f000 f920 	bl	8001356 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001116:	20cb      	movs	r0, #203	@ 0xcb
 8001118:	f000 f910 	bl	800133c <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 800111c:	2039      	movs	r0, #57	@ 0x39
 800111e:	f000 f91a 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8001122:	202c      	movs	r0, #44	@ 0x2c
 8001124:	f000 f917 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001128:	2000      	movs	r0, #0
 800112a:	f000 f914 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 800112e:	2034      	movs	r0, #52	@ 0x34
 8001130:	f000 f911 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001134:	2002      	movs	r0, #2
 8001136:	f000 f90e 	bl	8001356 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 800113a:	20f7      	movs	r0, #247	@ 0xf7
 800113c:	f000 f8fe 	bl	800133c <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8001140:	2020      	movs	r0, #32
 8001142:	f000 f908 	bl	8001356 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8001146:	20ea      	movs	r0, #234	@ 0xea
 8001148:	f000 f8f8 	bl	800133c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800114c:	2000      	movs	r0, #0
 800114e:	f000 f902 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001152:	2000      	movs	r0, #0
 8001154:	f000 f8ff 	bl	8001356 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8001158:	20b1      	movs	r0, #177	@ 0xb1
 800115a:	f000 f8ef 	bl	800133c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800115e:	2000      	movs	r0, #0
 8001160:	f000 f8f9 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001164:	201b      	movs	r0, #27
 8001166:	f000 f8f6 	bl	8001356 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 800116a:	20b6      	movs	r0, #182	@ 0xb6
 800116c:	f000 f8e6 	bl	800133c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001170:	200a      	movs	r0, #10
 8001172:	f000 f8f0 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8001176:	20a2      	movs	r0, #162	@ 0xa2
 8001178:	f000 f8ed 	bl	8001356 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 800117c:	20c0      	movs	r0, #192	@ 0xc0
 800117e:	f000 f8dd 	bl	800133c <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001182:	2010      	movs	r0, #16
 8001184:	f000 f8e7 	bl	8001356 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8001188:	20c1      	movs	r0, #193	@ 0xc1
 800118a:	f000 f8d7 	bl	800133c <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 800118e:	2010      	movs	r0, #16
 8001190:	f000 f8e1 	bl	8001356 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001194:	20c5      	movs	r0, #197	@ 0xc5
 8001196:	f000 f8d1 	bl	800133c <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 800119a:	2045      	movs	r0, #69	@ 0x45
 800119c:	f000 f8db 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 80011a0:	2015      	movs	r0, #21
 80011a2:	f000 f8d8 	bl	8001356 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 80011a6:	20c7      	movs	r0, #199	@ 0xc7
 80011a8:	f000 f8c8 	bl	800133c <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 80011ac:	2090      	movs	r0, #144	@ 0x90
 80011ae:	f000 f8d2 	bl	8001356 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 80011b2:	2036      	movs	r0, #54	@ 0x36
 80011b4:	f000 f8c2 	bl	800133c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 80011b8:	20c8      	movs	r0, #200	@ 0xc8
 80011ba:	f000 f8cc 	bl	8001356 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 80011be:	20f2      	movs	r0, #242	@ 0xf2
 80011c0:	f000 f8bc 	bl	800133c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80011c4:	2000      	movs	r0, #0
 80011c6:	f000 f8c6 	bl	8001356 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 80011ca:	20b0      	movs	r0, #176	@ 0xb0
 80011cc:	f000 f8b6 	bl	800133c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 80011d0:	20c2      	movs	r0, #194	@ 0xc2
 80011d2:	f000 f8c0 	bl	8001356 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80011d6:	20b6      	movs	r0, #182	@ 0xb6
 80011d8:	f000 f8b0 	bl	800133c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80011dc:	200a      	movs	r0, #10
 80011de:	f000 f8ba 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 80011e2:	20a7      	movs	r0, #167	@ 0xa7
 80011e4:	f000 f8b7 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 80011e8:	2027      	movs	r0, #39	@ 0x27
 80011ea:	f000 f8b4 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80011ee:	2004      	movs	r0, #4
 80011f0:	f000 f8b1 	bl	8001356 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 80011f4:	202a      	movs	r0, #42	@ 0x2a
 80011f6:	f000 f8a1 	bl	800133c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80011fa:	2000      	movs	r0, #0
 80011fc:	f000 f8ab 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001200:	2000      	movs	r0, #0
 8001202:	f000 f8a8 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001206:	2000      	movs	r0, #0
 8001208:	f000 f8a5 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 800120c:	20ef      	movs	r0, #239	@ 0xef
 800120e:	f000 f8a2 	bl	8001356 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8001212:	202b      	movs	r0, #43	@ 0x2b
 8001214:	f000 f892 	bl	800133c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001218:	2000      	movs	r0, #0
 800121a:	f000 f89c 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800121e:	2000      	movs	r0, #0
 8001220:	f000 f899 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8001224:	2001      	movs	r0, #1
 8001226:	f000 f896 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 800122a:	203f      	movs	r0, #63	@ 0x3f
 800122c:	f000 f893 	bl	8001356 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8001230:	20f6      	movs	r0, #246	@ 0xf6
 8001232:	f000 f883 	bl	800133c <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001236:	2001      	movs	r0, #1
 8001238:	f000 f88d 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800123c:	2000      	movs	r0, #0
 800123e:	f000 f88a 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8001242:	2006      	movs	r0, #6
 8001244:	f000 f887 	bl	8001356 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8001248:	202c      	movs	r0, #44	@ 0x2c
 800124a:	f000 f877 	bl	800133c <ili9341_Write_Reg>
  LCD_Delay(200);
 800124e:	20c8      	movs	r0, #200	@ 0xc8
 8001250:	f000 f9e8 	bl	8001624 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8001254:	2026      	movs	r0, #38	@ 0x26
 8001256:	f000 f871 	bl	800133c <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 800125a:	2001      	movs	r0, #1
 800125c:	f000 f87b 	bl	8001356 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8001260:	20e0      	movs	r0, #224	@ 0xe0
 8001262:	f000 f86b 	bl	800133c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8001266:	200f      	movs	r0, #15
 8001268:	f000 f875 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 800126c:	2029      	movs	r0, #41	@ 0x29
 800126e:	f000 f872 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8001272:	2024      	movs	r0, #36	@ 0x24
 8001274:	f000 f86f 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001278:	200c      	movs	r0, #12
 800127a:	f000 f86c 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 800127e:	200e      	movs	r0, #14
 8001280:	f000 f869 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001284:	2009      	movs	r0, #9
 8001286:	f000 f866 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 800128a:	204e      	movs	r0, #78	@ 0x4e
 800128c:	f000 f863 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001290:	2078      	movs	r0, #120	@ 0x78
 8001292:	f000 f860 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8001296:	203c      	movs	r0, #60	@ 0x3c
 8001298:	f000 f85d 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 800129c:	2009      	movs	r0, #9
 800129e:	f000 f85a 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 80012a2:	2013      	movs	r0, #19
 80012a4:	f000 f857 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80012a8:	2005      	movs	r0, #5
 80012aa:	f000 f854 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 80012ae:	2017      	movs	r0, #23
 80012b0:	f000 f851 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80012b4:	2011      	movs	r0, #17
 80012b6:	f000 f84e 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80012ba:	2000      	movs	r0, #0
 80012bc:	f000 f84b 	bl	8001356 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 80012c0:	20e1      	movs	r0, #225	@ 0xe1
 80012c2:	f000 f83b 	bl	800133c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80012c6:	2000      	movs	r0, #0
 80012c8:	f000 f845 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 80012cc:	2016      	movs	r0, #22
 80012ce:	f000 f842 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80012d2:	201b      	movs	r0, #27
 80012d4:	f000 f83f 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80012d8:	2004      	movs	r0, #4
 80012da:	f000 f83c 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80012de:	2011      	movs	r0, #17
 80012e0:	f000 f839 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 80012e4:	2007      	movs	r0, #7
 80012e6:	f000 f836 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 80012ea:	2031      	movs	r0, #49	@ 0x31
 80012ec:	f000 f833 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 80012f0:	2033      	movs	r0, #51	@ 0x33
 80012f2:	f000 f830 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 80012f6:	2042      	movs	r0, #66	@ 0x42
 80012f8:	f000 f82d 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80012fc:	2005      	movs	r0, #5
 80012fe:	f000 f82a 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001302:	200c      	movs	r0, #12
 8001304:	f000 f827 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8001308:	200a      	movs	r0, #10
 800130a:	f000 f824 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 800130e:	2028      	movs	r0, #40	@ 0x28
 8001310:	f000 f821 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8001314:	202f      	movs	r0, #47	@ 0x2f
 8001316:	f000 f81e 	bl	8001356 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 800131a:	200f      	movs	r0, #15
 800131c:	f000 f81b 	bl	8001356 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8001320:	2011      	movs	r0, #17
 8001322:	f000 f80b 	bl	800133c <ili9341_Write_Reg>
  LCD_Delay(200);
 8001326:	20c8      	movs	r0, #200	@ 0xc8
 8001328:	f000 f97c 	bl	8001624 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 800132c:	2029      	movs	r0, #41	@ 0x29
 800132e:	f000 f805 	bl	800133c <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8001332:	202c      	movs	r0, #44	@ 0x2c
 8001334:	f000 f802 	bl	800133c <ili9341_Write_Reg>
}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}

0800133c <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	4618      	mov	r0, r3
 800134a:	f000 f949 	bl	80015e0 <LCD_IO_WriteReg>
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	4603      	mov	r3, r0
 800135e:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001360:	88fb      	ldrh	r3, [r7, #6]
 8001362:	4618      	mov	r0, r3
 8001364:	f000 f91a 	bl	800159c <LCD_IO_WriteData>
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001374:	4819      	ldr	r0, [pc, #100]	@ (80013dc <SPI_Init+0x6c>)
 8001376:	f004 fc26 	bl	8005bc6 <HAL_SPI_GetState>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d12b      	bne.n	80013d8 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8001380:	4b16      	ldr	r3, [pc, #88]	@ (80013dc <SPI_Init+0x6c>)
 8001382:	4a17      	ldr	r2, [pc, #92]	@ (80013e0 <SPI_Init+0x70>)
 8001384:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001386:	4b15      	ldr	r3, [pc, #84]	@ (80013dc <SPI_Init+0x6c>)
 8001388:	2218      	movs	r2, #24
 800138a:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 800138c:	4b13      	ldr	r3, [pc, #76]	@ (80013dc <SPI_Init+0x6c>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001392:	4b12      	ldr	r3, [pc, #72]	@ (80013dc <SPI_Init+0x6c>)
 8001394:	2200      	movs	r2, #0
 8001396:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001398:	4b10      	ldr	r3, [pc, #64]	@ (80013dc <SPI_Init+0x6c>)
 800139a:	2200      	movs	r2, #0
 800139c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800139e:	4b0f      	ldr	r3, [pc, #60]	@ (80013dc <SPI_Init+0x6c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80013a4:	4b0d      	ldr	r3, [pc, #52]	@ (80013dc <SPI_Init+0x6c>)
 80013a6:	2207      	movs	r2, #7
 80013a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80013aa:	4b0c      	ldr	r3, [pc, #48]	@ (80013dc <SPI_Init+0x6c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80013b0:	4b0a      	ldr	r3, [pc, #40]	@ (80013dc <SPI_Init+0x6c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80013b6:	4b09      	ldr	r3, [pc, #36]	@ (80013dc <SPI_Init+0x6c>)
 80013b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013bc:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80013be:	4b07      	ldr	r3, [pc, #28]	@ (80013dc <SPI_Init+0x6c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80013c4:	4b05      	ldr	r3, [pc, #20]	@ (80013dc <SPI_Init+0x6c>)
 80013c6:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80013ca:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 80013cc:	4803      	ldr	r0, [pc, #12]	@ (80013dc <SPI_Init+0x6c>)
 80013ce:	f000 f833 	bl	8001438 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80013d2:	4802      	ldr	r0, [pc, #8]	@ (80013dc <SPI_Init+0x6c>)
 80013d4:	f004 fa02 	bl	80057dc <HAL_SPI_Init>
  }
}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	200259b0 	.word	0x200259b0
 80013e0:	40015000 	.word	0x40015000

080013e4 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80013ee:	2300      	movs	r3, #0
 80013f0:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 80013f2:	4b09      	ldr	r3, [pc, #36]	@ (8001418 <SPI_Write+0x34>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	1db9      	adds	r1, r7, #6
 80013f8:	2201      	movs	r2, #1
 80013fa:	4808      	ldr	r0, [pc, #32]	@ (800141c <SPI_Write+0x38>)
 80013fc:	f004 fa9f 	bl	800593e <HAL_SPI_Transmit>
 8001400:	4603      	mov	r3, r0
 8001402:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001404:	7bfb      	ldrb	r3, [r7, #15]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 800140a:	f000 f809 	bl	8001420 <SPI_Error>
  }
}
 800140e:	bf00      	nop
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	2000000c 	.word	0x2000000c
 800141c:	200259b0 	.word	0x200259b0

08001420 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001424:	4803      	ldr	r0, [pc, #12]	@ (8001434 <SPI_Error+0x14>)
 8001426:	f004 fa62 	bl	80058ee <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 800142a:	f7ff ffa1 	bl	8001370 <SPI_Init>
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	200259b0 	.word	0x200259b0

08001438 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08a      	sub	sp, #40	@ 0x28
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8001440:	2300      	movs	r3, #0
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	4b17      	ldr	r3, [pc, #92]	@ (80014a4 <SPI_MspInit+0x6c>)
 8001446:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001448:	4a16      	ldr	r2, [pc, #88]	@ (80014a4 <SPI_MspInit+0x6c>)
 800144a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800144e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001450:	4b14      	ldr	r3, [pc, #80]	@ (80014a4 <SPI_MspInit+0x6c>)
 8001452:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001454:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 800145c:	2300      	movs	r3, #0
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	4b10      	ldr	r3, [pc, #64]	@ (80014a4 <SPI_MspInit+0x6c>)
 8001462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001464:	4a0f      	ldr	r2, [pc, #60]	@ (80014a4 <SPI_MspInit+0x6c>)
 8001466:	f043 0320 	orr.w	r3, r3, #32
 800146a:	6313      	str	r3, [r2, #48]	@ 0x30
 800146c:	4b0d      	ldr	r3, [pc, #52]	@ (80014a4 <SPI_MspInit+0x6c>)
 800146e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001470:	f003 0320 	and.w	r3, r3, #32
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8001478:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800147c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800147e:	2302      	movs	r3, #2
 8001480:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001482:	2302      	movs	r3, #2
 8001484:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001486:	2301      	movs	r3, #1
 8001488:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 800148a:	2305      	movs	r3, #5
 800148c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 800148e:	f107 0314 	add.w	r3, r7, #20
 8001492:	4619      	mov	r1, r3
 8001494:	4804      	ldr	r0, [pc, #16]	@ (80014a8 <SPI_MspInit+0x70>)
 8001496:	f001 fd1b 	bl	8002ed0 <HAL_GPIO_Init>
}
 800149a:	bf00      	nop
 800149c:	3728      	adds	r7, #40	@ 0x28
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40021400 	.word	0x40021400

080014ac <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b088      	sub	sp, #32
 80014b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 80014b2:	4b36      	ldr	r3, [pc, #216]	@ (800158c <LCD_IO_Init+0xe0>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d164      	bne.n	8001584 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 80014ba:	4b34      	ldr	r3, [pc, #208]	@ (800158c <LCD_IO_Init+0xe0>)
 80014bc:	2201      	movs	r2, #1
 80014be:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80014c0:	2300      	movs	r3, #0
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	4b32      	ldr	r3, [pc, #200]	@ (8001590 <LCD_IO_Init+0xe4>)
 80014c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c8:	4a31      	ldr	r2, [pc, #196]	@ (8001590 <LCD_IO_Init+0xe4>)
 80014ca:	f043 0308 	orr.w	r3, r3, #8
 80014ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001590 <LCD_IO_Init+0xe4>)
 80014d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d4:	f003 0308 	and.w	r3, r3, #8
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80014dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014e0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80014e2:	2301      	movs	r3, #1
 80014e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80014ea:	2302      	movs	r3, #2
 80014ec:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80014ee:	f107 030c 	add.w	r3, r7, #12
 80014f2:	4619      	mov	r1, r3
 80014f4:	4827      	ldr	r0, [pc, #156]	@ (8001594 <LCD_IO_Init+0xe8>)
 80014f6:	f001 fceb 	bl	8002ed0 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	607b      	str	r3, [r7, #4]
 80014fe:	4b24      	ldr	r3, [pc, #144]	@ (8001590 <LCD_IO_Init+0xe4>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	4a23      	ldr	r2, [pc, #140]	@ (8001590 <LCD_IO_Init+0xe4>)
 8001504:	f043 0308 	orr.w	r3, r3, #8
 8001508:	6313      	str	r3, [r2, #48]	@ 0x30
 800150a:	4b21      	ldr	r3, [pc, #132]	@ (8001590 <LCD_IO_Init+0xe4>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	f003 0308 	and.w	r3, r3, #8
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001516:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800151a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800151c:	2301      	movs	r3, #1
 800151e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001524:	2302      	movs	r3, #2
 8001526:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001528:	f107 030c 	add.w	r3, r7, #12
 800152c:	4619      	mov	r1, r3
 800152e:	4819      	ldr	r0, [pc, #100]	@ (8001594 <LCD_IO_Init+0xe8>)
 8001530:	f001 fcce 	bl	8002ed0 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001534:	2300      	movs	r3, #0
 8001536:	603b      	str	r3, [r7, #0]
 8001538:	4b15      	ldr	r3, [pc, #84]	@ (8001590 <LCD_IO_Init+0xe4>)
 800153a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153c:	4a14      	ldr	r2, [pc, #80]	@ (8001590 <LCD_IO_Init+0xe4>)
 800153e:	f043 0304 	orr.w	r3, r3, #4
 8001542:	6313      	str	r3, [r2, #48]	@ 0x30
 8001544:	4b12      	ldr	r3, [pc, #72]	@ (8001590 <LCD_IO_Init+0xe4>)
 8001546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001548:	f003 0304 	and.w	r3, r3, #4
 800154c:	603b      	str	r3, [r7, #0]
 800154e:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001550:	2304      	movs	r3, #4
 8001552:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001554:	2301      	movs	r3, #1
 8001556:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800155c:	2302      	movs	r3, #2
 800155e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001560:	f107 030c 	add.w	r3, r7, #12
 8001564:	4619      	mov	r1, r3
 8001566:	480c      	ldr	r0, [pc, #48]	@ (8001598 <LCD_IO_Init+0xec>)
 8001568:	f001 fcb2 	bl	8002ed0 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 800156c:	2200      	movs	r2, #0
 800156e:	2104      	movs	r1, #4
 8001570:	4809      	ldr	r0, [pc, #36]	@ (8001598 <LCD_IO_Init+0xec>)
 8001572:	f001 ff65 	bl	8003440 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001576:	2201      	movs	r2, #1
 8001578:	2104      	movs	r1, #4
 800157a:	4807      	ldr	r0, [pc, #28]	@ (8001598 <LCD_IO_Init+0xec>)
 800157c:	f001 ff60 	bl	8003440 <HAL_GPIO_WritePin>

    SPI_Init();
 8001580:	f7ff fef6 	bl	8001370 <SPI_Init>
  }
}
 8001584:	bf00      	nop
 8001586:	3720      	adds	r7, #32
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20025a08 	.word	0x20025a08
 8001590:	40023800 	.word	0x40023800
 8001594:	40020c00 	.word	0x40020c00
 8001598:	40020800 	.word	0x40020800

0800159c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80015a6:	2201      	movs	r2, #1
 80015a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015ac:	480a      	ldr	r0, [pc, #40]	@ (80015d8 <LCD_IO_WriteData+0x3c>)
 80015ae:	f001 ff47 	bl	8003440 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 80015b2:	2200      	movs	r2, #0
 80015b4:	2104      	movs	r1, #4
 80015b6:	4809      	ldr	r0, [pc, #36]	@ (80015dc <LCD_IO_WriteData+0x40>)
 80015b8:	f001 ff42 	bl	8003440 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 80015bc:	88fb      	ldrh	r3, [r7, #6]
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff ff10 	bl	80013e4 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80015c4:	2201      	movs	r2, #1
 80015c6:	2104      	movs	r1, #4
 80015c8:	4804      	ldr	r0, [pc, #16]	@ (80015dc <LCD_IO_WriteData+0x40>)
 80015ca:	f001 ff39 	bl	8003440 <HAL_GPIO_WritePin>
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40020c00 	.word	0x40020c00
 80015dc:	40020800 	.word	0x40020800

080015e0 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80015ea:	2200      	movs	r2, #0
 80015ec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015f0:	480a      	ldr	r0, [pc, #40]	@ (800161c <LCD_IO_WriteReg+0x3c>)
 80015f2:	f001 ff25 	bl	8003440 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80015f6:	2200      	movs	r2, #0
 80015f8:	2104      	movs	r1, #4
 80015fa:	4809      	ldr	r0, [pc, #36]	@ (8001620 <LCD_IO_WriteReg+0x40>)
 80015fc:	f001 ff20 	bl	8003440 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	b29b      	uxth	r3, r3
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff feed 	bl	80013e4 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800160a:	2201      	movs	r2, #1
 800160c:	2104      	movs	r1, #4
 800160e:	4804      	ldr	r0, [pc, #16]	@ (8001620 <LCD_IO_WriteReg+0x40>)
 8001610:	f001 ff16 	bl	8003440 <HAL_GPIO_WritePin>
}
 8001614:	bf00      	nop
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40020c00 	.word	0x40020c00
 8001620:	40020800 	.word	0x40020800

08001624 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f001 fb19 	bl	8002c64 <HAL_Delay>
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800163e:	f001 fa9f 	bl	8002b80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001642:	f000 f835 	bl	80016b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001646:	f000 fa25 	bl	8001a94 <MX_GPIO_Init>
  MX_LTDC_Init();
 800164a:	f000 f8db 	bl	8001804 <MX_LTDC_Init>
  MX_RNG_Init();
 800164e:	f000 f98b 	bl	8001968 <MX_RNG_Init>
  MX_TIM2_Init();
 8001652:	f000 f9d3 	bl	80019fc <MX_TIM2_Init>
  MX_SPI5_Init();
 8001656:	f000 f99b 	bl	8001990 <MX_SPI5_Init>
  MX_I2C3_Init();
 800165a:	f000 f893 	bl	8001784 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit(); // Initializes the LCD functionality
 800165e:	f7fe ff5b 	bl	8000518 <ApplicationInit>


  while (1)
  {
    /* USER CODE END WHILE */
	Scheduler_Run(); // Run the scheduler checks
 8001662:	f000 f801 	bl	8001668 <Scheduler_Run>
 8001666:	e7fc      	b.n	8001662 <main+0x28>

08001668 <Scheduler_Run>:
  }
  /* USER CODE END 3 */
}

// --- Scheduler Execution ---
void Scheduler_Run(void) {
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
    // Wait for SysTick to signal a check interval
    //while(scheduler_ticks == 0) {
    //}
    //scheduler_ticks = 0; // Reset the flag

	uint32_t events = getScheduledEvents();
 800166e:	f7ff fce9 	bl	8001044 <getScheduledEvents>
 8001672:	6078      	str	r0, [r7, #4]

    if (events != NO_EVENT) { // Only run tasks if there's something to do
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d016      	beq.n	80016a8 <Scheduler_Run+0x40>
        if (events & TOUCH_POLLING_EVENT) {
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f003 0301 	and.w	r3, r3, #1
 8001680:	2b00      	cmp	r3, #0
 8001682:	d004      	beq.n	800168e <Scheduler_Run+0x26>
            handleTouchInput();
 8001684:	f7ff f904 	bl	8000890 <handleTouchInput>
            removeSchedulerEvent(TOUCH_POLLING_EVENT);
 8001688:	2001      	movs	r0, #1
 800168a:	f7ff fcf9 	bl	8001080 <removeSchedulerEvent>
        }

        if (events & HW_BUTTON_PRESS_EVENT) {
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d004      	beq.n	80016a2 <Scheduler_Run+0x3a>
            handleHardwareButton();
 8001698:	f7ff f97a 	bl	8000990 <handleHardwareButton>
            removeSchedulerEvent(HW_BUTTON_PRESS_EVENT);
 800169c:	2002      	movs	r0, #2
 800169e:	f7ff fcef 	bl	8001080 <removeSchedulerEvent>

        // Add handlers for other events (GAME_UPDATE_EVENT, GYRO_READ_EVENT, etc.)
        // if (events & GAME_UPDATE_EVENT) { ... }
        // if (events & GYRO_READ_EVENT) { ... }

        removeSchedulerEvent(APP_DELAY_FLAG_EVENT); // Clear if using app delay
 80016a2:	2020      	movs	r0, #32
 80016a4:	f7ff fcec 	bl	8001080 <removeSchedulerEvent>

    }
}
 80016a8:	bf00      	nop
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b094      	sub	sp, #80	@ 0x50
 80016b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016b6:	f107 0320 	add.w	r3, r7, #32
 80016ba:	2230      	movs	r2, #48	@ 0x30
 80016bc:	2100      	movs	r1, #0
 80016be:	4618      	mov	r0, r3
 80016c0:	f004 ff64 	bl	800658c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016c4:	f107 030c 	add.w	r3, r7, #12
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d4:	2300      	movs	r3, #0
 80016d6:	60bb      	str	r3, [r7, #8]
 80016d8:	4b28      	ldr	r3, [pc, #160]	@ (800177c <SystemClock_Config+0xcc>)
 80016da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016dc:	4a27      	ldr	r2, [pc, #156]	@ (800177c <SystemClock_Config+0xcc>)
 80016de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80016e4:	4b25      	ldr	r3, [pc, #148]	@ (800177c <SystemClock_Config+0xcc>)
 80016e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016f0:	2300      	movs	r3, #0
 80016f2:	607b      	str	r3, [r7, #4]
 80016f4:	4b22      	ldr	r3, [pc, #136]	@ (8001780 <SystemClock_Config+0xd0>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a21      	ldr	r2, [pc, #132]	@ (8001780 <SystemClock_Config+0xd0>)
 80016fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016fe:	6013      	str	r3, [r2, #0]
 8001700:	4b1f      	ldr	r3, [pc, #124]	@ (8001780 <SystemClock_Config+0xd0>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001708:	607b      	str	r3, [r7, #4]
 800170a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800170c:	2301      	movs	r3, #1
 800170e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001710:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001714:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001716:	2302      	movs	r3, #2
 8001718:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800171a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800171e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001720:	2308      	movs	r3, #8
 8001722:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001724:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001728:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800172a:	2302      	movs	r3, #2
 800172c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800172e:	2307      	movs	r3, #7
 8001730:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001732:	f107 0320 	add.w	r3, r7, #32
 8001736:	4618      	mov	r0, r3
 8001738:	f003 f9e2 	bl	8004b00 <HAL_RCC_OscConfig>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001742:	f000 fb55 	bl	8001df0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001746:	230f      	movs	r3, #15
 8001748:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800174a:	2302      	movs	r3, #2
 800174c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001752:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001756:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001758:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800175c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800175e:	f107 030c 	add.w	r3, r7, #12
 8001762:	2105      	movs	r1, #5
 8001764:	4618      	mov	r0, r3
 8001766:	f003 fc43 	bl	8004ff0 <HAL_RCC_ClockConfig>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001770:	f000 fb3e 	bl	8001df0 <Error_Handler>
  }
}
 8001774:	bf00      	nop
 8001776:	3750      	adds	r7, #80	@ 0x50
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40023800 	.word	0x40023800
 8001780:	40007000 	.word	0x40007000

08001784 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001788:	4b1b      	ldr	r3, [pc, #108]	@ (80017f8 <MX_I2C3_Init+0x74>)
 800178a:	4a1c      	ldr	r2, [pc, #112]	@ (80017fc <MX_I2C3_Init+0x78>)
 800178c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800178e:	4b1a      	ldr	r3, [pc, #104]	@ (80017f8 <MX_I2C3_Init+0x74>)
 8001790:	4a1b      	ldr	r2, [pc, #108]	@ (8001800 <MX_I2C3_Init+0x7c>)
 8001792:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001794:	4b18      	ldr	r3, [pc, #96]	@ (80017f8 <MX_I2C3_Init+0x74>)
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800179a:	4b17      	ldr	r3, [pc, #92]	@ (80017f8 <MX_I2C3_Init+0x74>)
 800179c:	2200      	movs	r2, #0
 800179e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017a0:	4b15      	ldr	r3, [pc, #84]	@ (80017f8 <MX_I2C3_Init+0x74>)
 80017a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80017a6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017a8:	4b13      	ldr	r3, [pc, #76]	@ (80017f8 <MX_I2C3_Init+0x74>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80017ae:	4b12      	ldr	r3, [pc, #72]	@ (80017f8 <MX_I2C3_Init+0x74>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017b4:	4b10      	ldr	r3, [pc, #64]	@ (80017f8 <MX_I2C3_Init+0x74>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017ba:	4b0f      	ldr	r3, [pc, #60]	@ (80017f8 <MX_I2C3_Init+0x74>)
 80017bc:	2200      	movs	r2, #0
 80017be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80017c0:	480d      	ldr	r0, [pc, #52]	@ (80017f8 <MX_I2C3_Init+0x74>)
 80017c2:	f001 fe57 	bl	8003474 <HAL_I2C_Init>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80017cc:	f000 fb10 	bl	8001df0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017d0:	2100      	movs	r1, #0
 80017d2:	4809      	ldr	r0, [pc, #36]	@ (80017f8 <MX_I2C3_Init+0x74>)
 80017d4:	f002 fe72 	bl	80044bc <HAL_I2CEx_ConfigAnalogFilter>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80017de:	f000 fb07 	bl	8001df0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80017e2:	2100      	movs	r1, #0
 80017e4:	4804      	ldr	r0, [pc, #16]	@ (80017f8 <MX_I2C3_Init+0x74>)
 80017e6:	f002 fea5 	bl	8004534 <HAL_I2CEx_ConfigDigitalFilter>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80017f0:	f000 fafe 	bl	8001df0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	20025a0c 	.word	0x20025a0c
 80017fc:	40005c00 	.word	0x40005c00
 8001800:	000186a0 	.word	0x000186a0

08001804 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b09a      	sub	sp, #104	@ 0x68
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800180a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800180e:	2234      	movs	r2, #52	@ 0x34
 8001810:	2100      	movs	r1, #0
 8001812:	4618      	mov	r0, r3
 8001814:	f004 feba 	bl	800658c <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001818:	463b      	mov	r3, r7
 800181a:	2234      	movs	r2, #52	@ 0x34
 800181c:	2100      	movs	r1, #0
 800181e:	4618      	mov	r0, r3
 8001820:	f004 feb4 	bl	800658c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001824:	4b4e      	ldr	r3, [pc, #312]	@ (8001960 <MX_LTDC_Init+0x15c>)
 8001826:	4a4f      	ldr	r2, [pc, #316]	@ (8001964 <MX_LTDC_Init+0x160>)
 8001828:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800182a:	4b4d      	ldr	r3, [pc, #308]	@ (8001960 <MX_LTDC_Init+0x15c>)
 800182c:	2200      	movs	r2, #0
 800182e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001830:	4b4b      	ldr	r3, [pc, #300]	@ (8001960 <MX_LTDC_Init+0x15c>)
 8001832:	2200      	movs	r2, #0
 8001834:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001836:	4b4a      	ldr	r3, [pc, #296]	@ (8001960 <MX_LTDC_Init+0x15c>)
 8001838:	2200      	movs	r2, #0
 800183a:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800183c:	4b48      	ldr	r3, [pc, #288]	@ (8001960 <MX_LTDC_Init+0x15c>)
 800183e:	2200      	movs	r2, #0
 8001840:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8001842:	4b47      	ldr	r3, [pc, #284]	@ (8001960 <MX_LTDC_Init+0x15c>)
 8001844:	2207      	movs	r2, #7
 8001846:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001848:	4b45      	ldr	r3, [pc, #276]	@ (8001960 <MX_LTDC_Init+0x15c>)
 800184a:	2203      	movs	r2, #3
 800184c:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 800184e:	4b44      	ldr	r3, [pc, #272]	@ (8001960 <MX_LTDC_Init+0x15c>)
 8001850:	220e      	movs	r2, #14
 8001852:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001854:	4b42      	ldr	r3, [pc, #264]	@ (8001960 <MX_LTDC_Init+0x15c>)
 8001856:	2205      	movs	r2, #5
 8001858:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 800185a:	4b41      	ldr	r3, [pc, #260]	@ (8001960 <MX_LTDC_Init+0x15c>)
 800185c:	f240 228e 	movw	r2, #654	@ 0x28e
 8001860:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8001862:	4b3f      	ldr	r3, [pc, #252]	@ (8001960 <MX_LTDC_Init+0x15c>)
 8001864:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8001868:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 800186a:	4b3d      	ldr	r3, [pc, #244]	@ (8001960 <MX_LTDC_Init+0x15c>)
 800186c:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001870:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 8001872:	4b3b      	ldr	r3, [pc, #236]	@ (8001960 <MX_LTDC_Init+0x15c>)
 8001874:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8001878:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800187a:	4b39      	ldr	r3, [pc, #228]	@ (8001960 <MX_LTDC_Init+0x15c>)
 800187c:	2200      	movs	r2, #0
 800187e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001882:	4b37      	ldr	r3, [pc, #220]	@ (8001960 <MX_LTDC_Init+0x15c>)
 8001884:	2200      	movs	r2, #0
 8001886:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 800188a:	4b35      	ldr	r3, [pc, #212]	@ (8001960 <MX_LTDC_Init+0x15c>)
 800188c:	2200      	movs	r2, #0
 800188e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001892:	4833      	ldr	r0, [pc, #204]	@ (8001960 <MX_LTDC_Init+0x15c>)
 8001894:	f002 fe8e 	bl	80045b4 <HAL_LTDC_Init>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800189e:	f000 faa7 	bl	8001df0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80018b2:	2300      	movs	r3, #0
 80018b4:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80018be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018c2:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80018c4:	2305      	movs	r3, #5
 80018c6:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80018d4:	2300      	movs	r3, #0
 80018d6:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 80018da:	2300      	movs	r3, #0
 80018dc:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80018e6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80018ea:	2200      	movs	r2, #0
 80018ec:	4619      	mov	r1, r3
 80018ee:	481c      	ldr	r0, [pc, #112]	@ (8001960 <MX_LTDC_Init+0x15c>)
 80018f0:	f002 ff30 	bl	8004754 <HAL_LTDC_ConfigLayer>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80018fa:	f000 fa79 	bl	8001df0 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80018fe:	2300      	movs	r3, #0
 8001900:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001902:	2300      	movs	r3, #0
 8001904:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001906:	2300      	movs	r3, #0
 8001908:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800190e:	2300      	movs	r3, #0
 8001910:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800191a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800191e:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001920:	2305      	movs	r3, #5
 8001922:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001924:	2300      	movs	r3, #0
 8001926:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8001928:	2300      	movs	r3, #0
 800192a:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001942:	463b      	mov	r3, r7
 8001944:	2201      	movs	r2, #1
 8001946:	4619      	mov	r1, r3
 8001948:	4805      	ldr	r0, [pc, #20]	@ (8001960 <MX_LTDC_Init+0x15c>)
 800194a:	f002 ff03 	bl	8004754 <HAL_LTDC_ConfigLayer>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8001954:	f000 fa4c 	bl	8001df0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001958:	bf00      	nop
 800195a:	3768      	adds	r7, #104	@ 0x68
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20025a60 	.word	0x20025a60
 8001964:	40016800 	.word	0x40016800

08001968 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800196c:	4b06      	ldr	r3, [pc, #24]	@ (8001988 <MX_RNG_Init+0x20>)
 800196e:	4a07      	ldr	r2, [pc, #28]	@ (800198c <MX_RNG_Init+0x24>)
 8001970:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001972:	4805      	ldr	r0, [pc, #20]	@ (8001988 <MX_RNG_Init+0x20>)
 8001974:	f003 ff08 	bl	8005788 <HAL_RNG_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800197e:	f000 fa37 	bl	8001df0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20025b08 	.word	0x20025b08
 800198c:	50060800 	.word	0x50060800

08001990 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001994:	4b17      	ldr	r3, [pc, #92]	@ (80019f4 <MX_SPI5_Init+0x64>)
 8001996:	4a18      	ldr	r2, [pc, #96]	@ (80019f8 <MX_SPI5_Init+0x68>)
 8001998:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800199a:	4b16      	ldr	r3, [pc, #88]	@ (80019f4 <MX_SPI5_Init+0x64>)
 800199c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80019a0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80019a2:	4b14      	ldr	r3, [pc, #80]	@ (80019f4 <MX_SPI5_Init+0x64>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80019a8:	4b12      	ldr	r3, [pc, #72]	@ (80019f4 <MX_SPI5_Init+0x64>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019ae:	4b11      	ldr	r3, [pc, #68]	@ (80019f4 <MX_SPI5_Init+0x64>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019b4:	4b0f      	ldr	r3, [pc, #60]	@ (80019f4 <MX_SPI5_Init+0x64>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80019ba:	4b0e      	ldr	r3, [pc, #56]	@ (80019f4 <MX_SPI5_Init+0x64>)
 80019bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019c0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019c2:	4b0c      	ldr	r3, [pc, #48]	@ (80019f4 <MX_SPI5_Init+0x64>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019c8:	4b0a      	ldr	r3, [pc, #40]	@ (80019f4 <MX_SPI5_Init+0x64>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80019ce:	4b09      	ldr	r3, [pc, #36]	@ (80019f4 <MX_SPI5_Init+0x64>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019d4:	4b07      	ldr	r3, [pc, #28]	@ (80019f4 <MX_SPI5_Init+0x64>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 80019da:	4b06      	ldr	r3, [pc, #24]	@ (80019f4 <MX_SPI5_Init+0x64>)
 80019dc:	220a      	movs	r2, #10
 80019de:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80019e0:	4804      	ldr	r0, [pc, #16]	@ (80019f4 <MX_SPI5_Init+0x64>)
 80019e2:	f003 fefb 	bl	80057dc <HAL_SPI_Init>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80019ec:	f000 fa00 	bl	8001df0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20025b18 	.word	0x20025b18
 80019f8:	40015000 	.word	0x40015000

080019fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a02:	f107 0308 	add.w	r3, r7, #8
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]
 8001a0c:	609a      	str	r2, [r3, #8]
 8001a0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a10:	463b      	mov	r3, r7
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a18:	4b1d      	ldr	r3, [pc, #116]	@ (8001a90 <MX_TIM2_Init+0x94>)
 8001a1a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a1e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a20:	4b1b      	ldr	r3, [pc, #108]	@ (8001a90 <MX_TIM2_Init+0x94>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a26:	4b1a      	ldr	r3, [pc, #104]	@ (8001a90 <MX_TIM2_Init+0x94>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001a2c:	4b18      	ldr	r3, [pc, #96]	@ (8001a90 <MX_TIM2_Init+0x94>)
 8001a2e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a32:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a34:	4b16      	ldr	r3, [pc, #88]	@ (8001a90 <MX_TIM2_Init+0x94>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a3a:	4b15      	ldr	r3, [pc, #84]	@ (8001a90 <MX_TIM2_Init+0x94>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a40:	4813      	ldr	r0, [pc, #76]	@ (8001a90 <MX_TIM2_Init+0x94>)
 8001a42:	f004 f9ab 	bl	8005d9c <HAL_TIM_Base_Init>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001a4c:	f000 f9d0 	bl	8001df0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a56:	f107 0308 	add.w	r3, r7, #8
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	480c      	ldr	r0, [pc, #48]	@ (8001a90 <MX_TIM2_Init+0x94>)
 8001a5e:	f004 f9ec 	bl	8005e3a <HAL_TIM_ConfigClockSource>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001a68:	f000 f9c2 	bl	8001df0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a70:	2300      	movs	r3, #0
 8001a72:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a74:	463b      	mov	r3, r7
 8001a76:	4619      	mov	r1, r3
 8001a78:	4805      	ldr	r0, [pc, #20]	@ (8001a90 <MX_TIM2_Init+0x94>)
 8001a7a:	f004 fbeb 	bl	8006254 <HAL_TIMEx_MasterConfigSynchronization>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001a84:	f000 f9b4 	bl	8001df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a88:	bf00      	nop
 8001a8a:	3718      	adds	r7, #24
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	20025b70 	.word	0x20025b70

08001a94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b08e      	sub	sp, #56	@ 0x38
 8001a98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	605a      	str	r2, [r3, #4]
 8001aa4:	609a      	str	r2, [r3, #8]
 8001aa6:	60da      	str	r2, [r3, #12]
 8001aa8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	623b      	str	r3, [r7, #32]
 8001aae:	4bb2      	ldr	r3, [pc, #712]	@ (8001d78 <MX_GPIO_Init+0x2e4>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab2:	4ab1      	ldr	r2, [pc, #708]	@ (8001d78 <MX_GPIO_Init+0x2e4>)
 8001ab4:	f043 0304 	orr.w	r3, r3, #4
 8001ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aba:	4baf      	ldr	r3, [pc, #700]	@ (8001d78 <MX_GPIO_Init+0x2e4>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abe:	f003 0304 	and.w	r3, r3, #4
 8001ac2:	623b      	str	r3, [r7, #32]
 8001ac4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61fb      	str	r3, [r7, #28]
 8001aca:	4bab      	ldr	r3, [pc, #684]	@ (8001d78 <MX_GPIO_Init+0x2e4>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ace:	4aaa      	ldr	r2, [pc, #680]	@ (8001d78 <MX_GPIO_Init+0x2e4>)
 8001ad0:	f043 0320 	orr.w	r3, r3, #32
 8001ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ad6:	4ba8      	ldr	r3, [pc, #672]	@ (8001d78 <MX_GPIO_Init+0x2e4>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ada:	f003 0320 	and.w	r3, r3, #32
 8001ade:	61fb      	str	r3, [r7, #28]
 8001ae0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61bb      	str	r3, [r7, #24]
 8001ae6:	4ba4      	ldr	r3, [pc, #656]	@ (8001d78 <MX_GPIO_Init+0x2e4>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aea:	4aa3      	ldr	r2, [pc, #652]	@ (8001d78 <MX_GPIO_Init+0x2e4>)
 8001aec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001af2:	4ba1      	ldr	r3, [pc, #644]	@ (8001d78 <MX_GPIO_Init+0x2e4>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001afa:	61bb      	str	r3, [r7, #24]
 8001afc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	4b9d      	ldr	r3, [pc, #628]	@ (8001d78 <MX_GPIO_Init+0x2e4>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b06:	4a9c      	ldr	r2, [pc, #624]	@ (8001d78 <MX_GPIO_Init+0x2e4>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b0e:	4b9a      	ldr	r3, [pc, #616]	@ (8001d78 <MX_GPIO_Init+0x2e4>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	617b      	str	r3, [r7, #20]
 8001b18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	613b      	str	r3, [r7, #16]
 8001b1e:	4b96      	ldr	r3, [pc, #600]	@ (8001d78 <MX_GPIO_Init+0x2e4>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b22:	4a95      	ldr	r2, [pc, #596]	@ (8001d78 <MX_GPIO_Init+0x2e4>)
 8001b24:	f043 0302 	orr.w	r3, r3, #2
 8001b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b2a:	4b93      	ldr	r3, [pc, #588]	@ (8001d78 <MX_GPIO_Init+0x2e4>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	613b      	str	r3, [r7, #16]
 8001b34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	4b8f      	ldr	r3, [pc, #572]	@ (8001d78 <MX_GPIO_Init+0x2e4>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3e:	4a8e      	ldr	r2, [pc, #568]	@ (8001d78 <MX_GPIO_Init+0x2e4>)
 8001b40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b46:	4b8c      	ldr	r3, [pc, #560]	@ (8001d78 <MX_GPIO_Init+0x2e4>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	4b88      	ldr	r3, [pc, #544]	@ (8001d78 <MX_GPIO_Init+0x2e4>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5a:	4a87      	ldr	r2, [pc, #540]	@ (8001d78 <MX_GPIO_Init+0x2e4>)
 8001b5c:	f043 0310 	orr.w	r3, r3, #16
 8001b60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b62:	4b85      	ldr	r3, [pc, #532]	@ (8001d78 <MX_GPIO_Init+0x2e4>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b66:	f003 0310 	and.w	r3, r3, #16
 8001b6a:	60bb      	str	r3, [r7, #8]
 8001b6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	607b      	str	r3, [r7, #4]
 8001b72:	4b81      	ldr	r3, [pc, #516]	@ (8001d78 <MX_GPIO_Init+0x2e4>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b76:	4a80      	ldr	r2, [pc, #512]	@ (8001d78 <MX_GPIO_Init+0x2e4>)
 8001b78:	f043 0308 	orr.w	r3, r3, #8
 8001b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b7e:	4b7e      	ldr	r3, [pc, #504]	@ (8001d78 <MX_GPIO_Init+0x2e4>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b82:	f003 0308 	and.w	r3, r3, #8
 8001b86:	607b      	str	r3, [r7, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2116      	movs	r1, #22
 8001b8e:	487b      	ldr	r0, [pc, #492]	@ (8001d7c <MX_GPIO_Init+0x2e8>)
 8001b90:	f001 fc56 	bl	8003440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001b94:	2200      	movs	r2, #0
 8001b96:	2180      	movs	r1, #128	@ 0x80
 8001b98:	4879      	ldr	r0, [pc, #484]	@ (8001d80 <MX_GPIO_Init+0x2ec>)
 8001b9a:	f001 fc51 	bl	8003440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8001ba4:	4877      	ldr	r0, [pc, #476]	@ (8001d84 <MX_GPIO_Init+0x2f0>)
 8001ba6:	f001 fc4b 	bl	8003440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001baa:	2200      	movs	r2, #0
 8001bac:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001bb0:	4875      	ldr	r0, [pc, #468]	@ (8001d88 <MX_GPIO_Init+0x2f4>)
 8001bb2:	f001 fc45 	bl	8003440 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001bb6:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001bba:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001bc8:	230c      	movs	r3, #12
 8001bca:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bcc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	486e      	ldr	r0, [pc, #440]	@ (8001d8c <MX_GPIO_Init+0x2f8>)
 8001bd4:	f001 f97c 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be4:	2303      	movs	r3, #3
 8001be6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001be8:	230c      	movs	r3, #12
 8001bea:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001bec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4862      	ldr	r0, [pc, #392]	@ (8001d7c <MX_GPIO_Init+0x2e8>)
 8001bf4:	f001 f96c 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001bf8:	2316      	movs	r3, #22
 8001bfa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c04:	2300      	movs	r3, #0
 8001c06:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	485b      	ldr	r0, [pc, #364]	@ (8001d7c <MX_GPIO_Init+0x2e8>)
 8001c10:	f001 f95e 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001c14:	f248 0307 	movw	r3, #32775	@ 0x8007
 8001c18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001c1a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4855      	ldr	r0, [pc, #340]	@ (8001d80 <MX_GPIO_Init+0x2ec>)
 8001c2c:	f001 f950 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001c30:	2380      	movs	r3, #128	@ 0x80
 8001c32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c34:	2301      	movs	r3, #1
 8001c36:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001c40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c44:	4619      	mov	r1, r3
 8001c46:	484e      	ldr	r0, [pc, #312]	@ (8001d80 <MX_GPIO_Init+0x2ec>)
 8001c48:	f001 f942 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001c4c:	2320      	movs	r3, #32
 8001c4e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001c50:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001c54:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001c5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4846      	ldr	r0, [pc, #280]	@ (8001d7c <MX_GPIO_Init+0x2e8>)
 8001c62:	f001 f935 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001c66:	2304      	movs	r3, #4
 8001c68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001c72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c76:	4619      	mov	r1, r3
 8001c78:	4845      	ldr	r0, [pc, #276]	@ (8001d90 <MX_GPIO_Init+0x2fc>)
 8001c7a:	f001 f929 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001c7e:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001c82:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c84:	2302      	movs	r3, #2
 8001c86:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c90:	230c      	movs	r3, #12
 8001c92:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c98:	4619      	mov	r1, r3
 8001c9a:	483b      	ldr	r0, [pc, #236]	@ (8001d88 <MX_GPIO_Init+0x2f4>)
 8001c9c:	f001 f918 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001ca0:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001ca4:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001cb2:	230c      	movs	r3, #12
 8001cb4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4835      	ldr	r0, [pc, #212]	@ (8001d94 <MX_GPIO_Init+0x300>)
 8001cbe:	f001 f907 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001cc2:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8001cc6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001cd4:	230c      	movs	r3, #12
 8001cd6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cdc:	4619      	mov	r1, r3
 8001cde:	482c      	ldr	r0, [pc, #176]	@ (8001d90 <MX_GPIO_Init+0x2fc>)
 8001ce0:	f001 f8f6 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001ce4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ce8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cea:	2300      	movs	r3, #0
 8001cec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001cf2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4825      	ldr	r0, [pc, #148]	@ (8001d90 <MX_GPIO_Init+0x2fc>)
 8001cfa:	f001 f8e9 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001cfe:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001d02:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d04:	2302      	movs	r3, #2
 8001d06:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d10:	230c      	movs	r3, #12
 8001d12:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d18:	4619      	mov	r1, r3
 8001d1a:	481a      	ldr	r0, [pc, #104]	@ (8001d84 <MX_GPIO_Init+0x2f0>)
 8001d1c:	f001 f8d8 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001d20:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001d24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d26:	2300      	movs	r3, #0
 8001d28:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001d2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d32:	4619      	mov	r1, r3
 8001d34:	4813      	ldr	r0, [pc, #76]	@ (8001d84 <MX_GPIO_Init+0x2f0>)
 8001d36:	f001 f8cb 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001d3a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001d3e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d40:	2301      	movs	r3, #1
 8001d42:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d50:	4619      	mov	r1, r3
 8001d52:	480c      	ldr	r0, [pc, #48]	@ (8001d84 <MX_GPIO_Init+0x2f0>)
 8001d54:	f001 f8bc 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001d58:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001d5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d62:	2300      	movs	r3, #0
 8001d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d66:	2303      	movs	r3, #3
 8001d68:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d6a:	2307      	movs	r3, #7
 8001d6c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d72:	4619      	mov	r1, r3
 8001d74:	e010      	b.n	8001d98 <MX_GPIO_Init+0x304>
 8001d76:	bf00      	nop
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	40020800 	.word	0x40020800
 8001d80:	40020000 	.word	0x40020000
 8001d84:	40020c00 	.word	0x40020c00
 8001d88:	40021800 	.word	0x40021800
 8001d8c:	40021400 	.word	0x40021400
 8001d90:	40020400 	.word	0x40020400
 8001d94:	40021000 	.word	0x40021000
 8001d98:	4812      	ldr	r0, [pc, #72]	@ (8001de4 <MX_GPIO_Init+0x350>)
 8001d9a:	f001 f899 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001d9e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001da2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da4:	2301      	movs	r3, #1
 8001da6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dac:	2300      	movs	r3, #0
 8001dae:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001db0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001db4:	4619      	mov	r1, r3
 8001db6:	480c      	ldr	r0, [pc, #48]	@ (8001de8 <MX_GPIO_Init+0x354>)
 8001db8:	f001 f88a 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001dbc:	2360      	movs	r3, #96	@ 0x60
 8001dbe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001dcc:	230c      	movs	r3, #12
 8001dce:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4805      	ldr	r0, [pc, #20]	@ (8001dec <MX_GPIO_Init+0x358>)
 8001dd8:	f001 f87a 	bl	8002ed0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ddc:	bf00      	nop
 8001dde:	3738      	adds	r7, #56	@ 0x38
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40020000 	.word	0x40020000
 8001de8:	40021800 	.word	0x40021800
 8001dec:	40020400 	.word	0x40020400

08001df0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001df4:	b672      	cpsid	i
}
 8001df6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001df8:	bf00      	nop
 8001dfa:	e7fd      	b.n	8001df8 <Error_Handler+0x8>

08001dfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	607b      	str	r3, [r7, #4]
 8001e06:	4b10      	ldr	r3, [pc, #64]	@ (8001e48 <HAL_MspInit+0x4c>)
 8001e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0a:	4a0f      	ldr	r2, [pc, #60]	@ (8001e48 <HAL_MspInit+0x4c>)
 8001e0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e10:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e12:	4b0d      	ldr	r3, [pc, #52]	@ (8001e48 <HAL_MspInit+0x4c>)
 8001e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e1a:	607b      	str	r3, [r7, #4]
 8001e1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	603b      	str	r3, [r7, #0]
 8001e22:	4b09      	ldr	r3, [pc, #36]	@ (8001e48 <HAL_MspInit+0x4c>)
 8001e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e26:	4a08      	ldr	r2, [pc, #32]	@ (8001e48 <HAL_MspInit+0x4c>)
 8001e28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e2e:	4b06      	ldr	r3, [pc, #24]	@ (8001e48 <HAL_MspInit+0x4c>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e36:	603b      	str	r3, [r7, #0]
 8001e38:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e3a:	2007      	movs	r0, #7
 8001e3c:	f001 f806 	bl	8002e4c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e40:	bf00      	nop
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40023800 	.word	0x40023800

08001e4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08a      	sub	sp, #40	@ 0x28
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e54:	f107 0314 	add.w	r3, r7, #20
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	60da      	str	r2, [r3, #12]
 8001e62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a29      	ldr	r2, [pc, #164]	@ (8001f10 <HAL_I2C_MspInit+0xc4>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d14b      	bne.n	8001f06 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	613b      	str	r3, [r7, #16]
 8001e72:	4b28      	ldr	r3, [pc, #160]	@ (8001f14 <HAL_I2C_MspInit+0xc8>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e76:	4a27      	ldr	r2, [pc, #156]	@ (8001f14 <HAL_I2C_MspInit+0xc8>)
 8001e78:	f043 0304 	orr.w	r3, r3, #4
 8001e7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e7e:	4b25      	ldr	r3, [pc, #148]	@ (8001f14 <HAL_I2C_MspInit+0xc8>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e82:	f003 0304 	and.w	r3, r3, #4
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	4b21      	ldr	r3, [pc, #132]	@ (8001f14 <HAL_I2C_MspInit+0xc8>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e92:	4a20      	ldr	r2, [pc, #128]	@ (8001f14 <HAL_I2C_MspInit+0xc8>)
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001f14 <HAL_I2C_MspInit+0xc8>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001ea6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001eaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eac:	2312      	movs	r3, #18
 8001eae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001eb8:	2304      	movs	r3, #4
 8001eba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001ebc:	f107 0314 	add.w	r3, r7, #20
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4815      	ldr	r0, [pc, #84]	@ (8001f18 <HAL_I2C_MspInit+0xcc>)
 8001ec4:	f001 f804 	bl	8002ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001ec8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ece:	2312      	movs	r3, #18
 8001ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001eda:	2304      	movs	r3, #4
 8001edc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001ede:	f107 0314 	add.w	r3, r7, #20
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	480d      	ldr	r0, [pc, #52]	@ (8001f1c <HAL_I2C_MspInit+0xd0>)
 8001ee6:	f000 fff3 	bl	8002ed0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	60bb      	str	r3, [r7, #8]
 8001eee:	4b09      	ldr	r3, [pc, #36]	@ (8001f14 <HAL_I2C_MspInit+0xc8>)
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef2:	4a08      	ldr	r2, [pc, #32]	@ (8001f14 <HAL_I2C_MspInit+0xc8>)
 8001ef4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001ef8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001efa:	4b06      	ldr	r3, [pc, #24]	@ (8001f14 <HAL_I2C_MspInit+0xc8>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001f02:	60bb      	str	r3, [r7, #8]
 8001f04:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001f06:	bf00      	nop
 8001f08:	3728      	adds	r7, #40	@ 0x28
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40005c00 	.word	0x40005c00
 8001f14:	40023800 	.word	0x40023800
 8001f18:	40020800 	.word	0x40020800
 8001f1c:	40020000 	.word	0x40020000

08001f20 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b09a      	sub	sp, #104	@ 0x68
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f28:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f3c:	2230      	movs	r2, #48	@ 0x30
 8001f3e:	2100      	movs	r1, #0
 8001f40:	4618      	mov	r0, r3
 8001f42:	f004 fb23 	bl	800658c <memset>
  if(hltdc->Instance==LTDC)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a81      	ldr	r2, [pc, #516]	@ (8002150 <HAL_LTDC_MspInit+0x230>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	f040 80fb 	bne.w	8002148 <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001f52:	2308      	movs	r3, #8
 8001f54:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
 8001f56:	23c8      	movs	r3, #200	@ 0xc8
 8001f58:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 8001f5e:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001f62:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f003 fa4d 	bl	8005408 <HAL_RCCEx_PeriphCLKConfig>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8001f74:	f7ff ff3c 	bl	8001df0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001f78:	2300      	movs	r3, #0
 8001f7a:	623b      	str	r3, [r7, #32]
 8001f7c:	4b75      	ldr	r3, [pc, #468]	@ (8002154 <HAL_LTDC_MspInit+0x234>)
 8001f7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f80:	4a74      	ldr	r2, [pc, #464]	@ (8002154 <HAL_LTDC_MspInit+0x234>)
 8001f82:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001f86:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f88:	4b72      	ldr	r3, [pc, #456]	@ (8002154 <HAL_LTDC_MspInit+0x234>)
 8001f8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f8c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001f90:	623b      	str	r3, [r7, #32]
 8001f92:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f94:	2300      	movs	r3, #0
 8001f96:	61fb      	str	r3, [r7, #28]
 8001f98:	4b6e      	ldr	r3, [pc, #440]	@ (8002154 <HAL_LTDC_MspInit+0x234>)
 8001f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9c:	4a6d      	ldr	r2, [pc, #436]	@ (8002154 <HAL_LTDC_MspInit+0x234>)
 8001f9e:	f043 0320 	orr.w	r3, r3, #32
 8001fa2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fa4:	4b6b      	ldr	r3, [pc, #428]	@ (8002154 <HAL_LTDC_MspInit+0x234>)
 8001fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa8:	f003 0320 	and.w	r3, r3, #32
 8001fac:	61fb      	str	r3, [r7, #28]
 8001fae:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	61bb      	str	r3, [r7, #24]
 8001fb4:	4b67      	ldr	r3, [pc, #412]	@ (8002154 <HAL_LTDC_MspInit+0x234>)
 8001fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb8:	4a66      	ldr	r2, [pc, #408]	@ (8002154 <HAL_LTDC_MspInit+0x234>)
 8001fba:	f043 0301 	orr.w	r3, r3, #1
 8001fbe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fc0:	4b64      	ldr	r3, [pc, #400]	@ (8002154 <HAL_LTDC_MspInit+0x234>)
 8001fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	61bb      	str	r3, [r7, #24]
 8001fca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]
 8001fd0:	4b60      	ldr	r3, [pc, #384]	@ (8002154 <HAL_LTDC_MspInit+0x234>)
 8001fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd4:	4a5f      	ldr	r2, [pc, #380]	@ (8002154 <HAL_LTDC_MspInit+0x234>)
 8001fd6:	f043 0302 	orr.w	r3, r3, #2
 8001fda:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fdc:	4b5d      	ldr	r3, [pc, #372]	@ (8002154 <HAL_LTDC_MspInit+0x234>)
 8001fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	617b      	str	r3, [r7, #20]
 8001fe6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001fe8:	2300      	movs	r3, #0
 8001fea:	613b      	str	r3, [r7, #16]
 8001fec:	4b59      	ldr	r3, [pc, #356]	@ (8002154 <HAL_LTDC_MspInit+0x234>)
 8001fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff0:	4a58      	ldr	r2, [pc, #352]	@ (8002154 <HAL_LTDC_MspInit+0x234>)
 8001ff2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ff6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ff8:	4b56      	ldr	r3, [pc, #344]	@ (8002154 <HAL_LTDC_MspInit+0x234>)
 8001ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002000:	613b      	str	r3, [r7, #16]
 8002002:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002004:	2300      	movs	r3, #0
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	4b52      	ldr	r3, [pc, #328]	@ (8002154 <HAL_LTDC_MspInit+0x234>)
 800200a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200c:	4a51      	ldr	r2, [pc, #324]	@ (8002154 <HAL_LTDC_MspInit+0x234>)
 800200e:	f043 0304 	orr.w	r3, r3, #4
 8002012:	6313      	str	r3, [r2, #48]	@ 0x30
 8002014:	4b4f      	ldr	r3, [pc, #316]	@ (8002154 <HAL_LTDC_MspInit+0x234>)
 8002016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002018:	f003 0304 	and.w	r3, r3, #4
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002020:	2300      	movs	r3, #0
 8002022:	60bb      	str	r3, [r7, #8]
 8002024:	4b4b      	ldr	r3, [pc, #300]	@ (8002154 <HAL_LTDC_MspInit+0x234>)
 8002026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002028:	4a4a      	ldr	r2, [pc, #296]	@ (8002154 <HAL_LTDC_MspInit+0x234>)
 800202a:	f043 0308 	orr.w	r3, r3, #8
 800202e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002030:	4b48      	ldr	r3, [pc, #288]	@ (8002154 <HAL_LTDC_MspInit+0x234>)
 8002032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002034:	f003 0308 	and.w	r3, r3, #8
 8002038:	60bb      	str	r3, [r7, #8]
 800203a:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800203c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002040:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002042:	2302      	movs	r3, #2
 8002044:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002046:	2300      	movs	r3, #0
 8002048:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204a:	2300      	movs	r3, #0
 800204c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800204e:	230e      	movs	r3, #14
 8002050:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002052:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002056:	4619      	mov	r1, r3
 8002058:	483f      	ldr	r0, [pc, #252]	@ (8002158 <HAL_LTDC_MspInit+0x238>)
 800205a:	f000 ff39 	bl	8002ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800205e:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002062:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002064:	2302      	movs	r3, #2
 8002066:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002068:	2300      	movs	r3, #0
 800206a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206c:	2300      	movs	r3, #0
 800206e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002070:	230e      	movs	r3, #14
 8002072:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002074:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002078:	4619      	mov	r1, r3
 800207a:	4838      	ldr	r0, [pc, #224]	@ (800215c <HAL_LTDC_MspInit+0x23c>)
 800207c:	f000 ff28 	bl	8002ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002080:	2303      	movs	r3, #3
 8002082:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002084:	2302      	movs	r3, #2
 8002086:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002088:	2300      	movs	r3, #0
 800208a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208c:	2300      	movs	r3, #0
 800208e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002090:	2309      	movs	r3, #9
 8002092:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002094:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002098:	4619      	mov	r1, r3
 800209a:	4831      	ldr	r0, [pc, #196]	@ (8002160 <HAL_LTDC_MspInit+0x240>)
 800209c:	f000 ff18 	bl	8002ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80020a0:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80020a4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a6:	2302      	movs	r3, #2
 80020a8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ae:	2300      	movs	r3, #0
 80020b0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020b2:	230e      	movs	r3, #14
 80020b4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80020ba:	4619      	mov	r1, r3
 80020bc:	4828      	ldr	r0, [pc, #160]	@ (8002160 <HAL_LTDC_MspInit+0x240>)
 80020be:	f000 ff07 	bl	8002ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80020c2:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80020c6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c8:	2302      	movs	r3, #2
 80020ca:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d0:	2300      	movs	r3, #0
 80020d2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020d4:	230e      	movs	r3, #14
 80020d6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020d8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80020dc:	4619      	mov	r1, r3
 80020de:	4821      	ldr	r0, [pc, #132]	@ (8002164 <HAL_LTDC_MspInit+0x244>)
 80020e0:	f000 fef6 	bl	8002ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80020e4:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80020e8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ea:	2302      	movs	r3, #2
 80020ec:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f2:	2300      	movs	r3, #0
 80020f4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020f6:	230e      	movs	r3, #14
 80020f8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020fa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80020fe:	4619      	mov	r1, r3
 8002100:	4819      	ldr	r0, [pc, #100]	@ (8002168 <HAL_LTDC_MspInit+0x248>)
 8002102:	f000 fee5 	bl	8002ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002106:	2348      	movs	r3, #72	@ 0x48
 8002108:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210a:	2302      	movs	r3, #2
 800210c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210e:	2300      	movs	r3, #0
 8002110:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002112:	2300      	movs	r3, #0
 8002114:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002116:	230e      	movs	r3, #14
 8002118:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800211a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800211e:	4619      	mov	r1, r3
 8002120:	4812      	ldr	r0, [pc, #72]	@ (800216c <HAL_LTDC_MspInit+0x24c>)
 8002122:	f000 fed5 	bl	8002ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002126:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800212a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212c:	2302      	movs	r3, #2
 800212e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002130:	2300      	movs	r3, #0
 8002132:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002134:	2300      	movs	r3, #0
 8002136:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002138:	2309      	movs	r3, #9
 800213a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800213c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002140:	4619      	mov	r1, r3
 8002142:	4808      	ldr	r0, [pc, #32]	@ (8002164 <HAL_LTDC_MspInit+0x244>)
 8002144:	f000 fec4 	bl	8002ed0 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002148:	bf00      	nop
 800214a:	3768      	adds	r7, #104	@ 0x68
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40016800 	.word	0x40016800
 8002154:	40023800 	.word	0x40023800
 8002158:	40021400 	.word	0x40021400
 800215c:	40020000 	.word	0x40020000
 8002160:	40020400 	.word	0x40020400
 8002164:	40021800 	.word	0x40021800
 8002168:	40020800 	.word	0x40020800
 800216c:	40020c00 	.word	0x40020c00

08002170 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a0b      	ldr	r2, [pc, #44]	@ (80021ac <HAL_RNG_MspInit+0x3c>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d10d      	bne.n	800219e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	4b0a      	ldr	r3, [pc, #40]	@ (80021b0 <HAL_RNG_MspInit+0x40>)
 8002188:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800218a:	4a09      	ldr	r2, [pc, #36]	@ (80021b0 <HAL_RNG_MspInit+0x40>)
 800218c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002190:	6353      	str	r3, [r2, #52]	@ 0x34
 8002192:	4b07      	ldr	r3, [pc, #28]	@ (80021b0 <HAL_RNG_MspInit+0x40>)
 8002194:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002196:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 800219e:	bf00      	nop
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	50060800 	.word	0x50060800
 80021b0:	40023800 	.word	0x40023800

080021b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08a      	sub	sp, #40	@ 0x28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021bc:	f107 0314 	add.w	r3, r7, #20
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	605a      	str	r2, [r3, #4]
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	60da      	str	r2, [r3, #12]
 80021ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a19      	ldr	r2, [pc, #100]	@ (8002238 <HAL_SPI_MspInit+0x84>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d12c      	bne.n	8002230 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	613b      	str	r3, [r7, #16]
 80021da:	4b18      	ldr	r3, [pc, #96]	@ (800223c <HAL_SPI_MspInit+0x88>)
 80021dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021de:	4a17      	ldr	r2, [pc, #92]	@ (800223c <HAL_SPI_MspInit+0x88>)
 80021e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80021e6:	4b15      	ldr	r3, [pc, #84]	@ (800223c <HAL_SPI_MspInit+0x88>)
 80021e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021ee:	613b      	str	r3, [r7, #16]
 80021f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	4b11      	ldr	r3, [pc, #68]	@ (800223c <HAL_SPI_MspInit+0x88>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fa:	4a10      	ldr	r2, [pc, #64]	@ (800223c <HAL_SPI_MspInit+0x88>)
 80021fc:	f043 0320 	orr.w	r3, r3, #32
 8002200:	6313      	str	r3, [r2, #48]	@ 0x30
 8002202:	4b0e      	ldr	r3, [pc, #56]	@ (800223c <HAL_SPI_MspInit+0x88>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002206:	f003 0320 	and.w	r3, r3, #32
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800220e:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002212:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002214:	2302      	movs	r3, #2
 8002216:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002218:	2300      	movs	r3, #0
 800221a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221c:	2300      	movs	r3, #0
 800221e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002220:	2305      	movs	r3, #5
 8002222:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002224:	f107 0314 	add.w	r3, r7, #20
 8002228:	4619      	mov	r1, r3
 800222a:	4805      	ldr	r0, [pc, #20]	@ (8002240 <HAL_SPI_MspInit+0x8c>)
 800222c:	f000 fe50 	bl	8002ed0 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8002230:	bf00      	nop
 8002232:	3728      	adds	r7, #40	@ 0x28
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40015000 	.word	0x40015000
 800223c:	40023800 	.word	0x40023800
 8002240:	40021400 	.word	0x40021400

08002244 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a08      	ldr	r2, [pc, #32]	@ (8002274 <HAL_SPI_MspDeInit+0x30>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d10a      	bne.n	800226c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002256:	4b08      	ldr	r3, [pc, #32]	@ (8002278 <HAL_SPI_MspDeInit+0x34>)
 8002258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225a:	4a07      	ldr	r2, [pc, #28]	@ (8002278 <HAL_SPI_MspDeInit+0x34>)
 800225c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002260:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002262:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8002266:	4805      	ldr	r0, [pc, #20]	@ (800227c <HAL_SPI_MspDeInit+0x38>)
 8002268:	f000 ffde 	bl	8003228 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 800226c:	bf00      	nop
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40015000 	.word	0x40015000
 8002278:	40023800 	.word	0x40023800
 800227c:	40021400 	.word	0x40021400

08002280 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002290:	d10d      	bne.n	80022ae <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	4b09      	ldr	r3, [pc, #36]	@ (80022bc <HAL_TIM_Base_MspInit+0x3c>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229a:	4a08      	ldr	r2, [pc, #32]	@ (80022bc <HAL_TIM_Base_MspInit+0x3c>)
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80022a2:	4b06      	ldr	r3, [pc, #24]	@ (80022bc <HAL_TIM_Base_MspInit+0x3c>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80022ae:	bf00      	nop
 80022b0:	3714      	adds	r7, #20
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	40023800 	.word	0x40023800

080022c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022c4:	bf00      	nop
 80022c6:	e7fd      	b.n	80022c4 <NMI_Handler+0x4>

080022c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022cc:	bf00      	nop
 80022ce:	e7fd      	b.n	80022cc <HardFault_Handler+0x4>

080022d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022d4:	bf00      	nop
 80022d6:	e7fd      	b.n	80022d4 <MemManage_Handler+0x4>

080022d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022dc:	bf00      	nop
 80022de:	e7fd      	b.n	80022dc <BusFault_Handler+0x4>

080022e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022e4:	bf00      	nop
 80022e6:	e7fd      	b.n	80022e4 <UsageFault_Handler+0x4>

080022e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022ec:	bf00      	nop
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022f6:	b480      	push	{r7}
 80022f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022fa:	bf00      	nop
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002316:	f000 fc85 	bl	8002c24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800231a:	bf00      	nop
 800231c:	bd80      	pop	{r7, pc}

0800231e <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b082      	sub	sp, #8
 8002322:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8002324:	f000 f9ce 	bl	80026c4 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8002328:	f000 f98e 	bl	8002648 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 800232c:	2202      	movs	r2, #2
 800232e:	2103      	movs	r1, #3
 8002330:	2082      	movs	r0, #130	@ 0x82
 8002332:	f000 fa1b 	bl	800276c <I2C3_Write>
    HAL_Delay(5);
 8002336:	2005      	movs	r0, #5
 8002338:	f000 fc94 	bl	8002c64 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 800233c:	2200      	movs	r2, #0
 800233e:	2103      	movs	r1, #3
 8002340:	2082      	movs	r0, #130	@ 0x82
 8002342:	f000 fa13 	bl	800276c <I2C3_Write>
    HAL_Delay(2);
 8002346:	2002      	movs	r0, #2
 8002348:	f000 fc8c 	bl	8002c64 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 800234c:	1cba      	adds	r2, r7, #2
 800234e:	2302      	movs	r3, #2
 8002350:	2100      	movs	r1, #0
 8002352:	2082      	movs	r0, #130	@ 0x82
 8002354:	f000 fa5a 	bl	800280c <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8002358:	887b      	ldrh	r3, [r7, #2]
 800235a:	021b      	lsls	r3, r3, #8
 800235c:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 800235e:	887b      	ldrh	r3, [r7, #2]
 8002360:	0a1b      	lsrs	r3, r3, #8
 8002362:	b29a      	uxth	r2, r3
 8002364:	88fb      	ldrh	r3, [r7, #6]
 8002366:	4313      	orrs	r3, r2
 8002368:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 800236a:	88fb      	ldrh	r3, [r7, #6]
 800236c:	f640 0211 	movw	r2, #2065	@ 0x811
 8002370:	4293      	cmp	r3, r2
 8002372:	d001      	beq.n	8002378 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8002374:	2303      	movs	r3, #3
 8002376:	e075      	b.n	8002464 <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002378:	2202      	movs	r2, #2
 800237a:	2103      	movs	r1, #3
 800237c:	2082      	movs	r0, #130	@ 0x82
 800237e:	f000 f9f5 	bl	800276c <I2C3_Write>
    HAL_Delay(5);
 8002382:	2005      	movs	r0, #5
 8002384:	f000 fc6e 	bl	8002c64 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002388:	2200      	movs	r2, #0
 800238a:	2103      	movs	r1, #3
 800238c:	2082      	movs	r0, #130	@ 0x82
 800238e:	f000 f9ed 	bl	800276c <I2C3_Write>
    HAL_Delay(2);
 8002392:	2002      	movs	r0, #2
 8002394:	f000 fc66 	bl	8002c64 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002398:	2004      	movs	r0, #4
 800239a:	f000 f867 	bl	800246c <STMPE811_Read>
 800239e:	4603      	mov	r3, r0
 80023a0:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 80023a2:	797b      	ldrb	r3, [r7, #5]
 80023a4:	f023 0301 	bic.w	r3, r3, #1
 80023a8:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 80023aa:	797b      	ldrb	r3, [r7, #5]
 80023ac:	461a      	mov	r2, r3
 80023ae:	2104      	movs	r1, #4
 80023b0:	2082      	movs	r0, #130	@ 0x82
 80023b2:	f000 f9db 	bl	800276c <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 80023b6:	2004      	movs	r0, #4
 80023b8:	f000 f858 	bl	800246c <STMPE811_Read>
 80023bc:	4603      	mov	r3, r0
 80023be:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 80023c0:	797b      	ldrb	r3, [r7, #5]
 80023c2:	f023 0302 	bic.w	r3, r3, #2
 80023c6:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 80023c8:	797b      	ldrb	r3, [r7, #5]
 80023ca:	461a      	mov	r2, r3
 80023cc:	2104      	movs	r1, #4
 80023ce:	2082      	movs	r0, #130	@ 0x82
 80023d0:	f000 f9cc 	bl	800276c <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 80023d4:	2249      	movs	r2, #73	@ 0x49
 80023d6:	2120      	movs	r1, #32
 80023d8:	2082      	movs	r0, #130	@ 0x82
 80023da:	f000 f9c7 	bl	800276c <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 80023de:	2002      	movs	r0, #2
 80023e0:	f000 fc40 	bl	8002c64 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 80023e4:	2201      	movs	r2, #1
 80023e6:	2121      	movs	r1, #33	@ 0x21
 80023e8:	2082      	movs	r0, #130	@ 0x82
 80023ea:	f000 f9bf 	bl	800276c <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 80023ee:	2017      	movs	r0, #23
 80023f0:	f000 f83c 	bl	800246c <STMPE811_Read>
 80023f4:	4603      	mov	r3, r0
 80023f6:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 80023f8:	797b      	ldrb	r3, [r7, #5]
 80023fa:	f043 031e 	orr.w	r3, r3, #30
 80023fe:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8002400:	797b      	ldrb	r3, [r7, #5]
 8002402:	461a      	mov	r2, r3
 8002404:	2117      	movs	r1, #23
 8002406:	2082      	movs	r0, #130	@ 0x82
 8002408:	f000 f9b0 	bl	800276c <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 800240c:	229a      	movs	r2, #154	@ 0x9a
 800240e:	2141      	movs	r1, #65	@ 0x41
 8002410:	2082      	movs	r0, #130	@ 0x82
 8002412:	f000 f9ab 	bl	800276c <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8002416:	2201      	movs	r2, #1
 8002418:	214a      	movs	r1, #74	@ 0x4a
 800241a:	2082      	movs	r0, #130	@ 0x82
 800241c:	f000 f9a6 	bl	800276c <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002420:	2201      	movs	r2, #1
 8002422:	214b      	movs	r1, #75	@ 0x4b
 8002424:	2082      	movs	r0, #130	@ 0x82
 8002426:	f000 f9a1 	bl	800276c <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 800242a:	2200      	movs	r2, #0
 800242c:	214b      	movs	r1, #75	@ 0x4b
 800242e:	2082      	movs	r0, #130	@ 0x82
 8002430:	f000 f99c 	bl	800276c <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8002434:	2201      	movs	r2, #1
 8002436:	2156      	movs	r1, #86	@ 0x56
 8002438:	2082      	movs	r0, #130	@ 0x82
 800243a:	f000 f997 	bl	800276c <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 800243e:	2201      	movs	r2, #1
 8002440:	2158      	movs	r1, #88	@ 0x58
 8002442:	2082      	movs	r0, #130	@ 0x82
 8002444:	f000 f992 	bl	800276c <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8002448:	2203      	movs	r2, #3
 800244a:	2140      	movs	r1, #64	@ 0x40
 800244c:	2082      	movs	r0, #130	@ 0x82
 800244e:	f000 f98d 	bl	800276c <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8002452:	22ff      	movs	r2, #255	@ 0xff
 8002454:	210b      	movs	r1, #11
 8002456:	2082      	movs	r0, #130	@ 0x82
 8002458:	f000 f988 	bl	800276c <I2C3_Write>
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 800245c:	20c8      	movs	r0, #200	@ 0xc8
 800245e:	f000 fc01 	bl	8002c64 <HAL_Delay>

    return STMPE811_State_Ok;
 8002462:	2302      	movs	r3, #2

}
 8002464:	4618      	mov	r0, r3
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8002476:	f107 020f 	add.w	r2, r7, #15
 800247a:	79fb      	ldrb	r3, [r7, #7]
 800247c:	4619      	mov	r1, r3
 800247e:	2082      	movs	r0, #130	@ 0x82
 8002480:	f000 f99e 	bl	80027c0 <I2C3_Read>

    return readData;
 8002484:	7bfb      	ldrb	r3, [r7, #15]
}
 8002486:	4618      	mov	r0, r3
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b084      	sub	sp, #16
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	791a      	ldrb	r2, [r3, #4]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 800249e:	2040      	movs	r0, #64	@ 0x40
 80024a0:	f7ff ffe4 	bl	800246c <STMPE811_Read>
 80024a4:	4603      	mov	r3, r0
 80024a6:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 80024a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	db0e      	blt.n	80024ce <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80024b6:	2201      	movs	r2, #1
 80024b8:	214b      	movs	r1, #75	@ 0x4b
 80024ba:	2082      	movs	r0, #130	@ 0x82
 80024bc:	f000 f956 	bl	800276c <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80024c0:	2200      	movs	r2, #0
 80024c2:	214b      	movs	r1, #75	@ 0x4b
 80024c4:	2082      	movs	r0, #130	@ 0x82
 80024c6:	f000 f951 	bl	800276c <I2C3_Write>

        return STMPE811_State_Released;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e0a7      	b.n	800261e <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	799b      	ldrb	r3, [r3, #6]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d117      	bne.n	8002506 <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	881b      	ldrh	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f000 f9b8 	bl	8002850 <TM_STMPE811_ReadX>
 80024e0:	4603      	mov	r3, r0
 80024e2:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	885b      	ldrh	r3, [r3, #2]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f000 fa0d 	bl	8002910 <TM_STMPE811_ReadY>
 80024f6:	4603      	mov	r3, r0
 80024f8:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80024fc:	3301      	adds	r3, #1
 80024fe:	b29a      	uxth	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	805a      	strh	r2, [r3, #2]
 8002504:	e048      	b.n	8002598 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	799b      	ldrb	r3, [r3, #6]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d112      	bne.n	8002534 <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	881b      	ldrh	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f000 f99c 	bl	8002850 <TM_STMPE811_ReadX>
 8002518:	4603      	mov	r3, r0
 800251a:	461a      	mov	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	885b      	ldrh	r3, [r3, #2]
 8002524:	4618      	mov	r0, r3
 8002526:	f000 f9f3 	bl	8002910 <TM_STMPE811_ReadY>
 800252a:	4603      	mov	r3, r0
 800252c:	461a      	mov	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	805a      	strh	r2, [r3, #2]
 8002532:	e031      	b.n	8002598 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	799b      	ldrb	r3, [r3, #6]
 8002538:	2b02      	cmp	r3, #2
 800253a:	d115      	bne.n	8002568 <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	885b      	ldrh	r3, [r3, #2]
 8002540:	4618      	mov	r0, r3
 8002542:	f000 f985 	bl	8002850 <TM_STMPE811_ReadX>
 8002546:	4603      	mov	r3, r0
 8002548:	461a      	mov	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	881b      	ldrh	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f000 f9dc 	bl	8002910 <TM_STMPE811_ReadY>
 8002558:	4603      	mov	r3, r0
 800255a:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 800255e:	3301      	adds	r3, #1
 8002560:	b29a      	uxth	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	801a      	strh	r2, [r3, #0]
 8002566:	e017      	b.n	8002598 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	799b      	ldrb	r3, [r3, #6]
 800256c:	2b03      	cmp	r3, #3
 800256e:	d113      	bne.n	8002598 <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f000 f96b 	bl	8002850 <TM_STMPE811_ReadX>
 800257a:	4603      	mov	r3, r0
 800257c:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002580:	b29a      	uxth	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f000 f9c0 	bl	8002910 <TM_STMPE811_ReadY>
 8002590:	4603      	mov	r3, r0
 8002592:	461a      	mov	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002598:	2201      	movs	r2, #1
 800259a:	214b      	movs	r1, #75	@ 0x4b
 800259c:	2082      	movs	r0, #130	@ 0x82
 800259e:	f000 f8e5 	bl	800276c <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80025a2:	2200      	movs	r2, #0
 80025a4:	214b      	movs	r1, #75	@ 0x4b
 80025a6:	2082      	movs	r0, #130	@ 0x82
 80025a8:	f000 f8e0 	bl	800276c <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	799b      	ldrb	r3, [r3, #6]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d003      	beq.n	80025bc <STMPE811_ReadTouch+0x12e>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	799b      	ldrb	r3, [r3, #6]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d115      	bne.n	80025e8 <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	881b      	ldrh	r3, [r3, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d027      	beq.n	8002614 <STMPE811_ReadTouch+0x186>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	881b      	ldrh	r3, [r3, #0]
 80025c8:	2bee      	cmp	r3, #238	@ 0xee
 80025ca:	d823      	bhi.n	8002614 <STMPE811_ReadTouch+0x186>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	885b      	ldrh	r3, [r3, #2]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d01f      	beq.n	8002614 <STMPE811_ReadTouch+0x186>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	885b      	ldrh	r3, [r3, #2]
 80025d8:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 80025dc:	d81a      	bhi.n	8002614 <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 80025e4:	2300      	movs	r3, #0
 80025e6:	e01a      	b.n	800261e <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	881b      	ldrh	r3, [r3, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d012      	beq.n	8002616 <STMPE811_ReadTouch+0x188>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	881b      	ldrh	r3, [r3, #0]
 80025f4:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 80025f8:	d80d      	bhi.n	8002616 <STMPE811_ReadTouch+0x188>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	885b      	ldrh	r3, [r3, #2]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d009      	beq.n	8002616 <STMPE811_ReadTouch+0x188>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	885b      	ldrh	r3, [r3, #2]
 8002606:	2bee      	cmp	r3, #238	@ 0xee
 8002608:	d805      	bhi.n	8002616 <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8002610:	2300      	movs	r3, #0
 8002612:	e004      	b.n	800261e <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8002614:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2201      	movs	r2, #1
 800261a:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 800261c:	2301      	movs	r3, #1
}
 800261e:	4618      	mov	r0, r3
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
	...

08002628 <verifyHAL_I2C_IS_OKAY>:
    }
    return true;
}

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 800262c:	4b05      	ldr	r3, [pc, #20]	@ (8002644 <verifyHAL_I2C_IS_OKAY+0x1c>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8002634:	bf00      	nop
 8002636:	e7fd      	b.n	8002634 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8002638:	bf00      	nop
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	20025c0c 	.word	0x20025c0c

08002648 <I2C3_Init>:

static void I2C3_Init()
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	603b      	str	r3, [r7, #0]
 8002652:	4b18      	ldr	r3, [pc, #96]	@ (80026b4 <I2C3_Init+0x6c>)
 8002654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002656:	4a17      	ldr	r2, [pc, #92]	@ (80026b4 <I2C3_Init+0x6c>)
 8002658:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800265c:	6413      	str	r3, [r2, #64]	@ 0x40
 800265e:	4b15      	ldr	r3, [pc, #84]	@ (80026b4 <I2C3_Init+0x6c>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002662:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002666:	603b      	str	r3, [r7, #0]
 8002668:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 800266a:	4b13      	ldr	r3, [pc, #76]	@ (80026b8 <I2C3_Init+0x70>)
 800266c:	4a13      	ldr	r2, [pc, #76]	@ (80026bc <I2C3_Init+0x74>)
 800266e:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8002670:	4b11      	ldr	r3, [pc, #68]	@ (80026b8 <I2C3_Init+0x70>)
 8002672:	4a13      	ldr	r2, [pc, #76]	@ (80026c0 <I2C3_Init+0x78>)
 8002674:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002676:	4b10      	ldr	r3, [pc, #64]	@ (80026b8 <I2C3_Init+0x70>)
 8002678:	2200      	movs	r2, #0
 800267a:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 800267c:	4b0e      	ldr	r3, [pc, #56]	@ (80026b8 <I2C3_Init+0x70>)
 800267e:	2200      	movs	r2, #0
 8002680:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002682:	4b0d      	ldr	r3, [pc, #52]	@ (80026b8 <I2C3_Init+0x70>)
 8002684:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002688:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 800268a:	4b0b      	ldr	r3, [pc, #44]	@ (80026b8 <I2C3_Init+0x70>)
 800268c:	2200      	movs	r2, #0
 800268e:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002690:	4b09      	ldr	r3, [pc, #36]	@ (80026b8 <I2C3_Init+0x70>)
 8002692:	2200      	movs	r2, #0
 8002694:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8002696:	4808      	ldr	r0, [pc, #32]	@ (80026b8 <I2C3_Init+0x70>)
 8002698:	f000 feec 	bl	8003474 <HAL_I2C_Init>
 800269c:	4603      	mov	r3, r0
 800269e:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 80026a0:	79fb      	ldrb	r3, [r7, #7]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 80026a6:	bf00      	nop
 80026a8:	e7fd      	b.n	80026a6 <I2C3_Init+0x5e>
    }
    return;
 80026aa:	bf00      	nop
}
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40023800 	.word	0x40023800
 80026b8:	20025bb8 	.word	0x20025bb8
 80026bc:	40005c00 	.word	0x40005c00
 80026c0:	000186a0 	.word	0x000186a0

080026c4 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b088      	sub	sp, #32
 80026c8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ca:	f107 030c 	add.w	r3, r7, #12
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	605a      	str	r2, [r3, #4]
 80026d4:	609a      	str	r2, [r3, #8]
 80026d6:	60da      	str	r2, [r3, #12]
 80026d8:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	60bb      	str	r3, [r7, #8]
 80026de:	4b20      	ldr	r3, [pc, #128]	@ (8002760 <I2C3_MspInit+0x9c>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e2:	4a1f      	ldr	r2, [pc, #124]	@ (8002760 <I2C3_MspInit+0x9c>)
 80026e4:	f043 0304 	orr.w	r3, r3, #4
 80026e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002760 <I2C3_MspInit+0x9c>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ee:	f003 0304 	and.w	r3, r3, #4
 80026f2:	60bb      	str	r3, [r7, #8]
 80026f4:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	607b      	str	r3, [r7, #4]
 80026fa:	4b19      	ldr	r3, [pc, #100]	@ (8002760 <I2C3_MspInit+0x9c>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fe:	4a18      	ldr	r2, [pc, #96]	@ (8002760 <I2C3_MspInit+0x9c>)
 8002700:	f043 0301 	orr.w	r3, r3, #1
 8002704:	6313      	str	r3, [r2, #48]	@ 0x30
 8002706:	4b16      	ldr	r3, [pc, #88]	@ (8002760 <I2C3_MspInit+0x9c>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	607b      	str	r3, [r7, #4]
 8002710:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002712:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002716:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002718:	2312      	movs	r3, #18
 800271a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271c:	2300      	movs	r3, #0
 800271e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002720:	2300      	movs	r3, #0
 8002722:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002724:	2304      	movs	r3, #4
 8002726:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002728:	f107 030c 	add.w	r3, r7, #12
 800272c:	4619      	mov	r1, r3
 800272e:	480d      	ldr	r0, [pc, #52]	@ (8002764 <I2C3_MspInit+0xa0>)
 8002730:	f000 fbce 	bl	8002ed0 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002734:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002738:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800273a:	2312      	movs	r3, #18
 800273c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273e:	2300      	movs	r3, #0
 8002740:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002742:	2300      	movs	r3, #0
 8002744:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002746:	2304      	movs	r3, #4
 8002748:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800274a:	f107 030c 	add.w	r3, r7, #12
 800274e:	4619      	mov	r1, r3
 8002750:	4805      	ldr	r0, [pc, #20]	@ (8002768 <I2C3_MspInit+0xa4>)
 8002752:	f000 fbbd 	bl	8002ed0 <HAL_GPIO_Init>
    
}
 8002756:	bf00      	nop
 8002758:	3720      	adds	r7, #32
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40023800 	.word	0x40023800
 8002764:	40020800 	.word	0x40020800
 8002768:	40020000 	.word	0x40020000

0800276c <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b088      	sub	sp, #32
 8002770:	af04      	add	r7, sp, #16
 8002772:	4603      	mov	r3, r0
 8002774:	80fb      	strh	r3, [r7, #6]
 8002776:	460b      	mov	r3, r1
 8002778:	717b      	strb	r3, [r7, #5]
 800277a:	4613      	mov	r3, r2
 800277c:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 800277e:	793b      	ldrb	r3, [r7, #4]
 8002780:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002782:	797b      	ldrb	r3, [r7, #5]
 8002784:	b29a      	uxth	r2, r3
 8002786:	88f9      	ldrh	r1, [r7, #6]
 8002788:	4b0a      	ldr	r3, [pc, #40]	@ (80027b4 <I2C3_Write+0x48>)
 800278a:	9302      	str	r3, [sp, #8]
 800278c:	2301      	movs	r3, #1
 800278e:	9301      	str	r3, [sp, #4]
 8002790:	f107 030f 	add.w	r3, r7, #15
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	2301      	movs	r3, #1
 8002798:	4807      	ldr	r0, [pc, #28]	@ (80027b8 <I2C3_Write+0x4c>)
 800279a:	f000 ffaf 	bl	80036fc <HAL_I2C_Mem_Write>
 800279e:	4603      	mov	r3, r0
 80027a0:	461a      	mov	r2, r3
 80027a2:	4b06      	ldr	r3, [pc, #24]	@ (80027bc <I2C3_Write+0x50>)
 80027a4:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 80027a6:	f7ff ff3f 	bl	8002628 <verifyHAL_I2C_IS_OKAY>
}
 80027aa:	bf00      	nop
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	0003d090 	.word	0x0003d090
 80027b8:	20025bb8 	.word	0x20025bb8
 80027bc:	20025c0c 	.word	0x20025c0c

080027c0 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af04      	add	r7, sp, #16
 80027c6:	4603      	mov	r3, r0
 80027c8:	603a      	str	r2, [r7, #0]
 80027ca:	71fb      	strb	r3, [r7, #7]
 80027cc:	460b      	mov	r3, r1
 80027ce:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 80027d0:	79fb      	ldrb	r3, [r7, #7]
 80027d2:	b299      	uxth	r1, r3
 80027d4:	79bb      	ldrb	r3, [r7, #6]
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	4b09      	ldr	r3, [pc, #36]	@ (8002800 <I2C3_Read+0x40>)
 80027da:	9302      	str	r3, [sp, #8]
 80027dc:	2301      	movs	r3, #1
 80027de:	9301      	str	r3, [sp, #4]
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	2301      	movs	r3, #1
 80027e6:	4807      	ldr	r0, [pc, #28]	@ (8002804 <I2C3_Read+0x44>)
 80027e8:	f001 f882 	bl	80038f0 <HAL_I2C_Mem_Read>
 80027ec:	4603      	mov	r3, r0
 80027ee:	461a      	mov	r2, r3
 80027f0:	4b05      	ldr	r3, [pc, #20]	@ (8002808 <I2C3_Read+0x48>)
 80027f2:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 80027f4:	f7ff ff18 	bl	8002628 <verifyHAL_I2C_IS_OKAY>
}
 80027f8:	bf00      	nop
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	0003d090 	.word	0x0003d090
 8002804:	20025bb8 	.word	0x20025bb8
 8002808:	20025c0c 	.word	0x20025c0c

0800280c <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af04      	add	r7, sp, #16
 8002812:	603a      	str	r2, [r7, #0]
 8002814:	461a      	mov	r2, r3
 8002816:	4603      	mov	r3, r0
 8002818:	71fb      	strb	r3, [r7, #7]
 800281a:	460b      	mov	r3, r1
 800281c:	71bb      	strb	r3, [r7, #6]
 800281e:	4613      	mov	r3, r2
 8002820:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8002822:	79fb      	ldrb	r3, [r7, #7]
 8002824:	b299      	uxth	r1, r3
 8002826:	79bb      	ldrb	r3, [r7, #6]
 8002828:	b29a      	uxth	r2, r3
 800282a:	4b07      	ldr	r3, [pc, #28]	@ (8002848 <I2C3_MulitByteRead+0x3c>)
 800282c:	9302      	str	r3, [sp, #8]
 800282e:	88bb      	ldrh	r3, [r7, #4]
 8002830:	9301      	str	r3, [sp, #4]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	2301      	movs	r3, #1
 8002838:	4804      	ldr	r0, [pc, #16]	@ (800284c <I2C3_MulitByteRead+0x40>)
 800283a:	f001 f859 	bl	80038f0 <HAL_I2C_Mem_Read>
}
 800283e:	bf00      	nop
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	0003d090 	.word	0x0003d090
 800284c:	20025bb8 	.word	0x20025bb8

08002850 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 800285a:	204d      	movs	r0, #77	@ 0x4d
 800285c:	f7ff fe06 	bl	800246c <STMPE811_Read>
 8002860:	4603      	mov	r3, r0
 8002862:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8002864:	204e      	movs	r0, #78	@ 0x4e
 8002866:	f7ff fe01 	bl	800246c <STMPE811_Read>
 800286a:	4603      	mov	r3, r0
 800286c:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 800286e:	7a7b      	ldrb	r3, [r7, #9]
 8002870:	b21b      	sxth	r3, r3
 8002872:	021b      	lsls	r3, r3, #8
 8002874:	b21a      	sxth	r2, r3
 8002876:	7a3b      	ldrb	r3, [r7, #8]
 8002878:	b21b      	sxth	r3, r3
 800287a:	4313      	orrs	r3, r2
 800287c:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 800287e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002882:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002886:	4293      	cmp	r3, r2
 8002888:	dc06      	bgt.n	8002898 <TM_STMPE811_ReadX+0x48>
        val = 3900 - val;
 800288a:	89fb      	ldrh	r3, [r7, #14]
 800288c:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8002890:	330c      	adds	r3, #12
 8002892:	b29b      	uxth	r3, r3
 8002894:	81fb      	strh	r3, [r7, #14]
 8002896:	e005      	b.n	80028a4 <TM_STMPE811_ReadX+0x54>
    } else {
        val = 3800 - val;
 8002898:	89fb      	ldrh	r3, [r7, #14]
 800289a:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 800289e:	3308      	adds	r3, #8
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 80028a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80028a8:	4a18      	ldr	r2, [pc, #96]	@ (800290c <TM_STMPE811_ReadX+0xbc>)
 80028aa:	fb82 1203 	smull	r1, r2, r2, r3
 80028ae:	441a      	add	r2, r3
 80028b0:	10d2      	asrs	r2, r2, #3
 80028b2:	17db      	asrs	r3, r3, #31
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 80028b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80028bc:	2bef      	cmp	r3, #239	@ 0xef
 80028be:	dd02      	ble.n	80028c6 <TM_STMPE811_ReadX+0x76>
        val = 239;
 80028c0:	23ef      	movs	r3, #239	@ 0xef
 80028c2:	81fb      	strh	r3, [r7, #14]
 80028c4:	e005      	b.n	80028d2 <TM_STMPE811_ReadX+0x82>
    } else if (val < 0) {
 80028c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	da01      	bge.n	80028d2 <TM_STMPE811_ReadX+0x82>
        val = 0;
 80028ce:	2300      	movs	r3, #0
 80028d0:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 80028d2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80028d6:	88fb      	ldrh	r3, [r7, #6]
 80028d8:	429a      	cmp	r2, r3
 80028da:	dd05      	ble.n	80028e8 <TM_STMPE811_ReadX+0x98>
 80028dc:	89fa      	ldrh	r2, [r7, #14]
 80028de:	88fb      	ldrh	r3, [r7, #6]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	b21b      	sxth	r3, r3
 80028e6:	e004      	b.n	80028f2 <TM_STMPE811_ReadX+0xa2>
 80028e8:	89fb      	ldrh	r3, [r7, #14]
 80028ea:	88fa      	ldrh	r2, [r7, #6]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	b21b      	sxth	r3, r3
 80028f2:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 80028f4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80028f8:	2b04      	cmp	r3, #4
 80028fa:	dd01      	ble.n	8002900 <TM_STMPE811_ReadX+0xb0>
        return val;
 80028fc:	89fb      	ldrh	r3, [r7, #14]
 80028fe:	e000      	b.n	8002902 <TM_STMPE811_ReadX+0xb2>
    }
    return x;
 8002900:	88fb      	ldrh	r3, [r7, #6]
}
 8002902:	4618      	mov	r0, r3
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	88888889 	.word	0x88888889

08002910 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 800291a:	204f      	movs	r0, #79	@ 0x4f
 800291c:	f7ff fda6 	bl	800246c <STMPE811_Read>
 8002920:	4603      	mov	r3, r0
 8002922:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8002924:	2050      	movs	r0, #80	@ 0x50
 8002926:	f7ff fda1 	bl	800246c <STMPE811_Read>
 800292a:	4603      	mov	r3, r0
 800292c:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 800292e:	7a7b      	ldrb	r3, [r7, #9]
 8002930:	b21b      	sxth	r3, r3
 8002932:	021b      	lsls	r3, r3, #8
 8002934:	b21a      	sxth	r2, r3
 8002936:	7a3b      	ldrb	r3, [r7, #8]
 8002938:	b21b      	sxth	r3, r3
 800293a:	4313      	orrs	r3, r2
 800293c:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 800293e:	89fb      	ldrh	r3, [r7, #14]
 8002940:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002944:	b29b      	uxth	r3, r3
 8002946:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8002948:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800294c:	4a18      	ldr	r2, [pc, #96]	@ (80029b0 <TM_STMPE811_ReadY+0xa0>)
 800294e:	fb82 1203 	smull	r1, r2, r2, r3
 8002952:	1052      	asrs	r2, r2, #1
 8002954:	17db      	asrs	r3, r3, #31
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 800295a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800295e:	2b00      	cmp	r3, #0
 8002960:	dc02      	bgt.n	8002968 <TM_STMPE811_ReadY+0x58>
        val = 0;
 8002962:	2300      	movs	r3, #0
 8002964:	81fb      	strh	r3, [r7, #14]
 8002966:	e007      	b.n	8002978 <TM_STMPE811_ReadY+0x68>
    } else if (val >= 320) {
 8002968:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800296c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002970:	db02      	blt.n	8002978 <TM_STMPE811_ReadY+0x68>
        val = 319;
 8002972:	f240 133f 	movw	r3, #319	@ 0x13f
 8002976:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8002978:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800297c:	88fb      	ldrh	r3, [r7, #6]
 800297e:	429a      	cmp	r2, r3
 8002980:	dd05      	ble.n	800298e <TM_STMPE811_ReadY+0x7e>
 8002982:	89fa      	ldrh	r2, [r7, #14]
 8002984:	88fb      	ldrh	r3, [r7, #6]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	b29b      	uxth	r3, r3
 800298a:	b21b      	sxth	r3, r3
 800298c:	e004      	b.n	8002998 <TM_STMPE811_ReadY+0x88>
 800298e:	89fb      	ldrh	r3, [r7, #14]
 8002990:	88fa      	ldrh	r2, [r7, #6]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	b29b      	uxth	r3, r3
 8002996:	b21b      	sxth	r3, r3
 8002998:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 800299a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800299e:	2b04      	cmp	r3, #4
 80029a0:	dd01      	ble.n	80029a6 <TM_STMPE811_ReadY+0x96>
        return val;
 80029a2:	89fb      	ldrh	r3, [r7, #14]
 80029a4:	e000      	b.n	80029a8 <TM_STMPE811_ReadY+0x98>
    }
    return y;
 80029a6:	88fb      	ldrh	r3, [r7, #6]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	2e8ba2e9 	.word	0x2e8ba2e9

080029b4 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
}
 80029b8:	bf00      	nop
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr

080029c2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b086      	sub	sp, #24
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	60f8      	str	r0, [r7, #12]
 80029ca:	60b9      	str	r1, [r7, #8]
 80029cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ce:	2300      	movs	r3, #0
 80029d0:	617b      	str	r3, [r7, #20]
 80029d2:	e00a      	b.n	80029ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80029d4:	f3af 8000 	nop.w
 80029d8:	4601      	mov	r1, r0
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	1c5a      	adds	r2, r3, #1
 80029de:	60ba      	str	r2, [r7, #8]
 80029e0:	b2ca      	uxtb	r2, r1
 80029e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	3301      	adds	r3, #1
 80029e8:	617b      	str	r3, [r7, #20]
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	dbf0      	blt.n	80029d4 <_read+0x12>
  }

  return len;
 80029f2:	687b      	ldr	r3, [r7, #4]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3718      	adds	r7, #24
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a08:	2300      	movs	r3, #0
 8002a0a:	617b      	str	r3, [r7, #20]
 8002a0c:	e009      	b.n	8002a22 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	1c5a      	adds	r2, r3, #1
 8002a12:	60ba      	str	r2, [r7, #8]
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	617b      	str	r3, [r7, #20]
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	dbf1      	blt.n	8002a0e <_write+0x12>
  }
  return len;
 8002a2a:	687b      	ldr	r3, [r7, #4]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3718      	adds	r7, #24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <_close>:

int _close(int file)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a5c:	605a      	str	r2, [r3, #4]
  return 0;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <_isatty>:

int _isatty(int file)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a74:	2301      	movs	r3, #1
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b085      	sub	sp, #20
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	60f8      	str	r0, [r7, #12]
 8002a8a:	60b9      	str	r1, [r7, #8]
 8002a8c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002aa4:	4a14      	ldr	r2, [pc, #80]	@ (8002af8 <_sbrk+0x5c>)
 8002aa6:	4b15      	ldr	r3, [pc, #84]	@ (8002afc <_sbrk+0x60>)
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ab0:	4b13      	ldr	r3, [pc, #76]	@ (8002b00 <_sbrk+0x64>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d102      	bne.n	8002abe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ab8:	4b11      	ldr	r3, [pc, #68]	@ (8002b00 <_sbrk+0x64>)
 8002aba:	4a12      	ldr	r2, [pc, #72]	@ (8002b04 <_sbrk+0x68>)
 8002abc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002abe:	4b10      	ldr	r3, [pc, #64]	@ (8002b00 <_sbrk+0x64>)
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d207      	bcs.n	8002adc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002acc:	f003 fd66 	bl	800659c <__errno>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	220c      	movs	r2, #12
 8002ad4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ad6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002ada:	e009      	b.n	8002af0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002adc:	4b08      	ldr	r3, [pc, #32]	@ (8002b00 <_sbrk+0x64>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ae2:	4b07      	ldr	r3, [pc, #28]	@ (8002b00 <_sbrk+0x64>)
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4413      	add	r3, r2
 8002aea:	4a05      	ldr	r2, [pc, #20]	@ (8002b00 <_sbrk+0x64>)
 8002aec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002aee:	68fb      	ldr	r3, [r7, #12]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	20030000 	.word	0x20030000
 8002afc:	00000400 	.word	0x00000400
 8002b00:	20025c10 	.word	0x20025c10
 8002b04:	20025d68 	.word	0x20025d68

08002b08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b0c:	4b06      	ldr	r3, [pc, #24]	@ (8002b28 <SystemInit+0x20>)
 8002b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b12:	4a05      	ldr	r2, [pc, #20]	@ (8002b28 <SystemInit+0x20>)
 8002b14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b1c:	bf00      	nop
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	e000ed00 	.word	0xe000ed00

08002b2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002b2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b64 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b30:	f7ff ffea 	bl	8002b08 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b34:	480c      	ldr	r0, [pc, #48]	@ (8002b68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b36:	490d      	ldr	r1, [pc, #52]	@ (8002b6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b38:	4a0d      	ldr	r2, [pc, #52]	@ (8002b70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b3c:	e002      	b.n	8002b44 <LoopCopyDataInit>

08002b3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b42:	3304      	adds	r3, #4

08002b44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b48:	d3f9      	bcc.n	8002b3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b4a:	4a0a      	ldr	r2, [pc, #40]	@ (8002b74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b4c:	4c0a      	ldr	r4, [pc, #40]	@ (8002b78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b50:	e001      	b.n	8002b56 <LoopFillZerobss>

08002b52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b54:	3204      	adds	r2, #4

08002b56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b58:	d3fb      	bcc.n	8002b52 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002b5a:	f003 fd25 	bl	80065a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b5e:	f7fe fd6c 	bl	800163a <main>
  bx  lr    
 8002b62:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002b64:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002b68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b6c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002b70:	08008014 	.word	0x08008014
  ldr r2, =_sbss
 8002b74:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002b78:	20025d64 	.word	0x20025d64

08002b7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b7c:	e7fe      	b.n	8002b7c <ADC_IRQHandler>
	...

08002b80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b84:	4b0e      	ldr	r3, [pc, #56]	@ (8002bc0 <HAL_Init+0x40>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a0d      	ldr	r2, [pc, #52]	@ (8002bc0 <HAL_Init+0x40>)
 8002b8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b90:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc0 <HAL_Init+0x40>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a0a      	ldr	r2, [pc, #40]	@ (8002bc0 <HAL_Init+0x40>)
 8002b96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b9c:	4b08      	ldr	r3, [pc, #32]	@ (8002bc0 <HAL_Init+0x40>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a07      	ldr	r2, [pc, #28]	@ (8002bc0 <HAL_Init+0x40>)
 8002ba2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ba6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ba8:	2003      	movs	r0, #3
 8002baa:	f000 f94f 	bl	8002e4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bae:	2000      	movs	r0, #0
 8002bb0:	f000 f808 	bl	8002bc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bb4:	f7ff f922 	bl	8001dfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40023c00 	.word	0x40023c00

08002bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bcc:	4b12      	ldr	r3, [pc, #72]	@ (8002c18 <HAL_InitTick+0x54>)
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	4b12      	ldr	r3, [pc, #72]	@ (8002c1c <HAL_InitTick+0x58>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 f967 	bl	8002eb6 <HAL_SYSTICK_Config>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e00e      	b.n	8002c10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b0f      	cmp	r3, #15
 8002bf6:	d80a      	bhi.n	8002c0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c00:	f000 f92f 	bl	8002e62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c04:	4a06      	ldr	r2, [pc, #24]	@ (8002c20 <HAL_InitTick+0x5c>)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	e000      	b.n	8002c10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	20000010 	.word	0x20000010
 8002c1c:	20000018 	.word	0x20000018
 8002c20:	20000014 	.word	0x20000014

08002c24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c28:	4b06      	ldr	r3, [pc, #24]	@ (8002c44 <HAL_IncTick+0x20>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	4b06      	ldr	r3, [pc, #24]	@ (8002c48 <HAL_IncTick+0x24>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4413      	add	r3, r2
 8002c34:	4a04      	ldr	r2, [pc, #16]	@ (8002c48 <HAL_IncTick+0x24>)
 8002c36:	6013      	str	r3, [r2, #0]
}
 8002c38:	bf00      	nop
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	20000018 	.word	0x20000018
 8002c48:	20025c14 	.word	0x20025c14

08002c4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c50:	4b03      	ldr	r3, [pc, #12]	@ (8002c60 <HAL_GetTick+0x14>)
 8002c52:	681b      	ldr	r3, [r3, #0]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	20025c14 	.word	0x20025c14

08002c64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c6c:	f7ff ffee 	bl	8002c4c <HAL_GetTick>
 8002c70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c7c:	d005      	beq.n	8002c8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8002ca8 <HAL_Delay+0x44>)
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	461a      	mov	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	4413      	add	r3, r2
 8002c88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c8a:	bf00      	nop
 8002c8c:	f7ff ffde 	bl	8002c4c <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d8f7      	bhi.n	8002c8c <HAL_Delay+0x28>
  {
  }
}
 8002c9c:	bf00      	nop
 8002c9e:	bf00      	nop
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	20000018 	.word	0x20000018

08002cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8002cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cc2:	68ba      	ldr	r2, [r7, #8]
 8002cc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002cc8:	4013      	ands	r3, r2
 8002cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002cd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cde:	4a04      	ldr	r2, [pc, #16]	@ (8002cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	60d3      	str	r3, [r2, #12]
}
 8002ce4:	bf00      	nop
 8002ce6:	3714      	adds	r7, #20
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	e000ed00 	.word	0xe000ed00

08002cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cf8:	4b04      	ldr	r3, [pc, #16]	@ (8002d0c <__NVIC_GetPriorityGrouping+0x18>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	0a1b      	lsrs	r3, r3, #8
 8002cfe:	f003 0307 	and.w	r3, r3, #7
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	e000ed00 	.word	0xe000ed00

08002d10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	4603      	mov	r3, r0
 8002d18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	db0b      	blt.n	8002d3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d22:	79fb      	ldrb	r3, [r7, #7]
 8002d24:	f003 021f 	and.w	r2, r3, #31
 8002d28:	4907      	ldr	r1, [pc, #28]	@ (8002d48 <__NVIC_EnableIRQ+0x38>)
 8002d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2e:	095b      	lsrs	r3, r3, #5
 8002d30:	2001      	movs	r0, #1
 8002d32:	fa00 f202 	lsl.w	r2, r0, r2
 8002d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	e000e100 	.word	0xe000e100

08002d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	4603      	mov	r3, r0
 8002d54:	6039      	str	r1, [r7, #0]
 8002d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	db0a      	blt.n	8002d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	490c      	ldr	r1, [pc, #48]	@ (8002d98 <__NVIC_SetPriority+0x4c>)
 8002d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6a:	0112      	lsls	r2, r2, #4
 8002d6c:	b2d2      	uxtb	r2, r2
 8002d6e:	440b      	add	r3, r1
 8002d70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d74:	e00a      	b.n	8002d8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	4908      	ldr	r1, [pc, #32]	@ (8002d9c <__NVIC_SetPriority+0x50>)
 8002d7c:	79fb      	ldrb	r3, [r7, #7]
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	3b04      	subs	r3, #4
 8002d84:	0112      	lsls	r2, r2, #4
 8002d86:	b2d2      	uxtb	r2, r2
 8002d88:	440b      	add	r3, r1
 8002d8a:	761a      	strb	r2, [r3, #24]
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	e000e100 	.word	0xe000e100
 8002d9c:	e000ed00 	.word	0xe000ed00

08002da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b089      	sub	sp, #36	@ 0x24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	f1c3 0307 	rsb	r3, r3, #7
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	bf28      	it	cs
 8002dbe:	2304      	movcs	r3, #4
 8002dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	2b06      	cmp	r3, #6
 8002dc8:	d902      	bls.n	8002dd0 <NVIC_EncodePriority+0x30>
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	3b03      	subs	r3, #3
 8002dce:	e000      	b.n	8002dd2 <NVIC_EncodePriority+0x32>
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	43da      	mvns	r2, r3
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	401a      	ands	r2, r3
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002de8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	fa01 f303 	lsl.w	r3, r1, r3
 8002df2:	43d9      	mvns	r1, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df8:	4313      	orrs	r3, r2
         );
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3724      	adds	r7, #36	@ 0x24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
	...

08002e08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e18:	d301      	bcc.n	8002e1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e00f      	b.n	8002e3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e1e:	4a0a      	ldr	r2, [pc, #40]	@ (8002e48 <SysTick_Config+0x40>)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e26:	210f      	movs	r1, #15
 8002e28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002e2c:	f7ff ff8e 	bl	8002d4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e30:	4b05      	ldr	r3, [pc, #20]	@ (8002e48 <SysTick_Config+0x40>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e36:	4b04      	ldr	r3, [pc, #16]	@ (8002e48 <SysTick_Config+0x40>)
 8002e38:	2207      	movs	r2, #7
 8002e3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	e000e010 	.word	0xe000e010

08002e4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f7ff ff29 	bl	8002cac <__NVIC_SetPriorityGrouping>
}
 8002e5a:	bf00      	nop
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b086      	sub	sp, #24
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	4603      	mov	r3, r0
 8002e6a:	60b9      	str	r1, [r7, #8]
 8002e6c:	607a      	str	r2, [r7, #4]
 8002e6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e70:	2300      	movs	r3, #0
 8002e72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e74:	f7ff ff3e 	bl	8002cf4 <__NVIC_GetPriorityGrouping>
 8002e78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	68b9      	ldr	r1, [r7, #8]
 8002e7e:	6978      	ldr	r0, [r7, #20]
 8002e80:	f7ff ff8e 	bl	8002da0 <NVIC_EncodePriority>
 8002e84:	4602      	mov	r2, r0
 8002e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e8a:	4611      	mov	r1, r2
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff ff5d 	bl	8002d4c <__NVIC_SetPriority>
}
 8002e92:	bf00      	nop
 8002e94:	3718      	adds	r7, #24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b082      	sub	sp, #8
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff ff31 	bl	8002d10 <__NVIC_EnableIRQ>
}
 8002eae:	bf00      	nop
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b082      	sub	sp, #8
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7ff ffa2 	bl	8002e08 <SysTick_Config>
 8002ec4:	4603      	mov	r3, r0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
	...

08002ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b089      	sub	sp, #36	@ 0x24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002eda:	2300      	movs	r3, #0
 8002edc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	61fb      	str	r3, [r7, #28]
 8002eea:	e177      	b.n	80031dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002eec:	2201      	movs	r2, #1
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	4013      	ands	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	f040 8166 	bne.w	80031d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f003 0303 	and.w	r3, r3, #3
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d005      	beq.n	8002f22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d130      	bne.n	8002f84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	2203      	movs	r2, #3
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	43db      	mvns	r3, r3
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	4013      	ands	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	68da      	ldr	r2, [r3, #12]
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f58:	2201      	movs	r2, #1
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	43db      	mvns	r3, r3
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	4013      	ands	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	091b      	lsrs	r3, r3, #4
 8002f6e:	f003 0201 	and.w	r2, r3, #1
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f003 0303 	and.w	r3, r3, #3
 8002f8c:	2b03      	cmp	r3, #3
 8002f8e:	d017      	beq.n	8002fc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	2203      	movs	r2, #3
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f003 0303 	and.w	r3, r3, #3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d123      	bne.n	8003014 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	08da      	lsrs	r2, r3, #3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3208      	adds	r2, #8
 8002fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	220f      	movs	r2, #15
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	4013      	ands	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	691a      	ldr	r2, [r3, #16]
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	4313      	orrs	r3, r2
 8003004:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	08da      	lsrs	r2, r3, #3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	3208      	adds	r2, #8
 800300e:	69b9      	ldr	r1, [r7, #24]
 8003010:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	2203      	movs	r2, #3
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	43db      	mvns	r3, r3
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	4013      	ands	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f003 0203 	and.w	r2, r3, #3
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	4313      	orrs	r3, r2
 8003040:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003050:	2b00      	cmp	r3, #0
 8003052:	f000 80c0 	beq.w	80031d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003056:	2300      	movs	r3, #0
 8003058:	60fb      	str	r3, [r7, #12]
 800305a:	4b66      	ldr	r3, [pc, #408]	@ (80031f4 <HAL_GPIO_Init+0x324>)
 800305c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800305e:	4a65      	ldr	r2, [pc, #404]	@ (80031f4 <HAL_GPIO_Init+0x324>)
 8003060:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003064:	6453      	str	r3, [r2, #68]	@ 0x44
 8003066:	4b63      	ldr	r3, [pc, #396]	@ (80031f4 <HAL_GPIO_Init+0x324>)
 8003068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800306a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800306e:	60fb      	str	r3, [r7, #12]
 8003070:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003072:	4a61      	ldr	r2, [pc, #388]	@ (80031f8 <HAL_GPIO_Init+0x328>)
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	089b      	lsrs	r3, r3, #2
 8003078:	3302      	adds	r3, #2
 800307a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800307e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	f003 0303 	and.w	r3, r3, #3
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	220f      	movs	r2, #15
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	43db      	mvns	r3, r3
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	4013      	ands	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a58      	ldr	r2, [pc, #352]	@ (80031fc <HAL_GPIO_Init+0x32c>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d037      	beq.n	800310e <HAL_GPIO_Init+0x23e>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a57      	ldr	r2, [pc, #348]	@ (8003200 <HAL_GPIO_Init+0x330>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d031      	beq.n	800310a <HAL_GPIO_Init+0x23a>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a56      	ldr	r2, [pc, #344]	@ (8003204 <HAL_GPIO_Init+0x334>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d02b      	beq.n	8003106 <HAL_GPIO_Init+0x236>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a55      	ldr	r2, [pc, #340]	@ (8003208 <HAL_GPIO_Init+0x338>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d025      	beq.n	8003102 <HAL_GPIO_Init+0x232>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a54      	ldr	r2, [pc, #336]	@ (800320c <HAL_GPIO_Init+0x33c>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d01f      	beq.n	80030fe <HAL_GPIO_Init+0x22e>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a53      	ldr	r2, [pc, #332]	@ (8003210 <HAL_GPIO_Init+0x340>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d019      	beq.n	80030fa <HAL_GPIO_Init+0x22a>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a52      	ldr	r2, [pc, #328]	@ (8003214 <HAL_GPIO_Init+0x344>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d013      	beq.n	80030f6 <HAL_GPIO_Init+0x226>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a51      	ldr	r2, [pc, #324]	@ (8003218 <HAL_GPIO_Init+0x348>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d00d      	beq.n	80030f2 <HAL_GPIO_Init+0x222>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a50      	ldr	r2, [pc, #320]	@ (800321c <HAL_GPIO_Init+0x34c>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d007      	beq.n	80030ee <HAL_GPIO_Init+0x21e>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a4f      	ldr	r2, [pc, #316]	@ (8003220 <HAL_GPIO_Init+0x350>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d101      	bne.n	80030ea <HAL_GPIO_Init+0x21a>
 80030e6:	2309      	movs	r3, #9
 80030e8:	e012      	b.n	8003110 <HAL_GPIO_Init+0x240>
 80030ea:	230a      	movs	r3, #10
 80030ec:	e010      	b.n	8003110 <HAL_GPIO_Init+0x240>
 80030ee:	2308      	movs	r3, #8
 80030f0:	e00e      	b.n	8003110 <HAL_GPIO_Init+0x240>
 80030f2:	2307      	movs	r3, #7
 80030f4:	e00c      	b.n	8003110 <HAL_GPIO_Init+0x240>
 80030f6:	2306      	movs	r3, #6
 80030f8:	e00a      	b.n	8003110 <HAL_GPIO_Init+0x240>
 80030fa:	2305      	movs	r3, #5
 80030fc:	e008      	b.n	8003110 <HAL_GPIO_Init+0x240>
 80030fe:	2304      	movs	r3, #4
 8003100:	e006      	b.n	8003110 <HAL_GPIO_Init+0x240>
 8003102:	2303      	movs	r3, #3
 8003104:	e004      	b.n	8003110 <HAL_GPIO_Init+0x240>
 8003106:	2302      	movs	r3, #2
 8003108:	e002      	b.n	8003110 <HAL_GPIO_Init+0x240>
 800310a:	2301      	movs	r3, #1
 800310c:	e000      	b.n	8003110 <HAL_GPIO_Init+0x240>
 800310e:	2300      	movs	r3, #0
 8003110:	69fa      	ldr	r2, [r7, #28]
 8003112:	f002 0203 	and.w	r2, r2, #3
 8003116:	0092      	lsls	r2, r2, #2
 8003118:	4093      	lsls	r3, r2
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	4313      	orrs	r3, r2
 800311e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003120:	4935      	ldr	r1, [pc, #212]	@ (80031f8 <HAL_GPIO_Init+0x328>)
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	089b      	lsrs	r3, r3, #2
 8003126:	3302      	adds	r3, #2
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800312e:	4b3d      	ldr	r3, [pc, #244]	@ (8003224 <HAL_GPIO_Init+0x354>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	43db      	mvns	r3, r3
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	4013      	ands	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d003      	beq.n	8003152 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	4313      	orrs	r3, r2
 8003150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003152:	4a34      	ldr	r2, [pc, #208]	@ (8003224 <HAL_GPIO_Init+0x354>)
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003158:	4b32      	ldr	r3, [pc, #200]	@ (8003224 <HAL_GPIO_Init+0x354>)
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	43db      	mvns	r3, r3
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4013      	ands	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d003      	beq.n	800317c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	4313      	orrs	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800317c:	4a29      	ldr	r2, [pc, #164]	@ (8003224 <HAL_GPIO_Init+0x354>)
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003182:	4b28      	ldr	r3, [pc, #160]	@ (8003224 <HAL_GPIO_Init+0x354>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	43db      	mvns	r3, r3
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	4013      	ands	r3, r2
 8003190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031a6:	4a1f      	ldr	r2, [pc, #124]	@ (8003224 <HAL_GPIO_Init+0x354>)
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031ac:	4b1d      	ldr	r3, [pc, #116]	@ (8003224 <HAL_GPIO_Init+0x354>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	43db      	mvns	r3, r3
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	4013      	ands	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d003      	beq.n	80031d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031d0:	4a14      	ldr	r2, [pc, #80]	@ (8003224 <HAL_GPIO_Init+0x354>)
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	3301      	adds	r3, #1
 80031da:	61fb      	str	r3, [r7, #28]
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	2b0f      	cmp	r3, #15
 80031e0:	f67f ae84 	bls.w	8002eec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031e4:	bf00      	nop
 80031e6:	bf00      	nop
 80031e8:	3724      	adds	r7, #36	@ 0x24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	40023800 	.word	0x40023800
 80031f8:	40013800 	.word	0x40013800
 80031fc:	40020000 	.word	0x40020000
 8003200:	40020400 	.word	0x40020400
 8003204:	40020800 	.word	0x40020800
 8003208:	40020c00 	.word	0x40020c00
 800320c:	40021000 	.word	0x40021000
 8003210:	40021400 	.word	0x40021400
 8003214:	40021800 	.word	0x40021800
 8003218:	40021c00 	.word	0x40021c00
 800321c:	40022000 	.word	0x40022000
 8003220:	40022400 	.word	0x40022400
 8003224:	40013c00 	.word	0x40013c00

08003228 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003228:	b480      	push	{r7}
 800322a:	b087      	sub	sp, #28
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003232:	2300      	movs	r3, #0
 8003234:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003236:	2300      	movs	r3, #0
 8003238:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800323a:	2300      	movs	r3, #0
 800323c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800323e:	2300      	movs	r3, #0
 8003240:	617b      	str	r3, [r7, #20]
 8003242:	e0d9      	b.n	80033f8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003244:	2201      	movs	r2, #1
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	4013      	ands	r3, r2
 8003254:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	429a      	cmp	r2, r3
 800325c:	f040 80c9 	bne.w	80033f2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003260:	4a6b      	ldr	r2, [pc, #428]	@ (8003410 <HAL_GPIO_DeInit+0x1e8>)
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	089b      	lsrs	r3, r3, #2
 8003266:	3302      	adds	r3, #2
 8003268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800326c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	f003 0303 	and.w	r3, r3, #3
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	220f      	movs	r2, #15
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	68ba      	ldr	r2, [r7, #8]
 800327e:	4013      	ands	r3, r2
 8003280:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a63      	ldr	r2, [pc, #396]	@ (8003414 <HAL_GPIO_DeInit+0x1ec>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d037      	beq.n	80032fa <HAL_GPIO_DeInit+0xd2>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a62      	ldr	r2, [pc, #392]	@ (8003418 <HAL_GPIO_DeInit+0x1f0>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d031      	beq.n	80032f6 <HAL_GPIO_DeInit+0xce>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a61      	ldr	r2, [pc, #388]	@ (800341c <HAL_GPIO_DeInit+0x1f4>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d02b      	beq.n	80032f2 <HAL_GPIO_DeInit+0xca>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a60      	ldr	r2, [pc, #384]	@ (8003420 <HAL_GPIO_DeInit+0x1f8>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d025      	beq.n	80032ee <HAL_GPIO_DeInit+0xc6>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a5f      	ldr	r2, [pc, #380]	@ (8003424 <HAL_GPIO_DeInit+0x1fc>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d01f      	beq.n	80032ea <HAL_GPIO_DeInit+0xc2>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a5e      	ldr	r2, [pc, #376]	@ (8003428 <HAL_GPIO_DeInit+0x200>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d019      	beq.n	80032e6 <HAL_GPIO_DeInit+0xbe>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a5d      	ldr	r2, [pc, #372]	@ (800342c <HAL_GPIO_DeInit+0x204>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d013      	beq.n	80032e2 <HAL_GPIO_DeInit+0xba>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a5c      	ldr	r2, [pc, #368]	@ (8003430 <HAL_GPIO_DeInit+0x208>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d00d      	beq.n	80032de <HAL_GPIO_DeInit+0xb6>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a5b      	ldr	r2, [pc, #364]	@ (8003434 <HAL_GPIO_DeInit+0x20c>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d007      	beq.n	80032da <HAL_GPIO_DeInit+0xb2>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a5a      	ldr	r2, [pc, #360]	@ (8003438 <HAL_GPIO_DeInit+0x210>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d101      	bne.n	80032d6 <HAL_GPIO_DeInit+0xae>
 80032d2:	2309      	movs	r3, #9
 80032d4:	e012      	b.n	80032fc <HAL_GPIO_DeInit+0xd4>
 80032d6:	230a      	movs	r3, #10
 80032d8:	e010      	b.n	80032fc <HAL_GPIO_DeInit+0xd4>
 80032da:	2308      	movs	r3, #8
 80032dc:	e00e      	b.n	80032fc <HAL_GPIO_DeInit+0xd4>
 80032de:	2307      	movs	r3, #7
 80032e0:	e00c      	b.n	80032fc <HAL_GPIO_DeInit+0xd4>
 80032e2:	2306      	movs	r3, #6
 80032e4:	e00a      	b.n	80032fc <HAL_GPIO_DeInit+0xd4>
 80032e6:	2305      	movs	r3, #5
 80032e8:	e008      	b.n	80032fc <HAL_GPIO_DeInit+0xd4>
 80032ea:	2304      	movs	r3, #4
 80032ec:	e006      	b.n	80032fc <HAL_GPIO_DeInit+0xd4>
 80032ee:	2303      	movs	r3, #3
 80032f0:	e004      	b.n	80032fc <HAL_GPIO_DeInit+0xd4>
 80032f2:	2302      	movs	r3, #2
 80032f4:	e002      	b.n	80032fc <HAL_GPIO_DeInit+0xd4>
 80032f6:	2301      	movs	r3, #1
 80032f8:	e000      	b.n	80032fc <HAL_GPIO_DeInit+0xd4>
 80032fa:	2300      	movs	r3, #0
 80032fc:	697a      	ldr	r2, [r7, #20]
 80032fe:	f002 0203 	and.w	r2, r2, #3
 8003302:	0092      	lsls	r2, r2, #2
 8003304:	4093      	lsls	r3, r2
 8003306:	68ba      	ldr	r2, [r7, #8]
 8003308:	429a      	cmp	r2, r3
 800330a:	d132      	bne.n	8003372 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800330c:	4b4b      	ldr	r3, [pc, #300]	@ (800343c <HAL_GPIO_DeInit+0x214>)
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	43db      	mvns	r3, r3
 8003314:	4949      	ldr	r1, [pc, #292]	@ (800343c <HAL_GPIO_DeInit+0x214>)
 8003316:	4013      	ands	r3, r2
 8003318:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800331a:	4b48      	ldr	r3, [pc, #288]	@ (800343c <HAL_GPIO_DeInit+0x214>)
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	43db      	mvns	r3, r3
 8003322:	4946      	ldr	r1, [pc, #280]	@ (800343c <HAL_GPIO_DeInit+0x214>)
 8003324:	4013      	ands	r3, r2
 8003326:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003328:	4b44      	ldr	r3, [pc, #272]	@ (800343c <HAL_GPIO_DeInit+0x214>)
 800332a:	68da      	ldr	r2, [r3, #12]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	43db      	mvns	r3, r3
 8003330:	4942      	ldr	r1, [pc, #264]	@ (800343c <HAL_GPIO_DeInit+0x214>)
 8003332:	4013      	ands	r3, r2
 8003334:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003336:	4b41      	ldr	r3, [pc, #260]	@ (800343c <HAL_GPIO_DeInit+0x214>)
 8003338:	689a      	ldr	r2, [r3, #8]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	43db      	mvns	r3, r3
 800333e:	493f      	ldr	r1, [pc, #252]	@ (800343c <HAL_GPIO_DeInit+0x214>)
 8003340:	4013      	ands	r3, r2
 8003342:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	220f      	movs	r2, #15
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003354:	4a2e      	ldr	r2, [pc, #184]	@ (8003410 <HAL_GPIO_DeInit+0x1e8>)
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	089b      	lsrs	r3, r3, #2
 800335a:	3302      	adds	r3, #2
 800335c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	43da      	mvns	r2, r3
 8003364:	482a      	ldr	r0, [pc, #168]	@ (8003410 <HAL_GPIO_DeInit+0x1e8>)
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	089b      	lsrs	r3, r3, #2
 800336a:	400a      	ands	r2, r1
 800336c:	3302      	adds	r3, #2
 800336e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	2103      	movs	r1, #3
 800337c:	fa01 f303 	lsl.w	r3, r1, r3
 8003380:	43db      	mvns	r3, r3
 8003382:	401a      	ands	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	08da      	lsrs	r2, r3, #3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3208      	adds	r2, #8
 8003390:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	220f      	movs	r2, #15
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	43db      	mvns	r3, r3
 80033a4:	697a      	ldr	r2, [r7, #20]
 80033a6:	08d2      	lsrs	r2, r2, #3
 80033a8:	4019      	ands	r1, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	3208      	adds	r2, #8
 80033ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68da      	ldr	r2, [r3, #12]
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	2103      	movs	r1, #3
 80033bc:	fa01 f303 	lsl.w	r3, r1, r3
 80033c0:	43db      	mvns	r3, r3
 80033c2:	401a      	ands	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	2101      	movs	r1, #1
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	fa01 f303 	lsl.w	r3, r1, r3
 80033d4:	43db      	mvns	r3, r3
 80033d6:	401a      	ands	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	2103      	movs	r1, #3
 80033e6:	fa01 f303 	lsl.w	r3, r1, r3
 80033ea:	43db      	mvns	r3, r3
 80033ec:	401a      	ands	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	3301      	adds	r3, #1
 80033f6:	617b      	str	r3, [r7, #20]
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	2b0f      	cmp	r3, #15
 80033fc:	f67f af22 	bls.w	8003244 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003400:	bf00      	nop
 8003402:	bf00      	nop
 8003404:	371c      	adds	r7, #28
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	40013800 	.word	0x40013800
 8003414:	40020000 	.word	0x40020000
 8003418:	40020400 	.word	0x40020400
 800341c:	40020800 	.word	0x40020800
 8003420:	40020c00 	.word	0x40020c00
 8003424:	40021000 	.word	0x40021000
 8003428:	40021400 	.word	0x40021400
 800342c:	40021800 	.word	0x40021800
 8003430:	40021c00 	.word	0x40021c00
 8003434:	40022000 	.word	0x40022000
 8003438:	40022400 	.word	0x40022400
 800343c:	40013c00 	.word	0x40013c00

08003440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	460b      	mov	r3, r1
 800344a:	807b      	strh	r3, [r7, #2]
 800344c:	4613      	mov	r3, r2
 800344e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003450:	787b      	ldrb	r3, [r7, #1]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003456:	887a      	ldrh	r2, [r7, #2]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800345c:	e003      	b.n	8003466 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800345e:	887b      	ldrh	r3, [r7, #2]
 8003460:	041a      	lsls	r2, r3, #16
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	619a      	str	r2, [r3, #24]
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
	...

08003474 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e12b      	b.n	80036de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d106      	bne.n	80034a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7fe fcd6 	bl	8001e4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2224      	movs	r2, #36	@ 0x24
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 0201 	bic.w	r2, r2, #1
 80034b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034d8:	f001 ff82 	bl	80053e0 <HAL_RCC_GetPCLK1Freq>
 80034dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	4a81      	ldr	r2, [pc, #516]	@ (80036e8 <HAL_I2C_Init+0x274>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d807      	bhi.n	80034f8 <HAL_I2C_Init+0x84>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	4a80      	ldr	r2, [pc, #512]	@ (80036ec <HAL_I2C_Init+0x278>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	bf94      	ite	ls
 80034f0:	2301      	movls	r3, #1
 80034f2:	2300      	movhi	r3, #0
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	e006      	b.n	8003506 <HAL_I2C_Init+0x92>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	4a7d      	ldr	r2, [pc, #500]	@ (80036f0 <HAL_I2C_Init+0x27c>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	bf94      	ite	ls
 8003500:	2301      	movls	r3, #1
 8003502:	2300      	movhi	r3, #0
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e0e7      	b.n	80036de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	4a78      	ldr	r2, [pc, #480]	@ (80036f4 <HAL_I2C_Init+0x280>)
 8003512:	fba2 2303 	umull	r2, r3, r2, r3
 8003516:	0c9b      	lsrs	r3, r3, #18
 8003518:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68ba      	ldr	r2, [r7, #8]
 800352a:	430a      	orrs	r2, r1
 800352c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	4a6a      	ldr	r2, [pc, #424]	@ (80036e8 <HAL_I2C_Init+0x274>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d802      	bhi.n	8003548 <HAL_I2C_Init+0xd4>
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	3301      	adds	r3, #1
 8003546:	e009      	b.n	800355c <HAL_I2C_Init+0xe8>
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800354e:	fb02 f303 	mul.w	r3, r2, r3
 8003552:	4a69      	ldr	r2, [pc, #420]	@ (80036f8 <HAL_I2C_Init+0x284>)
 8003554:	fba2 2303 	umull	r2, r3, r2, r3
 8003558:	099b      	lsrs	r3, r3, #6
 800355a:	3301      	adds	r3, #1
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	6812      	ldr	r2, [r2, #0]
 8003560:	430b      	orrs	r3, r1
 8003562:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800356e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	495c      	ldr	r1, [pc, #368]	@ (80036e8 <HAL_I2C_Init+0x274>)
 8003578:	428b      	cmp	r3, r1
 800357a:	d819      	bhi.n	80035b0 <HAL_I2C_Init+0x13c>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	1e59      	subs	r1, r3, #1
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	fbb1 f3f3 	udiv	r3, r1, r3
 800358a:	1c59      	adds	r1, r3, #1
 800358c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003590:	400b      	ands	r3, r1
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00a      	beq.n	80035ac <HAL_I2C_Init+0x138>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	1e59      	subs	r1, r3, #1
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80035a4:	3301      	adds	r3, #1
 80035a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035aa:	e051      	b.n	8003650 <HAL_I2C_Init+0x1dc>
 80035ac:	2304      	movs	r3, #4
 80035ae:	e04f      	b.n	8003650 <HAL_I2C_Init+0x1dc>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d111      	bne.n	80035dc <HAL_I2C_Init+0x168>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	1e58      	subs	r0, r3, #1
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6859      	ldr	r1, [r3, #4]
 80035c0:	460b      	mov	r3, r1
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	440b      	add	r3, r1
 80035c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ca:	3301      	adds	r3, #1
 80035cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	bf0c      	ite	eq
 80035d4:	2301      	moveq	r3, #1
 80035d6:	2300      	movne	r3, #0
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	e012      	b.n	8003602 <HAL_I2C_Init+0x18e>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	1e58      	subs	r0, r3, #1
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6859      	ldr	r1, [r3, #4]
 80035e4:	460b      	mov	r3, r1
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	440b      	add	r3, r1
 80035ea:	0099      	lsls	r1, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80035f2:	3301      	adds	r3, #1
 80035f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	bf0c      	ite	eq
 80035fc:	2301      	moveq	r3, #1
 80035fe:	2300      	movne	r3, #0
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <HAL_I2C_Init+0x196>
 8003606:	2301      	movs	r3, #1
 8003608:	e022      	b.n	8003650 <HAL_I2C_Init+0x1dc>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d10e      	bne.n	8003630 <HAL_I2C_Init+0x1bc>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	1e58      	subs	r0, r3, #1
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6859      	ldr	r1, [r3, #4]
 800361a:	460b      	mov	r3, r1
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	440b      	add	r3, r1
 8003620:	fbb0 f3f3 	udiv	r3, r0, r3
 8003624:	3301      	adds	r3, #1
 8003626:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800362a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800362e:	e00f      	b.n	8003650 <HAL_I2C_Init+0x1dc>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	1e58      	subs	r0, r3, #1
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6859      	ldr	r1, [r3, #4]
 8003638:	460b      	mov	r3, r1
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	440b      	add	r3, r1
 800363e:	0099      	lsls	r1, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	fbb0 f3f3 	udiv	r3, r0, r3
 8003646:	3301      	adds	r3, #1
 8003648:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800364c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003650:	6879      	ldr	r1, [r7, #4]
 8003652:	6809      	ldr	r1, [r1, #0]
 8003654:	4313      	orrs	r3, r2
 8003656:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	69da      	ldr	r2, [r3, #28]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	431a      	orrs	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	430a      	orrs	r2, r1
 8003672:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800367e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	6911      	ldr	r1, [r2, #16]
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	68d2      	ldr	r2, [r2, #12]
 800368a:	4311      	orrs	r1, r2
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	6812      	ldr	r2, [r2, #0]
 8003690:	430b      	orrs	r3, r1
 8003692:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	695a      	ldr	r2, [r3, #20]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	431a      	orrs	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	430a      	orrs	r2, r1
 80036ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f042 0201 	orr.w	r2, r2, #1
 80036be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2220      	movs	r2, #32
 80036ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	000186a0 	.word	0x000186a0
 80036ec:	001e847f 	.word	0x001e847f
 80036f0:	003d08ff 	.word	0x003d08ff
 80036f4:	431bde83 	.word	0x431bde83
 80036f8:	10624dd3 	.word	0x10624dd3

080036fc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b088      	sub	sp, #32
 8003700:	af02      	add	r7, sp, #8
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	4608      	mov	r0, r1
 8003706:	4611      	mov	r1, r2
 8003708:	461a      	mov	r2, r3
 800370a:	4603      	mov	r3, r0
 800370c:	817b      	strh	r3, [r7, #10]
 800370e:	460b      	mov	r3, r1
 8003710:	813b      	strh	r3, [r7, #8]
 8003712:	4613      	mov	r3, r2
 8003714:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003716:	f7ff fa99 	bl	8002c4c <HAL_GetTick>
 800371a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2b20      	cmp	r3, #32
 8003726:	f040 80d9 	bne.w	80038dc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	2319      	movs	r3, #25
 8003730:	2201      	movs	r2, #1
 8003732:	496d      	ldr	r1, [pc, #436]	@ (80038e8 <HAL_I2C_Mem_Write+0x1ec>)
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f000 fc8b 	bl	8004050 <I2C_WaitOnFlagUntilTimeout>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d001      	beq.n	8003744 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003740:	2302      	movs	r3, #2
 8003742:	e0cc      	b.n	80038de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800374a:	2b01      	cmp	r3, #1
 800374c:	d101      	bne.n	8003752 <HAL_I2C_Mem_Write+0x56>
 800374e:	2302      	movs	r3, #2
 8003750:	e0c5      	b.n	80038de <HAL_I2C_Mem_Write+0x1e2>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	2b01      	cmp	r3, #1
 8003766:	d007      	beq.n	8003778 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f042 0201 	orr.w	r2, r2, #1
 8003776:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003786:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2221      	movs	r2, #33	@ 0x21
 800378c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2240      	movs	r2, #64	@ 0x40
 8003794:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6a3a      	ldr	r2, [r7, #32]
 80037a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80037a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	4a4d      	ldr	r2, [pc, #308]	@ (80038ec <HAL_I2C_Mem_Write+0x1f0>)
 80037b8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037ba:	88f8      	ldrh	r0, [r7, #6]
 80037bc:	893a      	ldrh	r2, [r7, #8]
 80037be:	8979      	ldrh	r1, [r7, #10]
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	9301      	str	r3, [sp, #4]
 80037c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037c6:	9300      	str	r3, [sp, #0]
 80037c8:	4603      	mov	r3, r0
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f000 fac2 	bl	8003d54 <I2C_RequestMemoryWrite>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d052      	beq.n	800387c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e081      	b.n	80038de <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f000 fd50 	bl	8004284 <I2C_WaitOnTXEFlagUntilTimeout>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00d      	beq.n	8003806 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ee:	2b04      	cmp	r3, #4
 80037f0:	d107      	bne.n	8003802 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003800:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e06b      	b.n	80038de <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800380a:	781a      	ldrb	r2, [r3, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003816:	1c5a      	adds	r2, r3, #1
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003820:	3b01      	subs	r3, #1
 8003822:	b29a      	uxth	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800382c:	b29b      	uxth	r3, r3
 800382e:	3b01      	subs	r3, #1
 8003830:	b29a      	uxth	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	f003 0304 	and.w	r3, r3, #4
 8003840:	2b04      	cmp	r3, #4
 8003842:	d11b      	bne.n	800387c <HAL_I2C_Mem_Write+0x180>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003848:	2b00      	cmp	r3, #0
 800384a:	d017      	beq.n	800387c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003850:	781a      	ldrb	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800385c:	1c5a      	adds	r2, r3, #1
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003866:	3b01      	subs	r3, #1
 8003868:	b29a      	uxth	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003872:	b29b      	uxth	r3, r3
 8003874:	3b01      	subs	r3, #1
 8003876:	b29a      	uxth	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1aa      	bne.n	80037da <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f000 fd43 	bl	8004314 <I2C_WaitOnBTFFlagUntilTimeout>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00d      	beq.n	80038b0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003898:	2b04      	cmp	r3, #4
 800389a:	d107      	bne.n	80038ac <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038aa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e016      	b.n	80038de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2220      	movs	r2, #32
 80038c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80038d8:	2300      	movs	r3, #0
 80038da:	e000      	b.n	80038de <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80038dc:	2302      	movs	r3, #2
  }
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3718      	adds	r7, #24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	00100002 	.word	0x00100002
 80038ec:	ffff0000 	.word	0xffff0000

080038f0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b08c      	sub	sp, #48	@ 0x30
 80038f4:	af02      	add	r7, sp, #8
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	4608      	mov	r0, r1
 80038fa:	4611      	mov	r1, r2
 80038fc:	461a      	mov	r2, r3
 80038fe:	4603      	mov	r3, r0
 8003900:	817b      	strh	r3, [r7, #10]
 8003902:	460b      	mov	r3, r1
 8003904:	813b      	strh	r3, [r7, #8]
 8003906:	4613      	mov	r3, r2
 8003908:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800390a:	f7ff f99f 	bl	8002c4c <HAL_GetTick>
 800390e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2b20      	cmp	r3, #32
 800391a:	f040 8214 	bne.w	8003d46 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800391e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003920:	9300      	str	r3, [sp, #0]
 8003922:	2319      	movs	r3, #25
 8003924:	2201      	movs	r2, #1
 8003926:	497b      	ldr	r1, [pc, #492]	@ (8003b14 <HAL_I2C_Mem_Read+0x224>)
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f000 fb91 	bl	8004050 <I2C_WaitOnFlagUntilTimeout>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003934:	2302      	movs	r3, #2
 8003936:	e207      	b.n	8003d48 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800393e:	2b01      	cmp	r3, #1
 8003940:	d101      	bne.n	8003946 <HAL_I2C_Mem_Read+0x56>
 8003942:	2302      	movs	r3, #2
 8003944:	e200      	b.n	8003d48 <HAL_I2C_Mem_Read+0x458>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	2b01      	cmp	r3, #1
 800395a:	d007      	beq.n	800396c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f042 0201 	orr.w	r2, r2, #1
 800396a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800397a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2222      	movs	r2, #34	@ 0x22
 8003980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2240      	movs	r2, #64	@ 0x40
 8003988:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003996:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800399c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	4a5b      	ldr	r2, [pc, #364]	@ (8003b18 <HAL_I2C_Mem_Read+0x228>)
 80039ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039ae:	88f8      	ldrh	r0, [r7, #6]
 80039b0:	893a      	ldrh	r2, [r7, #8]
 80039b2:	8979      	ldrh	r1, [r7, #10]
 80039b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b6:	9301      	str	r3, [sp, #4]
 80039b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039ba:	9300      	str	r3, [sp, #0]
 80039bc:	4603      	mov	r3, r0
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f000 fa5e 	bl	8003e80 <I2C_RequestMemoryRead>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e1bc      	b.n	8003d48 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d113      	bne.n	80039fe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039d6:	2300      	movs	r3, #0
 80039d8:	623b      	str	r3, [r7, #32]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	623b      	str	r3, [r7, #32]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	623b      	str	r3, [r7, #32]
 80039ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039fa:	601a      	str	r2, [r3, #0]
 80039fc:	e190      	b.n	8003d20 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d11b      	bne.n	8003a3e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a14:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a16:	2300      	movs	r3, #0
 8003a18:	61fb      	str	r3, [r7, #28]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	61fb      	str	r3, [r7, #28]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	61fb      	str	r3, [r7, #28]
 8003a2a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a3a:	601a      	str	r2, [r3, #0]
 8003a3c:	e170      	b.n	8003d20 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d11b      	bne.n	8003a7e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a54:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a66:	2300      	movs	r3, #0
 8003a68:	61bb      	str	r3, [r7, #24]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	61bb      	str	r3, [r7, #24]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	61bb      	str	r3, [r7, #24]
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	e150      	b.n	8003d20 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a7e:	2300      	movs	r3, #0
 8003a80:	617b      	str	r3, [r7, #20]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	695b      	ldr	r3, [r3, #20]
 8003a88:	617b      	str	r3, [r7, #20]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	617b      	str	r3, [r7, #20]
 8003a92:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003a94:	e144      	b.n	8003d20 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a9a:	2b03      	cmp	r3, #3
 8003a9c:	f200 80f1 	bhi.w	8003c82 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d123      	bne.n	8003af0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aaa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f000 fc79 	bl	80043a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e145      	b.n	8003d48 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	691a      	ldr	r2, [r3, #16]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac6:	b2d2      	uxtb	r2, r2
 8003ac8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ace:	1c5a      	adds	r2, r3, #1
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003aee:	e117      	b.n	8003d20 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d14e      	bne.n	8003b96 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003afa:	9300      	str	r3, [sp, #0]
 8003afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003afe:	2200      	movs	r2, #0
 8003b00:	4906      	ldr	r1, [pc, #24]	@ (8003b1c <HAL_I2C_Mem_Read+0x22c>)
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f000 faa4 	bl	8004050 <I2C_WaitOnFlagUntilTimeout>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d008      	beq.n	8003b20 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e11a      	b.n	8003d48 <HAL_I2C_Mem_Read+0x458>
 8003b12:	bf00      	nop
 8003b14:	00100002 	.word	0x00100002
 8003b18:	ffff0000 	.word	0xffff0000
 8003b1c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	691a      	ldr	r2, [r3, #16]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b3a:	b2d2      	uxtb	r2, r2
 8003b3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b42:	1c5a      	adds	r2, r3, #1
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	691a      	ldr	r2, [r3, #16]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6c:	b2d2      	uxtb	r2, r2
 8003b6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b74:	1c5a      	adds	r2, r3, #1
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b94:	e0c4      	b.n	8003d20 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b98:	9300      	str	r3, [sp, #0]
 8003b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	496c      	ldr	r1, [pc, #432]	@ (8003d50 <HAL_I2C_Mem_Read+0x460>)
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f000 fa55 	bl	8004050 <I2C_WaitOnFlagUntilTimeout>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d001      	beq.n	8003bb0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e0cb      	b.n	8003d48 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	691a      	ldr	r2, [r3, #16]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bca:	b2d2      	uxtb	r2, r2
 8003bcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd2:	1c5a      	adds	r2, r3, #1
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	3b01      	subs	r3, #1
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf4:	9300      	str	r3, [sp, #0]
 8003bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	4955      	ldr	r1, [pc, #340]	@ (8003d50 <HAL_I2C_Mem_Read+0x460>)
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f000 fa27 	bl	8004050 <I2C_WaitOnFlagUntilTimeout>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d001      	beq.n	8003c0c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e09d      	b.n	8003d48 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	691a      	ldr	r2, [r3, #16]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c26:	b2d2      	uxtb	r2, r2
 8003c28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c2e:	1c5a      	adds	r2, r3, #1
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	3b01      	subs	r3, #1
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	691a      	ldr	r2, [r3, #16]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c58:	b2d2      	uxtb	r2, r2
 8003c5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c60:	1c5a      	adds	r2, r3, #1
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c80:	e04e      	b.n	8003d20 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c84:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f000 fb8c 	bl	80043a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e058      	b.n	8003d48 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	691a      	ldr	r2, [r3, #16]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca0:	b2d2      	uxtb	r2, r2
 8003ca2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca8:	1c5a      	adds	r2, r3, #1
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	f003 0304 	and.w	r3, r3, #4
 8003cd2:	2b04      	cmp	r3, #4
 8003cd4:	d124      	bne.n	8003d20 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cda:	2b03      	cmp	r3, #3
 8003cdc:	d107      	bne.n	8003cee <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cec:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	691a      	ldr	r2, [r3, #16]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf8:	b2d2      	uxtb	r2, r2
 8003cfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d00:	1c5a      	adds	r2, r3, #1
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f47f aeb6 	bne.w	8003a96 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003d42:	2300      	movs	r3, #0
 8003d44:	e000      	b.n	8003d48 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003d46:	2302      	movs	r3, #2
  }
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3728      	adds	r7, #40	@ 0x28
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	00010004 	.word	0x00010004

08003d54 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b088      	sub	sp, #32
 8003d58:	af02      	add	r7, sp, #8
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	4608      	mov	r0, r1
 8003d5e:	4611      	mov	r1, r2
 8003d60:	461a      	mov	r2, r3
 8003d62:	4603      	mov	r3, r0
 8003d64:	817b      	strh	r3, [r7, #10]
 8003d66:	460b      	mov	r3, r1
 8003d68:	813b      	strh	r3, [r7, #8]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d7c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	6a3b      	ldr	r3, [r7, #32]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f000 f960 	bl	8004050 <I2C_WaitOnFlagUntilTimeout>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00d      	beq.n	8003db2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003da0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003da4:	d103      	bne.n	8003dae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003dac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e05f      	b.n	8003e72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003db2:	897b      	ldrh	r3, [r7, #10]
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	461a      	mov	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003dc0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc4:	6a3a      	ldr	r2, [r7, #32]
 8003dc6:	492d      	ldr	r1, [pc, #180]	@ (8003e7c <I2C_RequestMemoryWrite+0x128>)
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f000 f9bb 	bl	8004144 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e04c      	b.n	8003e72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dd8:	2300      	movs	r3, #0
 8003dda:	617b      	str	r3, [r7, #20]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	617b      	str	r3, [r7, #20]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	617b      	str	r3, [r7, #20]
 8003dec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003df0:	6a39      	ldr	r1, [r7, #32]
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f000 fa46 	bl	8004284 <I2C_WaitOnTXEFlagUntilTimeout>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00d      	beq.n	8003e1a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e02:	2b04      	cmp	r3, #4
 8003e04:	d107      	bne.n	8003e16 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e14:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e02b      	b.n	8003e72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e1a:	88fb      	ldrh	r3, [r7, #6]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d105      	bne.n	8003e2c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e20:	893b      	ldrh	r3, [r7, #8]
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	611a      	str	r2, [r3, #16]
 8003e2a:	e021      	b.n	8003e70 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e2c:	893b      	ldrh	r3, [r7, #8]
 8003e2e:	0a1b      	lsrs	r3, r3, #8
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e3c:	6a39      	ldr	r1, [r7, #32]
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f000 fa20 	bl	8004284 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00d      	beq.n	8003e66 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4e:	2b04      	cmp	r3, #4
 8003e50:	d107      	bne.n	8003e62 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e60:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e005      	b.n	8003e72 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e66:	893b      	ldrh	r3, [r7, #8]
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3718      	adds	r7, #24
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	00010002 	.word	0x00010002

08003e80 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b088      	sub	sp, #32
 8003e84:	af02      	add	r7, sp, #8
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	4608      	mov	r0, r1
 8003e8a:	4611      	mov	r1, r2
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	4603      	mov	r3, r0
 8003e90:	817b      	strh	r3, [r7, #10]
 8003e92:	460b      	mov	r3, r1
 8003e94:	813b      	strh	r3, [r7, #8]
 8003e96:	4613      	mov	r3, r2
 8003e98:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003ea8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003eb8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	6a3b      	ldr	r3, [r7, #32]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f000 f8c2 	bl	8004050 <I2C_WaitOnFlagUntilTimeout>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00d      	beq.n	8003eee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003edc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ee0:	d103      	bne.n	8003eea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ee8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e0aa      	b.n	8004044 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003eee:	897b      	ldrh	r3, [r7, #10]
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003efc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f00:	6a3a      	ldr	r2, [r7, #32]
 8003f02:	4952      	ldr	r1, [pc, #328]	@ (800404c <I2C_RequestMemoryRead+0x1cc>)
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f000 f91d 	bl	8004144 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d001      	beq.n	8003f14 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e097      	b.n	8004044 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f14:	2300      	movs	r3, #0
 8003f16:	617b      	str	r3, [r7, #20]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	617b      	str	r3, [r7, #20]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	617b      	str	r3, [r7, #20]
 8003f28:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f2c:	6a39      	ldr	r1, [r7, #32]
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f000 f9a8 	bl	8004284 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00d      	beq.n	8003f56 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3e:	2b04      	cmp	r3, #4
 8003f40:	d107      	bne.n	8003f52 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f50:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e076      	b.n	8004044 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f56:	88fb      	ldrh	r3, [r7, #6]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d105      	bne.n	8003f68 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f5c:	893b      	ldrh	r3, [r7, #8]
 8003f5e:	b2da      	uxtb	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	611a      	str	r2, [r3, #16]
 8003f66:	e021      	b.n	8003fac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f68:	893b      	ldrh	r3, [r7, #8]
 8003f6a:	0a1b      	lsrs	r3, r3, #8
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	b2da      	uxtb	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f78:	6a39      	ldr	r1, [r7, #32]
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f000 f982 	bl	8004284 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00d      	beq.n	8003fa2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f8a:	2b04      	cmp	r3, #4
 8003f8c:	d107      	bne.n	8003f9e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f9c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e050      	b.n	8004044 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fa2:	893b      	ldrh	r3, [r7, #8]
 8003fa4:	b2da      	uxtb	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fae:	6a39      	ldr	r1, [r7, #32]
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f000 f967 	bl	8004284 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00d      	beq.n	8003fd8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc0:	2b04      	cmp	r3, #4
 8003fc2:	d107      	bne.n	8003fd4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fd2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e035      	b.n	8004044 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fe6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	6a3b      	ldr	r3, [r7, #32]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f000 f82b 	bl	8004050 <I2C_WaitOnFlagUntilTimeout>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00d      	beq.n	800401c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800400a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800400e:	d103      	bne.n	8004018 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004016:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e013      	b.n	8004044 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800401c:	897b      	ldrh	r3, [r7, #10]
 800401e:	b2db      	uxtb	r3, r3
 8004020:	f043 0301 	orr.w	r3, r3, #1
 8004024:	b2da      	uxtb	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800402c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402e:	6a3a      	ldr	r2, [r7, #32]
 8004030:	4906      	ldr	r1, [pc, #24]	@ (800404c <I2C_RequestMemoryRead+0x1cc>)
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 f886 	bl	8004144 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e000      	b.n	8004044 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3718      	adds	r7, #24
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	00010002 	.word	0x00010002

08004050 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	603b      	str	r3, [r7, #0]
 800405c:	4613      	mov	r3, r2
 800405e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004060:	e048      	b.n	80040f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004068:	d044      	beq.n	80040f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800406a:	f7fe fdef 	bl	8002c4c <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	683a      	ldr	r2, [r7, #0]
 8004076:	429a      	cmp	r2, r3
 8004078:	d302      	bcc.n	8004080 <I2C_WaitOnFlagUntilTimeout+0x30>
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d139      	bne.n	80040f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	0c1b      	lsrs	r3, r3, #16
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b01      	cmp	r3, #1
 8004088:	d10d      	bne.n	80040a6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	43da      	mvns	r2, r3
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	4013      	ands	r3, r2
 8004096:	b29b      	uxth	r3, r3
 8004098:	2b00      	cmp	r3, #0
 800409a:	bf0c      	ite	eq
 800409c:	2301      	moveq	r3, #1
 800409e:	2300      	movne	r3, #0
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	461a      	mov	r2, r3
 80040a4:	e00c      	b.n	80040c0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	43da      	mvns	r2, r3
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	4013      	ands	r3, r2
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	bf0c      	ite	eq
 80040b8:	2301      	moveq	r3, #1
 80040ba:	2300      	movne	r3, #0
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	461a      	mov	r2, r3
 80040c0:	79fb      	ldrb	r3, [r7, #7]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d116      	bne.n	80040f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2220      	movs	r2, #32
 80040d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e0:	f043 0220 	orr.w	r2, r3, #32
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e023      	b.n	800413c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	0c1b      	lsrs	r3, r3, #16
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d10d      	bne.n	800411a <I2C_WaitOnFlagUntilTimeout+0xca>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	695b      	ldr	r3, [r3, #20]
 8004104:	43da      	mvns	r2, r3
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	4013      	ands	r3, r2
 800410a:	b29b      	uxth	r3, r3
 800410c:	2b00      	cmp	r3, #0
 800410e:	bf0c      	ite	eq
 8004110:	2301      	moveq	r3, #1
 8004112:	2300      	movne	r3, #0
 8004114:	b2db      	uxtb	r3, r3
 8004116:	461a      	mov	r2, r3
 8004118:	e00c      	b.n	8004134 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	43da      	mvns	r2, r3
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	4013      	ands	r3, r2
 8004126:	b29b      	uxth	r3, r3
 8004128:	2b00      	cmp	r3, #0
 800412a:	bf0c      	ite	eq
 800412c:	2301      	moveq	r3, #1
 800412e:	2300      	movne	r3, #0
 8004130:	b2db      	uxtb	r3, r3
 8004132:	461a      	mov	r2, r3
 8004134:	79fb      	ldrb	r3, [r7, #7]
 8004136:	429a      	cmp	r2, r3
 8004138:	d093      	beq.n	8004062 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
 8004150:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004152:	e071      	b.n	8004238 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800415e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004162:	d123      	bne.n	80041ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004172:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800417c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2220      	movs	r2, #32
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004198:	f043 0204 	orr.w	r2, r3, #4
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e067      	b.n	800427c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041b2:	d041      	beq.n	8004238 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041b4:	f7fe fd4a 	bl	8002c4c <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d302      	bcc.n	80041ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d136      	bne.n	8004238 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	0c1b      	lsrs	r3, r3, #16
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d10c      	bne.n	80041ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	43da      	mvns	r2, r3
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	4013      	ands	r3, r2
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	bf14      	ite	ne
 80041e6:	2301      	movne	r3, #1
 80041e8:	2300      	moveq	r3, #0
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	e00b      	b.n	8004206 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	43da      	mvns	r2, r3
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	4013      	ands	r3, r2
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	bf14      	ite	ne
 8004200:	2301      	movne	r3, #1
 8004202:	2300      	moveq	r3, #0
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d016      	beq.n	8004238 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2220      	movs	r2, #32
 8004214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004224:	f043 0220 	orr.w	r2, r3, #32
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e021      	b.n	800427c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	0c1b      	lsrs	r3, r3, #16
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b01      	cmp	r3, #1
 8004240:	d10c      	bne.n	800425c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	695b      	ldr	r3, [r3, #20]
 8004248:	43da      	mvns	r2, r3
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	4013      	ands	r3, r2
 800424e:	b29b      	uxth	r3, r3
 8004250:	2b00      	cmp	r3, #0
 8004252:	bf14      	ite	ne
 8004254:	2301      	movne	r3, #1
 8004256:	2300      	moveq	r3, #0
 8004258:	b2db      	uxtb	r3, r3
 800425a:	e00b      	b.n	8004274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	43da      	mvns	r2, r3
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	4013      	ands	r3, r2
 8004268:	b29b      	uxth	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	bf14      	ite	ne
 800426e:	2301      	movne	r3, #1
 8004270:	2300      	moveq	r3, #0
 8004272:	b2db      	uxtb	r3, r3
 8004274:	2b00      	cmp	r3, #0
 8004276:	f47f af6d 	bne.w	8004154 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004290:	e034      	b.n	80042fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f000 f8e3 	bl	800445e <I2C_IsAcknowledgeFailed>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e034      	b.n	800430c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80042a8:	d028      	beq.n	80042fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042aa:	f7fe fccf 	bl	8002c4c <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	68ba      	ldr	r2, [r7, #8]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d302      	bcc.n	80042c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d11d      	bne.n	80042fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ca:	2b80      	cmp	r3, #128	@ 0x80
 80042cc:	d016      	beq.n	80042fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2220      	movs	r2, #32
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e8:	f043 0220 	orr.w	r2, r3, #32
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e007      	b.n	800430c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004306:	2b80      	cmp	r3, #128	@ 0x80
 8004308:	d1c3      	bne.n	8004292 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004320:	e034      	b.n	800438c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f000 f89b 	bl	800445e <I2C_IsAcknowledgeFailed>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e034      	b.n	800439c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004338:	d028      	beq.n	800438c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800433a:	f7fe fc87 	bl	8002c4c <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	68ba      	ldr	r2, [r7, #8]
 8004346:	429a      	cmp	r2, r3
 8004348:	d302      	bcc.n	8004350 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d11d      	bne.n	800438c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	f003 0304 	and.w	r3, r3, #4
 800435a:	2b04      	cmp	r3, #4
 800435c:	d016      	beq.n	800438c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2220      	movs	r2, #32
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004378:	f043 0220 	orr.w	r2, r3, #32
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e007      	b.n	800439c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	f003 0304 	and.w	r3, r3, #4
 8004396:	2b04      	cmp	r3, #4
 8004398:	d1c3      	bne.n	8004322 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043b0:	e049      	b.n	8004446 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	f003 0310 	and.w	r3, r3, #16
 80043bc:	2b10      	cmp	r3, #16
 80043be:	d119      	bne.n	80043f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f06f 0210 	mvn.w	r2, #16
 80043c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2220      	movs	r2, #32
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e030      	b.n	8004456 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043f4:	f7fe fc2a 	bl	8002c4c <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	429a      	cmp	r2, r3
 8004402:	d302      	bcc.n	800440a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d11d      	bne.n	8004446 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004414:	2b40      	cmp	r3, #64	@ 0x40
 8004416:	d016      	beq.n	8004446 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2220      	movs	r2, #32
 8004422:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004432:	f043 0220 	orr.w	r2, r3, #32
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e007      	b.n	8004456 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	695b      	ldr	r3, [r3, #20]
 800444c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004450:	2b40      	cmp	r3, #64	@ 0x40
 8004452:	d1ae      	bne.n	80043b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3710      	adds	r7, #16
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}

0800445e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800445e:	b480      	push	{r7}
 8004460:	b083      	sub	sp, #12
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004470:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004474:	d11b      	bne.n	80044ae <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800447e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2220      	movs	r2, #32
 800448a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800449a:	f043 0204 	orr.w	r2, r3, #4
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e000      	b.n	80044b0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b20      	cmp	r3, #32
 80044d0:	d129      	bne.n	8004526 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2224      	movs	r2, #36	@ 0x24
 80044d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 0201 	bic.w	r2, r2, #1
 80044e8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f022 0210 	bic.w	r2, r2, #16
 80044f8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	430a      	orrs	r2, r1
 8004508:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f042 0201 	orr.w	r2, r2, #1
 8004518:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2220      	movs	r2, #32
 800451e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004522:	2300      	movs	r3, #0
 8004524:	e000      	b.n	8004528 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004526:	2302      	movs	r3, #2
  }
}
 8004528:	4618      	mov	r0, r3
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004534:	b480      	push	{r7}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800453e:	2300      	movs	r3, #0
 8004540:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b20      	cmp	r3, #32
 800454c:	d12a      	bne.n	80045a4 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2224      	movs	r2, #36	@ 0x24
 8004552:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f022 0201 	bic.w	r2, r2, #1
 8004564:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800456c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800456e:	89fb      	ldrh	r3, [r7, #14]
 8004570:	f023 030f 	bic.w	r3, r3, #15
 8004574:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	b29a      	uxth	r2, r3
 800457a:	89fb      	ldrh	r3, [r7, #14]
 800457c:	4313      	orrs	r3, r2
 800457e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	89fa      	ldrh	r2, [r7, #14]
 8004586:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f042 0201 	orr.w	r2, r2, #1
 8004596:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2220      	movs	r2, #32
 800459c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80045a0:	2300      	movs	r3, #0
 80045a2:	e000      	b.n	80045a6 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80045a4:	2302      	movs	r3, #2
  }
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3714      	adds	r7, #20
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
	...

080045b4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e0bf      	b.n	8004746 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d106      	bne.n	80045e0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f7fd fca0 	bl	8001f20 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2202      	movs	r2, #2
 80045e4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	699a      	ldr	r2, [r3, #24]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80045f6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	6999      	ldr	r1, [r3, #24]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800460c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	430a      	orrs	r2, r1
 800461a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	6899      	ldr	r1, [r3, #8]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	4b4a      	ldr	r3, [pc, #296]	@ (8004750 <HAL_LTDC_Init+0x19c>)
 8004628:	400b      	ands	r3, r1
 800462a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	695b      	ldr	r3, [r3, #20]
 8004630:	041b      	lsls	r3, r3, #16
 8004632:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	6899      	ldr	r1, [r3, #8]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	699a      	ldr	r2, [r3, #24]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	431a      	orrs	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	430a      	orrs	r2, r1
 8004648:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68d9      	ldr	r1, [r3, #12]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	4b3e      	ldr	r3, [pc, #248]	@ (8004750 <HAL_LTDC_Init+0x19c>)
 8004656:	400b      	ands	r3, r1
 8004658:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	69db      	ldr	r3, [r3, #28]
 800465e:	041b      	lsls	r3, r3, #16
 8004660:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68d9      	ldr	r1, [r3, #12]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a1a      	ldr	r2, [r3, #32]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	431a      	orrs	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	430a      	orrs	r2, r1
 8004676:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	6919      	ldr	r1, [r3, #16]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	4b33      	ldr	r3, [pc, #204]	@ (8004750 <HAL_LTDC_Init+0x19c>)
 8004684:	400b      	ands	r3, r1
 8004686:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800468c:	041b      	lsls	r3, r3, #16
 800468e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	6919      	ldr	r1, [r3, #16]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	431a      	orrs	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	430a      	orrs	r2, r1
 80046a4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	6959      	ldr	r1, [r3, #20]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	4b27      	ldr	r3, [pc, #156]	@ (8004750 <HAL_LTDC_Init+0x19c>)
 80046b2:	400b      	ands	r3, r1
 80046b4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ba:	041b      	lsls	r3, r3, #16
 80046bc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	6959      	ldr	r1, [r3, #20]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	431a      	orrs	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	430a      	orrs	r2, r1
 80046d2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80046da:	021b      	lsls	r3, r3, #8
 80046dc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80046e4:	041b      	lsls	r3, r3, #16
 80046e6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80046f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	4313      	orrs	r3, r2
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800470a:	431a      	orrs	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	430a      	orrs	r2, r1
 8004712:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f042 0206 	orr.w	r2, r2, #6
 8004722:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	699a      	ldr	r2, [r3, #24]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f042 0201 	orr.w	r2, r2, #1
 8004732:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3710      	adds	r7, #16
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	f000f800 	.word	0xf000f800

08004754 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004754:	b5b0      	push	{r4, r5, r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004766:	2b01      	cmp	r3, #1
 8004768:	d101      	bne.n	800476e <HAL_LTDC_ConfigLayer+0x1a>
 800476a:	2302      	movs	r3, #2
 800476c:	e02c      	b.n	80047c8 <HAL_LTDC_ConfigLayer+0x74>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2201      	movs	r2, #1
 8004772:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2202      	movs	r2, #2
 800477a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2134      	movs	r1, #52	@ 0x34
 8004784:	fb01 f303 	mul.w	r3, r1, r3
 8004788:	4413      	add	r3, r2
 800478a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	4614      	mov	r4, r2
 8004792:	461d      	mov	r5, r3
 8004794:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004796:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004798:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800479a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800479c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800479e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047a0:	682b      	ldr	r3, [r5, #0]
 80047a2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	68b9      	ldr	r1, [r7, #8]
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f000 f811 	bl	80047d0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2201      	movs	r2, #1
 80047b4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bdb0      	pop	{r4, r5, r7, pc}

080047d0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b089      	sub	sp, #36	@ 0x24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	685a      	ldr	r2, [r3, #4]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	0c1b      	lsrs	r3, r3, #16
 80047e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047ec:	4413      	add	r3, r2
 80047ee:	041b      	lsls	r3, r3, #16
 80047f0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	461a      	mov	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	01db      	lsls	r3, r3, #7
 80047fc:	4413      	add	r3, r2
 80047fe:	3384      	adds	r3, #132	@ 0x84
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	6812      	ldr	r2, [r2, #0]
 8004806:	4611      	mov	r1, r2
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	01d2      	lsls	r2, r2, #7
 800480c:	440a      	add	r2, r1
 800480e:	3284      	adds	r2, #132	@ 0x84
 8004810:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004814:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	0c1b      	lsrs	r3, r3, #16
 8004822:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004826:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004828:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4619      	mov	r1, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	01db      	lsls	r3, r3, #7
 8004834:	440b      	add	r3, r1
 8004836:	3384      	adds	r3, #132	@ 0x84
 8004838:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800483e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	68da      	ldr	r2, [r3, #12]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800484e:	4413      	add	r3, r2
 8004850:	041b      	lsls	r3, r3, #16
 8004852:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	461a      	mov	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	01db      	lsls	r3, r3, #7
 800485e:	4413      	add	r3, r2
 8004860:	3384      	adds	r3, #132	@ 0x84
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	6812      	ldr	r2, [r2, #0]
 8004868:	4611      	mov	r1, r2
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	01d2      	lsls	r2, r2, #7
 800486e:	440a      	add	r2, r1
 8004870:	3284      	adds	r2, #132	@ 0x84
 8004872:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004876:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	689a      	ldr	r2, [r3, #8]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004886:	4413      	add	r3, r2
 8004888:	1c5a      	adds	r2, r3, #1
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4619      	mov	r1, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	01db      	lsls	r3, r3, #7
 8004894:	440b      	add	r3, r1
 8004896:	3384      	adds	r3, #132	@ 0x84
 8004898:	4619      	mov	r1, r3
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	4313      	orrs	r3, r2
 800489e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	461a      	mov	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	01db      	lsls	r3, r3, #7
 80048aa:	4413      	add	r3, r2
 80048ac:	3384      	adds	r3, #132	@ 0x84
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	6812      	ldr	r2, [r2, #0]
 80048b4:	4611      	mov	r1, r2
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	01d2      	lsls	r2, r2, #7
 80048ba:	440a      	add	r2, r1
 80048bc:	3284      	adds	r2, #132	@ 0x84
 80048be:	f023 0307 	bic.w	r3, r3, #7
 80048c2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	461a      	mov	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	01db      	lsls	r3, r3, #7
 80048ce:	4413      	add	r3, r2
 80048d0:	3384      	adds	r3, #132	@ 0x84
 80048d2:	461a      	mov	r2, r3
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80048e0:	021b      	lsls	r3, r3, #8
 80048e2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80048ea:	041b      	lsls	r3, r3, #16
 80048ec:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	061b      	lsls	r3, r3, #24
 80048f4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	461a      	mov	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	01db      	lsls	r3, r3, #7
 8004900:	4413      	add	r3, r2
 8004902:	3384      	adds	r3, #132	@ 0x84
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	461a      	mov	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	01db      	lsls	r3, r3, #7
 8004910:	4413      	add	r3, r2
 8004912:	3384      	adds	r3, #132	@ 0x84
 8004914:	461a      	mov	r2, r3
 8004916:	2300      	movs	r3, #0
 8004918:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004920:	461a      	mov	r2, r3
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	431a      	orrs	r2, r3
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	431a      	orrs	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4619      	mov	r1, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	01db      	lsls	r3, r3, #7
 8004934:	440b      	add	r3, r1
 8004936:	3384      	adds	r3, #132	@ 0x84
 8004938:	4619      	mov	r1, r3
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	4313      	orrs	r3, r2
 800493e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	461a      	mov	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	01db      	lsls	r3, r3, #7
 800494a:	4413      	add	r3, r2
 800494c:	3384      	adds	r3, #132	@ 0x84
 800494e:	695b      	ldr	r3, [r3, #20]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	6812      	ldr	r2, [r2, #0]
 8004954:	4611      	mov	r1, r2
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	01d2      	lsls	r2, r2, #7
 800495a:	440a      	add	r2, r1
 800495c:	3284      	adds	r2, #132	@ 0x84
 800495e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004962:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	461a      	mov	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	01db      	lsls	r3, r3, #7
 800496e:	4413      	add	r3, r2
 8004970:	3384      	adds	r3, #132	@ 0x84
 8004972:	461a      	mov	r2, r3
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	695b      	ldr	r3, [r3, #20]
 8004978:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	461a      	mov	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	01db      	lsls	r3, r3, #7
 8004984:	4413      	add	r3, r2
 8004986:	3384      	adds	r3, #132	@ 0x84
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	6812      	ldr	r2, [r2, #0]
 800498e:	4611      	mov	r1, r2
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	01d2      	lsls	r2, r2, #7
 8004994:	440a      	add	r2, r1
 8004996:	3284      	adds	r2, #132	@ 0x84
 8004998:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800499c:	f023 0307 	bic.w	r3, r3, #7
 80049a0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	69da      	ldr	r2, [r3, #28]
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	68f9      	ldr	r1, [r7, #12]
 80049ac:	6809      	ldr	r1, [r1, #0]
 80049ae:	4608      	mov	r0, r1
 80049b0:	6879      	ldr	r1, [r7, #4]
 80049b2:	01c9      	lsls	r1, r1, #7
 80049b4:	4401      	add	r1, r0
 80049b6:	3184      	adds	r1, #132	@ 0x84
 80049b8:	4313      	orrs	r3, r2
 80049ba:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	461a      	mov	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	01db      	lsls	r3, r3, #7
 80049c6:	4413      	add	r3, r2
 80049c8:	3384      	adds	r3, #132	@ 0x84
 80049ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	461a      	mov	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	01db      	lsls	r3, r3, #7
 80049d6:	4413      	add	r3, r2
 80049d8:	3384      	adds	r3, #132	@ 0x84
 80049da:	461a      	mov	r2, r3
 80049dc:	2300      	movs	r3, #0
 80049de:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	461a      	mov	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	01db      	lsls	r3, r3, #7
 80049ea:	4413      	add	r3, r2
 80049ec:	3384      	adds	r3, #132	@ 0x84
 80049ee:	461a      	mov	r2, r3
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f4:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d102      	bne.n	8004a04 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80049fe:	2304      	movs	r3, #4
 8004a00:	61fb      	str	r3, [r7, #28]
 8004a02:	e01b      	b.n	8004a3c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d102      	bne.n	8004a12 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	61fb      	str	r3, [r7, #28]
 8004a10:	e014      	b.n	8004a3c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	2b04      	cmp	r3, #4
 8004a18:	d00b      	beq.n	8004a32 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d007      	beq.n	8004a32 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004a26:	2b03      	cmp	r3, #3
 8004a28:	d003      	beq.n	8004a32 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004a2e:	2b07      	cmp	r3, #7
 8004a30:	d102      	bne.n	8004a38 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004a32:	2302      	movs	r3, #2
 8004a34:	61fb      	str	r3, [r7, #28]
 8004a36:	e001      	b.n	8004a3c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	461a      	mov	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	01db      	lsls	r3, r3, #7
 8004a46:	4413      	add	r3, r2
 8004a48:	3384      	adds	r3, #132	@ 0x84
 8004a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	6812      	ldr	r2, [r2, #0]
 8004a50:	4611      	mov	r1, r2
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	01d2      	lsls	r2, r2, #7
 8004a56:	440a      	add	r2, r1
 8004a58:	3284      	adds	r2, #132	@ 0x84
 8004a5a:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004a5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a64:	69fa      	ldr	r2, [r7, #28]
 8004a66:	fb02 f303 	mul.w	r3, r2, r3
 8004a6a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	6859      	ldr	r1, [r3, #4]
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	1acb      	subs	r3, r1, r3
 8004a76:	69f9      	ldr	r1, [r7, #28]
 8004a78:	fb01 f303 	mul.w	r3, r1, r3
 8004a7c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004a7e:	68f9      	ldr	r1, [r7, #12]
 8004a80:	6809      	ldr	r1, [r1, #0]
 8004a82:	4608      	mov	r0, r1
 8004a84:	6879      	ldr	r1, [r7, #4]
 8004a86:	01c9      	lsls	r1, r1, #7
 8004a88:	4401      	add	r1, r0
 8004a8a:	3184      	adds	r1, #132	@ 0x84
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	461a      	mov	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	01db      	lsls	r3, r3, #7
 8004a9a:	4413      	add	r3, r2
 8004a9c:	3384      	adds	r3, #132	@ 0x84
 8004a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	6812      	ldr	r2, [r2, #0]
 8004aa4:	4611      	mov	r1, r2
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	01d2      	lsls	r2, r2, #7
 8004aaa:	440a      	add	r2, r1
 8004aac:	3284      	adds	r2, #132	@ 0x84
 8004aae:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004ab2:	f023 0307 	bic.w	r3, r3, #7
 8004ab6:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	461a      	mov	r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	01db      	lsls	r3, r3, #7
 8004ac2:	4413      	add	r3, r2
 8004ac4:	3384      	adds	r3, #132	@ 0x84
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004acc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	01db      	lsls	r3, r3, #7
 8004ad8:	4413      	add	r3, r2
 8004ada:	3384      	adds	r3, #132	@ 0x84
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	6812      	ldr	r2, [r2, #0]
 8004ae2:	4611      	mov	r1, r2
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	01d2      	lsls	r2, r2, #7
 8004ae8:	440a      	add	r2, r1
 8004aea:	3284      	adds	r2, #132	@ 0x84
 8004aec:	f043 0301 	orr.w	r3, r3, #1
 8004af0:	6013      	str	r3, [r2, #0]
}
 8004af2:	bf00      	nop
 8004af4:	3724      	adds	r7, #36	@ 0x24
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
	...

08004b00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e267      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d075      	beq.n	8004c0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004b1e:	4b88      	ldr	r3, [pc, #544]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f003 030c 	and.w	r3, r3, #12
 8004b26:	2b04      	cmp	r3, #4
 8004b28:	d00c      	beq.n	8004b44 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b2a:	4b85      	ldr	r3, [pc, #532]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004b32:	2b08      	cmp	r3, #8
 8004b34:	d112      	bne.n	8004b5c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b36:	4b82      	ldr	r3, [pc, #520]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b42:	d10b      	bne.n	8004b5c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b44:	4b7e      	ldr	r3, [pc, #504]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d05b      	beq.n	8004c08 <HAL_RCC_OscConfig+0x108>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d157      	bne.n	8004c08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e242      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b64:	d106      	bne.n	8004b74 <HAL_RCC_OscConfig+0x74>
 8004b66:	4b76      	ldr	r3, [pc, #472]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a75      	ldr	r2, [pc, #468]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b70:	6013      	str	r3, [r2, #0]
 8004b72:	e01d      	b.n	8004bb0 <HAL_RCC_OscConfig+0xb0>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b7c:	d10c      	bne.n	8004b98 <HAL_RCC_OscConfig+0x98>
 8004b7e:	4b70      	ldr	r3, [pc, #448]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a6f      	ldr	r2, [pc, #444]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b88:	6013      	str	r3, [r2, #0]
 8004b8a:	4b6d      	ldr	r3, [pc, #436]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a6c      	ldr	r2, [pc, #432]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b94:	6013      	str	r3, [r2, #0]
 8004b96:	e00b      	b.n	8004bb0 <HAL_RCC_OscConfig+0xb0>
 8004b98:	4b69      	ldr	r3, [pc, #420]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a68      	ldr	r2, [pc, #416]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ba2:	6013      	str	r3, [r2, #0]
 8004ba4:	4b66      	ldr	r3, [pc, #408]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a65      	ldr	r2, [pc, #404]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004baa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004bae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d013      	beq.n	8004be0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb8:	f7fe f848 	bl	8002c4c <HAL_GetTick>
 8004bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bbe:	e008      	b.n	8004bd2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bc0:	f7fe f844 	bl	8002c4c <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b64      	cmp	r3, #100	@ 0x64
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e207      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bd2:	4b5b      	ldr	r3, [pc, #364]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d0f0      	beq.n	8004bc0 <HAL_RCC_OscConfig+0xc0>
 8004bde:	e014      	b.n	8004c0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004be0:	f7fe f834 	bl	8002c4c <HAL_GetTick>
 8004be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004be6:	e008      	b.n	8004bfa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004be8:	f7fe f830 	bl	8002c4c <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	2b64      	cmp	r3, #100	@ 0x64
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e1f3      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bfa:	4b51      	ldr	r3, [pc, #324]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1f0      	bne.n	8004be8 <HAL_RCC_OscConfig+0xe8>
 8004c06:	e000      	b.n	8004c0a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d063      	beq.n	8004cde <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004c16:	4b4a      	ldr	r3, [pc, #296]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f003 030c 	and.w	r3, r3, #12
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00b      	beq.n	8004c3a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c22:	4b47      	ldr	r3, [pc, #284]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004c2a:	2b08      	cmp	r3, #8
 8004c2c:	d11c      	bne.n	8004c68 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c2e:	4b44      	ldr	r3, [pc, #272]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d116      	bne.n	8004c68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c3a:	4b41      	ldr	r3, [pc, #260]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d005      	beq.n	8004c52 <HAL_RCC_OscConfig+0x152>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d001      	beq.n	8004c52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e1c7      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c52:	4b3b      	ldr	r3, [pc, #236]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	4937      	ldr	r1, [pc, #220]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c66:	e03a      	b.n	8004cde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d020      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c70:	4b34      	ldr	r3, [pc, #208]	@ (8004d44 <HAL_RCC_OscConfig+0x244>)
 8004c72:	2201      	movs	r2, #1
 8004c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c76:	f7fd ffe9 	bl	8002c4c <HAL_GetTick>
 8004c7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c7c:	e008      	b.n	8004c90 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c7e:	f7fd ffe5 	bl	8002c4c <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d901      	bls.n	8004c90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e1a8      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c90:	4b2b      	ldr	r3, [pc, #172]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d0f0      	beq.n	8004c7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c9c:	4b28      	ldr	r3, [pc, #160]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	00db      	lsls	r3, r3, #3
 8004caa:	4925      	ldr	r1, [pc, #148]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	600b      	str	r3, [r1, #0]
 8004cb0:	e015      	b.n	8004cde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cb2:	4b24      	ldr	r3, [pc, #144]	@ (8004d44 <HAL_RCC_OscConfig+0x244>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb8:	f7fd ffc8 	bl	8002c4c <HAL_GetTick>
 8004cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cbe:	e008      	b.n	8004cd2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cc0:	f7fd ffc4 	bl	8002c4c <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e187      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cd2:	4b1b      	ldr	r3, [pc, #108]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1f0      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0308 	and.w	r3, r3, #8
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d036      	beq.n	8004d58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d016      	beq.n	8004d20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cf2:	4b15      	ldr	r3, [pc, #84]	@ (8004d48 <HAL_RCC_OscConfig+0x248>)
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cf8:	f7fd ffa8 	bl	8002c4c <HAL_GetTick>
 8004cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cfe:	e008      	b.n	8004d12 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d00:	f7fd ffa4 	bl	8002c4c <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e167      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d12:	4b0b      	ldr	r3, [pc, #44]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004d14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d0f0      	beq.n	8004d00 <HAL_RCC_OscConfig+0x200>
 8004d1e:	e01b      	b.n	8004d58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d20:	4b09      	ldr	r3, [pc, #36]	@ (8004d48 <HAL_RCC_OscConfig+0x248>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d26:	f7fd ff91 	bl	8002c4c <HAL_GetTick>
 8004d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d2c:	e00e      	b.n	8004d4c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d2e:	f7fd ff8d 	bl	8002c4c <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d907      	bls.n	8004d4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e150      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
 8004d40:	40023800 	.word	0x40023800
 8004d44:	42470000 	.word	0x42470000
 8004d48:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d4c:	4b88      	ldr	r3, [pc, #544]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004d4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1ea      	bne.n	8004d2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0304 	and.w	r3, r3, #4
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f000 8097 	beq.w	8004e94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d66:	2300      	movs	r3, #0
 8004d68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d6a:	4b81      	ldr	r3, [pc, #516]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10f      	bne.n	8004d96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d76:	2300      	movs	r3, #0
 8004d78:	60bb      	str	r3, [r7, #8]
 8004d7a:	4b7d      	ldr	r3, [pc, #500]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d7e:	4a7c      	ldr	r2, [pc, #496]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004d80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d84:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d86:	4b7a      	ldr	r3, [pc, #488]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d8e:	60bb      	str	r3, [r7, #8]
 8004d90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d92:	2301      	movs	r3, #1
 8004d94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d96:	4b77      	ldr	r3, [pc, #476]	@ (8004f74 <HAL_RCC_OscConfig+0x474>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d118      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004da2:	4b74      	ldr	r3, [pc, #464]	@ (8004f74 <HAL_RCC_OscConfig+0x474>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a73      	ldr	r2, [pc, #460]	@ (8004f74 <HAL_RCC_OscConfig+0x474>)
 8004da8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dae:	f7fd ff4d 	bl	8002c4c <HAL_GetTick>
 8004db2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004db4:	e008      	b.n	8004dc8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004db6:	f7fd ff49 	bl	8002c4c <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d901      	bls.n	8004dc8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e10c      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dc8:	4b6a      	ldr	r3, [pc, #424]	@ (8004f74 <HAL_RCC_OscConfig+0x474>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d0f0      	beq.n	8004db6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d106      	bne.n	8004dea <HAL_RCC_OscConfig+0x2ea>
 8004ddc:	4b64      	ldr	r3, [pc, #400]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004dde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004de0:	4a63      	ldr	r2, [pc, #396]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004de2:	f043 0301 	orr.w	r3, r3, #1
 8004de6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004de8:	e01c      	b.n	8004e24 <HAL_RCC_OscConfig+0x324>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	2b05      	cmp	r3, #5
 8004df0:	d10c      	bne.n	8004e0c <HAL_RCC_OscConfig+0x30c>
 8004df2:	4b5f      	ldr	r3, [pc, #380]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004df6:	4a5e      	ldr	r2, [pc, #376]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004df8:	f043 0304 	orr.w	r3, r3, #4
 8004dfc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dfe:	4b5c      	ldr	r3, [pc, #368]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e02:	4a5b      	ldr	r2, [pc, #364]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004e04:	f043 0301 	orr.w	r3, r3, #1
 8004e08:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e0a:	e00b      	b.n	8004e24 <HAL_RCC_OscConfig+0x324>
 8004e0c:	4b58      	ldr	r3, [pc, #352]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004e0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e10:	4a57      	ldr	r2, [pc, #348]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004e12:	f023 0301 	bic.w	r3, r3, #1
 8004e16:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e18:	4b55      	ldr	r3, [pc, #340]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004e1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e1c:	4a54      	ldr	r2, [pc, #336]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004e1e:	f023 0304 	bic.w	r3, r3, #4
 8004e22:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d015      	beq.n	8004e58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e2c:	f7fd ff0e 	bl	8002c4c <HAL_GetTick>
 8004e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e32:	e00a      	b.n	8004e4a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e34:	f7fd ff0a 	bl	8002c4c <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e0cb      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e4a:	4b49      	ldr	r3, [pc, #292]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004e4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d0ee      	beq.n	8004e34 <HAL_RCC_OscConfig+0x334>
 8004e56:	e014      	b.n	8004e82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e58:	f7fd fef8 	bl	8002c4c <HAL_GetTick>
 8004e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e5e:	e00a      	b.n	8004e76 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e60:	f7fd fef4 	bl	8002c4c <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d901      	bls.n	8004e76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e0b5      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e76:	4b3e      	ldr	r3, [pc, #248]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1ee      	bne.n	8004e60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e82:	7dfb      	ldrb	r3, [r7, #23]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d105      	bne.n	8004e94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e88:	4b39      	ldr	r3, [pc, #228]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e8c:	4a38      	ldr	r2, [pc, #224]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004e8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e92:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	699b      	ldr	r3, [r3, #24]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f000 80a1 	beq.w	8004fe0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e9e:	4b34      	ldr	r3, [pc, #208]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f003 030c 	and.w	r3, r3, #12
 8004ea6:	2b08      	cmp	r3, #8
 8004ea8:	d05c      	beq.n	8004f64 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d141      	bne.n	8004f36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eb2:	4b31      	ldr	r3, [pc, #196]	@ (8004f78 <HAL_RCC_OscConfig+0x478>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eb8:	f7fd fec8 	bl	8002c4c <HAL_GetTick>
 8004ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ebe:	e008      	b.n	8004ed2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ec0:	f7fd fec4 	bl	8002c4c <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e087      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ed2:	4b27      	ldr	r3, [pc, #156]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1f0      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	69da      	ldr	r2, [r3, #28]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eec:	019b      	lsls	r3, r3, #6
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ef4:	085b      	lsrs	r3, r3, #1
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	041b      	lsls	r3, r3, #16
 8004efa:	431a      	orrs	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f00:	061b      	lsls	r3, r3, #24
 8004f02:	491b      	ldr	r1, [pc, #108]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f08:	4b1b      	ldr	r3, [pc, #108]	@ (8004f78 <HAL_RCC_OscConfig+0x478>)
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f0e:	f7fd fe9d 	bl	8002c4c <HAL_GetTick>
 8004f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f14:	e008      	b.n	8004f28 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f16:	f7fd fe99 	bl	8002c4c <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d901      	bls.n	8004f28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e05c      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f28:	4b11      	ldr	r3, [pc, #68]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d0f0      	beq.n	8004f16 <HAL_RCC_OscConfig+0x416>
 8004f34:	e054      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f36:	4b10      	ldr	r3, [pc, #64]	@ (8004f78 <HAL_RCC_OscConfig+0x478>)
 8004f38:	2200      	movs	r2, #0
 8004f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f3c:	f7fd fe86 	bl	8002c4c <HAL_GetTick>
 8004f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f42:	e008      	b.n	8004f56 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f44:	f7fd fe82 	bl	8002c4c <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e045      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f56:	4b06      	ldr	r3, [pc, #24]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1f0      	bne.n	8004f44 <HAL_RCC_OscConfig+0x444>
 8004f62:	e03d      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d107      	bne.n	8004f7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e038      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
 8004f70:	40023800 	.word	0x40023800
 8004f74:	40007000 	.word	0x40007000
 8004f78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f7c:	4b1b      	ldr	r3, [pc, #108]	@ (8004fec <HAL_RCC_OscConfig+0x4ec>)
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d028      	beq.n	8004fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d121      	bne.n	8004fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d11a      	bne.n	8004fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004fac:	4013      	ands	r3, r2
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004fb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d111      	bne.n	8004fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fc2:	085b      	lsrs	r3, r3, #1
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d107      	bne.n	8004fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d001      	beq.n	8004fe0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e000      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3718      	adds	r7, #24
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	40023800 	.word	0x40023800

08004ff0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d101      	bne.n	8005004 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e0cc      	b.n	800519e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005004:	4b68      	ldr	r3, [pc, #416]	@ (80051a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 030f 	and.w	r3, r3, #15
 800500c:	683a      	ldr	r2, [r7, #0]
 800500e:	429a      	cmp	r2, r3
 8005010:	d90c      	bls.n	800502c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005012:	4b65      	ldr	r3, [pc, #404]	@ (80051a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005014:	683a      	ldr	r2, [r7, #0]
 8005016:	b2d2      	uxtb	r2, r2
 8005018:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800501a:	4b63      	ldr	r3, [pc, #396]	@ (80051a8 <HAL_RCC_ClockConfig+0x1b8>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 030f 	and.w	r3, r3, #15
 8005022:	683a      	ldr	r2, [r7, #0]
 8005024:	429a      	cmp	r2, r3
 8005026:	d001      	beq.n	800502c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e0b8      	b.n	800519e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d020      	beq.n	800507a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0304 	and.w	r3, r3, #4
 8005040:	2b00      	cmp	r3, #0
 8005042:	d005      	beq.n	8005050 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005044:	4b59      	ldr	r3, [pc, #356]	@ (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	4a58      	ldr	r2, [pc, #352]	@ (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 800504a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800504e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0308 	and.w	r3, r3, #8
 8005058:	2b00      	cmp	r3, #0
 800505a:	d005      	beq.n	8005068 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800505c:	4b53      	ldr	r3, [pc, #332]	@ (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	4a52      	ldr	r2, [pc, #328]	@ (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005062:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005066:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005068:	4b50      	ldr	r3, [pc, #320]	@ (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	494d      	ldr	r1, [pc, #308]	@ (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005076:	4313      	orrs	r3, r2
 8005078:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	2b00      	cmp	r3, #0
 8005084:	d044      	beq.n	8005110 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d107      	bne.n	800509e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800508e:	4b47      	ldr	r3, [pc, #284]	@ (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d119      	bne.n	80050ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e07f      	b.n	800519e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d003      	beq.n	80050ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050aa:	2b03      	cmp	r3, #3
 80050ac:	d107      	bne.n	80050be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ae:	4b3f      	ldr	r3, [pc, #252]	@ (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d109      	bne.n	80050ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e06f      	b.n	800519e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050be:	4b3b      	ldr	r3, [pc, #236]	@ (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e067      	b.n	800519e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050ce:	4b37      	ldr	r3, [pc, #220]	@ (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f023 0203 	bic.w	r2, r3, #3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	4934      	ldr	r1, [pc, #208]	@ (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050e0:	f7fd fdb4 	bl	8002c4c <HAL_GetTick>
 80050e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050e6:	e00a      	b.n	80050fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050e8:	f7fd fdb0 	bl	8002c4c <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e04f      	b.n	800519e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050fe:	4b2b      	ldr	r3, [pc, #172]	@ (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f003 020c 	and.w	r2, r3, #12
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	429a      	cmp	r2, r3
 800510e:	d1eb      	bne.n	80050e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005110:	4b25      	ldr	r3, [pc, #148]	@ (80051a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 030f 	and.w	r3, r3, #15
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	429a      	cmp	r2, r3
 800511c:	d20c      	bcs.n	8005138 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800511e:	4b22      	ldr	r3, [pc, #136]	@ (80051a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005120:	683a      	ldr	r2, [r7, #0]
 8005122:	b2d2      	uxtb	r2, r2
 8005124:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005126:	4b20      	ldr	r3, [pc, #128]	@ (80051a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 030f 	and.w	r3, r3, #15
 800512e:	683a      	ldr	r2, [r7, #0]
 8005130:	429a      	cmp	r2, r3
 8005132:	d001      	beq.n	8005138 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e032      	b.n	800519e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0304 	and.w	r3, r3, #4
 8005140:	2b00      	cmp	r3, #0
 8005142:	d008      	beq.n	8005156 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005144:	4b19      	ldr	r3, [pc, #100]	@ (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	4916      	ldr	r1, [pc, #88]	@ (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005152:	4313      	orrs	r3, r2
 8005154:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0308 	and.w	r3, r3, #8
 800515e:	2b00      	cmp	r3, #0
 8005160:	d009      	beq.n	8005176 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005162:	4b12      	ldr	r3, [pc, #72]	@ (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	00db      	lsls	r3, r3, #3
 8005170:	490e      	ldr	r1, [pc, #56]	@ (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005172:	4313      	orrs	r3, r2
 8005174:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005176:	f000 f821 	bl	80051bc <HAL_RCC_GetSysClockFreq>
 800517a:	4602      	mov	r2, r0
 800517c:	4b0b      	ldr	r3, [pc, #44]	@ (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	091b      	lsrs	r3, r3, #4
 8005182:	f003 030f 	and.w	r3, r3, #15
 8005186:	490a      	ldr	r1, [pc, #40]	@ (80051b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005188:	5ccb      	ldrb	r3, [r1, r3]
 800518a:	fa22 f303 	lsr.w	r3, r2, r3
 800518e:	4a09      	ldr	r2, [pc, #36]	@ (80051b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005192:	4b09      	ldr	r3, [pc, #36]	@ (80051b8 <HAL_RCC_ClockConfig+0x1c8>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4618      	mov	r0, r3
 8005198:	f7fd fd14 	bl	8002bc4 <HAL_InitTick>

  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	40023c00 	.word	0x40023c00
 80051ac:	40023800 	.word	0x40023800
 80051b0:	08007fec 	.word	0x08007fec
 80051b4:	20000010 	.word	0x20000010
 80051b8:	20000014 	.word	0x20000014

080051bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051c0:	b094      	sub	sp, #80	@ 0x50
 80051c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80051c4:	2300      	movs	r3, #0
 80051c6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80051c8:	2300      	movs	r3, #0
 80051ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80051cc:	2300      	movs	r3, #0
 80051ce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80051d0:	2300      	movs	r3, #0
 80051d2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051d4:	4b79      	ldr	r3, [pc, #484]	@ (80053bc <HAL_RCC_GetSysClockFreq+0x200>)
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f003 030c 	and.w	r3, r3, #12
 80051dc:	2b08      	cmp	r3, #8
 80051de:	d00d      	beq.n	80051fc <HAL_RCC_GetSysClockFreq+0x40>
 80051e0:	2b08      	cmp	r3, #8
 80051e2:	f200 80e1 	bhi.w	80053a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d002      	beq.n	80051f0 <HAL_RCC_GetSysClockFreq+0x34>
 80051ea:	2b04      	cmp	r3, #4
 80051ec:	d003      	beq.n	80051f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80051ee:	e0db      	b.n	80053a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051f0:	4b73      	ldr	r3, [pc, #460]	@ (80053c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80051f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80051f4:	e0db      	b.n	80053ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051f6:	4b73      	ldr	r3, [pc, #460]	@ (80053c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80051f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80051fa:	e0d8      	b.n	80053ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051fc:	4b6f      	ldr	r3, [pc, #444]	@ (80053bc <HAL_RCC_GetSysClockFreq+0x200>)
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005204:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005206:	4b6d      	ldr	r3, [pc, #436]	@ (80053bc <HAL_RCC_GetSysClockFreq+0x200>)
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d063      	beq.n	80052da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005212:	4b6a      	ldr	r3, [pc, #424]	@ (80053bc <HAL_RCC_GetSysClockFreq+0x200>)
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	099b      	lsrs	r3, r3, #6
 8005218:	2200      	movs	r2, #0
 800521a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800521c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800521e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005220:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005224:	633b      	str	r3, [r7, #48]	@ 0x30
 8005226:	2300      	movs	r3, #0
 8005228:	637b      	str	r3, [r7, #52]	@ 0x34
 800522a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800522e:	4622      	mov	r2, r4
 8005230:	462b      	mov	r3, r5
 8005232:	f04f 0000 	mov.w	r0, #0
 8005236:	f04f 0100 	mov.w	r1, #0
 800523a:	0159      	lsls	r1, r3, #5
 800523c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005240:	0150      	lsls	r0, r2, #5
 8005242:	4602      	mov	r2, r0
 8005244:	460b      	mov	r3, r1
 8005246:	4621      	mov	r1, r4
 8005248:	1a51      	subs	r1, r2, r1
 800524a:	6139      	str	r1, [r7, #16]
 800524c:	4629      	mov	r1, r5
 800524e:	eb63 0301 	sbc.w	r3, r3, r1
 8005252:	617b      	str	r3, [r7, #20]
 8005254:	f04f 0200 	mov.w	r2, #0
 8005258:	f04f 0300 	mov.w	r3, #0
 800525c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005260:	4659      	mov	r1, fp
 8005262:	018b      	lsls	r3, r1, #6
 8005264:	4651      	mov	r1, sl
 8005266:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800526a:	4651      	mov	r1, sl
 800526c:	018a      	lsls	r2, r1, #6
 800526e:	4651      	mov	r1, sl
 8005270:	ebb2 0801 	subs.w	r8, r2, r1
 8005274:	4659      	mov	r1, fp
 8005276:	eb63 0901 	sbc.w	r9, r3, r1
 800527a:	f04f 0200 	mov.w	r2, #0
 800527e:	f04f 0300 	mov.w	r3, #0
 8005282:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005286:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800528a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800528e:	4690      	mov	r8, r2
 8005290:	4699      	mov	r9, r3
 8005292:	4623      	mov	r3, r4
 8005294:	eb18 0303 	adds.w	r3, r8, r3
 8005298:	60bb      	str	r3, [r7, #8]
 800529a:	462b      	mov	r3, r5
 800529c:	eb49 0303 	adc.w	r3, r9, r3
 80052a0:	60fb      	str	r3, [r7, #12]
 80052a2:	f04f 0200 	mov.w	r2, #0
 80052a6:	f04f 0300 	mov.w	r3, #0
 80052aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80052ae:	4629      	mov	r1, r5
 80052b0:	024b      	lsls	r3, r1, #9
 80052b2:	4621      	mov	r1, r4
 80052b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80052b8:	4621      	mov	r1, r4
 80052ba:	024a      	lsls	r2, r1, #9
 80052bc:	4610      	mov	r0, r2
 80052be:	4619      	mov	r1, r3
 80052c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052c2:	2200      	movs	r2, #0
 80052c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80052cc:	f7fa ff8e 	bl	80001ec <__aeabi_uldivmod>
 80052d0:	4602      	mov	r2, r0
 80052d2:	460b      	mov	r3, r1
 80052d4:	4613      	mov	r3, r2
 80052d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052d8:	e058      	b.n	800538c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052da:	4b38      	ldr	r3, [pc, #224]	@ (80053bc <HAL_RCC_GetSysClockFreq+0x200>)
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	099b      	lsrs	r3, r3, #6
 80052e0:	2200      	movs	r2, #0
 80052e2:	4618      	mov	r0, r3
 80052e4:	4611      	mov	r1, r2
 80052e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80052ea:	623b      	str	r3, [r7, #32]
 80052ec:	2300      	movs	r3, #0
 80052ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80052f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80052f4:	4642      	mov	r2, r8
 80052f6:	464b      	mov	r3, r9
 80052f8:	f04f 0000 	mov.w	r0, #0
 80052fc:	f04f 0100 	mov.w	r1, #0
 8005300:	0159      	lsls	r1, r3, #5
 8005302:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005306:	0150      	lsls	r0, r2, #5
 8005308:	4602      	mov	r2, r0
 800530a:	460b      	mov	r3, r1
 800530c:	4641      	mov	r1, r8
 800530e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005312:	4649      	mov	r1, r9
 8005314:	eb63 0b01 	sbc.w	fp, r3, r1
 8005318:	f04f 0200 	mov.w	r2, #0
 800531c:	f04f 0300 	mov.w	r3, #0
 8005320:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005324:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005328:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800532c:	ebb2 040a 	subs.w	r4, r2, sl
 8005330:	eb63 050b 	sbc.w	r5, r3, fp
 8005334:	f04f 0200 	mov.w	r2, #0
 8005338:	f04f 0300 	mov.w	r3, #0
 800533c:	00eb      	lsls	r3, r5, #3
 800533e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005342:	00e2      	lsls	r2, r4, #3
 8005344:	4614      	mov	r4, r2
 8005346:	461d      	mov	r5, r3
 8005348:	4643      	mov	r3, r8
 800534a:	18e3      	adds	r3, r4, r3
 800534c:	603b      	str	r3, [r7, #0]
 800534e:	464b      	mov	r3, r9
 8005350:	eb45 0303 	adc.w	r3, r5, r3
 8005354:	607b      	str	r3, [r7, #4]
 8005356:	f04f 0200 	mov.w	r2, #0
 800535a:	f04f 0300 	mov.w	r3, #0
 800535e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005362:	4629      	mov	r1, r5
 8005364:	028b      	lsls	r3, r1, #10
 8005366:	4621      	mov	r1, r4
 8005368:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800536c:	4621      	mov	r1, r4
 800536e:	028a      	lsls	r2, r1, #10
 8005370:	4610      	mov	r0, r2
 8005372:	4619      	mov	r1, r3
 8005374:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005376:	2200      	movs	r2, #0
 8005378:	61bb      	str	r3, [r7, #24]
 800537a:	61fa      	str	r2, [r7, #28]
 800537c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005380:	f7fa ff34 	bl	80001ec <__aeabi_uldivmod>
 8005384:	4602      	mov	r2, r0
 8005386:	460b      	mov	r3, r1
 8005388:	4613      	mov	r3, r2
 800538a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800538c:	4b0b      	ldr	r3, [pc, #44]	@ (80053bc <HAL_RCC_GetSysClockFreq+0x200>)
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	0c1b      	lsrs	r3, r3, #16
 8005392:	f003 0303 	and.w	r3, r3, #3
 8005396:	3301      	adds	r3, #1
 8005398:	005b      	lsls	r3, r3, #1
 800539a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800539c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800539e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80053a6:	e002      	b.n	80053ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053a8:	4b05      	ldr	r3, [pc, #20]	@ (80053c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80053aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80053ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3750      	adds	r7, #80	@ 0x50
 80053b4:	46bd      	mov	sp, r7
 80053b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053ba:	bf00      	nop
 80053bc:	40023800 	.word	0x40023800
 80053c0:	00f42400 	.word	0x00f42400
 80053c4:	007a1200 	.word	0x007a1200

080053c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053c8:	b480      	push	{r7}
 80053ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053cc:	4b03      	ldr	r3, [pc, #12]	@ (80053dc <HAL_RCC_GetHCLKFreq+0x14>)
 80053ce:	681b      	ldr	r3, [r3, #0]
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	20000010 	.word	0x20000010

080053e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80053e4:	f7ff fff0 	bl	80053c8 <HAL_RCC_GetHCLKFreq>
 80053e8:	4602      	mov	r2, r0
 80053ea:	4b05      	ldr	r3, [pc, #20]	@ (8005400 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	0a9b      	lsrs	r3, r3, #10
 80053f0:	f003 0307 	and.w	r3, r3, #7
 80053f4:	4903      	ldr	r1, [pc, #12]	@ (8005404 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053f6:	5ccb      	ldrb	r3, [r1, r3]
 80053f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	40023800 	.word	0x40023800
 8005404:	08007ffc 	.word	0x08007ffc

08005408 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b086      	sub	sp, #24
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005410:	2300      	movs	r3, #0
 8005412:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005414:	2300      	movs	r3, #0
 8005416:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0301 	and.w	r3, r3, #1
 8005420:	2b00      	cmp	r3, #0
 8005422:	d10b      	bne.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800542c:	2b00      	cmp	r3, #0
 800542e:	d105      	bne.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005438:	2b00      	cmp	r3, #0
 800543a:	d075      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800543c:	4b91      	ldr	r3, [pc, #580]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800543e:	2200      	movs	r2, #0
 8005440:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005442:	f7fd fc03 	bl	8002c4c <HAL_GetTick>
 8005446:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005448:	e008      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800544a:	f7fd fbff 	bl	8002c4c <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	2b02      	cmp	r3, #2
 8005456:	d901      	bls.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e189      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800545c:	4b8a      	ldr	r3, [pc, #552]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1f0      	bne.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0301 	and.w	r3, r3, #1
 8005470:	2b00      	cmp	r3, #0
 8005472:	d009      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	019a      	lsls	r2, r3, #6
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	071b      	lsls	r3, r3, #28
 8005480:	4981      	ldr	r1, [pc, #516]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005482:	4313      	orrs	r3, r2
 8005484:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0302 	and.w	r3, r3, #2
 8005490:	2b00      	cmp	r3, #0
 8005492:	d01f      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005494:	4b7c      	ldr	r3, [pc, #496]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005496:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800549a:	0f1b      	lsrs	r3, r3, #28
 800549c:	f003 0307 	and.w	r3, r3, #7
 80054a0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	019a      	lsls	r2, r3, #6
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	061b      	lsls	r3, r3, #24
 80054ae:	431a      	orrs	r2, r3
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	071b      	lsls	r3, r3, #28
 80054b4:	4974      	ldr	r1, [pc, #464]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80054bc:	4b72      	ldr	r3, [pc, #456]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80054c2:	f023 021f 	bic.w	r2, r3, #31
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	69db      	ldr	r3, [r3, #28]
 80054ca:	3b01      	subs	r3, #1
 80054cc:	496e      	ldr	r1, [pc, #440]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d00d      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	019a      	lsls	r2, r3, #6
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	061b      	lsls	r3, r3, #24
 80054ec:	431a      	orrs	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	071b      	lsls	r3, r3, #28
 80054f4:	4964      	ldr	r1, [pc, #400]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80054fc:	4b61      	ldr	r3, [pc, #388]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80054fe:	2201      	movs	r2, #1
 8005500:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005502:	f7fd fba3 	bl	8002c4c <HAL_GetTick>
 8005506:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005508:	e008      	b.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800550a:	f7fd fb9f 	bl	8002c4c <HAL_GetTick>
 800550e:	4602      	mov	r2, r0
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	2b02      	cmp	r3, #2
 8005516:	d901      	bls.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e129      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800551c:	4b5a      	ldr	r3, [pc, #360]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d0f0      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0304 	and.w	r3, r3, #4
 8005530:	2b00      	cmp	r3, #0
 8005532:	d105      	bne.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800553c:	2b00      	cmp	r3, #0
 800553e:	d079      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005540:	4b52      	ldr	r3, [pc, #328]	@ (800568c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005542:	2200      	movs	r2, #0
 8005544:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005546:	f7fd fb81 	bl	8002c4c <HAL_GetTick>
 800554a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800554c:	e008      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800554e:	f7fd fb7d 	bl	8002c4c <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	2b02      	cmp	r3, #2
 800555a:	d901      	bls.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e107      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005560:	4b49      	ldr	r3, [pc, #292]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005568:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800556c:	d0ef      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0304 	and.w	r3, r3, #4
 8005576:	2b00      	cmp	r3, #0
 8005578:	d020      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800557a:	4b43      	ldr	r3, [pc, #268]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800557c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005580:	0f1b      	lsrs	r3, r3, #28
 8005582:	f003 0307 	and.w	r3, r3, #7
 8005586:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	019a      	lsls	r2, r3, #6
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	061b      	lsls	r3, r3, #24
 8005594:	431a      	orrs	r2, r3
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	071b      	lsls	r3, r3, #28
 800559a:	493b      	ldr	r1, [pc, #236]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800559c:	4313      	orrs	r3, r2
 800559e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80055a2:	4b39      	ldr	r3, [pc, #228]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055a8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a1b      	ldr	r3, [r3, #32]
 80055b0:	3b01      	subs	r3, #1
 80055b2:	021b      	lsls	r3, r3, #8
 80055b4:	4934      	ldr	r1, [pc, #208]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0308 	and.w	r3, r3, #8
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d01e      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80055c8:	4b2f      	ldr	r3, [pc, #188]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ce:	0e1b      	lsrs	r3, r3, #24
 80055d0:	f003 030f 	and.w	r3, r3, #15
 80055d4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	019a      	lsls	r2, r3, #6
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	061b      	lsls	r3, r3, #24
 80055e0:	431a      	orrs	r2, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	071b      	lsls	r3, r3, #28
 80055e8:	4927      	ldr	r1, [pc, #156]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80055f0:	4b25      	ldr	r3, [pc, #148]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055f6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055fe:	4922      	ldr	r1, [pc, #136]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005600:	4313      	orrs	r3, r2
 8005602:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005606:	4b21      	ldr	r3, [pc, #132]	@ (800568c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005608:	2201      	movs	r2, #1
 800560a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800560c:	f7fd fb1e 	bl	8002c4c <HAL_GetTick>
 8005610:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005612:	e008      	b.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005614:	f7fd fb1a 	bl	8002c4c <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	2b02      	cmp	r3, #2
 8005620:	d901      	bls.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e0a4      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005626:	4b18      	ldr	r3, [pc, #96]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800562e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005632:	d1ef      	bne.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0320 	and.w	r3, r3, #32
 800563c:	2b00      	cmp	r3, #0
 800563e:	f000 808b 	beq.w	8005758 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005642:	2300      	movs	r3, #0
 8005644:	60fb      	str	r3, [r7, #12]
 8005646:	4b10      	ldr	r3, [pc, #64]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800564a:	4a0f      	ldr	r2, [pc, #60]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800564c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005650:	6413      	str	r3, [r2, #64]	@ 0x40
 8005652:	4b0d      	ldr	r3, [pc, #52]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005656:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800565a:	60fb      	str	r3, [r7, #12]
 800565c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800565e:	4b0c      	ldr	r3, [pc, #48]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a0b      	ldr	r2, [pc, #44]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005664:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005668:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800566a:	f7fd faef 	bl	8002c4c <HAL_GetTick>
 800566e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005670:	e010      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005672:	f7fd faeb 	bl	8002c4c <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	2b02      	cmp	r3, #2
 800567e:	d909      	bls.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e075      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005684:	42470068 	.word	0x42470068
 8005688:	40023800 	.word	0x40023800
 800568c:	42470070 	.word	0x42470070
 8005690:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005694:	4b38      	ldr	r3, [pc, #224]	@ (8005778 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800569c:	2b00      	cmp	r3, #0
 800569e:	d0e8      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056a0:	4b36      	ldr	r3, [pc, #216]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056a8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d02f      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d028      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056be:	4b2f      	ldr	r3, [pc, #188]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056c6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056c8:	4b2d      	ldr	r3, [pc, #180]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80056ca:	2201      	movs	r2, #1
 80056cc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056ce:	4b2c      	ldr	r3, [pc, #176]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80056d0:	2200      	movs	r2, #0
 80056d2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80056d4:	4a29      	ldr	r2, [pc, #164]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80056da:	4b28      	ldr	r3, [pc, #160]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056de:	f003 0301 	and.w	r3, r3, #1
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d114      	bne.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80056e6:	f7fd fab1 	bl	8002c4c <HAL_GetTick>
 80056ea:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056ec:	e00a      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056ee:	f7fd faad 	bl	8002c4c <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d901      	bls.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e035      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005704:	4b1d      	ldr	r3, [pc, #116]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005706:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005708:	f003 0302 	and.w	r3, r3, #2
 800570c:	2b00      	cmp	r3, #0
 800570e:	d0ee      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005714:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005718:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800571c:	d10d      	bne.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x332>
 800571e:	4b17      	ldr	r3, [pc, #92]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800572a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800572e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005732:	4912      	ldr	r1, [pc, #72]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005734:	4313      	orrs	r3, r2
 8005736:	608b      	str	r3, [r1, #8]
 8005738:	e005      	b.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800573a:	4b10      	ldr	r3, [pc, #64]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	4a0f      	ldr	r2, [pc, #60]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005740:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005744:	6093      	str	r3, [r2, #8]
 8005746:	4b0d      	ldr	r3, [pc, #52]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005748:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800574e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005752:	490a      	ldr	r1, [pc, #40]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005754:	4313      	orrs	r3, r2
 8005756:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0310 	and.w	r3, r3, #16
 8005760:	2b00      	cmp	r3, #0
 8005762:	d004      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800576a:	4b06      	ldr	r3, [pc, #24]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800576c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3718      	adds	r7, #24
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	40007000 	.word	0x40007000
 800577c:	40023800 	.word	0x40023800
 8005780:	42470e40 	.word	0x42470e40
 8005784:	424711e0 	.word	0x424711e0

08005788 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d101      	bne.n	800579a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e01c      	b.n	80057d4 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	795b      	ldrb	r3, [r3, #5]
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d105      	bne.n	80057b0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f7fc fce0 	bl	8002170 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2202      	movs	r2, #2
 80057b4:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f042 0204 	orr.w	r2, r2, #4
 80057c4:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2201      	movs	r2, #1
 80057ca:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3708      	adds	r7, #8
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d101      	bne.n	80057ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e07b      	b.n	80058e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d108      	bne.n	8005808 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057fe:	d009      	beq.n	8005814 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	61da      	str	r2, [r3, #28]
 8005806:	e005      	b.n	8005814 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005820:	b2db      	uxtb	r3, r3
 8005822:	2b00      	cmp	r3, #0
 8005824:	d106      	bne.n	8005834 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7fc fcc0 	bl	80021b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2202      	movs	r2, #2
 8005838:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800584a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800585c:	431a      	orrs	r2, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005866:	431a      	orrs	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	f003 0302 	and.w	r3, r3, #2
 8005870:	431a      	orrs	r2, r3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	f003 0301 	and.w	r3, r3, #1
 800587a:	431a      	orrs	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005884:	431a      	orrs	r2, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	69db      	ldr	r3, [r3, #28]
 800588a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800588e:	431a      	orrs	r2, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a1b      	ldr	r3, [r3, #32]
 8005894:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005898:	ea42 0103 	orr.w	r1, r2, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058a0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	430a      	orrs	r2, r1
 80058aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	0c1b      	lsrs	r3, r3, #16
 80058b2:	f003 0104 	and.w	r1, r3, #4
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ba:	f003 0210 	and.w	r2, r3, #16
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	430a      	orrs	r2, r1
 80058c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	69da      	ldr	r2, [r3, #28]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80058d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3708      	adds	r7, #8
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b082      	sub	sp, #8
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d101      	bne.n	8005900 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e01a      	b.n	8005936 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2202      	movs	r2, #2
 8005904:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005916:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f7fc fc93 	bl	8002244 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b088      	sub	sp, #32
 8005942:	af00      	add	r7, sp, #0
 8005944:	60f8      	str	r0, [r7, #12]
 8005946:	60b9      	str	r1, [r7, #8]
 8005948:	603b      	str	r3, [r7, #0]
 800594a:	4613      	mov	r3, r2
 800594c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800594e:	f7fd f97d 	bl	8002c4c <HAL_GetTick>
 8005952:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005954:	88fb      	ldrh	r3, [r7, #6]
 8005956:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800595e:	b2db      	uxtb	r3, r3
 8005960:	2b01      	cmp	r3, #1
 8005962:	d001      	beq.n	8005968 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005964:	2302      	movs	r3, #2
 8005966:	e12a      	b.n	8005bbe <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d002      	beq.n	8005974 <HAL_SPI_Transmit+0x36>
 800596e:	88fb      	ldrh	r3, [r7, #6]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d101      	bne.n	8005978 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e122      	b.n	8005bbe <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800597e:	2b01      	cmp	r3, #1
 8005980:	d101      	bne.n	8005986 <HAL_SPI_Transmit+0x48>
 8005982:	2302      	movs	r3, #2
 8005984:	e11b      	b.n	8005bbe <HAL_SPI_Transmit+0x280>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2203      	movs	r2, #3
 8005992:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2200      	movs	r2, #0
 800599a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	68ba      	ldr	r2, [r7, #8]
 80059a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	88fa      	ldrh	r2, [r7, #6]
 80059a6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	88fa      	ldrh	r2, [r7, #6]
 80059ac:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059d4:	d10f      	bne.n	80059f6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80059f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a00:	2b40      	cmp	r3, #64	@ 0x40
 8005a02:	d007      	beq.n	8005a14 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a1c:	d152      	bne.n	8005ac4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d002      	beq.n	8005a2c <HAL_SPI_Transmit+0xee>
 8005a26:	8b7b      	ldrh	r3, [r7, #26]
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d145      	bne.n	8005ab8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a30:	881a      	ldrh	r2, [r3, #0]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a3c:	1c9a      	adds	r2, r3, #2
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a50:	e032      	b.n	8005ab8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f003 0302 	and.w	r3, r3, #2
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d112      	bne.n	8005a86 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a64:	881a      	ldrh	r2, [r3, #0]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a70:	1c9a      	adds	r2, r3, #2
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005a84:	e018      	b.n	8005ab8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a86:	f7fd f8e1 	bl	8002c4c <HAL_GetTick>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	683a      	ldr	r2, [r7, #0]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d803      	bhi.n	8005a9e <HAL_SPI_Transmit+0x160>
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a9c:	d102      	bne.n	8005aa4 <HAL_SPI_Transmit+0x166>
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d109      	bne.n	8005ab8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e082      	b.n	8005bbe <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d1c7      	bne.n	8005a52 <HAL_SPI_Transmit+0x114>
 8005ac2:	e053      	b.n	8005b6c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d002      	beq.n	8005ad2 <HAL_SPI_Transmit+0x194>
 8005acc:	8b7b      	ldrh	r3, [r7, #26]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d147      	bne.n	8005b62 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	330c      	adds	r3, #12
 8005adc:	7812      	ldrb	r2, [r2, #0]
 8005ade:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ae4:	1c5a      	adds	r2, r3, #1
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	3b01      	subs	r3, #1
 8005af2:	b29a      	uxth	r2, r3
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005af8:	e033      	b.n	8005b62 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f003 0302 	and.w	r3, r3, #2
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	d113      	bne.n	8005b30 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	330c      	adds	r3, #12
 8005b12:	7812      	ldrb	r2, [r2, #0]
 8005b14:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b1a:	1c5a      	adds	r2, r3, #1
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	3b01      	subs	r3, #1
 8005b28:	b29a      	uxth	r2, r3
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005b2e:	e018      	b.n	8005b62 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b30:	f7fd f88c 	bl	8002c4c <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	683a      	ldr	r2, [r7, #0]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d803      	bhi.n	8005b48 <HAL_SPI_Transmit+0x20a>
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b46:	d102      	bne.n	8005b4e <HAL_SPI_Transmit+0x210>
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d109      	bne.n	8005b62 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e02d      	b.n	8005bbe <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1c6      	bne.n	8005afa <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b6c:	69fa      	ldr	r2, [r7, #28]
 8005b6e:	6839      	ldr	r1, [r7, #0]
 8005b70:	68f8      	ldr	r0, [r7, #12]
 8005b72:	f000 f8bf 	bl	8005cf4 <SPI_EndRxTxTransaction>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d002      	beq.n	8005b82 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2220      	movs	r2, #32
 8005b80:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10a      	bne.n	8005ba0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	617b      	str	r3, [r7, #20]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	617b      	str	r3, [r7, #20]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	617b      	str	r3, [r7, #20]
 8005b9e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d001      	beq.n	8005bbc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e000      	b.n	8005bbe <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
  }
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3720      	adds	r7, #32
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	b083      	sub	sp, #12
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005bd4:	b2db      	uxtb	r3, r3
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	370c      	adds	r7, #12
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
	...

08005be4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b088      	sub	sp, #32
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	603b      	str	r3, [r7, #0]
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005bf4:	f7fd f82a 	bl	8002c4c <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bfc:	1a9b      	subs	r3, r3, r2
 8005bfe:	683a      	ldr	r2, [r7, #0]
 8005c00:	4413      	add	r3, r2
 8005c02:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005c04:	f7fd f822 	bl	8002c4c <HAL_GetTick>
 8005c08:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005c0a:	4b39      	ldr	r3, [pc, #228]	@ (8005cf0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	015b      	lsls	r3, r3, #5
 8005c10:	0d1b      	lsrs	r3, r3, #20
 8005c12:	69fa      	ldr	r2, [r7, #28]
 8005c14:	fb02 f303 	mul.w	r3, r2, r3
 8005c18:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c1a:	e054      	b.n	8005cc6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c22:	d050      	beq.n	8005cc6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c24:	f7fd f812 	bl	8002c4c <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	69fa      	ldr	r2, [r7, #28]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d902      	bls.n	8005c3a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d13d      	bne.n	8005cb6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	685a      	ldr	r2, [r3, #4]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005c48:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c52:	d111      	bne.n	8005c78 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c5c:	d004      	beq.n	8005c68 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c66:	d107      	bne.n	8005c78 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c80:	d10f      	bne.n	8005ca2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c90:	601a      	str	r2, [r3, #0]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ca0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e017      	b.n	8005ce6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d101      	bne.n	8005cc0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	689a      	ldr	r2, [r3, #8]
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	4013      	ands	r3, r2
 8005cd0:	68ba      	ldr	r2, [r7, #8]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	bf0c      	ite	eq
 8005cd6:	2301      	moveq	r3, #1
 8005cd8:	2300      	movne	r3, #0
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	461a      	mov	r2, r3
 8005cde:	79fb      	ldrb	r3, [r7, #7]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d19b      	bne.n	8005c1c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3720      	adds	r7, #32
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	20000010 	.word	0x20000010

08005cf4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b088      	sub	sp, #32
 8005cf8:	af02      	add	r7, sp, #8
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	9300      	str	r3, [sp, #0]
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	2201      	movs	r2, #1
 8005d08:	2102      	movs	r1, #2
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f7ff ff6a 	bl	8005be4 <SPI_WaitFlagStateUntilTimeout>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d007      	beq.n	8005d26 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d1a:	f043 0220 	orr.w	r2, r3, #32
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e032      	b.n	8005d8c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005d26:	4b1b      	ldr	r3, [pc, #108]	@ (8005d94 <SPI_EndRxTxTransaction+0xa0>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a1b      	ldr	r2, [pc, #108]	@ (8005d98 <SPI_EndRxTxTransaction+0xa4>)
 8005d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d30:	0d5b      	lsrs	r3, r3, #21
 8005d32:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005d36:	fb02 f303 	mul.w	r3, r2, r3
 8005d3a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d44:	d112      	bne.n	8005d6c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	9300      	str	r3, [sp, #0]
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	2180      	movs	r1, #128	@ 0x80
 8005d50:	68f8      	ldr	r0, [r7, #12]
 8005d52:	f7ff ff47 	bl	8005be4 <SPI_WaitFlagStateUntilTimeout>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d016      	beq.n	8005d8a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d60:	f043 0220 	orr.w	r2, r3, #32
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	e00f      	b.n	8005d8c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00a      	beq.n	8005d88 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	3b01      	subs	r3, #1
 8005d76:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d82:	2b80      	cmp	r3, #128	@ 0x80
 8005d84:	d0f2      	beq.n	8005d6c <SPI_EndRxTxTransaction+0x78>
 8005d86:	e000      	b.n	8005d8a <SPI_EndRxTxTransaction+0x96>
        break;
 8005d88:	bf00      	nop
  }

  return HAL_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3718      	adds	r7, #24
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	20000010 	.word	0x20000010
 8005d98:	165e9f81 	.word	0x165e9f81

08005d9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d101      	bne.n	8005dae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e041      	b.n	8005e32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d106      	bne.n	8005dc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f7fc fa5c 	bl	8002280 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2202      	movs	r2, #2
 8005dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	3304      	adds	r3, #4
 8005dd8:	4619      	mov	r1, r3
 8005dda:	4610      	mov	r0, r2
 8005ddc:	f000 f8f4 	bl	8005fc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3708      	adds	r7, #8
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}

08005e3a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e3a:	b580      	push	{r7, lr}
 8005e3c:	b084      	sub	sp, #16
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
 8005e42:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e44:	2300      	movs	r3, #0
 8005e46:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d101      	bne.n	8005e56 <HAL_TIM_ConfigClockSource+0x1c>
 8005e52:	2302      	movs	r3, #2
 8005e54:	e0b4      	b.n	8005fc0 <HAL_TIM_ConfigClockSource+0x186>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2202      	movs	r2, #2
 8005e62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005e74:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e7c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68ba      	ldr	r2, [r7, #8]
 8005e84:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e8e:	d03e      	beq.n	8005f0e <HAL_TIM_ConfigClockSource+0xd4>
 8005e90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e94:	f200 8087 	bhi.w	8005fa6 <HAL_TIM_ConfigClockSource+0x16c>
 8005e98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e9c:	f000 8086 	beq.w	8005fac <HAL_TIM_ConfigClockSource+0x172>
 8005ea0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ea4:	d87f      	bhi.n	8005fa6 <HAL_TIM_ConfigClockSource+0x16c>
 8005ea6:	2b70      	cmp	r3, #112	@ 0x70
 8005ea8:	d01a      	beq.n	8005ee0 <HAL_TIM_ConfigClockSource+0xa6>
 8005eaa:	2b70      	cmp	r3, #112	@ 0x70
 8005eac:	d87b      	bhi.n	8005fa6 <HAL_TIM_ConfigClockSource+0x16c>
 8005eae:	2b60      	cmp	r3, #96	@ 0x60
 8005eb0:	d050      	beq.n	8005f54 <HAL_TIM_ConfigClockSource+0x11a>
 8005eb2:	2b60      	cmp	r3, #96	@ 0x60
 8005eb4:	d877      	bhi.n	8005fa6 <HAL_TIM_ConfigClockSource+0x16c>
 8005eb6:	2b50      	cmp	r3, #80	@ 0x50
 8005eb8:	d03c      	beq.n	8005f34 <HAL_TIM_ConfigClockSource+0xfa>
 8005eba:	2b50      	cmp	r3, #80	@ 0x50
 8005ebc:	d873      	bhi.n	8005fa6 <HAL_TIM_ConfigClockSource+0x16c>
 8005ebe:	2b40      	cmp	r3, #64	@ 0x40
 8005ec0:	d058      	beq.n	8005f74 <HAL_TIM_ConfigClockSource+0x13a>
 8005ec2:	2b40      	cmp	r3, #64	@ 0x40
 8005ec4:	d86f      	bhi.n	8005fa6 <HAL_TIM_ConfigClockSource+0x16c>
 8005ec6:	2b30      	cmp	r3, #48	@ 0x30
 8005ec8:	d064      	beq.n	8005f94 <HAL_TIM_ConfigClockSource+0x15a>
 8005eca:	2b30      	cmp	r3, #48	@ 0x30
 8005ecc:	d86b      	bhi.n	8005fa6 <HAL_TIM_ConfigClockSource+0x16c>
 8005ece:	2b20      	cmp	r3, #32
 8005ed0:	d060      	beq.n	8005f94 <HAL_TIM_ConfigClockSource+0x15a>
 8005ed2:	2b20      	cmp	r3, #32
 8005ed4:	d867      	bhi.n	8005fa6 <HAL_TIM_ConfigClockSource+0x16c>
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d05c      	beq.n	8005f94 <HAL_TIM_ConfigClockSource+0x15a>
 8005eda:	2b10      	cmp	r3, #16
 8005edc:	d05a      	beq.n	8005f94 <HAL_TIM_ConfigClockSource+0x15a>
 8005ede:	e062      	b.n	8005fa6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ef0:	f000 f990 	bl	8006214 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005f02:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68ba      	ldr	r2, [r7, #8]
 8005f0a:	609a      	str	r2, [r3, #8]
      break;
 8005f0c:	e04f      	b.n	8005fae <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f1e:	f000 f979 	bl	8006214 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	689a      	ldr	r2, [r3, #8]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f30:	609a      	str	r2, [r3, #8]
      break;
 8005f32:	e03c      	b.n	8005fae <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f40:	461a      	mov	r2, r3
 8005f42:	f000 f8ed 	bl	8006120 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2150      	movs	r1, #80	@ 0x50
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f000 f946 	bl	80061de <TIM_ITRx_SetConfig>
      break;
 8005f52:	e02c      	b.n	8005fae <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f60:	461a      	mov	r2, r3
 8005f62:	f000 f90c 	bl	800617e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2160      	movs	r1, #96	@ 0x60
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f000 f936 	bl	80061de <TIM_ITRx_SetConfig>
      break;
 8005f72:	e01c      	b.n	8005fae <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f80:	461a      	mov	r2, r3
 8005f82:	f000 f8cd 	bl	8006120 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2140      	movs	r1, #64	@ 0x40
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f000 f926 	bl	80061de <TIM_ITRx_SetConfig>
      break;
 8005f92:	e00c      	b.n	8005fae <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	4610      	mov	r0, r2
 8005fa0:	f000 f91d 	bl	80061de <TIM_ITRx_SetConfig>
      break;
 8005fa4:	e003      	b.n	8005fae <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	73fb      	strb	r3, [r7, #15]
      break;
 8005faa:	e000      	b.n	8005fae <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005fac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3710      	adds	r7, #16
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b085      	sub	sp, #20
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a46      	ldr	r2, [pc, #280]	@ (80060f4 <TIM_Base_SetConfig+0x12c>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d013      	beq.n	8006008 <TIM_Base_SetConfig+0x40>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fe6:	d00f      	beq.n	8006008 <TIM_Base_SetConfig+0x40>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a43      	ldr	r2, [pc, #268]	@ (80060f8 <TIM_Base_SetConfig+0x130>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d00b      	beq.n	8006008 <TIM_Base_SetConfig+0x40>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a42      	ldr	r2, [pc, #264]	@ (80060fc <TIM_Base_SetConfig+0x134>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d007      	beq.n	8006008 <TIM_Base_SetConfig+0x40>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a41      	ldr	r2, [pc, #260]	@ (8006100 <TIM_Base_SetConfig+0x138>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d003      	beq.n	8006008 <TIM_Base_SetConfig+0x40>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a40      	ldr	r2, [pc, #256]	@ (8006104 <TIM_Base_SetConfig+0x13c>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d108      	bne.n	800601a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800600e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	4313      	orrs	r3, r2
 8006018:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a35      	ldr	r2, [pc, #212]	@ (80060f4 <TIM_Base_SetConfig+0x12c>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d02b      	beq.n	800607a <TIM_Base_SetConfig+0xb2>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006028:	d027      	beq.n	800607a <TIM_Base_SetConfig+0xb2>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a32      	ldr	r2, [pc, #200]	@ (80060f8 <TIM_Base_SetConfig+0x130>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d023      	beq.n	800607a <TIM_Base_SetConfig+0xb2>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a31      	ldr	r2, [pc, #196]	@ (80060fc <TIM_Base_SetConfig+0x134>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d01f      	beq.n	800607a <TIM_Base_SetConfig+0xb2>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a30      	ldr	r2, [pc, #192]	@ (8006100 <TIM_Base_SetConfig+0x138>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d01b      	beq.n	800607a <TIM_Base_SetConfig+0xb2>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a2f      	ldr	r2, [pc, #188]	@ (8006104 <TIM_Base_SetConfig+0x13c>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d017      	beq.n	800607a <TIM_Base_SetConfig+0xb2>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a2e      	ldr	r2, [pc, #184]	@ (8006108 <TIM_Base_SetConfig+0x140>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d013      	beq.n	800607a <TIM_Base_SetConfig+0xb2>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a2d      	ldr	r2, [pc, #180]	@ (800610c <TIM_Base_SetConfig+0x144>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d00f      	beq.n	800607a <TIM_Base_SetConfig+0xb2>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a2c      	ldr	r2, [pc, #176]	@ (8006110 <TIM_Base_SetConfig+0x148>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d00b      	beq.n	800607a <TIM_Base_SetConfig+0xb2>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a2b      	ldr	r2, [pc, #172]	@ (8006114 <TIM_Base_SetConfig+0x14c>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d007      	beq.n	800607a <TIM_Base_SetConfig+0xb2>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a2a      	ldr	r2, [pc, #168]	@ (8006118 <TIM_Base_SetConfig+0x150>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d003      	beq.n	800607a <TIM_Base_SetConfig+0xb2>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a29      	ldr	r2, [pc, #164]	@ (800611c <TIM_Base_SetConfig+0x154>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d108      	bne.n	800608c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006080:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	4313      	orrs	r3, r2
 800608a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	695b      	ldr	r3, [r3, #20]
 8006096:	4313      	orrs	r3, r2
 8006098:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	689a      	ldr	r2, [r3, #8]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a10      	ldr	r2, [pc, #64]	@ (80060f4 <TIM_Base_SetConfig+0x12c>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d003      	beq.n	80060c0 <TIM_Base_SetConfig+0xf8>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4a12      	ldr	r2, [pc, #72]	@ (8006104 <TIM_Base_SetConfig+0x13c>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d103      	bne.n	80060c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	691a      	ldr	r2, [r3, #16]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	f003 0301 	and.w	r3, r3, #1
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d105      	bne.n	80060e6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	f023 0201 	bic.w	r2, r3, #1
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	611a      	str	r2, [r3, #16]
  }
}
 80060e6:	bf00      	nop
 80060e8:	3714      	adds	r7, #20
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
 80060f2:	bf00      	nop
 80060f4:	40010000 	.word	0x40010000
 80060f8:	40000400 	.word	0x40000400
 80060fc:	40000800 	.word	0x40000800
 8006100:	40000c00 	.word	0x40000c00
 8006104:	40010400 	.word	0x40010400
 8006108:	40014000 	.word	0x40014000
 800610c:	40014400 	.word	0x40014400
 8006110:	40014800 	.word	0x40014800
 8006114:	40001800 	.word	0x40001800
 8006118:	40001c00 	.word	0x40001c00
 800611c:	40002000 	.word	0x40002000

08006120 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006120:	b480      	push	{r7}
 8006122:	b087      	sub	sp, #28
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6a1b      	ldr	r3, [r3, #32]
 8006130:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6a1b      	ldr	r3, [r3, #32]
 8006136:	f023 0201 	bic.w	r2, r3, #1
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800614a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	011b      	lsls	r3, r3, #4
 8006150:	693a      	ldr	r2, [r7, #16]
 8006152:	4313      	orrs	r3, r2
 8006154:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	f023 030a 	bic.w	r3, r3, #10
 800615c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	4313      	orrs	r3, r2
 8006164:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	621a      	str	r2, [r3, #32]
}
 8006172:	bf00      	nop
 8006174:	371c      	adds	r7, #28
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800617e:	b480      	push	{r7}
 8006180:	b087      	sub	sp, #28
 8006182:	af00      	add	r7, sp, #0
 8006184:	60f8      	str	r0, [r7, #12]
 8006186:	60b9      	str	r1, [r7, #8]
 8006188:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6a1b      	ldr	r3, [r3, #32]
 800618e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6a1b      	ldr	r3, [r3, #32]
 8006194:	f023 0210 	bic.w	r2, r3, #16
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	699b      	ldr	r3, [r3, #24]
 80061a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80061a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	031b      	lsls	r3, r3, #12
 80061ae:	693a      	ldr	r2, [r7, #16]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80061ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	011b      	lsls	r3, r3, #4
 80061c0:	697a      	ldr	r2, [r7, #20]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	693a      	ldr	r2, [r7, #16]
 80061ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	697a      	ldr	r2, [r7, #20]
 80061d0:	621a      	str	r2, [r3, #32]
}
 80061d2:	bf00      	nop
 80061d4:	371c      	adds	r7, #28
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr

080061de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061de:	b480      	push	{r7}
 80061e0:	b085      	sub	sp, #20
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
 80061e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061f6:	683a      	ldr	r2, [r7, #0]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	f043 0307 	orr.w	r3, r3, #7
 8006200:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	609a      	str	r2, [r3, #8]
}
 8006208:	bf00      	nop
 800620a:	3714      	adds	r7, #20
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006214:	b480      	push	{r7}
 8006216:	b087      	sub	sp, #28
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	607a      	str	r2, [r7, #4]
 8006220:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800622e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	021a      	lsls	r2, r3, #8
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	431a      	orrs	r2, r3
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	4313      	orrs	r3, r2
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	4313      	orrs	r3, r2
 8006240:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	697a      	ldr	r2, [r7, #20]
 8006246:	609a      	str	r2, [r3, #8]
}
 8006248:	bf00      	nop
 800624a:	371c      	adds	r7, #28
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006264:	2b01      	cmp	r3, #1
 8006266:	d101      	bne.n	800626c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006268:	2302      	movs	r3, #2
 800626a:	e05a      	b.n	8006322 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2202      	movs	r2, #2
 8006278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006292:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	4313      	orrs	r3, r2
 800629c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a21      	ldr	r2, [pc, #132]	@ (8006330 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d022      	beq.n	80062f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062b8:	d01d      	beq.n	80062f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a1d      	ldr	r2, [pc, #116]	@ (8006334 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d018      	beq.n	80062f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a1b      	ldr	r2, [pc, #108]	@ (8006338 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d013      	beq.n	80062f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a1a      	ldr	r2, [pc, #104]	@ (800633c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d00e      	beq.n	80062f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a18      	ldr	r2, [pc, #96]	@ (8006340 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d009      	beq.n	80062f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a17      	ldr	r2, [pc, #92]	@ (8006344 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d004      	beq.n	80062f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a15      	ldr	r2, [pc, #84]	@ (8006348 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d10c      	bne.n	8006310 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	68ba      	ldr	r2, [r7, #8]
 8006304:	4313      	orrs	r3, r2
 8006306:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68ba      	ldr	r2, [r7, #8]
 800630e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3714      	adds	r7, #20
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	40010000 	.word	0x40010000
 8006334:	40000400 	.word	0x40000400
 8006338:	40000800 	.word	0x40000800
 800633c:	40000c00 	.word	0x40000c00
 8006340:	40010400 	.word	0x40010400
 8006344:	40014000 	.word	0x40014000
 8006348:	40001800 	.word	0x40001800

0800634c <std>:
 800634c:	2300      	movs	r3, #0
 800634e:	b510      	push	{r4, lr}
 8006350:	4604      	mov	r4, r0
 8006352:	e9c0 3300 	strd	r3, r3, [r0]
 8006356:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800635a:	6083      	str	r3, [r0, #8]
 800635c:	8181      	strh	r1, [r0, #12]
 800635e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006360:	81c2      	strh	r2, [r0, #14]
 8006362:	6183      	str	r3, [r0, #24]
 8006364:	4619      	mov	r1, r3
 8006366:	2208      	movs	r2, #8
 8006368:	305c      	adds	r0, #92	@ 0x5c
 800636a:	f000 f90f 	bl	800658c <memset>
 800636e:	4b0d      	ldr	r3, [pc, #52]	@ (80063a4 <std+0x58>)
 8006370:	6263      	str	r3, [r4, #36]	@ 0x24
 8006372:	4b0d      	ldr	r3, [pc, #52]	@ (80063a8 <std+0x5c>)
 8006374:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006376:	4b0d      	ldr	r3, [pc, #52]	@ (80063ac <std+0x60>)
 8006378:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800637a:	4b0d      	ldr	r3, [pc, #52]	@ (80063b0 <std+0x64>)
 800637c:	6323      	str	r3, [r4, #48]	@ 0x30
 800637e:	4b0d      	ldr	r3, [pc, #52]	@ (80063b4 <std+0x68>)
 8006380:	6224      	str	r4, [r4, #32]
 8006382:	429c      	cmp	r4, r3
 8006384:	d006      	beq.n	8006394 <std+0x48>
 8006386:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800638a:	4294      	cmp	r4, r2
 800638c:	d002      	beq.n	8006394 <std+0x48>
 800638e:	33d0      	adds	r3, #208	@ 0xd0
 8006390:	429c      	cmp	r4, r3
 8006392:	d105      	bne.n	80063a0 <std+0x54>
 8006394:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800639c:	f000 b928 	b.w	80065f0 <__retarget_lock_init_recursive>
 80063a0:	bd10      	pop	{r4, pc}
 80063a2:	bf00      	nop
 80063a4:	080068ad 	.word	0x080068ad
 80063a8:	080068cf 	.word	0x080068cf
 80063ac:	08006907 	.word	0x08006907
 80063b0:	0800692b 	.word	0x0800692b
 80063b4:	20025c18 	.word	0x20025c18

080063b8 <stdio_exit_handler>:
 80063b8:	4a02      	ldr	r2, [pc, #8]	@ (80063c4 <stdio_exit_handler+0xc>)
 80063ba:	4903      	ldr	r1, [pc, #12]	@ (80063c8 <stdio_exit_handler+0x10>)
 80063bc:	4803      	ldr	r0, [pc, #12]	@ (80063cc <stdio_exit_handler+0x14>)
 80063be:	f000 b869 	b.w	8006494 <_fwalk_sglue>
 80063c2:	bf00      	nop
 80063c4:	2000001c 	.word	0x2000001c
 80063c8:	08006845 	.word	0x08006845
 80063cc:	2000002c 	.word	0x2000002c

080063d0 <cleanup_stdio>:
 80063d0:	6841      	ldr	r1, [r0, #4]
 80063d2:	4b0c      	ldr	r3, [pc, #48]	@ (8006404 <cleanup_stdio+0x34>)
 80063d4:	4299      	cmp	r1, r3
 80063d6:	b510      	push	{r4, lr}
 80063d8:	4604      	mov	r4, r0
 80063da:	d001      	beq.n	80063e0 <cleanup_stdio+0x10>
 80063dc:	f000 fa32 	bl	8006844 <_fflush_r>
 80063e0:	68a1      	ldr	r1, [r4, #8]
 80063e2:	4b09      	ldr	r3, [pc, #36]	@ (8006408 <cleanup_stdio+0x38>)
 80063e4:	4299      	cmp	r1, r3
 80063e6:	d002      	beq.n	80063ee <cleanup_stdio+0x1e>
 80063e8:	4620      	mov	r0, r4
 80063ea:	f000 fa2b 	bl	8006844 <_fflush_r>
 80063ee:	68e1      	ldr	r1, [r4, #12]
 80063f0:	4b06      	ldr	r3, [pc, #24]	@ (800640c <cleanup_stdio+0x3c>)
 80063f2:	4299      	cmp	r1, r3
 80063f4:	d004      	beq.n	8006400 <cleanup_stdio+0x30>
 80063f6:	4620      	mov	r0, r4
 80063f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063fc:	f000 ba22 	b.w	8006844 <_fflush_r>
 8006400:	bd10      	pop	{r4, pc}
 8006402:	bf00      	nop
 8006404:	20025c18 	.word	0x20025c18
 8006408:	20025c80 	.word	0x20025c80
 800640c:	20025ce8 	.word	0x20025ce8

08006410 <global_stdio_init.part.0>:
 8006410:	b510      	push	{r4, lr}
 8006412:	4b0b      	ldr	r3, [pc, #44]	@ (8006440 <global_stdio_init.part.0+0x30>)
 8006414:	4c0b      	ldr	r4, [pc, #44]	@ (8006444 <global_stdio_init.part.0+0x34>)
 8006416:	4a0c      	ldr	r2, [pc, #48]	@ (8006448 <global_stdio_init.part.0+0x38>)
 8006418:	601a      	str	r2, [r3, #0]
 800641a:	4620      	mov	r0, r4
 800641c:	2200      	movs	r2, #0
 800641e:	2104      	movs	r1, #4
 8006420:	f7ff ff94 	bl	800634c <std>
 8006424:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006428:	2201      	movs	r2, #1
 800642a:	2109      	movs	r1, #9
 800642c:	f7ff ff8e 	bl	800634c <std>
 8006430:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006434:	2202      	movs	r2, #2
 8006436:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800643a:	2112      	movs	r1, #18
 800643c:	f7ff bf86 	b.w	800634c <std>
 8006440:	20025d50 	.word	0x20025d50
 8006444:	20025c18 	.word	0x20025c18
 8006448:	080063b9 	.word	0x080063b9

0800644c <__sfp_lock_acquire>:
 800644c:	4801      	ldr	r0, [pc, #4]	@ (8006454 <__sfp_lock_acquire+0x8>)
 800644e:	f000 b8d0 	b.w	80065f2 <__retarget_lock_acquire_recursive>
 8006452:	bf00      	nop
 8006454:	20025d55 	.word	0x20025d55

08006458 <__sfp_lock_release>:
 8006458:	4801      	ldr	r0, [pc, #4]	@ (8006460 <__sfp_lock_release+0x8>)
 800645a:	f000 b8cb 	b.w	80065f4 <__retarget_lock_release_recursive>
 800645e:	bf00      	nop
 8006460:	20025d55 	.word	0x20025d55

08006464 <__sinit>:
 8006464:	b510      	push	{r4, lr}
 8006466:	4604      	mov	r4, r0
 8006468:	f7ff fff0 	bl	800644c <__sfp_lock_acquire>
 800646c:	6a23      	ldr	r3, [r4, #32]
 800646e:	b11b      	cbz	r3, 8006478 <__sinit+0x14>
 8006470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006474:	f7ff bff0 	b.w	8006458 <__sfp_lock_release>
 8006478:	4b04      	ldr	r3, [pc, #16]	@ (800648c <__sinit+0x28>)
 800647a:	6223      	str	r3, [r4, #32]
 800647c:	4b04      	ldr	r3, [pc, #16]	@ (8006490 <__sinit+0x2c>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1f5      	bne.n	8006470 <__sinit+0xc>
 8006484:	f7ff ffc4 	bl	8006410 <global_stdio_init.part.0>
 8006488:	e7f2      	b.n	8006470 <__sinit+0xc>
 800648a:	bf00      	nop
 800648c:	080063d1 	.word	0x080063d1
 8006490:	20025d50 	.word	0x20025d50

08006494 <_fwalk_sglue>:
 8006494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006498:	4607      	mov	r7, r0
 800649a:	4688      	mov	r8, r1
 800649c:	4614      	mov	r4, r2
 800649e:	2600      	movs	r6, #0
 80064a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80064a4:	f1b9 0901 	subs.w	r9, r9, #1
 80064a8:	d505      	bpl.n	80064b6 <_fwalk_sglue+0x22>
 80064aa:	6824      	ldr	r4, [r4, #0]
 80064ac:	2c00      	cmp	r4, #0
 80064ae:	d1f7      	bne.n	80064a0 <_fwalk_sglue+0xc>
 80064b0:	4630      	mov	r0, r6
 80064b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064b6:	89ab      	ldrh	r3, [r5, #12]
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d907      	bls.n	80064cc <_fwalk_sglue+0x38>
 80064bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80064c0:	3301      	adds	r3, #1
 80064c2:	d003      	beq.n	80064cc <_fwalk_sglue+0x38>
 80064c4:	4629      	mov	r1, r5
 80064c6:	4638      	mov	r0, r7
 80064c8:	47c0      	blx	r8
 80064ca:	4306      	orrs	r6, r0
 80064cc:	3568      	adds	r5, #104	@ 0x68
 80064ce:	e7e9      	b.n	80064a4 <_fwalk_sglue+0x10>

080064d0 <_puts_r>:
 80064d0:	6a03      	ldr	r3, [r0, #32]
 80064d2:	b570      	push	{r4, r5, r6, lr}
 80064d4:	6884      	ldr	r4, [r0, #8]
 80064d6:	4605      	mov	r5, r0
 80064d8:	460e      	mov	r6, r1
 80064da:	b90b      	cbnz	r3, 80064e0 <_puts_r+0x10>
 80064dc:	f7ff ffc2 	bl	8006464 <__sinit>
 80064e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80064e2:	07db      	lsls	r3, r3, #31
 80064e4:	d405      	bmi.n	80064f2 <_puts_r+0x22>
 80064e6:	89a3      	ldrh	r3, [r4, #12]
 80064e8:	0598      	lsls	r0, r3, #22
 80064ea:	d402      	bmi.n	80064f2 <_puts_r+0x22>
 80064ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80064ee:	f000 f880 	bl	80065f2 <__retarget_lock_acquire_recursive>
 80064f2:	89a3      	ldrh	r3, [r4, #12]
 80064f4:	0719      	lsls	r1, r3, #28
 80064f6:	d502      	bpl.n	80064fe <_puts_r+0x2e>
 80064f8:	6923      	ldr	r3, [r4, #16]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d135      	bne.n	800656a <_puts_r+0x9a>
 80064fe:	4621      	mov	r1, r4
 8006500:	4628      	mov	r0, r5
 8006502:	f000 fa55 	bl	80069b0 <__swsetup_r>
 8006506:	b380      	cbz	r0, 800656a <_puts_r+0x9a>
 8006508:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800650c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800650e:	07da      	lsls	r2, r3, #31
 8006510:	d405      	bmi.n	800651e <_puts_r+0x4e>
 8006512:	89a3      	ldrh	r3, [r4, #12]
 8006514:	059b      	lsls	r3, r3, #22
 8006516:	d402      	bmi.n	800651e <_puts_r+0x4e>
 8006518:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800651a:	f000 f86b 	bl	80065f4 <__retarget_lock_release_recursive>
 800651e:	4628      	mov	r0, r5
 8006520:	bd70      	pop	{r4, r5, r6, pc}
 8006522:	2b00      	cmp	r3, #0
 8006524:	da04      	bge.n	8006530 <_puts_r+0x60>
 8006526:	69a2      	ldr	r2, [r4, #24]
 8006528:	429a      	cmp	r2, r3
 800652a:	dc17      	bgt.n	800655c <_puts_r+0x8c>
 800652c:	290a      	cmp	r1, #10
 800652e:	d015      	beq.n	800655c <_puts_r+0x8c>
 8006530:	6823      	ldr	r3, [r4, #0]
 8006532:	1c5a      	adds	r2, r3, #1
 8006534:	6022      	str	r2, [r4, #0]
 8006536:	7019      	strb	r1, [r3, #0]
 8006538:	68a3      	ldr	r3, [r4, #8]
 800653a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800653e:	3b01      	subs	r3, #1
 8006540:	60a3      	str	r3, [r4, #8]
 8006542:	2900      	cmp	r1, #0
 8006544:	d1ed      	bne.n	8006522 <_puts_r+0x52>
 8006546:	2b00      	cmp	r3, #0
 8006548:	da11      	bge.n	800656e <_puts_r+0x9e>
 800654a:	4622      	mov	r2, r4
 800654c:	210a      	movs	r1, #10
 800654e:	4628      	mov	r0, r5
 8006550:	f000 f9ef 	bl	8006932 <__swbuf_r>
 8006554:	3001      	adds	r0, #1
 8006556:	d0d7      	beq.n	8006508 <_puts_r+0x38>
 8006558:	250a      	movs	r5, #10
 800655a:	e7d7      	b.n	800650c <_puts_r+0x3c>
 800655c:	4622      	mov	r2, r4
 800655e:	4628      	mov	r0, r5
 8006560:	f000 f9e7 	bl	8006932 <__swbuf_r>
 8006564:	3001      	adds	r0, #1
 8006566:	d1e7      	bne.n	8006538 <_puts_r+0x68>
 8006568:	e7ce      	b.n	8006508 <_puts_r+0x38>
 800656a:	3e01      	subs	r6, #1
 800656c:	e7e4      	b.n	8006538 <_puts_r+0x68>
 800656e:	6823      	ldr	r3, [r4, #0]
 8006570:	1c5a      	adds	r2, r3, #1
 8006572:	6022      	str	r2, [r4, #0]
 8006574:	220a      	movs	r2, #10
 8006576:	701a      	strb	r2, [r3, #0]
 8006578:	e7ee      	b.n	8006558 <_puts_r+0x88>
	...

0800657c <puts>:
 800657c:	4b02      	ldr	r3, [pc, #8]	@ (8006588 <puts+0xc>)
 800657e:	4601      	mov	r1, r0
 8006580:	6818      	ldr	r0, [r3, #0]
 8006582:	f7ff bfa5 	b.w	80064d0 <_puts_r>
 8006586:	bf00      	nop
 8006588:	20000028 	.word	0x20000028

0800658c <memset>:
 800658c:	4402      	add	r2, r0
 800658e:	4603      	mov	r3, r0
 8006590:	4293      	cmp	r3, r2
 8006592:	d100      	bne.n	8006596 <memset+0xa>
 8006594:	4770      	bx	lr
 8006596:	f803 1b01 	strb.w	r1, [r3], #1
 800659a:	e7f9      	b.n	8006590 <memset+0x4>

0800659c <__errno>:
 800659c:	4b01      	ldr	r3, [pc, #4]	@ (80065a4 <__errno+0x8>)
 800659e:	6818      	ldr	r0, [r3, #0]
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop
 80065a4:	20000028 	.word	0x20000028

080065a8 <__libc_init_array>:
 80065a8:	b570      	push	{r4, r5, r6, lr}
 80065aa:	4d0d      	ldr	r5, [pc, #52]	@ (80065e0 <__libc_init_array+0x38>)
 80065ac:	4c0d      	ldr	r4, [pc, #52]	@ (80065e4 <__libc_init_array+0x3c>)
 80065ae:	1b64      	subs	r4, r4, r5
 80065b0:	10a4      	asrs	r4, r4, #2
 80065b2:	2600      	movs	r6, #0
 80065b4:	42a6      	cmp	r6, r4
 80065b6:	d109      	bne.n	80065cc <__libc_init_array+0x24>
 80065b8:	4d0b      	ldr	r5, [pc, #44]	@ (80065e8 <__libc_init_array+0x40>)
 80065ba:	4c0c      	ldr	r4, [pc, #48]	@ (80065ec <__libc_init_array+0x44>)
 80065bc:	f000 fb72 	bl	8006ca4 <_init>
 80065c0:	1b64      	subs	r4, r4, r5
 80065c2:	10a4      	asrs	r4, r4, #2
 80065c4:	2600      	movs	r6, #0
 80065c6:	42a6      	cmp	r6, r4
 80065c8:	d105      	bne.n	80065d6 <__libc_init_array+0x2e>
 80065ca:	bd70      	pop	{r4, r5, r6, pc}
 80065cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80065d0:	4798      	blx	r3
 80065d2:	3601      	adds	r6, #1
 80065d4:	e7ee      	b.n	80065b4 <__libc_init_array+0xc>
 80065d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80065da:	4798      	blx	r3
 80065dc:	3601      	adds	r6, #1
 80065de:	e7f2      	b.n	80065c6 <__libc_init_array+0x1e>
 80065e0:	0800800c 	.word	0x0800800c
 80065e4:	0800800c 	.word	0x0800800c
 80065e8:	0800800c 	.word	0x0800800c
 80065ec:	08008010 	.word	0x08008010

080065f0 <__retarget_lock_init_recursive>:
 80065f0:	4770      	bx	lr

080065f2 <__retarget_lock_acquire_recursive>:
 80065f2:	4770      	bx	lr

080065f4 <__retarget_lock_release_recursive>:
 80065f4:	4770      	bx	lr
	...

080065f8 <sbrk_aligned>:
 80065f8:	b570      	push	{r4, r5, r6, lr}
 80065fa:	4e0f      	ldr	r6, [pc, #60]	@ (8006638 <sbrk_aligned+0x40>)
 80065fc:	460c      	mov	r4, r1
 80065fe:	6831      	ldr	r1, [r6, #0]
 8006600:	4605      	mov	r5, r0
 8006602:	b911      	cbnz	r1, 800660a <sbrk_aligned+0x12>
 8006604:	f000 fac0 	bl	8006b88 <_sbrk_r>
 8006608:	6030      	str	r0, [r6, #0]
 800660a:	4621      	mov	r1, r4
 800660c:	4628      	mov	r0, r5
 800660e:	f000 fabb 	bl	8006b88 <_sbrk_r>
 8006612:	1c43      	adds	r3, r0, #1
 8006614:	d103      	bne.n	800661e <sbrk_aligned+0x26>
 8006616:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800661a:	4620      	mov	r0, r4
 800661c:	bd70      	pop	{r4, r5, r6, pc}
 800661e:	1cc4      	adds	r4, r0, #3
 8006620:	f024 0403 	bic.w	r4, r4, #3
 8006624:	42a0      	cmp	r0, r4
 8006626:	d0f8      	beq.n	800661a <sbrk_aligned+0x22>
 8006628:	1a21      	subs	r1, r4, r0
 800662a:	4628      	mov	r0, r5
 800662c:	f000 faac 	bl	8006b88 <_sbrk_r>
 8006630:	3001      	adds	r0, #1
 8006632:	d1f2      	bne.n	800661a <sbrk_aligned+0x22>
 8006634:	e7ef      	b.n	8006616 <sbrk_aligned+0x1e>
 8006636:	bf00      	nop
 8006638:	20025d58 	.word	0x20025d58

0800663c <_malloc_r>:
 800663c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006640:	1ccd      	adds	r5, r1, #3
 8006642:	f025 0503 	bic.w	r5, r5, #3
 8006646:	3508      	adds	r5, #8
 8006648:	2d0c      	cmp	r5, #12
 800664a:	bf38      	it	cc
 800664c:	250c      	movcc	r5, #12
 800664e:	2d00      	cmp	r5, #0
 8006650:	4606      	mov	r6, r0
 8006652:	db01      	blt.n	8006658 <_malloc_r+0x1c>
 8006654:	42a9      	cmp	r1, r5
 8006656:	d904      	bls.n	8006662 <_malloc_r+0x26>
 8006658:	230c      	movs	r3, #12
 800665a:	6033      	str	r3, [r6, #0]
 800665c:	2000      	movs	r0, #0
 800665e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006662:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006738 <_malloc_r+0xfc>
 8006666:	f000 f915 	bl	8006894 <__malloc_lock>
 800666a:	f8d8 3000 	ldr.w	r3, [r8]
 800666e:	461c      	mov	r4, r3
 8006670:	bb44      	cbnz	r4, 80066c4 <_malloc_r+0x88>
 8006672:	4629      	mov	r1, r5
 8006674:	4630      	mov	r0, r6
 8006676:	f7ff ffbf 	bl	80065f8 <sbrk_aligned>
 800667a:	1c43      	adds	r3, r0, #1
 800667c:	4604      	mov	r4, r0
 800667e:	d158      	bne.n	8006732 <_malloc_r+0xf6>
 8006680:	f8d8 4000 	ldr.w	r4, [r8]
 8006684:	4627      	mov	r7, r4
 8006686:	2f00      	cmp	r7, #0
 8006688:	d143      	bne.n	8006712 <_malloc_r+0xd6>
 800668a:	2c00      	cmp	r4, #0
 800668c:	d04b      	beq.n	8006726 <_malloc_r+0xea>
 800668e:	6823      	ldr	r3, [r4, #0]
 8006690:	4639      	mov	r1, r7
 8006692:	4630      	mov	r0, r6
 8006694:	eb04 0903 	add.w	r9, r4, r3
 8006698:	f000 fa76 	bl	8006b88 <_sbrk_r>
 800669c:	4581      	cmp	r9, r0
 800669e:	d142      	bne.n	8006726 <_malloc_r+0xea>
 80066a0:	6821      	ldr	r1, [r4, #0]
 80066a2:	1a6d      	subs	r5, r5, r1
 80066a4:	4629      	mov	r1, r5
 80066a6:	4630      	mov	r0, r6
 80066a8:	f7ff ffa6 	bl	80065f8 <sbrk_aligned>
 80066ac:	3001      	adds	r0, #1
 80066ae:	d03a      	beq.n	8006726 <_malloc_r+0xea>
 80066b0:	6823      	ldr	r3, [r4, #0]
 80066b2:	442b      	add	r3, r5
 80066b4:	6023      	str	r3, [r4, #0]
 80066b6:	f8d8 3000 	ldr.w	r3, [r8]
 80066ba:	685a      	ldr	r2, [r3, #4]
 80066bc:	bb62      	cbnz	r2, 8006718 <_malloc_r+0xdc>
 80066be:	f8c8 7000 	str.w	r7, [r8]
 80066c2:	e00f      	b.n	80066e4 <_malloc_r+0xa8>
 80066c4:	6822      	ldr	r2, [r4, #0]
 80066c6:	1b52      	subs	r2, r2, r5
 80066c8:	d420      	bmi.n	800670c <_malloc_r+0xd0>
 80066ca:	2a0b      	cmp	r2, #11
 80066cc:	d917      	bls.n	80066fe <_malloc_r+0xc2>
 80066ce:	1961      	adds	r1, r4, r5
 80066d0:	42a3      	cmp	r3, r4
 80066d2:	6025      	str	r5, [r4, #0]
 80066d4:	bf18      	it	ne
 80066d6:	6059      	strne	r1, [r3, #4]
 80066d8:	6863      	ldr	r3, [r4, #4]
 80066da:	bf08      	it	eq
 80066dc:	f8c8 1000 	streq.w	r1, [r8]
 80066e0:	5162      	str	r2, [r4, r5]
 80066e2:	604b      	str	r3, [r1, #4]
 80066e4:	4630      	mov	r0, r6
 80066e6:	f000 f8db 	bl	80068a0 <__malloc_unlock>
 80066ea:	f104 000b 	add.w	r0, r4, #11
 80066ee:	1d23      	adds	r3, r4, #4
 80066f0:	f020 0007 	bic.w	r0, r0, #7
 80066f4:	1ac2      	subs	r2, r0, r3
 80066f6:	bf1c      	itt	ne
 80066f8:	1a1b      	subne	r3, r3, r0
 80066fa:	50a3      	strne	r3, [r4, r2]
 80066fc:	e7af      	b.n	800665e <_malloc_r+0x22>
 80066fe:	6862      	ldr	r2, [r4, #4]
 8006700:	42a3      	cmp	r3, r4
 8006702:	bf0c      	ite	eq
 8006704:	f8c8 2000 	streq.w	r2, [r8]
 8006708:	605a      	strne	r2, [r3, #4]
 800670a:	e7eb      	b.n	80066e4 <_malloc_r+0xa8>
 800670c:	4623      	mov	r3, r4
 800670e:	6864      	ldr	r4, [r4, #4]
 8006710:	e7ae      	b.n	8006670 <_malloc_r+0x34>
 8006712:	463c      	mov	r4, r7
 8006714:	687f      	ldr	r7, [r7, #4]
 8006716:	e7b6      	b.n	8006686 <_malloc_r+0x4a>
 8006718:	461a      	mov	r2, r3
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	42a3      	cmp	r3, r4
 800671e:	d1fb      	bne.n	8006718 <_malloc_r+0xdc>
 8006720:	2300      	movs	r3, #0
 8006722:	6053      	str	r3, [r2, #4]
 8006724:	e7de      	b.n	80066e4 <_malloc_r+0xa8>
 8006726:	230c      	movs	r3, #12
 8006728:	6033      	str	r3, [r6, #0]
 800672a:	4630      	mov	r0, r6
 800672c:	f000 f8b8 	bl	80068a0 <__malloc_unlock>
 8006730:	e794      	b.n	800665c <_malloc_r+0x20>
 8006732:	6005      	str	r5, [r0, #0]
 8006734:	e7d6      	b.n	80066e4 <_malloc_r+0xa8>
 8006736:	bf00      	nop
 8006738:	20025d5c 	.word	0x20025d5c

0800673c <__sflush_r>:
 800673c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006744:	0716      	lsls	r6, r2, #28
 8006746:	4605      	mov	r5, r0
 8006748:	460c      	mov	r4, r1
 800674a:	d454      	bmi.n	80067f6 <__sflush_r+0xba>
 800674c:	684b      	ldr	r3, [r1, #4]
 800674e:	2b00      	cmp	r3, #0
 8006750:	dc02      	bgt.n	8006758 <__sflush_r+0x1c>
 8006752:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006754:	2b00      	cmp	r3, #0
 8006756:	dd48      	ble.n	80067ea <__sflush_r+0xae>
 8006758:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800675a:	2e00      	cmp	r6, #0
 800675c:	d045      	beq.n	80067ea <__sflush_r+0xae>
 800675e:	2300      	movs	r3, #0
 8006760:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006764:	682f      	ldr	r7, [r5, #0]
 8006766:	6a21      	ldr	r1, [r4, #32]
 8006768:	602b      	str	r3, [r5, #0]
 800676a:	d030      	beq.n	80067ce <__sflush_r+0x92>
 800676c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800676e:	89a3      	ldrh	r3, [r4, #12]
 8006770:	0759      	lsls	r1, r3, #29
 8006772:	d505      	bpl.n	8006780 <__sflush_r+0x44>
 8006774:	6863      	ldr	r3, [r4, #4]
 8006776:	1ad2      	subs	r2, r2, r3
 8006778:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800677a:	b10b      	cbz	r3, 8006780 <__sflush_r+0x44>
 800677c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800677e:	1ad2      	subs	r2, r2, r3
 8006780:	2300      	movs	r3, #0
 8006782:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006784:	6a21      	ldr	r1, [r4, #32]
 8006786:	4628      	mov	r0, r5
 8006788:	47b0      	blx	r6
 800678a:	1c43      	adds	r3, r0, #1
 800678c:	89a3      	ldrh	r3, [r4, #12]
 800678e:	d106      	bne.n	800679e <__sflush_r+0x62>
 8006790:	6829      	ldr	r1, [r5, #0]
 8006792:	291d      	cmp	r1, #29
 8006794:	d82b      	bhi.n	80067ee <__sflush_r+0xb2>
 8006796:	4a2a      	ldr	r2, [pc, #168]	@ (8006840 <__sflush_r+0x104>)
 8006798:	40ca      	lsrs	r2, r1
 800679a:	07d6      	lsls	r6, r2, #31
 800679c:	d527      	bpl.n	80067ee <__sflush_r+0xb2>
 800679e:	2200      	movs	r2, #0
 80067a0:	6062      	str	r2, [r4, #4]
 80067a2:	04d9      	lsls	r1, r3, #19
 80067a4:	6922      	ldr	r2, [r4, #16]
 80067a6:	6022      	str	r2, [r4, #0]
 80067a8:	d504      	bpl.n	80067b4 <__sflush_r+0x78>
 80067aa:	1c42      	adds	r2, r0, #1
 80067ac:	d101      	bne.n	80067b2 <__sflush_r+0x76>
 80067ae:	682b      	ldr	r3, [r5, #0]
 80067b0:	b903      	cbnz	r3, 80067b4 <__sflush_r+0x78>
 80067b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80067b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80067b6:	602f      	str	r7, [r5, #0]
 80067b8:	b1b9      	cbz	r1, 80067ea <__sflush_r+0xae>
 80067ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80067be:	4299      	cmp	r1, r3
 80067c0:	d002      	beq.n	80067c8 <__sflush_r+0x8c>
 80067c2:	4628      	mov	r0, r5
 80067c4:	f000 fa24 	bl	8006c10 <_free_r>
 80067c8:	2300      	movs	r3, #0
 80067ca:	6363      	str	r3, [r4, #52]	@ 0x34
 80067cc:	e00d      	b.n	80067ea <__sflush_r+0xae>
 80067ce:	2301      	movs	r3, #1
 80067d0:	4628      	mov	r0, r5
 80067d2:	47b0      	blx	r6
 80067d4:	4602      	mov	r2, r0
 80067d6:	1c50      	adds	r0, r2, #1
 80067d8:	d1c9      	bne.n	800676e <__sflush_r+0x32>
 80067da:	682b      	ldr	r3, [r5, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d0c6      	beq.n	800676e <__sflush_r+0x32>
 80067e0:	2b1d      	cmp	r3, #29
 80067e2:	d001      	beq.n	80067e8 <__sflush_r+0xac>
 80067e4:	2b16      	cmp	r3, #22
 80067e6:	d11e      	bne.n	8006826 <__sflush_r+0xea>
 80067e8:	602f      	str	r7, [r5, #0]
 80067ea:	2000      	movs	r0, #0
 80067ec:	e022      	b.n	8006834 <__sflush_r+0xf8>
 80067ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067f2:	b21b      	sxth	r3, r3
 80067f4:	e01b      	b.n	800682e <__sflush_r+0xf2>
 80067f6:	690f      	ldr	r7, [r1, #16]
 80067f8:	2f00      	cmp	r7, #0
 80067fa:	d0f6      	beq.n	80067ea <__sflush_r+0xae>
 80067fc:	0793      	lsls	r3, r2, #30
 80067fe:	680e      	ldr	r6, [r1, #0]
 8006800:	bf08      	it	eq
 8006802:	694b      	ldreq	r3, [r1, #20]
 8006804:	600f      	str	r7, [r1, #0]
 8006806:	bf18      	it	ne
 8006808:	2300      	movne	r3, #0
 800680a:	eba6 0807 	sub.w	r8, r6, r7
 800680e:	608b      	str	r3, [r1, #8]
 8006810:	f1b8 0f00 	cmp.w	r8, #0
 8006814:	dde9      	ble.n	80067ea <__sflush_r+0xae>
 8006816:	6a21      	ldr	r1, [r4, #32]
 8006818:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800681a:	4643      	mov	r3, r8
 800681c:	463a      	mov	r2, r7
 800681e:	4628      	mov	r0, r5
 8006820:	47b0      	blx	r6
 8006822:	2800      	cmp	r0, #0
 8006824:	dc08      	bgt.n	8006838 <__sflush_r+0xfc>
 8006826:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800682a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800682e:	81a3      	strh	r3, [r4, #12]
 8006830:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006838:	4407      	add	r7, r0
 800683a:	eba8 0800 	sub.w	r8, r8, r0
 800683e:	e7e7      	b.n	8006810 <__sflush_r+0xd4>
 8006840:	20400001 	.word	0x20400001

08006844 <_fflush_r>:
 8006844:	b538      	push	{r3, r4, r5, lr}
 8006846:	690b      	ldr	r3, [r1, #16]
 8006848:	4605      	mov	r5, r0
 800684a:	460c      	mov	r4, r1
 800684c:	b913      	cbnz	r3, 8006854 <_fflush_r+0x10>
 800684e:	2500      	movs	r5, #0
 8006850:	4628      	mov	r0, r5
 8006852:	bd38      	pop	{r3, r4, r5, pc}
 8006854:	b118      	cbz	r0, 800685e <_fflush_r+0x1a>
 8006856:	6a03      	ldr	r3, [r0, #32]
 8006858:	b90b      	cbnz	r3, 800685e <_fflush_r+0x1a>
 800685a:	f7ff fe03 	bl	8006464 <__sinit>
 800685e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d0f3      	beq.n	800684e <_fflush_r+0xa>
 8006866:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006868:	07d0      	lsls	r0, r2, #31
 800686a:	d404      	bmi.n	8006876 <_fflush_r+0x32>
 800686c:	0599      	lsls	r1, r3, #22
 800686e:	d402      	bmi.n	8006876 <_fflush_r+0x32>
 8006870:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006872:	f7ff febe 	bl	80065f2 <__retarget_lock_acquire_recursive>
 8006876:	4628      	mov	r0, r5
 8006878:	4621      	mov	r1, r4
 800687a:	f7ff ff5f 	bl	800673c <__sflush_r>
 800687e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006880:	07da      	lsls	r2, r3, #31
 8006882:	4605      	mov	r5, r0
 8006884:	d4e4      	bmi.n	8006850 <_fflush_r+0xc>
 8006886:	89a3      	ldrh	r3, [r4, #12]
 8006888:	059b      	lsls	r3, r3, #22
 800688a:	d4e1      	bmi.n	8006850 <_fflush_r+0xc>
 800688c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800688e:	f7ff feb1 	bl	80065f4 <__retarget_lock_release_recursive>
 8006892:	e7dd      	b.n	8006850 <_fflush_r+0xc>

08006894 <__malloc_lock>:
 8006894:	4801      	ldr	r0, [pc, #4]	@ (800689c <__malloc_lock+0x8>)
 8006896:	f7ff beac 	b.w	80065f2 <__retarget_lock_acquire_recursive>
 800689a:	bf00      	nop
 800689c:	20025d54 	.word	0x20025d54

080068a0 <__malloc_unlock>:
 80068a0:	4801      	ldr	r0, [pc, #4]	@ (80068a8 <__malloc_unlock+0x8>)
 80068a2:	f7ff bea7 	b.w	80065f4 <__retarget_lock_release_recursive>
 80068a6:	bf00      	nop
 80068a8:	20025d54 	.word	0x20025d54

080068ac <__sread>:
 80068ac:	b510      	push	{r4, lr}
 80068ae:	460c      	mov	r4, r1
 80068b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068b4:	f000 f956 	bl	8006b64 <_read_r>
 80068b8:	2800      	cmp	r0, #0
 80068ba:	bfab      	itete	ge
 80068bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80068be:	89a3      	ldrhlt	r3, [r4, #12]
 80068c0:	181b      	addge	r3, r3, r0
 80068c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80068c6:	bfac      	ite	ge
 80068c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80068ca:	81a3      	strhlt	r3, [r4, #12]
 80068cc:	bd10      	pop	{r4, pc}

080068ce <__swrite>:
 80068ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068d2:	461f      	mov	r7, r3
 80068d4:	898b      	ldrh	r3, [r1, #12]
 80068d6:	05db      	lsls	r3, r3, #23
 80068d8:	4605      	mov	r5, r0
 80068da:	460c      	mov	r4, r1
 80068dc:	4616      	mov	r6, r2
 80068de:	d505      	bpl.n	80068ec <__swrite+0x1e>
 80068e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068e4:	2302      	movs	r3, #2
 80068e6:	2200      	movs	r2, #0
 80068e8:	f000 f92a 	bl	8006b40 <_lseek_r>
 80068ec:	89a3      	ldrh	r3, [r4, #12]
 80068ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80068f6:	81a3      	strh	r3, [r4, #12]
 80068f8:	4632      	mov	r2, r6
 80068fa:	463b      	mov	r3, r7
 80068fc:	4628      	mov	r0, r5
 80068fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006902:	f000 b951 	b.w	8006ba8 <_write_r>

08006906 <__sseek>:
 8006906:	b510      	push	{r4, lr}
 8006908:	460c      	mov	r4, r1
 800690a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800690e:	f000 f917 	bl	8006b40 <_lseek_r>
 8006912:	1c43      	adds	r3, r0, #1
 8006914:	89a3      	ldrh	r3, [r4, #12]
 8006916:	bf15      	itete	ne
 8006918:	6560      	strne	r0, [r4, #84]	@ 0x54
 800691a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800691e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006922:	81a3      	strheq	r3, [r4, #12]
 8006924:	bf18      	it	ne
 8006926:	81a3      	strhne	r3, [r4, #12]
 8006928:	bd10      	pop	{r4, pc}

0800692a <__sclose>:
 800692a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800692e:	f000 b94d 	b.w	8006bcc <_close_r>

08006932 <__swbuf_r>:
 8006932:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006934:	460e      	mov	r6, r1
 8006936:	4614      	mov	r4, r2
 8006938:	4605      	mov	r5, r0
 800693a:	b118      	cbz	r0, 8006944 <__swbuf_r+0x12>
 800693c:	6a03      	ldr	r3, [r0, #32]
 800693e:	b90b      	cbnz	r3, 8006944 <__swbuf_r+0x12>
 8006940:	f7ff fd90 	bl	8006464 <__sinit>
 8006944:	69a3      	ldr	r3, [r4, #24]
 8006946:	60a3      	str	r3, [r4, #8]
 8006948:	89a3      	ldrh	r3, [r4, #12]
 800694a:	071a      	lsls	r2, r3, #28
 800694c:	d501      	bpl.n	8006952 <__swbuf_r+0x20>
 800694e:	6923      	ldr	r3, [r4, #16]
 8006950:	b943      	cbnz	r3, 8006964 <__swbuf_r+0x32>
 8006952:	4621      	mov	r1, r4
 8006954:	4628      	mov	r0, r5
 8006956:	f000 f82b 	bl	80069b0 <__swsetup_r>
 800695a:	b118      	cbz	r0, 8006964 <__swbuf_r+0x32>
 800695c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006960:	4638      	mov	r0, r7
 8006962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006964:	6823      	ldr	r3, [r4, #0]
 8006966:	6922      	ldr	r2, [r4, #16]
 8006968:	1a98      	subs	r0, r3, r2
 800696a:	6963      	ldr	r3, [r4, #20]
 800696c:	b2f6      	uxtb	r6, r6
 800696e:	4283      	cmp	r3, r0
 8006970:	4637      	mov	r7, r6
 8006972:	dc05      	bgt.n	8006980 <__swbuf_r+0x4e>
 8006974:	4621      	mov	r1, r4
 8006976:	4628      	mov	r0, r5
 8006978:	f7ff ff64 	bl	8006844 <_fflush_r>
 800697c:	2800      	cmp	r0, #0
 800697e:	d1ed      	bne.n	800695c <__swbuf_r+0x2a>
 8006980:	68a3      	ldr	r3, [r4, #8]
 8006982:	3b01      	subs	r3, #1
 8006984:	60a3      	str	r3, [r4, #8]
 8006986:	6823      	ldr	r3, [r4, #0]
 8006988:	1c5a      	adds	r2, r3, #1
 800698a:	6022      	str	r2, [r4, #0]
 800698c:	701e      	strb	r6, [r3, #0]
 800698e:	6962      	ldr	r2, [r4, #20]
 8006990:	1c43      	adds	r3, r0, #1
 8006992:	429a      	cmp	r2, r3
 8006994:	d004      	beq.n	80069a0 <__swbuf_r+0x6e>
 8006996:	89a3      	ldrh	r3, [r4, #12]
 8006998:	07db      	lsls	r3, r3, #31
 800699a:	d5e1      	bpl.n	8006960 <__swbuf_r+0x2e>
 800699c:	2e0a      	cmp	r6, #10
 800699e:	d1df      	bne.n	8006960 <__swbuf_r+0x2e>
 80069a0:	4621      	mov	r1, r4
 80069a2:	4628      	mov	r0, r5
 80069a4:	f7ff ff4e 	bl	8006844 <_fflush_r>
 80069a8:	2800      	cmp	r0, #0
 80069aa:	d0d9      	beq.n	8006960 <__swbuf_r+0x2e>
 80069ac:	e7d6      	b.n	800695c <__swbuf_r+0x2a>
	...

080069b0 <__swsetup_r>:
 80069b0:	b538      	push	{r3, r4, r5, lr}
 80069b2:	4b29      	ldr	r3, [pc, #164]	@ (8006a58 <__swsetup_r+0xa8>)
 80069b4:	4605      	mov	r5, r0
 80069b6:	6818      	ldr	r0, [r3, #0]
 80069b8:	460c      	mov	r4, r1
 80069ba:	b118      	cbz	r0, 80069c4 <__swsetup_r+0x14>
 80069bc:	6a03      	ldr	r3, [r0, #32]
 80069be:	b90b      	cbnz	r3, 80069c4 <__swsetup_r+0x14>
 80069c0:	f7ff fd50 	bl	8006464 <__sinit>
 80069c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069c8:	0719      	lsls	r1, r3, #28
 80069ca:	d422      	bmi.n	8006a12 <__swsetup_r+0x62>
 80069cc:	06da      	lsls	r2, r3, #27
 80069ce:	d407      	bmi.n	80069e0 <__swsetup_r+0x30>
 80069d0:	2209      	movs	r2, #9
 80069d2:	602a      	str	r2, [r5, #0]
 80069d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069d8:	81a3      	strh	r3, [r4, #12]
 80069da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80069de:	e033      	b.n	8006a48 <__swsetup_r+0x98>
 80069e0:	0758      	lsls	r0, r3, #29
 80069e2:	d512      	bpl.n	8006a0a <__swsetup_r+0x5a>
 80069e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80069e6:	b141      	cbz	r1, 80069fa <__swsetup_r+0x4a>
 80069e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80069ec:	4299      	cmp	r1, r3
 80069ee:	d002      	beq.n	80069f6 <__swsetup_r+0x46>
 80069f0:	4628      	mov	r0, r5
 80069f2:	f000 f90d 	bl	8006c10 <_free_r>
 80069f6:	2300      	movs	r3, #0
 80069f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80069fa:	89a3      	ldrh	r3, [r4, #12]
 80069fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006a00:	81a3      	strh	r3, [r4, #12]
 8006a02:	2300      	movs	r3, #0
 8006a04:	6063      	str	r3, [r4, #4]
 8006a06:	6923      	ldr	r3, [r4, #16]
 8006a08:	6023      	str	r3, [r4, #0]
 8006a0a:	89a3      	ldrh	r3, [r4, #12]
 8006a0c:	f043 0308 	orr.w	r3, r3, #8
 8006a10:	81a3      	strh	r3, [r4, #12]
 8006a12:	6923      	ldr	r3, [r4, #16]
 8006a14:	b94b      	cbnz	r3, 8006a2a <__swsetup_r+0x7a>
 8006a16:	89a3      	ldrh	r3, [r4, #12]
 8006a18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006a1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a20:	d003      	beq.n	8006a2a <__swsetup_r+0x7a>
 8006a22:	4621      	mov	r1, r4
 8006a24:	4628      	mov	r0, r5
 8006a26:	f000 f83f 	bl	8006aa8 <__smakebuf_r>
 8006a2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a2e:	f013 0201 	ands.w	r2, r3, #1
 8006a32:	d00a      	beq.n	8006a4a <__swsetup_r+0x9a>
 8006a34:	2200      	movs	r2, #0
 8006a36:	60a2      	str	r2, [r4, #8]
 8006a38:	6962      	ldr	r2, [r4, #20]
 8006a3a:	4252      	negs	r2, r2
 8006a3c:	61a2      	str	r2, [r4, #24]
 8006a3e:	6922      	ldr	r2, [r4, #16]
 8006a40:	b942      	cbnz	r2, 8006a54 <__swsetup_r+0xa4>
 8006a42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006a46:	d1c5      	bne.n	80069d4 <__swsetup_r+0x24>
 8006a48:	bd38      	pop	{r3, r4, r5, pc}
 8006a4a:	0799      	lsls	r1, r3, #30
 8006a4c:	bf58      	it	pl
 8006a4e:	6962      	ldrpl	r2, [r4, #20]
 8006a50:	60a2      	str	r2, [r4, #8]
 8006a52:	e7f4      	b.n	8006a3e <__swsetup_r+0x8e>
 8006a54:	2000      	movs	r0, #0
 8006a56:	e7f7      	b.n	8006a48 <__swsetup_r+0x98>
 8006a58:	20000028 	.word	0x20000028

08006a5c <__swhatbuf_r>:
 8006a5c:	b570      	push	{r4, r5, r6, lr}
 8006a5e:	460c      	mov	r4, r1
 8006a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a64:	2900      	cmp	r1, #0
 8006a66:	b096      	sub	sp, #88	@ 0x58
 8006a68:	4615      	mov	r5, r2
 8006a6a:	461e      	mov	r6, r3
 8006a6c:	da0d      	bge.n	8006a8a <__swhatbuf_r+0x2e>
 8006a6e:	89a3      	ldrh	r3, [r4, #12]
 8006a70:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006a74:	f04f 0100 	mov.w	r1, #0
 8006a78:	bf14      	ite	ne
 8006a7a:	2340      	movne	r3, #64	@ 0x40
 8006a7c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006a80:	2000      	movs	r0, #0
 8006a82:	6031      	str	r1, [r6, #0]
 8006a84:	602b      	str	r3, [r5, #0]
 8006a86:	b016      	add	sp, #88	@ 0x58
 8006a88:	bd70      	pop	{r4, r5, r6, pc}
 8006a8a:	466a      	mov	r2, sp
 8006a8c:	f000 f8ae 	bl	8006bec <_fstat_r>
 8006a90:	2800      	cmp	r0, #0
 8006a92:	dbec      	blt.n	8006a6e <__swhatbuf_r+0x12>
 8006a94:	9901      	ldr	r1, [sp, #4]
 8006a96:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006a9a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006a9e:	4259      	negs	r1, r3
 8006aa0:	4159      	adcs	r1, r3
 8006aa2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006aa6:	e7eb      	b.n	8006a80 <__swhatbuf_r+0x24>

08006aa8 <__smakebuf_r>:
 8006aa8:	898b      	ldrh	r3, [r1, #12]
 8006aaa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006aac:	079d      	lsls	r5, r3, #30
 8006aae:	4606      	mov	r6, r0
 8006ab0:	460c      	mov	r4, r1
 8006ab2:	d507      	bpl.n	8006ac4 <__smakebuf_r+0x1c>
 8006ab4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006ab8:	6023      	str	r3, [r4, #0]
 8006aba:	6123      	str	r3, [r4, #16]
 8006abc:	2301      	movs	r3, #1
 8006abe:	6163      	str	r3, [r4, #20]
 8006ac0:	b003      	add	sp, #12
 8006ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ac4:	ab01      	add	r3, sp, #4
 8006ac6:	466a      	mov	r2, sp
 8006ac8:	f7ff ffc8 	bl	8006a5c <__swhatbuf_r>
 8006acc:	9f00      	ldr	r7, [sp, #0]
 8006ace:	4605      	mov	r5, r0
 8006ad0:	4639      	mov	r1, r7
 8006ad2:	4630      	mov	r0, r6
 8006ad4:	f7ff fdb2 	bl	800663c <_malloc_r>
 8006ad8:	b948      	cbnz	r0, 8006aee <__smakebuf_r+0x46>
 8006ada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ade:	059a      	lsls	r2, r3, #22
 8006ae0:	d4ee      	bmi.n	8006ac0 <__smakebuf_r+0x18>
 8006ae2:	f023 0303 	bic.w	r3, r3, #3
 8006ae6:	f043 0302 	orr.w	r3, r3, #2
 8006aea:	81a3      	strh	r3, [r4, #12]
 8006aec:	e7e2      	b.n	8006ab4 <__smakebuf_r+0xc>
 8006aee:	89a3      	ldrh	r3, [r4, #12]
 8006af0:	6020      	str	r0, [r4, #0]
 8006af2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006af6:	81a3      	strh	r3, [r4, #12]
 8006af8:	9b01      	ldr	r3, [sp, #4]
 8006afa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006afe:	b15b      	cbz	r3, 8006b18 <__smakebuf_r+0x70>
 8006b00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b04:	4630      	mov	r0, r6
 8006b06:	f000 f80b 	bl	8006b20 <_isatty_r>
 8006b0a:	b128      	cbz	r0, 8006b18 <__smakebuf_r+0x70>
 8006b0c:	89a3      	ldrh	r3, [r4, #12]
 8006b0e:	f023 0303 	bic.w	r3, r3, #3
 8006b12:	f043 0301 	orr.w	r3, r3, #1
 8006b16:	81a3      	strh	r3, [r4, #12]
 8006b18:	89a3      	ldrh	r3, [r4, #12]
 8006b1a:	431d      	orrs	r5, r3
 8006b1c:	81a5      	strh	r5, [r4, #12]
 8006b1e:	e7cf      	b.n	8006ac0 <__smakebuf_r+0x18>

08006b20 <_isatty_r>:
 8006b20:	b538      	push	{r3, r4, r5, lr}
 8006b22:	4d06      	ldr	r5, [pc, #24]	@ (8006b3c <_isatty_r+0x1c>)
 8006b24:	2300      	movs	r3, #0
 8006b26:	4604      	mov	r4, r0
 8006b28:	4608      	mov	r0, r1
 8006b2a:	602b      	str	r3, [r5, #0]
 8006b2c:	f7fb ff9e 	bl	8002a6c <_isatty>
 8006b30:	1c43      	adds	r3, r0, #1
 8006b32:	d102      	bne.n	8006b3a <_isatty_r+0x1a>
 8006b34:	682b      	ldr	r3, [r5, #0]
 8006b36:	b103      	cbz	r3, 8006b3a <_isatty_r+0x1a>
 8006b38:	6023      	str	r3, [r4, #0]
 8006b3a:	bd38      	pop	{r3, r4, r5, pc}
 8006b3c:	20025d60 	.word	0x20025d60

08006b40 <_lseek_r>:
 8006b40:	b538      	push	{r3, r4, r5, lr}
 8006b42:	4d07      	ldr	r5, [pc, #28]	@ (8006b60 <_lseek_r+0x20>)
 8006b44:	4604      	mov	r4, r0
 8006b46:	4608      	mov	r0, r1
 8006b48:	4611      	mov	r1, r2
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	602a      	str	r2, [r5, #0]
 8006b4e:	461a      	mov	r2, r3
 8006b50:	f7fb ff97 	bl	8002a82 <_lseek>
 8006b54:	1c43      	adds	r3, r0, #1
 8006b56:	d102      	bne.n	8006b5e <_lseek_r+0x1e>
 8006b58:	682b      	ldr	r3, [r5, #0]
 8006b5a:	b103      	cbz	r3, 8006b5e <_lseek_r+0x1e>
 8006b5c:	6023      	str	r3, [r4, #0]
 8006b5e:	bd38      	pop	{r3, r4, r5, pc}
 8006b60:	20025d60 	.word	0x20025d60

08006b64 <_read_r>:
 8006b64:	b538      	push	{r3, r4, r5, lr}
 8006b66:	4d07      	ldr	r5, [pc, #28]	@ (8006b84 <_read_r+0x20>)
 8006b68:	4604      	mov	r4, r0
 8006b6a:	4608      	mov	r0, r1
 8006b6c:	4611      	mov	r1, r2
 8006b6e:	2200      	movs	r2, #0
 8006b70:	602a      	str	r2, [r5, #0]
 8006b72:	461a      	mov	r2, r3
 8006b74:	f7fb ff25 	bl	80029c2 <_read>
 8006b78:	1c43      	adds	r3, r0, #1
 8006b7a:	d102      	bne.n	8006b82 <_read_r+0x1e>
 8006b7c:	682b      	ldr	r3, [r5, #0]
 8006b7e:	b103      	cbz	r3, 8006b82 <_read_r+0x1e>
 8006b80:	6023      	str	r3, [r4, #0]
 8006b82:	bd38      	pop	{r3, r4, r5, pc}
 8006b84:	20025d60 	.word	0x20025d60

08006b88 <_sbrk_r>:
 8006b88:	b538      	push	{r3, r4, r5, lr}
 8006b8a:	4d06      	ldr	r5, [pc, #24]	@ (8006ba4 <_sbrk_r+0x1c>)
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	4604      	mov	r4, r0
 8006b90:	4608      	mov	r0, r1
 8006b92:	602b      	str	r3, [r5, #0]
 8006b94:	f7fb ff82 	bl	8002a9c <_sbrk>
 8006b98:	1c43      	adds	r3, r0, #1
 8006b9a:	d102      	bne.n	8006ba2 <_sbrk_r+0x1a>
 8006b9c:	682b      	ldr	r3, [r5, #0]
 8006b9e:	b103      	cbz	r3, 8006ba2 <_sbrk_r+0x1a>
 8006ba0:	6023      	str	r3, [r4, #0]
 8006ba2:	bd38      	pop	{r3, r4, r5, pc}
 8006ba4:	20025d60 	.word	0x20025d60

08006ba8 <_write_r>:
 8006ba8:	b538      	push	{r3, r4, r5, lr}
 8006baa:	4d07      	ldr	r5, [pc, #28]	@ (8006bc8 <_write_r+0x20>)
 8006bac:	4604      	mov	r4, r0
 8006bae:	4608      	mov	r0, r1
 8006bb0:	4611      	mov	r1, r2
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	602a      	str	r2, [r5, #0]
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	f7fb ff20 	bl	80029fc <_write>
 8006bbc:	1c43      	adds	r3, r0, #1
 8006bbe:	d102      	bne.n	8006bc6 <_write_r+0x1e>
 8006bc0:	682b      	ldr	r3, [r5, #0]
 8006bc2:	b103      	cbz	r3, 8006bc6 <_write_r+0x1e>
 8006bc4:	6023      	str	r3, [r4, #0]
 8006bc6:	bd38      	pop	{r3, r4, r5, pc}
 8006bc8:	20025d60 	.word	0x20025d60

08006bcc <_close_r>:
 8006bcc:	b538      	push	{r3, r4, r5, lr}
 8006bce:	4d06      	ldr	r5, [pc, #24]	@ (8006be8 <_close_r+0x1c>)
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	4604      	mov	r4, r0
 8006bd4:	4608      	mov	r0, r1
 8006bd6:	602b      	str	r3, [r5, #0]
 8006bd8:	f7fb ff2c 	bl	8002a34 <_close>
 8006bdc:	1c43      	adds	r3, r0, #1
 8006bde:	d102      	bne.n	8006be6 <_close_r+0x1a>
 8006be0:	682b      	ldr	r3, [r5, #0]
 8006be2:	b103      	cbz	r3, 8006be6 <_close_r+0x1a>
 8006be4:	6023      	str	r3, [r4, #0]
 8006be6:	bd38      	pop	{r3, r4, r5, pc}
 8006be8:	20025d60 	.word	0x20025d60

08006bec <_fstat_r>:
 8006bec:	b538      	push	{r3, r4, r5, lr}
 8006bee:	4d07      	ldr	r5, [pc, #28]	@ (8006c0c <_fstat_r+0x20>)
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	4604      	mov	r4, r0
 8006bf4:	4608      	mov	r0, r1
 8006bf6:	4611      	mov	r1, r2
 8006bf8:	602b      	str	r3, [r5, #0]
 8006bfa:	f7fb ff27 	bl	8002a4c <_fstat>
 8006bfe:	1c43      	adds	r3, r0, #1
 8006c00:	d102      	bne.n	8006c08 <_fstat_r+0x1c>
 8006c02:	682b      	ldr	r3, [r5, #0]
 8006c04:	b103      	cbz	r3, 8006c08 <_fstat_r+0x1c>
 8006c06:	6023      	str	r3, [r4, #0]
 8006c08:	bd38      	pop	{r3, r4, r5, pc}
 8006c0a:	bf00      	nop
 8006c0c:	20025d60 	.word	0x20025d60

08006c10 <_free_r>:
 8006c10:	b538      	push	{r3, r4, r5, lr}
 8006c12:	4605      	mov	r5, r0
 8006c14:	2900      	cmp	r1, #0
 8006c16:	d041      	beq.n	8006c9c <_free_r+0x8c>
 8006c18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c1c:	1f0c      	subs	r4, r1, #4
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	bfb8      	it	lt
 8006c22:	18e4      	addlt	r4, r4, r3
 8006c24:	f7ff fe36 	bl	8006894 <__malloc_lock>
 8006c28:	4a1d      	ldr	r2, [pc, #116]	@ (8006ca0 <_free_r+0x90>)
 8006c2a:	6813      	ldr	r3, [r2, #0]
 8006c2c:	b933      	cbnz	r3, 8006c3c <_free_r+0x2c>
 8006c2e:	6063      	str	r3, [r4, #4]
 8006c30:	6014      	str	r4, [r2, #0]
 8006c32:	4628      	mov	r0, r5
 8006c34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c38:	f7ff be32 	b.w	80068a0 <__malloc_unlock>
 8006c3c:	42a3      	cmp	r3, r4
 8006c3e:	d908      	bls.n	8006c52 <_free_r+0x42>
 8006c40:	6820      	ldr	r0, [r4, #0]
 8006c42:	1821      	adds	r1, r4, r0
 8006c44:	428b      	cmp	r3, r1
 8006c46:	bf01      	itttt	eq
 8006c48:	6819      	ldreq	r1, [r3, #0]
 8006c4a:	685b      	ldreq	r3, [r3, #4]
 8006c4c:	1809      	addeq	r1, r1, r0
 8006c4e:	6021      	streq	r1, [r4, #0]
 8006c50:	e7ed      	b.n	8006c2e <_free_r+0x1e>
 8006c52:	461a      	mov	r2, r3
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	b10b      	cbz	r3, 8006c5c <_free_r+0x4c>
 8006c58:	42a3      	cmp	r3, r4
 8006c5a:	d9fa      	bls.n	8006c52 <_free_r+0x42>
 8006c5c:	6811      	ldr	r1, [r2, #0]
 8006c5e:	1850      	adds	r0, r2, r1
 8006c60:	42a0      	cmp	r0, r4
 8006c62:	d10b      	bne.n	8006c7c <_free_r+0x6c>
 8006c64:	6820      	ldr	r0, [r4, #0]
 8006c66:	4401      	add	r1, r0
 8006c68:	1850      	adds	r0, r2, r1
 8006c6a:	4283      	cmp	r3, r0
 8006c6c:	6011      	str	r1, [r2, #0]
 8006c6e:	d1e0      	bne.n	8006c32 <_free_r+0x22>
 8006c70:	6818      	ldr	r0, [r3, #0]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	6053      	str	r3, [r2, #4]
 8006c76:	4408      	add	r0, r1
 8006c78:	6010      	str	r0, [r2, #0]
 8006c7a:	e7da      	b.n	8006c32 <_free_r+0x22>
 8006c7c:	d902      	bls.n	8006c84 <_free_r+0x74>
 8006c7e:	230c      	movs	r3, #12
 8006c80:	602b      	str	r3, [r5, #0]
 8006c82:	e7d6      	b.n	8006c32 <_free_r+0x22>
 8006c84:	6820      	ldr	r0, [r4, #0]
 8006c86:	1821      	adds	r1, r4, r0
 8006c88:	428b      	cmp	r3, r1
 8006c8a:	bf04      	itt	eq
 8006c8c:	6819      	ldreq	r1, [r3, #0]
 8006c8e:	685b      	ldreq	r3, [r3, #4]
 8006c90:	6063      	str	r3, [r4, #4]
 8006c92:	bf04      	itt	eq
 8006c94:	1809      	addeq	r1, r1, r0
 8006c96:	6021      	streq	r1, [r4, #0]
 8006c98:	6054      	str	r4, [r2, #4]
 8006c9a:	e7ca      	b.n	8006c32 <_free_r+0x22>
 8006c9c:	bd38      	pop	{r3, r4, r5, pc}
 8006c9e:	bf00      	nop
 8006ca0:	20025d5c 	.word	0x20025d5c

08006ca4 <_init>:
 8006ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ca6:	bf00      	nop
 8006ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006caa:	bc08      	pop	{r3}
 8006cac:	469e      	mov	lr, r3
 8006cae:	4770      	bx	lr

08006cb0 <_fini>:
 8006cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cb2:	bf00      	nop
 8006cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cb6:	bc08      	pop	{r3}
 8006cb8:	469e      	mov	lr, r3
 8006cba:	4770      	bx	lr
